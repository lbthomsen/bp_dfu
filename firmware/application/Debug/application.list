
application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006294  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800642c  0800642c  0001642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006484  08006484  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08006484  08006484  00016484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800648c  0800648c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800648c  0800648c  0001648c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006490  08006490  00016490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08006494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b20  20000180  08006614  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ca0  08006614  00021ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012738  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db3  00000000  00000000  000328e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  000356a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  000361c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018180  00000000  00000000  00036ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e546  00000000  00000000  0004ed28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086a2e  00000000  00000000  0005d26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3c9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd4  00000000  00000000  000e3cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000180 	.word	0x20000180
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006414 	.word	0x08006414

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000184 	.word	0x20000184
 80001d4:	08006414 	.word	0x08006414

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004d4:	f3bf 8f4f 	dsb	sy
}
 80004d8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <__NVIC_SystemReset+0x24>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80004e2:	4904      	ldr	r1, [pc, #16]	; (80004f4 <__NVIC_SystemReset+0x24>)
 80004e4:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <__NVIC_SystemReset+0x28>)
 80004e6:	4313      	orrs	r3, r2
 80004e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80004ea:	f3bf 8f4f 	dsb	sy
}
 80004ee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <__NVIC_SystemReset+0x20>
 80004f4:	e000ed00 	.word	0xe000ed00
 80004f8:	05fa0004 	.word	0x05fa0004

080004fc <check_dfu_jump>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void check_dfu_jump() {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	if (dfu_trigger_location == DFU_TRIGGER) {
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <check_dfu_jump+0x28>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <check_dfu_jump+0x2c>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d107      	bne.n	800051c <check_dfu_jump+0x20>
		void (*dfu_boot)(void) = (void (*)(void)) (*((uint32_t *)(DFU_VECTOR)));
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <check_dfu_jump+0x30>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	607b      	str	r3, [r7, #4]
		dfu_trigger_location = 0;
 8000512:	4b04      	ldr	r3, [pc, #16]	; (8000524 <check_dfu_jump+0x28>)
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
		                //__set_MSP(BOOTLOADER_STACK_POINTER);
		dfu_boot();
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4798      	blx	r3
	}
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200003c0 	.word	0x200003c0
 8000528:	deadbeef 	.word	0xdeadbeef
 800052c:	08072000 	.word	0x08072000

08000530 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	80fb      	strh	r3, [r7, #6]
        if (GPIO_Pin == BTN_Pin) // If the button
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d104      	bne.n	800054a <HAL_GPIO_EXTI_Callback+0x1a>
        {
        	dfu_trigger_location = DFU_TRIGGER;
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <HAL_GPIO_EXTI_Callback+0x24>)
 8000542:	4a05      	ldr	r2, [pc, #20]	; (8000558 <HAL_GPIO_EXTI_Callback+0x28>)
 8000544:	601a      	str	r2, [r3, #0]
        	NVIC_SystemReset();
 8000546:	f7ff ffc3 	bl	80004d0 <__NVIC_SystemReset>
        }
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200003c0 	.word	0x200003c0
 8000558:	deadbeef 	.word	0xdeadbeef

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 f99f 	bl	80008a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f827 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f88d 	bl	8000688 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800056e:	f005 fa3b 	bl	80059e8 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, then = 0;
 8000572:	2300      	movs	r3, #0
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]

  while (1)
  {

	now = HAL_GetTick();
 800057a:	f000 f9f9 	bl	8000970 <HAL_GetTick>
 800057e:	6038      	str	r0, [r7, #0]
	if (now % 500 == 0 && now != then) {
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <main+0x54>)
 8000584:	fba3 1302 	umull	r1, r3, r3, r2
 8000588:	095b      	lsrs	r3, r3, #5
 800058a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800058e:	fb01 f303 	mul.w	r3, r1, r3
 8000592:	1ad3      	subs	r3, r2, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1f0      	bne.n	800057a <main+0x1e>
 8000598:	683a      	ldr	r2, [r7, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	429a      	cmp	r2, r3
 800059e:	d0ec      	beq.n	800057a <main+0x1e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a4:	4803      	ldr	r0, [pc, #12]	; (80005b4 <main+0x58>)
 80005a6:	f000 fcc2 	bl	8000f2e <HAL_GPIO_TogglePin>
		then = now;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	607b      	str	r3, [r7, #4]
	now = HAL_GetTick();
 80005ae:	e7e4      	b.n	800057a <main+0x1e>
 80005b0:	10624dd3 	.word	0x10624dd3
 80005b4:	40020800 	.word	0x40020800

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 ff1c 	bl	8006404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xc8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a26      	ldr	r2, [pc, #152]	; (8000680 <SystemClock_Config+0xc8>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xc8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b21      	ldr	r3, [pc, #132]	; (8000684 <SystemClock_Config+0xcc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a20      	ldr	r2, [pc, #128]	; (8000684 <SystemClock_Config+0xcc>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <SystemClock_Config+0xcc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000628:	2319      	movs	r3, #25
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800062c:	23c0      	movs	r3, #192	; 0xc0
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fe2d 	bl	800229c <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000648:	f000 f888 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2103      	movs	r1, #3
 8000668:	4618      	mov	r0, r3
 800066a:	f002 f88f 	bl	800278c <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000674:	f000 f872 	bl	800075c <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	; 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b2a      	ldr	r3, [pc, #168]	; (800074c <MX_GPIO_Init+0xc4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a29      	ldr	r2, [pc, #164]	; (800074c <MX_GPIO_Init+0xc4>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b27      	ldr	r3, [pc, #156]	; (800074c <MX_GPIO_Init+0xc4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_GPIO_Init+0xc4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a22      	ldr	r2, [pc, #136]	; (800074c <MX_GPIO_Init+0xc4>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <MX_GPIO_Init+0xc4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_GPIO_Init+0xc4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a1b      	ldr	r2, [pc, #108]	; (800074c <MX_GPIO_Init+0xc4>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_GPIO_Init+0xc4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f8:	4815      	ldr	r0, [pc, #84]	; (8000750 <MX_GPIO_Init+0xc8>)
 80006fa:	f000 fbff 	bl	8000efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000704:	2311      	movs	r3, #17
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4619      	mov	r1, r3
 8000716:	480e      	ldr	r0, [pc, #56]	; (8000750 <MX_GPIO_Init+0xc8>)
 8000718:	f000 fa6c 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800071c:	2301      	movs	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_GPIO_Init+0xcc>)
 8000722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000724:	2301      	movs	r3, #1
 8000726:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4619      	mov	r1, r3
 800072e:	480a      	ldr	r0, [pc, #40]	; (8000758 <MX_GPIO_Init+0xd0>)
 8000730:	f000 fa60 	bl	8000bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	2100      	movs	r1, #0
 8000738:	2006      	movs	r0, #6
 800073a:	f000 fa24 	bl	8000b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800073e:	2006      	movs	r0, #6
 8000740:	f000 fa3d 	bl	8000bbe <HAL_NVIC_EnableIRQ>

}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800
 8000750:	40020800 	.word	0x40020800
 8000754:	10210000 	.word	0x10210000
 8000758:	40020000 	.word	0x40020000

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <HAL_MspInit+0x4c>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <HAL_MspInit+0x4c>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x4c>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <HAL_MspInit+0x4c>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f8a0 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000810:	2001      	movs	r0, #1
 8000812:	f000 fba7 	bl	8000f64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <OTG_FS_IRQHandler+0x10>)
 8000822:	f000 fd07 	bl	8001234 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20001898 	.word	0x20001898

08000830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  /* Check DFU */
  check_dfu_jump();
 8000834:	f7ff fe62 	bl	80004fc <check_dfu_jump>
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <SystemInit+0x1c>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a03      	ldr	r2, [pc, #12]	; (800084c <SystemInit+0x1c>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000888 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800086c:	4c0b      	ldr	r4, [pc, #44]	; (800089c <LoopFillZerobss+0x26>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800087a:	f7ff ffd9 	bl	8000830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087e:	f005 fd9d 	bl	80063bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000882:	f7ff fe6b 	bl	800055c <main>
  bx  lr    
 8000886:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000888:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000894:	08006494 	.word	0x08006494
  ldr r2, =_sbss
 8000898:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 800089c:	20001ca0 	.word	0x20001ca0

080008a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_Init+0x40>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_Init+0x40>)
 80008ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_Init+0x40>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_Init+0x40>)
 80008ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_Init+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_Init+0x40>)
 80008c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f94f 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 f808 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d8:	f7ff ff46 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023c00 	.word	0x40023c00

080008e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x54>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_InitTick+0x58>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f967 	bl	8000bda <HAL_SYSTICK_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e00e      	b.n	8000934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d80a      	bhi.n	8000932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	f000 f92f 	bl	8000b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <HAL_InitTick+0x5c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000000 	.word	0x20000000
 8000940:	20000008 	.word	0x20000008
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_IncTick+0x20>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_IncTick+0x24>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_IncTick+0x24>)
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000008 	.word	0x20000008
 800096c:	200003c4 	.word	0x200003c4

08000970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return uwTick;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_GetTick+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	200003c4 	.word	0x200003c4

08000988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000990:	f7ff ffee 	bl	8000970 <HAL_GetTick>
 8000994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009a0:	d005      	beq.n	80009ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <HAL_Delay+0x44>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009ae:	bf00      	nop
 80009b0:	f7ff ffde 	bl	8000970 <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d8f7      	bhi.n	80009b0 <HAL_Delay+0x28>
  {
  }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008

080009d0 <__NVIC_SetPriorityGrouping>:
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	60d3      	str	r3, [r2, #12]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_GetPriorityGrouping>:
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <__NVIC_GetPriorityGrouping+0x18>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	f003 0307 	and.w	r3, r3, #7
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_EnableIRQ>:
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db0b      	blt.n	8000a5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f003 021f 	and.w	r2, r3, #31
 8000a4c:	4907      	ldr	r1, [pc, #28]	; (8000a6c <__NVIC_EnableIRQ+0x38>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	095b      	lsrs	r3, r3, #5
 8000a54:	2001      	movs	r0, #1
 8000a56:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b3c:	d301      	bcc.n	8000b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00f      	b.n	8000b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <SysTick_Config+0x40>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	f7ff ff8e 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <SysTick_Config+0x40>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SysTick_Config+0x40>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff29 	bl	80009d0 <__NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b98:	f7ff ff3e 	bl	8000a18 <__NVIC_GetPriorityGrouping>
 8000b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	6978      	ldr	r0, [r7, #20]
 8000ba4:	f7ff ff8e 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff5d 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff31 	bl	8000a34 <__NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffa2 	bl	8000b2c <SysTick_Config>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
 8000c0e:	e159      	b.n	8000ec4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f040 8148 	bne.w	8000ebe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f003 0303 	and.w	r3, r3, #3
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d005      	beq.n	8000c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d130      	bne.n	8000ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	091b      	lsrs	r3, r3, #4
 8000c92:	f003 0201 	and.w	r2, r3, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d017      	beq.n	8000ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d123      	bne.n	8000d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	08da      	lsrs	r2, r3, #3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3208      	adds	r2, #8
 8000cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	220f      	movs	r2, #15
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	69b9      	ldr	r1, [r7, #24]
 8000d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0203 	and.w	r2, r3, #3
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80a2 	beq.w	8000ebe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b57      	ldr	r3, [pc, #348]	; (8000edc <HAL_GPIO_Init+0x2e8>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a56      	ldr	r2, [pc, #344]	; (8000edc <HAL_GPIO_Init+0x2e8>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b54      	ldr	r3, [pc, #336]	; (8000edc <HAL_GPIO_Init+0x2e8>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d96:	4a52      	ldr	r2, [pc, #328]	; (8000ee0 <HAL_GPIO_Init+0x2ec>)
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	220f      	movs	r2, #15
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a49      	ldr	r2, [pc, #292]	; (8000ee4 <HAL_GPIO_Init+0x2f0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d019      	beq.n	8000df6 <HAL_GPIO_Init+0x202>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a48      	ldr	r2, [pc, #288]	; (8000ee8 <HAL_GPIO_Init+0x2f4>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d013      	beq.n	8000df2 <HAL_GPIO_Init+0x1fe>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a47      	ldr	r2, [pc, #284]	; (8000eec <HAL_GPIO_Init+0x2f8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d00d      	beq.n	8000dee <HAL_GPIO_Init+0x1fa>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a46      	ldr	r2, [pc, #280]	; (8000ef0 <HAL_GPIO_Init+0x2fc>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x1f6>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a45      	ldr	r2, [pc, #276]	; (8000ef4 <HAL_GPIO_Init+0x300>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_GPIO_Init+0x1f2>
 8000de2:	2304      	movs	r3, #4
 8000de4:	e008      	b.n	8000df8 <HAL_GPIO_Init+0x204>
 8000de6:	2307      	movs	r3, #7
 8000de8:	e006      	b.n	8000df8 <HAL_GPIO_Init+0x204>
 8000dea:	2303      	movs	r3, #3
 8000dec:	e004      	b.n	8000df8 <HAL_GPIO_Init+0x204>
 8000dee:	2302      	movs	r3, #2
 8000df0:	e002      	b.n	8000df8 <HAL_GPIO_Init+0x204>
 8000df2:	2301      	movs	r3, #1
 8000df4:	e000      	b.n	8000df8 <HAL_GPIO_Init+0x204>
 8000df6:	2300      	movs	r3, #0
 8000df8:	69fa      	ldr	r2, [r7, #28]
 8000dfa:	f002 0203 	and.w	r2, r2, #3
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	4093      	lsls	r3, r2
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e08:	4935      	ldr	r1, [pc, #212]	; (8000ee0 <HAL_GPIO_Init+0x2ec>)
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	3302      	adds	r3, #2
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e16:	4b38      	ldr	r3, [pc, #224]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e64:	4a24      	ldr	r2, [pc, #144]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e8e:	4a1a      	ldr	r2, [pc, #104]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d003      	beq.n	8000eb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <HAL_GPIO_Init+0x304>)
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	61fb      	str	r3, [r7, #28]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	2b0f      	cmp	r3, #15
 8000ec8:	f67f aea2 	bls.w	8000c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3724      	adds	r7, #36	; 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40013800 	.word	0x40013800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	40013c00 	.word	0x40013c00

08000efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f0c:	787b      	ldrb	r3, [r7, #1]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f12:	887a      	ldrh	r2, [r7, #2]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f18:	e003      	b.n	8000f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	041a      	lsls	r2, r3, #16
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	619a      	str	r2, [r3, #24]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	b085      	sub	sp, #20
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f40:	887a      	ldrh	r2, [r7, #2]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4013      	ands	r3, r2
 8000f46:	041a      	lsls	r2, r3, #16
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	887b      	ldrh	r3, [r7, #2]
 8000f4e:	400b      	ands	r3, r1
 8000f50:	431a      	orrs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	619a      	str	r2, [r3, #24]
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d006      	beq.n	8000f88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fad4 	bl	8000530 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40013c00 	.word	0x40013c00

08000f94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f96:	b08f      	sub	sp, #60	; 0x3c
 8000f98:	af0a      	add	r7, sp, #40	; 0x28
 8000f9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e10f      	b.n	80011c6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d106      	bne.n	8000fc6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f004 fef1 	bl	8005da8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2203      	movs	r2, #3
 8000fca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fe8e 	bl	8002d06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	687e      	ldr	r6, [r7, #4]
 8000ff2:	466d      	mov	r5, sp
 8000ff4:	f106 0410 	add.w	r4, r6, #16
 8000ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001000:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001004:	e885 0003 	stmia.w	r5, {r0, r1}
 8001008:	1d33      	adds	r3, r6, #4
 800100a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800100c:	6838      	ldr	r0, [r7, #0]
 800100e:	f001 fd65 	bl	8002adc <USB_CoreInit>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2202      	movs	r2, #2
 800101c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e0d0      	b.n	80011c6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f001 fe7c 	bl	8002d28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e04a      	b.n	80010cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	333d      	adds	r3, #61	; 0x3d
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	333c      	adds	r3, #60	; 0x3c
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	b298      	uxth	r0, r3
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	1a9b      	subs	r3, r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3342      	adds	r3, #66	; 0x42
 8001072:	4602      	mov	r2, r0
 8001074:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	1a9b      	subs	r3, r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	333f      	adds	r3, #63	; 0x3f
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	3344      	adds	r3, #68	; 0x44
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	3348      	adds	r3, #72	; 0x48
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3350      	adds	r3, #80	; 0x50
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	3301      	adds	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d3af      	bcc.n	8001036 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	e044      	b.n	8001166 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	1a9b      	subs	r3, r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	1a9b      	subs	r3, r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	3301      	adds	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	d3b5      	bcc.n	80010dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	687e      	ldr	r6, [r7, #4]
 8001178:	466d      	mov	r5, sp
 800117a:	f106 0410 	add.w	r4, r6, #16
 800117e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001186:	e894 0003 	ldmia.w	r4, {r0, r1}
 800118a:	e885 0003 	stmia.w	r5, {r0, r1}
 800118e:	1d33      	adds	r3, r6, #4
 8001190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001192:	6838      	ldr	r0, [r7, #0]
 8001194:	f001 fdf2 	bl	8002d7c <USB_DevInit>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d005      	beq.n	80011aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2202      	movs	r2, #2
 80011a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00d      	b.n	80011c6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fe3a 	bl	8003e38 <USB_DevDisconnect>

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_PCD_Start+0x1c>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e020      	b.n	800122c <HAL_PCD_Start+0x5e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d109      	bne.n	800120e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d005      	beq.n	800120e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001206:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f001 fd66 	bl	8002ce4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f002 fdea 	bl	8003df6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b08d      	sub	sp, #52	; 0x34
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f002 fea8 	bl	8003fa0 <USB_GetMode>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 839d 	bne.w	8001992 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f002 fe0c 	bl	8003e7a <USB_ReadInterrupts>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 8393 	beq.w	8001990 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f002 fe03 	bl	8003e7a <USB_ReadInterrupts>
 8001274:	4603      	mov	r3, r0
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b02      	cmp	r3, #2
 800127c:	d107      	bne.n	800128e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f002 0202 	and.w	r2, r2, #2
 800128c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f002 fdf1 	bl	8003e7a <USB_ReadInterrupts>
 8001298:	4603      	mov	r3, r0
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	2b10      	cmp	r3, #16
 80012a0:	d161      	bne.n	8001366 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	699a      	ldr	r2, [r3, #24]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0210 	bic.w	r2, r2, #16
 80012b0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	f003 020f 	and.w	r2, r3, #15
 80012be:	4613      	mov	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	1a9b      	subs	r3, r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	3304      	adds	r3, #4
 80012d0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	0c5b      	lsrs	r3, r3, #17
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d124      	bne.n	8001328 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d035      	beq.n	8001356 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	6a38      	ldr	r0, [r7, #32]
 80012fe:	f002 fc57 	bl	8003bb0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800130e:	441a      	add	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	699a      	ldr	r2, [r3, #24]
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001320:	441a      	add	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	619a      	str	r2, [r3, #24]
 8001326:	e016      	b.n	8001356 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	0c5b      	lsrs	r3, r3, #17
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	2b06      	cmp	r3, #6
 8001332:	d110      	bne.n	8001356 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800133a:	2208      	movs	r2, #8
 800133c:	4619      	mov	r1, r3
 800133e:	6a38      	ldr	r0, [r7, #32]
 8001340:	f002 fc36 	bl	8003bb0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001350:	441a      	add	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699a      	ldr	r2, [r3, #24]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0210 	orr.w	r2, r2, #16
 8001364:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fd85 	bl	8003e7a <USB_ReadInterrupts>
 8001370:	4603      	mov	r3, r0
 8001372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001376:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800137a:	d16e      	bne.n	800145a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f002 fd8b 	bl	8003ea0 <USB_ReadDevAllOutEpInterrupt>
 800138a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800138c:	e062      	b.n	8001454 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d057      	beq.n	8001448 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 fdb0 	bl	8003f08 <USB_ReadDevOutEPInterrupt>
 80013a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00c      	beq.n	80013ce <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	015a      	lsls	r2, r3, #5
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	4413      	add	r3, r2
 80013bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013c0:	461a      	mov	r2, r3
 80013c2:	2301      	movs	r3, #1
 80013c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 fdb1 	bl	8001f30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00c      	beq.n	80013f2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	015a      	lsls	r2, r3, #5
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	4413      	add	r3, r2
 80013e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013e4:	461a      	mov	r2, r3
 80013e6:	2308      	movs	r3, #8
 80013e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 feab 	bl	8002148 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	f003 0310 	and.w	r3, r3, #16
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d008      	beq.n	800140e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	015a      	lsls	r2, r3, #5
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	4413      	add	r3, r2
 8001404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001408:	461a      	mov	r2, r3
 800140a:	2310      	movs	r3, #16
 800140c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	f003 0320 	and.w	r3, r3, #32
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	015a      	lsls	r2, r3, #5
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	4413      	add	r3, r2
 8001420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001424:	461a      	mov	r2, r3
 8001426:	2320      	movs	r3, #32
 8001428:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d009      	beq.n	8001448 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	015a      	lsls	r2, r3, #5
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	4413      	add	r3, r2
 800143c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001440:	461a      	mov	r2, r3
 8001442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001446:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	3301      	adds	r3, #1
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	2b00      	cmp	r3, #0
 8001458:	d199      	bne.n	800138e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fd0b 	bl	8003e7a <USB_ReadInterrupts>
 8001464:	4603      	mov	r3, r0
 8001466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800146a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800146e:	f040 80c0 	bne.w	80015f2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f002 fd2c 	bl	8003ed4 <USB_ReadDevAllInEpInterrupt>
 800147c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001482:	e0b2      	b.n	80015ea <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 80a7 	beq.w	80015de <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f002 fd52 	bl	8003f44 <USB_ReadDevInEPInterrupt>
 80014a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d057      	beq.n	800155c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	2201      	movs	r2, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69f9      	ldr	r1, [r7, #28]
 80014c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014cc:	4013      	ands	r3, r2
 80014ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	015a      	lsls	r2, r3, #5
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014dc:	461a      	mov	r2, r3
 80014de:	2301      	movs	r3, #1
 80014e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d132      	bne.n	8001550 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ee:	4613      	mov	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	3348      	adds	r3, #72	; 0x48
 80014fa:	6819      	ldr	r1, [r3, #0]
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	1a9b      	subs	r3, r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4403      	add	r3, r0
 800150a:	3344      	adds	r3, #68	; 0x44
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4419      	add	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001514:	4613      	mov	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	1a9b      	subs	r3, r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4403      	add	r3, r0
 800151e:	3348      	adds	r3, #72	; 0x48
 8001520:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	2b00      	cmp	r3, #0
 8001526:	d113      	bne.n	8001550 <HAL_PCD_IRQHandler+0x31c>
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	3350      	adds	r3, #80	; 0x50
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d108      	bne.n	8001550 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001548:	461a      	mov	r2, r3
 800154a:	2101      	movs	r1, #1
 800154c:	f002 fd5a 	bl	8004004 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4619      	mov	r1, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f004 fca7 	bl	8005eaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001572:	461a      	mov	r2, r3
 8001574:	2308      	movs	r3, #8
 8001576:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800158e:	461a      	mov	r2, r3
 8001590:	2310      	movs	r3, #16
 8001592:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800159a:	2b00      	cmp	r3, #0
 800159c:	d008      	beq.n	80015b0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015aa:	461a      	mov	r2, r3
 80015ac:	2340      	movs	r3, #64	; 0x40
 80015ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	015a      	lsls	r2, r3, #5
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c6:	461a      	mov	r2, r3
 80015c8:	2302      	movs	r3, #2
 80015ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 fc1b 	bl	8001e14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	3301      	adds	r3, #1
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f47f af49 	bne.w	8001484 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 fc3f 	bl	8003e7a <USB_ReadInterrupts>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001606:	d122      	bne.n	800164e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800162e:	2100      	movs	r1, #0
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fe27 	bl	8002284 <HAL_PCDEx_LPM_Callback>
 8001636:	e002      	b.n	800163e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f004 fca3 	bl	8005f84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800164c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fc11 	bl	8003e7a <USB_ReadInterrupts>
 8001658:	4603      	mov	r3, r0
 800165a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001662:	d112      	bne.n	800168a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d102      	bne.n	800167a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f004 fc5f 	bl	8005f38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001688:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f002 fbf3 	bl	8003e7a <USB_ReadInterrupts>
 8001694:	4603      	mov	r3, r0
 8001696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800169e:	f040 80c7 	bne.w	8001830 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2110      	movs	r1, #16
 80016bc:	4618      	mov	r0, r3
 80016be:	f001 fcc1 	bl	8003044 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c6:	e056      	b.n	8001776 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ca:	015a      	lsls	r2, r3, #5
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d4:	461a      	mov	r2, r3
 80016d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ec:	0151      	lsls	r1, r2, #5
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	440a      	add	r2, r1
 80016f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016fa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	015a      	lsls	r2, r3, #5
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	4413      	add	r3, r2
 8001704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170c:	0151      	lsls	r1, r2, #5
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	440a      	add	r2, r1
 8001712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001716:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800171a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	015a      	lsls	r2, r3, #5
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	4413      	add	r3, r2
 8001724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001728:	461a      	mov	r2, r3
 800172a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800172e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001732:	015a      	lsls	r2, r3, #5
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4413      	add	r3, r2
 8001738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001740:	0151      	lsls	r1, r2, #5
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	440a      	add	r2, r1
 8001746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800174a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800174e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001752:	015a      	lsls	r2, r3, #5
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001760:	0151      	lsls	r1, r2, #5
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	440a      	add	r2, r1
 8001766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800176a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800176e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001772:	3301      	adds	r3, #1
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177c:	429a      	cmp	r2, r3
 800177e:	d3a3      	bcc.n	80016c8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800178e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001792:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	2b00      	cmp	r3, #0
 800179a:	d016      	beq.n	80017ca <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ac:	f043 030b 	orr.w	r3, r3, #11
 80017b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c2:	f043 030b 	orr.w	r3, r3, #11
 80017c6:	6453      	str	r3, [r2, #68]	; 0x44
 80017c8:	e015      	b.n	80017f6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f0:	f043 030b 	orr.w	r3, r3, #11
 80017f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001804:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001808:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800181a:	461a      	mov	r2, r3
 800181c:	f002 fbf2 	bl	8004004 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800182e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f002 fb20 	bl	8003e7a <USB_ReadInterrupts>
 800183a:	4603      	mov	r3, r0
 800183c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001844:	d124      	bne.n	8001890 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f002 fbb6 	bl	8003fbc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f001 fc56 	bl	8003106 <USB_GetDevSpeed>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681c      	ldr	r4, [r3, #0]
 8001866:	f001 f92d 	bl	8002ac4 <HAL_RCC_GetHCLKFreq>
 800186a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	4620      	mov	r0, r4
 8001876:	f001 f993 	bl	8002ba0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f004 fb3d 	bl	8005efa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800188e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f002 faf0 	bl	8003e7a <USB_ReadInterrupts>
 800189a:	4603      	mov	r3, r0
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d10a      	bne.n	80018ba <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f004 fb1a 	bl	8005ede <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695a      	ldr	r2, [r3, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f002 0208 	and.w	r2, r2, #8
 80018b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fadb 	bl	8003e7a <USB_ReadInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ce:	d10f      	bne.n	80018f0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f004 fb72 	bl	8005fc4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 fac0 	bl	8003e7a <USB_ReadInterrupts>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001904:	d10f      	bne.n	8001926 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f004 fb45 	bl	8005fa0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f002 faa5 	bl	8003e7a <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193a:	d10a      	bne.n	8001952 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f004 fb53 	bl	8005fe8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fa8f 	bl	8003e7a <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b04      	cmp	r3, #4
 8001964:	d115      	bne.n	8001992 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f004 fb43 	bl	8006004 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	e000      	b.n	8001992 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001990:	bf00      	nop
    }
  }
}
 8001992:	3734      	adds	r7, #52	; 0x34
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}

08001998 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_PCD_SetAddress+0x1a>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e013      	b.n	80019da <HAL_PCD_SetAddress+0x42>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 f9ed 	bl	8003daa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	4608      	mov	r0, r1
 80019ec:	4611      	mov	r1, r2
 80019ee:	461a      	mov	r2, r3
 80019f0:	4603      	mov	r3, r0
 80019f2:	70fb      	strb	r3, [r7, #3]
 80019f4:	460b      	mov	r3, r1
 80019f6:	803b      	strh	r3, [r7, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da0f      	bge.n	8001a28 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	f003 020f 	and.w	r2, r3, #15
 8001a0e:	4613      	mov	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	3338      	adds	r3, #56	; 0x38
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	705a      	strb	r2, [r3, #1]
 8001a26:	e00f      	b.n	8001a48 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	f003 020f 	and.w	r2, r3, #15
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3304      	adds	r3, #4
 8001a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a54:	883a      	ldrh	r2, [r7, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	78ba      	ldrb	r2, [r7, #2]
 8001a5e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	785b      	ldrb	r3, [r3, #1]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a72:	78bb      	ldrb	r3, [r7, #2]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d102      	bne.n	8001a7e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_PCD_EP_Open+0xaa>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e00e      	b.n	8001aaa <HAL_PCD_EP_Open+0xc8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68f9      	ldr	r1, [r7, #12]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f001 fb58 	bl	8003150 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001aa8:	7afb      	ldrb	r3, [r7, #11]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001abe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da0f      	bge.n	8001ae6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	f003 020f 	and.w	r2, r3, #15
 8001acc:	4613      	mov	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	3338      	adds	r3, #56	; 0x38
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	3304      	adds	r3, #4
 8001adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	705a      	strb	r2, [r3, #1]
 8001ae4:	e00f      	b.n	8001b06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	f003 020f 	and.w	r2, r3, #15
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	3304      	adds	r3, #4
 8001afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_PCD_EP_Close+0x6e>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e00e      	b.n	8001b3e <HAL_PCD_EP_Close+0x8c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f001 fb96 	bl	8003260 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	460b      	mov	r3, r1
 8001b54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b56:	7afb      	ldrb	r3, [r7, #11]
 8001b58:	f003 020f 	and.w	r2, r3, #15
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2200      	movs	r2, #0
 8001b86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	6979      	ldr	r1, [r7, #20]
 8001bba:	f001 fe71 	bl	80038a0 <USB_EP0StartXfer>
 8001bbe:	e008      	b.n	8001bd2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	6979      	ldr	r1, [r7, #20]
 8001bce:	f001 fc23 	bl	8003418 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	f003 020f 	and.w	r2, r3, #15
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c1c:	7afb      	ldrb	r3, [r7, #11]
 8001c1e:	f003 020f 	and.w	r2, r3, #15
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	1a9b      	subs	r3, r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	3338      	adds	r3, #56	; 0x38
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	3304      	adds	r3, #4
 8001c32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d102      	bne.n	8001c66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c66:	7afb      	ldrb	r3, [r7, #11]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6979      	ldr	r1, [r7, #20]
 8001c7e:	f001 fe0f 	bl	80038a0 <USB_EP0StartXfer>
 8001c82:	e008      	b.n	8001c96 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	6979      	ldr	r1, [r7, #20]
 8001c92:	f001 fbc1 	bl	8003418 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 020f 	and.w	r2, r3, #15
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d901      	bls.n	8001cbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e050      	b.n	8001d60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	da0f      	bge.n	8001ce6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f003 020f 	and.w	r2, r3, #15
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	3338      	adds	r3, #56	; 0x38
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	3304      	adds	r3, #4
 8001cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	705a      	strb	r2, [r3, #1]
 8001ce4:	e00d      	b.n	8001d02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_PCD_EP_SetStall+0x82>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e01e      	b.n	8001d60 <HAL_PCD_EP_SetStall+0xc0>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68f9      	ldr	r1, [r7, #12]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 ff66 	bl	8003c02 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10a      	bne.n	8001d56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	b2d9      	uxtb	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d50:	461a      	mov	r2, r3
 8001d52:	f002 f957 	bl	8004004 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 020f 	and.w	r2, r3, #15
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d901      	bls.n	8001d86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e042      	b.n	8001e0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	da0f      	bge.n	8001dae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	f003 020f 	and.w	r2, r3, #15
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	1a9b      	subs	r3, r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	3338      	adds	r3, #56	; 0x38
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	3304      	adds	r3, #4
 8001da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	705a      	strb	r2, [r3, #1]
 8001dac:	e00f      	b.n	8001dce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	f003 020f 	and.w	r2, r3, #15
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_PCD_EP_ClrStall+0x86>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e00e      	b.n	8001e0c <HAL_PCD_EP_ClrStall+0xa4>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68f9      	ldr	r1, [r7, #12]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f001 ff6e 	bl	8003cde <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	1a9b      	subs	r3, r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	3338      	adds	r3, #56	; 0x38
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	3304      	adds	r3, #4
 8001e3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	699a      	ldr	r2, [r3, #24]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d901      	bls.n	8001e4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e06c      	b.n	8001f26 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d902      	bls.n	8001e68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	3303      	adds	r3, #3
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e70:	e02b      	b.n	8001eca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d902      	bls.n	8001e8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3303      	adds	r3, #3
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	68d9      	ldr	r1, [r3, #12]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6978      	ldr	r0, [r7, #20]
 8001eae:	f001 fe4a 	bl	8003b46 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	441a      	add	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	441a      	add	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d809      	bhi.n	8001ef4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	699a      	ldr	r2, [r3, #24]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d203      	bcs.n	8001ef4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1be      	bne.n	8001e72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d811      	bhi.n	8001f24 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	2201      	movs	r2, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	6939      	ldr	r1, [r7, #16]
 8001f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f20:	4013      	ands	r3, r2
 8001f22:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	333c      	adds	r3, #60	; 0x3c
 8001f48:	3304      	adds	r3, #4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	f040 80a0 	bne.w	80020a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d015      	beq.n	8001f9e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4a72      	ldr	r2, [pc, #456]	; (8002140 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	f240 80dd 	bls.w	8002136 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80d7 	beq.w	8002136 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f94:	461a      	mov	r2, r3
 8001f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f9a:	6093      	str	r3, [r2, #8]
 8001f9c:	e0cb      	b.n	8002136 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d009      	beq.n	8001fbc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2320      	movs	r3, #32
 8001fb8:	6093      	str	r3, [r2, #8]
 8001fba:	e0bc      	b.n	8002136 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 80b7 	bne.w	8002136 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a5d      	ldr	r2, [pc, #372]	; (8002140 <PCD_EP_OutXfrComplete_int+0x210>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d90f      	bls.n	8001ff0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fec:	6093      	str	r3, [r2, #8]
 8001fee:	e0a2      	b.n	8002136 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002002:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	0159      	lsls	r1, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	440b      	add	r3, r1
 800200c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002016:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4403      	add	r3, r0
 8002026:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800202a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4403      	add	r3, r0
 800204e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4419      	add	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4403      	add	r3, r0
 8002064:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002068:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d114      	bne.n	800209a <PCD_EP_OutXfrComplete_int+0x16a>
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d108      	bne.n	800209a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002092:	461a      	mov	r2, r3
 8002094:	2101      	movs	r1, #1
 8002096:	f001 ffb5 	bl	8004004 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4619      	mov	r1, r3
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f003 fee7 	bl	8005e74 <HAL_PCD_DataOutStageCallback>
 80020a6:	e046      	b.n	8002136 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4a26      	ldr	r2, [pc, #152]	; (8002144 <PCD_EP_OutXfrComplete_int+0x214>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d124      	bne.n	80020fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c6:	461a      	mov	r2, r3
 80020c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020cc:	6093      	str	r3, [r2, #8]
 80020ce:	e032      	b.n	8002136 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d008      	beq.n	80020ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e6:	461a      	mov	r2, r3
 80020e8:	2320      	movs	r3, #32
 80020ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	4619      	mov	r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f003 febe 	bl	8005e74 <HAL_PCD_DataOutStageCallback>
 80020f8:	e01d      	b.n	8002136 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d114      	bne.n	800212a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d108      	bne.n	800212a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002122:	461a      	mov	r2, r3
 8002124:	2100      	movs	r1, #0
 8002126:	f001 ff6d 	bl	8004004 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f003 fe9f 	bl	8005e74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	4f54300a 	.word	0x4f54300a
 8002144:	4f54310a 	.word	0x4f54310a

08002148 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	333c      	adds	r3, #60	; 0x3c
 8002160:	3304      	adds	r3, #4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d90e      	bls.n	800219c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002194:	461a      	mov	r2, r3
 8002196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800219a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f003 fe57 	bl	8005e50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d90c      	bls.n	80021c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d108      	bne.n	80021c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021bc:	461a      	mov	r2, r3
 80021be:	2101      	movs	r1, #1
 80021c0:	f001 ff20 	bl	8004004 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	4f54300a 	.word	0x4f54300a

080021d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
 80021e0:	4613      	mov	r3, r2
 80021e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d107      	bne.n	8002202 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021f2:	883b      	ldrh	r3, [r7, #0]
 80021f4:	0419      	lsls	r1, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002200:	e028      	b.n	8002254 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	0c1b      	lsrs	r3, r3, #16
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	4413      	add	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	e00d      	b.n	8002232 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	3340      	adds	r3, #64	; 0x40
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	4413      	add	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	3301      	adds	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	3b01      	subs	r3, #1
 8002238:	429a      	cmp	r2, r3
 800223a:	d3ec      	bcc.n	8002216 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800223c:	883b      	ldrh	r3, [r7, #0]
 800223e:	0418      	lsls	r0, r3, #16
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	3b01      	subs	r3, #1
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	4302      	orrs	r2, r0
 800224c:	3340      	adds	r3, #64	; 0x40
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e264      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d075      	beq.n	80023a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ba:	4ba3      	ldr	r3, [pc, #652]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d00c      	beq.n	80022e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c6:	4ba0      	ldr	r3, [pc, #640]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d112      	bne.n	80022f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d2:	4b9d      	ldr	r3, [pc, #628]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022de:	d10b      	bne.n	80022f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	4b99      	ldr	r3, [pc, #612]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d05b      	beq.n	80023a4 <HAL_RCC_OscConfig+0x108>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d157      	bne.n	80023a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e23f      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002300:	d106      	bne.n	8002310 <HAL_RCC_OscConfig+0x74>
 8002302:	4b91      	ldr	r3, [pc, #580]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a90      	ldr	r2, [pc, #576]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0xb0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x98>
 800231a:	4b8b      	ldr	r3, [pc, #556]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a8a      	ldr	r2, [pc, #552]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b88      	ldr	r3, [pc, #544]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a87      	ldr	r2, [pc, #540]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0xb0>
 8002334:	4b84      	ldr	r3, [pc, #528]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a83      	ldr	r2, [pc, #524]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b81      	ldr	r3, [pc, #516]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a80      	ldr	r2, [pc, #512]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe fb0c 	bl	8000970 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fb08 	bl	8000970 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e204      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	4b76      	ldr	r3, [pc, #472]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0xc0>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe faf8 	bl	8000970 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe faf4 	bl	8000970 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e1f0      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	4b6c      	ldr	r3, [pc, #432]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0xe8>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d063      	beq.n	800247a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023b2:	4b65      	ldr	r3, [pc, #404]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b62      	ldr	r3, [pc, #392]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d11c      	bne.n	8002404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ca:	4b5f      	ldr	r3, [pc, #380]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d116      	bne.n	8002404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	4b5c      	ldr	r3, [pc, #368]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_RCC_OscConfig+0x152>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e1c4      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	4b56      	ldr	r3, [pc, #344]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4952      	ldr	r1, [pc, #328]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	e03a      	b.n	800247a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d020      	beq.n	800244e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240c:	4b4f      	ldr	r3, [pc, #316]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe faad 	bl	8000970 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241a:	f7fe faa9 	bl	8000970 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e1a5      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	4b46      	ldr	r3, [pc, #280]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4b43      	ldr	r3, [pc, #268]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4940      	ldr	r1, [pc, #256]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]
 800244c:	e015      	b.n	800247a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244e:	4b3f      	ldr	r3, [pc, #252]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fa8c 	bl	8000970 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245c:	f7fe fa88 	bl	8000970 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e184      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d030      	beq.n	80024e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d016      	beq.n	80024bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248e:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_RCC_OscConfig+0x2b4>)
 8002490:	2201      	movs	r2, #1
 8002492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7fe fa6c 	bl	8000970 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800249c:	f7fe fa68 	bl	8000970 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e164      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x200>
 80024ba:	e015      	b.n	80024e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_RCC_OscConfig+0x2b4>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7fe fa55 	bl	8000970 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ca:	f7fe fa51 	bl	8000970 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e14d      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80024de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80a0 	beq.w	8002636 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCC_OscConfig+0x2b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d121      	bne.n	8002576 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_RCC_OscConfig+0x2b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a07      	ldr	r2, [pc, #28]	; (8002554 <HAL_RCC_OscConfig+0x2b8>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253e:	f7fe fa17 	bl	8000970 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	e011      	b.n	800256a <HAL_RCC_OscConfig+0x2ce>
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	42470000 	.word	0x42470000
 8002550:	42470e80 	.word	0x42470e80
 8002554:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002558:	f7fe fa0a 	bl	8000970 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e106      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	4b85      	ldr	r3, [pc, #532]	; (8002780 <HAL_RCC_OscConfig+0x4e4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d106      	bne.n	800258c <HAL_RCC_OscConfig+0x2f0>
 800257e:	4b81      	ldr	r3, [pc, #516]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	4a80      	ldr	r2, [pc, #512]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6713      	str	r3, [r2, #112]	; 0x70
 800258a:	e01c      	b.n	80025c6 <HAL_RCC_OscConfig+0x32a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d10c      	bne.n	80025ae <HAL_RCC_OscConfig+0x312>
 8002594:	4b7b      	ldr	r3, [pc, #492]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	4a7a      	ldr	r2, [pc, #488]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6713      	str	r3, [r2, #112]	; 0x70
 80025a0:	4b78      	ldr	r3, [pc, #480]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	4a77      	ldr	r2, [pc, #476]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6713      	str	r3, [r2, #112]	; 0x70
 80025ac:	e00b      	b.n	80025c6 <HAL_RCC_OscConfig+0x32a>
 80025ae:	4b75      	ldr	r3, [pc, #468]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	4a74      	ldr	r2, [pc, #464]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ba:	4b72      	ldr	r3, [pc, #456]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	4a71      	ldr	r2, [pc, #452]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 80025c0:	f023 0304 	bic.w	r3, r3, #4
 80025c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d015      	beq.n	80025fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7fe f9cf 	bl	8000970 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe f9cb 	bl	8000970 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e0c5      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	4b65      	ldr	r3, [pc, #404]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ee      	beq.n	80025d6 <HAL_RCC_OscConfig+0x33a>
 80025f8:	e014      	b.n	8002624 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7fe f9b9 	bl	8000970 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe f9b5 	bl	8000970 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0af      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ee      	bne.n	8002602 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262a:	4b56      	ldr	r3, [pc, #344]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a55      	ldr	r2, [pc, #340]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 8002630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 809b 	beq.w	8002776 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002640:	4b50      	ldr	r3, [pc, #320]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b08      	cmp	r3, #8
 800264a:	d05c      	beq.n	8002706 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d141      	bne.n	80026d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	4b4c      	ldr	r3, [pc, #304]	; (8002788 <HAL_RCC_OscConfig+0x4ec>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe f989 	bl	8000970 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe f985 	bl	8000970 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e081      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002674:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69da      	ldr	r2, [r3, #28]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	019b      	lsls	r3, r3, #6
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	3b01      	subs	r3, #1
 800269a:	041b      	lsls	r3, r3, #16
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	061b      	lsls	r3, r3, #24
 80026a4:	4937      	ldr	r1, [pc, #220]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026aa:	4b37      	ldr	r3, [pc, #220]	; (8002788 <HAL_RCC_OscConfig+0x4ec>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe f95e 	bl	8000970 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe f95a 	bl	8000970 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e056      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x41c>
 80026d6:	e04e      	b.n	8002776 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_RCC_OscConfig+0x4ec>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fe f947 	bl	8000970 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe f943 	bl	8000970 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e03f      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f8:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x44a>
 8002704:	e037      	b.n	8002776 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e032      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <HAL_RCC_OscConfig+0x4e8>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d028      	beq.n	8002772 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d121      	bne.n	8002772 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002738:	429a      	cmp	r2, r3
 800273a:	d11a      	bne.n	8002772 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002742:	4013      	ands	r3, r2
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002748:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800274a:	4293      	cmp	r3, r2
 800274c:	d111      	bne.n	8002772 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	3b01      	subs	r3, #1
 800275c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d107      	bne.n	8002772 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40007000 	.word	0x40007000
 8002784:	40023800 	.word	0x40023800
 8002788:	42470060 	.word	0x42470060

0800278c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0cc      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a0:	4b68      	ldr	r3, [pc, #416]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d90c      	bls.n	80027c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b65      	ldr	r3, [pc, #404]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	b2d2      	uxtb	r2, r2
 80027b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b63      	ldr	r3, [pc, #396]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0b8      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d020      	beq.n	8002816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a58      	ldr	r2, [pc, #352]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f8:	4b53      	ldr	r3, [pc, #332]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002804:	4b50      	ldr	r3, [pc, #320]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	494d      	ldr	r1, [pc, #308]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d044      	beq.n	80028ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	4b47      	ldr	r3, [pc, #284]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d119      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e07f      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d003      	beq.n	800284a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002846:	2b03      	cmp	r3, #3
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284a:	4b3f      	ldr	r3, [pc, #252]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e06f      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285a:	4b3b      	ldr	r3, [pc, #236]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e067      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800286a:	4b37      	ldr	r3, [pc, #220]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4934      	ldr	r1, [pc, #208]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800287c:	f7fe f878 	bl	8000970 <HAL_GetTick>
 8002880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	e00a      	b.n	800289a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002884:	f7fe f874 	bl	8000970 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e04f      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289a:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 020c 	and.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d1eb      	bne.n	8002884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ac:	4b25      	ldr	r3, [pc, #148]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d20c      	bcs.n	80028d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e032      	b.n	800293a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4916      	ldr	r1, [pc, #88]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fe:	4b12      	ldr	r3, [pc, #72]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	490e      	ldr	r1, [pc, #56]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002912:	f000 f821 	bl	8002958 <HAL_RCC_GetSysClockFreq>
 8002916:	4602      	mov	r2, r0
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	490a      	ldr	r1, [pc, #40]	; (800294c <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	5ccb      	ldrb	r3, [r1, r3]
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800292e:	4b09      	ldr	r3, [pc, #36]	; (8002954 <HAL_RCC_ClockConfig+0x1c8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd ffd8 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023c00 	.word	0x40023c00
 8002948:	40023800 	.word	0x40023800
 800294c:	08006474 	.word	0x08006474
 8002950:	20000000 	.word	0x20000000
 8002954:	20000004 	.word	0x20000004

08002958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800295e:	2100      	movs	r1, #0
 8002960:	6079      	str	r1, [r7, #4]
 8002962:	2100      	movs	r1, #0
 8002964:	60f9      	str	r1, [r7, #12]
 8002966:	2100      	movs	r1, #0
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800296a:	2100      	movs	r1, #0
 800296c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296e:	4952      	ldr	r1, [pc, #328]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002970:	6889      	ldr	r1, [r1, #8]
 8002972:	f001 010c 	and.w	r1, r1, #12
 8002976:	2908      	cmp	r1, #8
 8002978:	d00d      	beq.n	8002996 <HAL_RCC_GetSysClockFreq+0x3e>
 800297a:	2908      	cmp	r1, #8
 800297c:	f200 8094 	bhi.w	8002aa8 <HAL_RCC_GetSysClockFreq+0x150>
 8002980:	2900      	cmp	r1, #0
 8002982:	d002      	beq.n	800298a <HAL_RCC_GetSysClockFreq+0x32>
 8002984:	2904      	cmp	r1, #4
 8002986:	d003      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x38>
 8002988:	e08e      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800298a:	4b4c      	ldr	r3, [pc, #304]	; (8002abc <HAL_RCC_GetSysClockFreq+0x164>)
 800298c:	60bb      	str	r3, [r7, #8]
       break;
 800298e:	e08e      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002990:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002992:	60bb      	str	r3, [r7, #8]
      break;
 8002994:	e08b      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002996:	4948      	ldr	r1, [pc, #288]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002998:	6849      	ldr	r1, [r1, #4]
 800299a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800299e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029a0:	4945      	ldr	r1, [pc, #276]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 80029a2:	6849      	ldr	r1, [r1, #4]
 80029a4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80029a8:	2900      	cmp	r1, #0
 80029aa:	d024      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ac:	4942      	ldr	r1, [pc, #264]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 80029ae:	6849      	ldr	r1, [r1, #4]
 80029b0:	0989      	lsrs	r1, r1, #6
 80029b2:	4608      	mov	r0, r1
 80029b4:	f04f 0100 	mov.w	r1, #0
 80029b8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80029bc:	f04f 0500 	mov.w	r5, #0
 80029c0:	ea00 0204 	and.w	r2, r0, r4
 80029c4:	ea01 0305 	and.w	r3, r1, r5
 80029c8:	493d      	ldr	r1, [pc, #244]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x168>)
 80029ca:	fb01 f003 	mul.w	r0, r1, r3
 80029ce:	2100      	movs	r1, #0
 80029d0:	fb01 f102 	mul.w	r1, r1, r2
 80029d4:	1844      	adds	r4, r0, r1
 80029d6:	493a      	ldr	r1, [pc, #232]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x168>)
 80029d8:	fba2 0101 	umull	r0, r1, r2, r1
 80029dc:	1863      	adds	r3, r4, r1
 80029de:	4619      	mov	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	f7fd fbf6 	bl	80001d8 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4613      	mov	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e04a      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f6:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	099b      	lsrs	r3, r3, #6
 80029fc:	461a      	mov	r2, r3
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a06:	f04f 0100 	mov.w	r1, #0
 8002a0a:	ea02 0400 	and.w	r4, r2, r0
 8002a0e:	ea03 0501 	and.w	r5, r3, r1
 8002a12:	4620      	mov	r0, r4
 8002a14:	4629      	mov	r1, r5
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	014b      	lsls	r3, r1, #5
 8002a20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a24:	0142      	lsls	r2, r0, #5
 8002a26:	4610      	mov	r0, r2
 8002a28:	4619      	mov	r1, r3
 8002a2a:	1b00      	subs	r0, r0, r4
 8002a2c:	eb61 0105 	sbc.w	r1, r1, r5
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	018b      	lsls	r3, r1, #6
 8002a3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a3e:	0182      	lsls	r2, r0, #6
 8002a40:	1a12      	subs	r2, r2, r0
 8002a42:	eb63 0301 	sbc.w	r3, r3, r1
 8002a46:	f04f 0000 	mov.w	r0, #0
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	00d9      	lsls	r1, r3, #3
 8002a50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a54:	00d0      	lsls	r0, r2, #3
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	1912      	adds	r2, r2, r4
 8002a5c:	eb45 0303 	adc.w	r3, r5, r3
 8002a60:	f04f 0000 	mov.w	r0, #0
 8002a64:	f04f 0100 	mov.w	r1, #0
 8002a68:	0299      	lsls	r1, r3, #10
 8002a6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a6e:	0290      	lsls	r0, r2, #10
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	f7fd fbaa 	bl	80001d8 <__aeabi_uldivmod>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4613      	mov	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	0c1b      	lsrs	r3, r3, #16
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	3301      	adds	r3, #1
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	60bb      	str	r3, [r7, #8]
      break;
 8002aa6:	e002      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <HAL_RCC_GetSysClockFreq+0x164>)
 8002aaa:	60bb      	str	r3, [r7, #8]
      break;
 8002aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aae:	68bb      	ldr	r3, [r7, #8]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	00f42400 	.word	0x00f42400
 8002ac0:	017d7840 	.word	0x017d7840

08002ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000000 	.word	0x20000000

08002adc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002adc:	b084      	sub	sp, #16
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	f107 001c 	add.w	r0, r7, #28
 8002aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d122      	bne.n	8002b3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d105      	bne.n	8002b2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f001 fac6 	bl	80040c0 <USB_CoreReset>
 8002b34:	4603      	mov	r3, r0
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e01a      	b.n	8002b70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f001 faba 	bl	80040c0 <USB_CoreReset>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	639a      	str	r2, [r3, #56]	; 0x38
 8002b62:	e005      	b.n	8002b70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d10b      	bne.n	8002b8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f043 0206 	orr.w	r2, r3, #6
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b9a:	b004      	add	sp, #16
 8002b9c:	4770      	bx	lr
	...

08002ba0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d165      	bne.n	8002c80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4a41      	ldr	r2, [pc, #260]	; (8002cbc <USB_SetTurnaroundTime+0x11c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d906      	bls.n	8002bca <USB_SetTurnaroundTime+0x2a>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4a40      	ldr	r2, [pc, #256]	; (8002cc0 <USB_SetTurnaroundTime+0x120>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d202      	bcs.n	8002bca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002bc4:	230f      	movs	r3, #15
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	e062      	b.n	8002c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	4a3c      	ldr	r2, [pc, #240]	; (8002cc0 <USB_SetTurnaroundTime+0x120>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d306      	bcc.n	8002be0 <USB_SetTurnaroundTime+0x40>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <USB_SetTurnaroundTime+0x124>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d202      	bcs.n	8002be0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002bda:	230e      	movs	r3, #14
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	e057      	b.n	8002c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4a38      	ldr	r2, [pc, #224]	; (8002cc4 <USB_SetTurnaroundTime+0x124>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d306      	bcc.n	8002bf6 <USB_SetTurnaroundTime+0x56>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4a37      	ldr	r2, [pc, #220]	; (8002cc8 <USB_SetTurnaroundTime+0x128>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d202      	bcs.n	8002bf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002bf0:	230d      	movs	r3, #13
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	e04c      	b.n	8002c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4a33      	ldr	r2, [pc, #204]	; (8002cc8 <USB_SetTurnaroundTime+0x128>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d306      	bcc.n	8002c0c <USB_SetTurnaroundTime+0x6c>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4a32      	ldr	r2, [pc, #200]	; (8002ccc <USB_SetTurnaroundTime+0x12c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d802      	bhi.n	8002c0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c06:	230c      	movs	r3, #12
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	e041      	b.n	8002c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4a2f      	ldr	r2, [pc, #188]	; (8002ccc <USB_SetTurnaroundTime+0x12c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d906      	bls.n	8002c22 <USB_SetTurnaroundTime+0x82>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4a2e      	ldr	r2, [pc, #184]	; (8002cd0 <USB_SetTurnaroundTime+0x130>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d802      	bhi.n	8002c22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c1c:	230b      	movs	r3, #11
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e036      	b.n	8002c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	4a2a      	ldr	r2, [pc, #168]	; (8002cd0 <USB_SetTurnaroundTime+0x130>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d906      	bls.n	8002c38 <USB_SetTurnaroundTime+0x98>
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <USB_SetTurnaroundTime+0x134>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d802      	bhi.n	8002c38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c32:	230a      	movs	r3, #10
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	e02b      	b.n	8002c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4a26      	ldr	r2, [pc, #152]	; (8002cd4 <USB_SetTurnaroundTime+0x134>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d906      	bls.n	8002c4e <USB_SetTurnaroundTime+0xae>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4a25      	ldr	r2, [pc, #148]	; (8002cd8 <USB_SetTurnaroundTime+0x138>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d202      	bcs.n	8002c4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002c48:	2309      	movs	r3, #9
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	e020      	b.n	8002c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4a21      	ldr	r2, [pc, #132]	; (8002cd8 <USB_SetTurnaroundTime+0x138>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d306      	bcc.n	8002c64 <USB_SetTurnaroundTime+0xc4>
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4a20      	ldr	r2, [pc, #128]	; (8002cdc <USB_SetTurnaroundTime+0x13c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d802      	bhi.n	8002c64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002c5e:	2308      	movs	r3, #8
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	e015      	b.n	8002c90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <USB_SetTurnaroundTime+0x13c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d906      	bls.n	8002c7a <USB_SetTurnaroundTime+0xda>
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <USB_SetTurnaroundTime+0x140>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d202      	bcs.n	8002c7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002c74:	2307      	movs	r3, #7
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e00a      	b.n	8002c90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002c7a:	2306      	movs	r3, #6
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	e007      	b.n	8002c90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002c86:	2309      	movs	r3, #9
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e001      	b.n	8002c90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002c8c:	2309      	movs	r3, #9
 8002c8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	029b      	lsls	r3, r3, #10
 8002ca4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	00d8acbf 	.word	0x00d8acbf
 8002cc0:	00e4e1c0 	.word	0x00e4e1c0
 8002cc4:	00f42400 	.word	0x00f42400
 8002cc8:	01067380 	.word	0x01067380
 8002ccc:	011a499f 	.word	0x011a499f
 8002cd0:	01312cff 	.word	0x01312cff
 8002cd4:	014ca43f 	.word	0x014ca43f
 8002cd8:	016e3600 	.word	0x016e3600
 8002cdc:	01a6ab1f 	.word	0x01a6ab1f
 8002ce0:	01e84800 	.word	0x01e84800

08002ce4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f023 0201 	bic.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d106      	bne.n	8002d54 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	e00b      	b.n	8002d6c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	e001      	b.n	8002d6c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e003      	b.n	8002d74 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002d6c:	2032      	movs	r0, #50	; 0x32
 8002d6e:	f7fd fe0b 	bl	8000988 <HAL_Delay>

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	e009      	b.n	8002db0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	3340      	adds	r3, #64	; 0x40
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	2200      	movs	r2, #0
 8002da8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	3301      	adds	r3, #1
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b0e      	cmp	r3, #14
 8002db4:	d9f2      	bls.n	8002d9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11c      	bne.n	8002df6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dca:	f043 0302 	orr.w	r3, r3, #2
 8002dce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38
 8002df4:	e00b      	b.n	8002e0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002e14:	461a      	mov	r2, r3
 8002e16:	2300      	movs	r3, #0
 8002e18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e20:	4619      	mov	r1, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e28:	461a      	mov	r2, r3
 8002e2a:	680b      	ldr	r3, [r1, #0]
 8002e2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10c      	bne.n	8002e4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d104      	bne.n	8002e44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f949 	bl	80030d4 <USB_SetDevSpeed>
 8002e42:	e008      	b.n	8002e56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e44:	2101      	movs	r1, #1
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f944 	bl	80030d4 <USB_SetDevSpeed>
 8002e4c:	e003      	b.n	8002e56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e4e:	2103      	movs	r1, #3
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f93f 	bl	80030d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e56:	2110      	movs	r1, #16
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f8f3 	bl	8003044 <USB_FlushTxFifo>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f911 	bl	8003090 <USB_FlushRxFifo>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2300      	movs	r3, #0
 8002e82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e96:	461a      	mov	r2, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	e043      	b.n	8002f2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eb8:	d118      	bne.n	8002eec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	e013      	b.n	8002efe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e008      	b.n	8002efe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2300      	movs	r3, #0
 8002efc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	3301      	adds	r3, #1
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d3b7      	bcc.n	8002ea2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	e043      	b.n	8002fc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f4e:	d118      	bne.n	8002f82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f62:	461a      	mov	r2, r3
 8002f64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e013      	b.n	8002f94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	e008      	b.n	8002f94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2300      	movs	r3, #0
 8002f92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d3b7      	bcc.n	8002f38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002fe8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d105      	bne.n	8002ffc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f043 0210 	orr.w	r2, r3, #16
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <USB_DevInit+0x2c4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f043 0208 	orr.w	r2, r3, #8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800301a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d107      	bne.n	8003030 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003030:	7dfb      	ldrb	r3, [r7, #23]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800303c:	b004      	add	sp, #16
 800303e:	4770      	bx	lr
 8003040:	803c3800 	.word	0x803c3800

08003044 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	019b      	lsls	r3, r3, #6
 8003056:	f043 0220 	orr.w	r2, r3, #32
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3301      	adds	r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a09      	ldr	r2, [pc, #36]	; (800308c <USB_FlushTxFifo+0x48>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e006      	b.n	800307e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b20      	cmp	r3, #32
 800307a:	d0f0      	beq.n	800305e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	00030d40 	.word	0x00030d40

08003090 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2210      	movs	r2, #16
 80030a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3301      	adds	r3, #1
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <USB_FlushRxFifo+0x40>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e006      	b.n	80030c2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b10      	cmp	r3, #16
 80030be:	d0f0      	beq.n	80030a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	00030d40 	.word	0x00030d40

080030d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	68f9      	ldr	r1, [r7, #12]
 80030f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003106:	b480      	push	{r7}
 8003108:	b087      	sub	sp, #28
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0306 	and.w	r3, r3, #6
 800311e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]
 800312a:	e00a      	b.n	8003142 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d002      	beq.n	8003138 <USB_GetDevSpeed+0x32>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b06      	cmp	r3, #6
 8003136:	d102      	bne.n	800313e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003138:	2302      	movs	r3, #2
 800313a:	75fb      	strb	r3, [r7, #23]
 800313c:	e001      	b.n	8003142 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800313e:	230f      	movs	r3, #15
 8003140:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003142:	7dfb      	ldrb	r3, [r7, #23]
}
 8003144:	4618      	mov	r0, r3
 8003146:	371c      	adds	r7, #28
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	785b      	ldrb	r3, [r3, #1]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d13a      	bne.n	80031e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	2101      	movs	r1, #1
 800317e:	fa01 f303 	lsl.w	r3, r1, r3
 8003182:	b29b      	uxth	r3, r3
 8003184:	68f9      	ldr	r1, [r7, #12]
 8003186:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800318a:	4313      	orrs	r3, r2
 800318c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d155      	bne.n	8003250 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	78db      	ldrb	r3, [r3, #3]
 80031be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80031c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	059b      	lsls	r3, r3, #22
 80031c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80031c8:	4313      	orrs	r3, r2
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	0151      	lsls	r1, r2, #5
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	440a      	add	r2, r1
 80031d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	e036      	b.n	8003250 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e8:	69da      	ldr	r2, [r3, #28]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	2101      	movs	r1, #1
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	041b      	lsls	r3, r3, #16
 80031fa:	68f9      	ldr	r1, [r7, #12]
 80031fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003200:	4313      	orrs	r3, r2
 8003202:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11a      	bne.n	8003250 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	78db      	ldrb	r3, [r3, #3]
 8003234:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003236:	430b      	orrs	r3, r1
 8003238:	4313      	orrs	r3, r2
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	0151      	lsls	r1, r2, #5
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	440a      	add	r2, r1
 8003242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800324e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d161      	bne.n	8003340 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800328e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003292:	d11f      	bne.n	80032d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	0151      	lsls	r1, r2, #5
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	440a      	add	r2, r1
 80032aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	0151      	lsls	r1, r2, #5
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	440a      	add	r2, r1
 80032ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	2101      	movs	r1, #1
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	68f9      	ldr	r1, [r7, #12]
 80032f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032f4:	4013      	ands	r3, r2
 80032f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	2101      	movs	r1, #1
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	b29b      	uxth	r3, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	68f9      	ldr	r1, [r7, #12]
 8003314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003318:	4013      	ands	r3, r2
 800331a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4413      	add	r3, r2
 8003324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	0159      	lsls	r1, r3, #5
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	440b      	add	r3, r1
 8003332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003336:	4619      	mov	r1, r3
 8003338:	4b35      	ldr	r3, [pc, #212]	; (8003410 <USB_DeactivateEndpoint+0x1b0>)
 800333a:	4013      	ands	r3, r2
 800333c:	600b      	str	r3, [r1, #0]
 800333e:	e060      	b.n	8003402 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003356:	d11f      	bne.n	8003398 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4413      	add	r3, r2
 8003360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	0151      	lsls	r1, r2, #5
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	440a      	add	r2, r1
 800336e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003372:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003376:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	0151      	lsls	r1, r2, #5
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	440a      	add	r2, r1
 800338e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003392:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003396:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800339e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	43db      	mvns	r3, r3
 80033b2:	68f9      	ldr	r1, [r7, #12]
 80033b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033b8:	4013      	ands	r3, r2
 80033ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	041b      	lsls	r3, r3, #16
 80033d4:	43db      	mvns	r3, r3
 80033d6:	68f9      	ldr	r1, [r7, #12]
 80033d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033dc:	4013      	ands	r3, r2
 80033de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	0159      	lsls	r1, r3, #5
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	440b      	add	r3, r1
 80033f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fa:	4619      	mov	r1, r3
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <USB_DeactivateEndpoint+0x1b4>)
 80033fe:	4013      	ands	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	ec337800 	.word	0xec337800
 8003414:	eff37800 	.word	0xeff37800

08003418 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	4613      	mov	r3, r2
 8003424:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	785b      	ldrb	r3, [r3, #1]
 8003434:	2b01      	cmp	r3, #1
 8003436:	f040 815c 	bne.w	80036f2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d132      	bne.n	80034a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	0151      	lsls	r1, r2, #5
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	440a      	add	r2, r1
 8003458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800345c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003460:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003464:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	0151      	lsls	r1, r2, #5
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	440a      	add	r2, r1
 800347c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003484:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	0151      	lsls	r1, r2, #5
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	440a      	add	r2, r1
 800349c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034a0:	0cdb      	lsrs	r3, r3, #19
 80034a2:	04db      	lsls	r3, r3, #19
 80034a4:	6113      	str	r3, [r2, #16]
 80034a6:	e074      	b.n	8003592 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	0151      	lsls	r1, r2, #5
 80034ba:	69fa      	ldr	r2, [r7, #28]
 80034bc:	440a      	add	r2, r1
 80034be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034c2:	0cdb      	lsrs	r3, r3, #19
 80034c4:	04db      	lsls	r3, r3, #19
 80034c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	0151      	lsls	r1, r2, #5
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	440a      	add	r2, r1
 80034de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80034e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80034ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	6959      	ldr	r1, [r3, #20]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	440b      	add	r3, r1
 8003504:	1e59      	subs	r1, r3, #1
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	fbb1 f3f3 	udiv	r3, r1, r3
 800350e:	04d9      	lsls	r1, r3, #19
 8003510:	4b9d      	ldr	r3, [pc, #628]	; (8003788 <USB_EPStartXfer+0x370>)
 8003512:	400b      	ands	r3, r1
 8003514:	69b9      	ldr	r1, [r7, #24]
 8003516:	0148      	lsls	r0, r1, #5
 8003518:	69f9      	ldr	r1, [r7, #28]
 800351a:	4401      	add	r1, r0
 800351c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003520:	4313      	orrs	r3, r2
 8003522:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800353a:	69b9      	ldr	r1, [r7, #24]
 800353c:	0148      	lsls	r0, r1, #5
 800353e:	69f9      	ldr	r1, [r7, #28]
 8003540:	4401      	add	r1, r0
 8003542:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003546:	4313      	orrs	r3, r2
 8003548:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	78db      	ldrb	r3, [r3, #3]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d11f      	bne.n	8003592 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	0151      	lsls	r1, r2, #5
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	440a      	add	r2, r1
 8003568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800356c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003570:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	0151      	lsls	r1, r2, #5
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	440a      	add	r2, r1
 8003588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800358c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003590:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d14b      	bne.n	8003630 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d009      	beq.n	80035b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ac:	461a      	mov	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	78db      	ldrb	r3, [r3, #3]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d128      	bne.n	800360e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d110      	bne.n	80035ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	e00f      	b.n	800360e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	015a      	lsls	r2, r3, #5
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	4413      	add	r3, r2
 80035f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	0151      	lsls	r1, r2, #5
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	440a      	add	r2, r1
 8003604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800360c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	4413      	add	r3, r2
 8003616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	0151      	lsls	r1, r2, #5
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	440a      	add	r2, r1
 8003624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003628:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e12f      	b.n	8003890 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	0151      	lsls	r1, r2, #5
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	440a      	add	r2, r1
 8003646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800364a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800364e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	78db      	ldrb	r3, [r3, #3]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d015      	beq.n	8003684 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 8117 	beq.w	8003890 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	2101      	movs	r1, #1
 8003674:	fa01 f303 	lsl.w	r3, r1, r3
 8003678:	69f9      	ldr	r1, [r7, #28]
 800367a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800367e:	4313      	orrs	r3, r2
 8003680:	634b      	str	r3, [r1, #52]	; 0x34
 8003682:	e105      	b.n	8003890 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d110      	bne.n	80036b6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	0151      	lsls	r1, r2, #5
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	440a      	add	r2, r1
 80036aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	e00f      	b.n	80036d6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	0151      	lsls	r1, r2, #5
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	440a      	add	r2, r1
 80036cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	68d9      	ldr	r1, [r3, #12]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	781a      	ldrb	r2, [r3, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	b298      	uxth	r0, r3
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	4603      	mov	r3, r0
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 fa2b 	bl	8003b46 <USB_WritePacket>
 80036f0:	e0ce      	b.n	8003890 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	0151      	lsls	r1, r2, #5
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	440a      	add	r2, r1
 8003708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800370c:	0cdb      	lsrs	r3, r3, #19
 800370e:	04db      	lsls	r3, r3, #19
 8003710:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	0151      	lsls	r1, r2, #5
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	440a      	add	r2, r1
 8003728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800372c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003730:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003734:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d126      	bne.n	800378c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003754:	69b9      	ldr	r1, [r7, #24]
 8003756:	0148      	lsls	r0, r1, #5
 8003758:	69f9      	ldr	r1, [r7, #28]
 800375a:	4401      	add	r1, r0
 800375c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003760:	4313      	orrs	r3, r2
 8003762:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	0151      	lsls	r1, r2, #5
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	440a      	add	r2, r1
 800377a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800377e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003782:	6113      	str	r3, [r2, #16]
 8003784:	e036      	b.n	80037f4 <USB_EPStartXfer+0x3dc>
 8003786:	bf00      	nop
 8003788:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4413      	add	r3, r2
 8003796:	1e5a      	subs	r2, r3, #1
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	8afb      	ldrh	r3, [r7, #22]
 80037b2:	04d9      	lsls	r1, r3, #19
 80037b4:	4b39      	ldr	r3, [pc, #228]	; (800389c <USB_EPStartXfer+0x484>)
 80037b6:	400b      	ands	r3, r1
 80037b8:	69b9      	ldr	r1, [r7, #24]
 80037ba:	0148      	lsls	r0, r1, #5
 80037bc:	69f9      	ldr	r1, [r7, #28]
 80037be:	4401      	add	r1, r0
 80037c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037c4:	4313      	orrs	r3, r2
 80037c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	8af9      	ldrh	r1, [r7, #22]
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e4:	69b9      	ldr	r1, [r7, #24]
 80037e6:	0148      	lsls	r0, r1, #5
 80037e8:	69f9      	ldr	r1, [r7, #28]
 80037ea:	4401      	add	r1, r0
 80037ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037f0:	4313      	orrs	r3, r2
 80037f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d10d      	bne.n	8003816 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	68d9      	ldr	r1, [r3, #12]
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003812:	460a      	mov	r2, r1
 8003814:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	78db      	ldrb	r3, [r3, #3]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d128      	bne.n	8003870 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382a:	2b00      	cmp	r3, #0
 800382c:	d110      	bne.n	8003850 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	0151      	lsls	r1, r2, #5
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	440a      	add	r2, r1
 8003844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003848:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e00f      	b.n	8003870 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	0151      	lsls	r1, r2, #5
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	440a      	add	r2, r1
 8003866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800386a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	0151      	lsls	r1, r2, #5
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	440a      	add	r2, r1
 8003886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800388a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800388e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	1ff80000 	.word	0x1ff80000

080038a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	4613      	mov	r3, r2
 80038ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	785b      	ldrb	r3, [r3, #1]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	f040 80cd 	bne.w	8003a5c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d132      	bne.n	8003930 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	0151      	lsls	r1, r2, #5
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	440a      	add	r2, r1
 80038e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	0151      	lsls	r1, r2, #5
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	440a      	add	r2, r1
 8003904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003908:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800390c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	0151      	lsls	r1, r2, #5
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	440a      	add	r2, r1
 8003924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003928:	0cdb      	lsrs	r3, r3, #19
 800392a:	04db      	lsls	r3, r3, #19
 800392c:	6113      	str	r3, [r2, #16]
 800392e:	e04e      	b.n	80039ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	0151      	lsls	r1, r2, #5
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	440a      	add	r2, r1
 8003946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394a:	0cdb      	lsrs	r3, r3, #19
 800394c:	04db      	lsls	r3, r3, #19
 800394e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	0151      	lsls	r1, r2, #5
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	440a      	add	r2, r1
 8003966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800396a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800396e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003972:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	d903      	bls.n	8003988 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	0151      	lsls	r1, r2, #5
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	440a      	add	r2, r1
 800399e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039be:	6939      	ldr	r1, [r7, #16]
 80039c0:	0148      	lsls	r0, r1, #5
 80039c2:	6979      	ldr	r1, [r7, #20]
 80039c4:	4401      	add	r1, r0
 80039c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80039ca:	4313      	orrs	r3, r2
 80039cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d11e      	bne.n	8003a12 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d009      	beq.n	80039f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e8:	461a      	mov	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	0151      	lsls	r1, r2, #5
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	440a      	add	r2, r1
 8003a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	e092      	b.n	8003b38 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	0151      	lsls	r1, r2, #5
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	440a      	add	r2, r1
 8003a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a30:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d07e      	beq.n	8003b38 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	6979      	ldr	r1, [r7, #20]
 8003a52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a56:	4313      	orrs	r3, r2
 8003a58:	634b      	str	r3, [r1, #52]	; 0x34
 8003a5a:	e06d      	b.n	8003b38 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	0151      	lsls	r1, r2, #5
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	440a      	add	r2, r1
 8003a72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a76:	0cdb      	lsrs	r3, r3, #19
 8003a78:	04db      	lsls	r3, r3, #19
 8003a7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	0151      	lsls	r1, r2, #5
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	440a      	add	r2, r1
 8003a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a9e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	0151      	lsls	r1, r2, #5
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	440a      	add	r2, r1
 8003ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ace:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae6:	6939      	ldr	r1, [r7, #16]
 8003ae8:	0148      	lsls	r0, r1, #5
 8003aea:	6979      	ldr	r1, [r7, #20]
 8003aec:	4401      	add	r1, r0
 8003aee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003af2:	4313      	orrs	r3, r2
 8003af4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d10d      	bne.n	8003b18 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d009      	beq.n	8003b18 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	68d9      	ldr	r1, [r3, #12]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b14:	460a      	mov	r2, r1
 8003b16:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	0151      	lsls	r1, r2, #5
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	440a      	add	r2, r1
 8003b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b089      	sub	sp, #36	; 0x24
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	4611      	mov	r1, r2
 8003b52:	461a      	mov	r2, r3
 8003b54:	460b      	mov	r3, r1
 8003b56:	71fb      	strb	r3, [r7, #7]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003b64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d11a      	bne.n	8003ba2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003b6c:	88bb      	ldrh	r3, [r7, #4]
 8003b6e:	3303      	adds	r3, #3
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	e00f      	b.n	8003b9a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	031a      	lsls	r2, r3, #12
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b86:	461a      	mov	r2, r3
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3304      	adds	r3, #4
 8003b92:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	3301      	adds	r3, #1
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d3eb      	bcc.n	8003b7a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3724      	adds	r7, #36	; 0x24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	; 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003bc6:	88fb      	ldrh	r3, [r7, #6]
 8003bc8:	3303      	adds	r3, #3
 8003bca:	089b      	lsrs	r3, r3, #2
 8003bcc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e00b      	b.n	8003bec <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	601a      	str	r2, [r3, #0]
    pDest++;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	3304      	adds	r3, #4
 8003be4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	3301      	adds	r3, #1
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3ef      	bcc.n	8003bd4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3724      	adds	r7, #36	; 0x24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	785b      	ldrb	r3, [r3, #1]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d12c      	bne.n	8003c78 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	db12      	blt.n	8003c56 <USB_EPSetStall+0x54>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00f      	beq.n	8003c56 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	0151      	lsls	r1, r2, #5
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	440a      	add	r2, r1
 8003c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c54:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	e02b      	b.n	8003cd0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	db12      	blt.n	8003cb0 <USB_EPSetStall+0xae>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00f      	beq.n	8003cb0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003caa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cae:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	0151      	lsls	r1, r2, #5
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b085      	sub	sp, #20
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	785b      	ldrb	r3, [r3, #1]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d128      	bne.n	8003d4c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	0151      	lsls	r1, r2, #5
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	440a      	add	r2, r1
 8003d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	78db      	ldrb	r3, [r3, #3]
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d003      	beq.n	8003d2a <USB_EPClearStall+0x4c>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	78db      	ldrb	r3, [r3, #3]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d138      	bne.n	8003d9c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	0151      	lsls	r1, r2, #5
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	440a      	add	r2, r1
 8003d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e027      	b.n	8003d9c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	0151      	lsls	r1, r2, #5
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	440a      	add	r2, r1
 8003d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	78db      	ldrb	r3, [r3, #3]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d003      	beq.n	8003d7c <USB_EPClearStall+0x9e>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	78db      	ldrb	r3, [r3, #3]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d10f      	bne.n	8003d9c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	0151      	lsls	r1, r2, #5
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	440a      	add	r2, r1
 8003d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003dcc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003dde:	68f9      	ldr	r1, [r7, #12]
 8003de0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003de4:	4313      	orrs	r3, r2
 8003de6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e10:	f023 0303 	bic.w	r3, r3, #3
 8003e14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e24:	f023 0302 	bic.w	r3, r3, #2
 8003e28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e66:	f043 0302 	orr.w	r3, r3, #2
 8003e6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b085      	sub	sp, #20
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003e92:	68fb      	ldr	r3, [r7, #12]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	0c1b      	lsrs	r3, r3, #16
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	b29b      	uxth	r3, r3
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	4013      	ands	r3, r2
 8003f34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f36:	68bb      	ldr	r3, [r7, #8]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f66:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
 8003f74:	01db      	lsls	r3, r3, #7
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f92:	68bb      	ldr	r3, [r7, #8]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0301 	and.w	r3, r3, #1
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003fda:	f023 0307 	bic.w	r3, r3, #7
 8003fde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	460b      	mov	r3, r1
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	333c      	adds	r3, #60	; 0x3c
 800401a:	3304      	adds	r3, #4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4a26      	ldr	r2, [pc, #152]	; (80040bc <USB_EP0_OutStart+0xb8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d90a      	bls.n	800403e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004038:	d101      	bne.n	800403e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	e037      	b.n	80040ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004044:	461a      	mov	r2, r3
 8004046:	2300      	movs	r3, #0
 8004048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800405c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800406c:	f043 0318 	orr.w	r3, r3, #24
 8004070:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004080:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004084:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004086:	7afb      	ldrb	r3, [r7, #11]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d10f      	bne.n	80040ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004092:	461a      	mov	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80040aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	4f54300a 	.word	0x4f54300a

080040c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a13      	ldr	r2, [pc, #76]	; (8004124 <USB_CoreReset+0x64>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e01b      	b.n	8004116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	daf2      	bge.n	80040cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f043 0201 	orr.w	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3301      	adds	r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4a09      	ldr	r2, [pc, #36]	; (8004124 <USB_CoreReset+0x64>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e006      	b.n	8004116 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b01      	cmp	r3, #1
 8004112:	d0f0      	beq.n	80040f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	00030d40 	.word	0x00030d40

08004128 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004134:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004138:	f002 f8fc 	bl	8006334 <USBD_static_malloc>
 800413c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800414c:	2302      	movs	r3, #2
 800414e:	e066      	b.n	800421e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	7c1b      	ldrb	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d119      	bne.n	8004194 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004164:	2202      	movs	r2, #2
 8004166:	2181      	movs	r1, #129	; 0x81
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f001 ffc0 	bl	80060ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004178:	2202      	movs	r2, #2
 800417a:	2101      	movs	r1, #1
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f001 ffb6 	bl	80060ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2210      	movs	r2, #16
 800418e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004192:	e016      	b.n	80041c2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004194:	2340      	movs	r3, #64	; 0x40
 8004196:	2202      	movs	r2, #2
 8004198:	2181      	movs	r1, #129	; 0x81
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f001 ffa7 	bl	80060ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80041a6:	2340      	movs	r3, #64	; 0x40
 80041a8:	2202      	movs	r2, #2
 80041aa:	2101      	movs	r1, #1
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f001 ff9e 	bl	80060ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2210      	movs	r2, #16
 80041be:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80041c2:	2308      	movs	r3, #8
 80041c4:	2203      	movs	r2, #3
 80041c6:	2182      	movs	r1, #130	; 0x82
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f001 ff90 	bl	80060ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	7c1b      	ldrb	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004202:	2101      	movs	r1, #1
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f002 f861 	bl	80062cc <USBD_LL_PrepareReceive>
 800420a:	e007      	b.n	800421c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004212:	2340      	movs	r3, #64	; 0x40
 8004214:	2101      	movs	r1, #1
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f002 f858 	bl	80062cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004232:	2181      	movs	r1, #129	; 0x81
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f001 ff80 	bl	800613a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004240:	2101      	movs	r1, #1
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f001 ff79 	bl	800613a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004250:	2182      	movs	r1, #130	; 0x82
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f001 ff71 	bl	800613a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00e      	beq.n	8004290 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004282:	4618      	mov	r0, r3
 8004284:	f002 f864 	bl	8006350 <USBD_static_free>
    pdev->pClassData = NULL;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0af      	b.n	8004424 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d03f      	beq.n	8004350 <USBD_CDC_Setup+0xb4>
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	f040 809f 	bne.w	8004414 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	88db      	ldrh	r3, [r3, #6]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d02e      	beq.n	800433c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	b25b      	sxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	da16      	bge.n	8004316 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80042f4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	88d2      	ldrh	r2, [r2, #6]
 80042fa:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	88db      	ldrh	r3, [r3, #6]
 8004300:	2b07      	cmp	r3, #7
 8004302:	bf28      	it	cs
 8004304:	2307      	movcs	r3, #7
 8004306:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	89fa      	ldrh	r2, [r7, #14]
 800430c:	4619      	mov	r1, r3
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f001 fae9 	bl	80058e6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004314:	e085      	b.n	8004422 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	785a      	ldrb	r2, [r3, #1]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	88db      	ldrh	r3, [r3, #6]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800432c:	6939      	ldr	r1, [r7, #16]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	88db      	ldrh	r3, [r3, #6]
 8004332:	461a      	mov	r2, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f001 fb02 	bl	800593e <USBD_CtlPrepareRx>
      break;
 800433a:	e072      	b.n	8004422 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	7850      	ldrb	r0, [r2, #1]
 8004348:	2200      	movs	r2, #0
 800434a:	6839      	ldr	r1, [r7, #0]
 800434c:	4798      	blx	r3
      break;
 800434e:	e068      	b.n	8004422 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	785b      	ldrb	r3, [r3, #1]
 8004354:	2b0b      	cmp	r3, #11
 8004356:	d852      	bhi.n	80043fe <USBD_CDC_Setup+0x162>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <USBD_CDC_Setup+0xc4>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004391 	.word	0x08004391
 8004364:	0800440d 	.word	0x0800440d
 8004368:	080043ff 	.word	0x080043ff
 800436c:	080043ff 	.word	0x080043ff
 8004370:	080043ff 	.word	0x080043ff
 8004374:	080043ff 	.word	0x080043ff
 8004378:	080043ff 	.word	0x080043ff
 800437c:	080043ff 	.word	0x080043ff
 8004380:	080043ff 	.word	0x080043ff
 8004384:	080043ff 	.word	0x080043ff
 8004388:	080043bb 	.word	0x080043bb
 800438c:	080043e5 	.word	0x080043e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b03      	cmp	r3, #3
 800439a:	d107      	bne.n	80043ac <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800439c:	f107 030a 	add.w	r3, r7, #10
 80043a0:	2202      	movs	r2, #2
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f001 fa9e 	bl	80058e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80043aa:	e032      	b.n	8004412 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80043ac:	6839      	ldr	r1, [r7, #0]
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f001 fa28 	bl	8005804 <USBD_CtlError>
            ret = USBD_FAIL;
 80043b4:	2303      	movs	r3, #3
 80043b6:	75fb      	strb	r3, [r7, #23]
          break;
 80043b8:	e02b      	b.n	8004412 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d107      	bne.n	80043d6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80043c6:	f107 030d 	add.w	r3, r7, #13
 80043ca:	2201      	movs	r2, #1
 80043cc:	4619      	mov	r1, r3
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f001 fa89 	bl	80058e6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80043d4:	e01d      	b.n	8004412 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80043d6:	6839      	ldr	r1, [r7, #0]
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f001 fa13 	bl	8005804 <USBD_CtlError>
            ret = USBD_FAIL;
 80043de:	2303      	movs	r3, #3
 80043e0:	75fb      	strb	r3, [r7, #23]
          break;
 80043e2:	e016      	b.n	8004412 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d00f      	beq.n	8004410 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80043f0:	6839      	ldr	r1, [r7, #0]
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f001 fa06 	bl	8005804 <USBD_CtlError>
            ret = USBD_FAIL;
 80043f8:	2303      	movs	r3, #3
 80043fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80043fc:	e008      	b.n	8004410 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80043fe:	6839      	ldr	r1, [r7, #0]
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f001 f9ff 	bl	8005804 <USBD_CtlError>
          ret = USBD_FAIL;
 8004406:	2303      	movs	r3, #3
 8004408:	75fb      	strb	r3, [r7, #23]
          break;
 800440a:	e002      	b.n	8004412 <USBD_CDC_Setup+0x176>
          break;
 800440c:	bf00      	nop
 800440e:	e008      	b.n	8004422 <USBD_CDC_Setup+0x186>
          break;
 8004410:	bf00      	nop
      }
      break;
 8004412:	e006      	b.n	8004422 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004414:	6839      	ldr	r1, [r7, #0]
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f001 f9f4 	bl	8005804 <USBD_CtlError>
      ret = USBD_FAIL;
 800441c:	2303      	movs	r3, #3
 800441e:	75fb      	strb	r3, [r7, #23]
      break;
 8004420:	bf00      	nop
  }

  return (uint8_t)ret;
 8004422:	7dfb      	ldrb	r3, [r7, #23]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800443e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800444a:	2303      	movs	r3, #3
 800444c:	e04f      	b.n	80044ee <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004454:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004456:	78fa      	ldrb	r2, [r7, #3]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	3318      	adds	r3, #24
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d029      	beq.n	80044c0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	3318      	adds	r3, #24
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	78f9      	ldrb	r1, [r7, #3]
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	460b      	mov	r3, r1
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	1a5b      	subs	r3, r3, r1
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4403      	add	r3, r0
 800448c:	3344      	adds	r3, #68	; 0x44
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	fbb2 f1f3 	udiv	r1, r2, r3
 8004494:	fb03 f301 	mul.w	r3, r3, r1
 8004498:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800449a:	2b00      	cmp	r3, #0
 800449c:	d110      	bne.n	80044c0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	3318      	adds	r3, #24
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80044b2:	78f9      	ldrb	r1, [r7, #3]
 80044b4:	2300      	movs	r3, #0
 80044b6:	2200      	movs	r2, #0
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f001 fee6 	bl	800628a <USBD_LL_Transmit>
 80044be:	e015      	b.n	80044ec <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00b      	beq.n	80044ec <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80044e8:	78fa      	ldrb	r2, [r7, #3]
 80044ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004508:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004514:	2303      	movs	r3, #3
 8004516:	e015      	b.n	8004544 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	4619      	mov	r1, r3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f001 fef6 	bl	800630e <USBD_LL_GetRxDataSize>
 8004522:	4602      	mov	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800453e:	4611      	mov	r1, r2
 8004540:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800455a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004562:	2303      	movs	r3, #3
 8004564:	e01b      	b.n	800459e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d015      	beq.n	800459c <USBD_CDC_EP0_RxReady+0x50>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004576:	2bff      	cmp	r3, #255	; 0xff
 8004578:	d010      	beq.n	800459c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004588:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004590:	b292      	uxth	r2, r2
 8004592:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	22ff      	movs	r2, #255	; 0xff
 8004598:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2243      	movs	r2, #67	; 0x43
 80045b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80045b6:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	20000094 	.word	0x20000094

080045c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2243      	movs	r2, #67	; 0x43
 80045d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80045d6:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	20000050 	.word	0x20000050

080045e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2243      	movs	r2, #67	; 0x43
 80045f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80045f6:	4b03      	ldr	r3, [pc, #12]	; (8004604 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	200000d8 	.word	0x200000d8

08004608 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	220a      	movs	r2, #10
 8004614:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004616:	4b03      	ldr	r3, [pc, #12]	; (8004624 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	2000000c 	.word	0x2000000c

08004628 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004638:	2303      	movs	r3, #3
 800463a:	e004      	b.n	8004646 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004652:	b480      	push	{r7}
 8004654:	b087      	sub	sp, #28
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004664:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800466c:	2303      	movs	r3, #3
 800466e:	e008      	b.n	8004682 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	371c      	adds	r7, #28
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800468e:	b480      	push	{r7}
 8004690:	b085      	sub	sp, #20
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800469e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e004      	b.n	80046b4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80046da:	2303      	movs	r3, #3
 80046dc:	e016      	b.n	800470c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	7c1b      	ldrb	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046f0:	2101      	movs	r1, #1
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f001 fdea 	bl	80062cc <USBD_LL_PrepareReceive>
 80046f8:	e007      	b.n	800470a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004700:	2340      	movs	r3, #64	; 0x40
 8004702:	2101      	movs	r1, #1
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f001 fde1 	bl	80062cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	4613      	mov	r3, r2
 8004720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004728:	2303      	movs	r3, #3
 800472a:	e01f      	b.n	800476c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	79fa      	ldrb	r2, [r7, #7]
 800475e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f001 fc5d 	bl	8006020 <USBD_LL_Init>
 8004766:	4603      	mov	r3, r0
 8004768:	75fb      	strb	r3, [r7, #23]

  return ret;
 800476a:	7dfb      	ldrb	r3, [r7, #23]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004788:	2303      	movs	r3, #3
 800478a:	e016      	b.n	80047ba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00b      	beq.n	80047b8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	f107 020e 	add.w	r2, r7, #14
 80047ac:	4610      	mov	r0, r2
 80047ae:	4798      	blx	r3
 80047b0:	4602      	mov	r2, r0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f001 fc74 	bl	80060b8 <USBD_LL_Start>
 80047d0:	4603      	mov	r3, r0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80047fc:	2303      	movs	r3, #3
 80047fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	4611      	mov	r1, r2
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	4798      	blx	r3
 800481a:	4603      	mov	r3, r0
 800481c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800481e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	4611      	mov	r1, r2
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	4798      	blx	r3
  }

  return USBD_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004868:	6839      	ldr	r1, [r7, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 ff90 	bl	8005790 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800487e:	461a      	mov	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800488c:	f003 031f 	and.w	r3, r3, #31
 8004890:	2b02      	cmp	r3, #2
 8004892:	d01a      	beq.n	80048ca <USBD_LL_SetupStage+0x72>
 8004894:	2b02      	cmp	r3, #2
 8004896:	d822      	bhi.n	80048de <USBD_LL_SetupStage+0x86>
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <USBD_LL_SetupStage+0x4a>
 800489c:	2b01      	cmp	r3, #1
 800489e:	d00a      	beq.n	80048b6 <USBD_LL_SetupStage+0x5e>
 80048a0:	e01d      	b.n	80048de <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa62 	bl	8004d74 <USBD_StdDevReq>
 80048b0:	4603      	mov	r3, r0
 80048b2:	73fb      	strb	r3, [r7, #15]
      break;
 80048b4:	e020      	b.n	80048f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048bc:	4619      	mov	r1, r3
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fac6 	bl	8004e50 <USBD_StdItfReq>
 80048c4:	4603      	mov	r3, r0
 80048c6:	73fb      	strb	r3, [r7, #15]
      break;
 80048c8:	e016      	b.n	80048f8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fb05 	bl	8004ee2 <USBD_StdEPReq>
 80048d8:	4603      	mov	r3, r0
 80048da:	73fb      	strb	r3, [r7, #15]
      break;
 80048dc:	e00c      	b.n	80048f8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80048e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f001 fc43 	bl	8006178 <USBD_LL_StallEP>
 80048f2:	4603      	mov	r3, r0
 80048f4:	73fb      	strb	r3, [r7, #15]
      break;
 80048f6:	bf00      	nop
  }

  return ret;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	460b      	mov	r3, r1
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004910:	7afb      	ldrb	r3, [r7, #11]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d138      	bne.n	8004988 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800491c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004924:	2b03      	cmp	r3, #3
 8004926:	d14a      	bne.n	80049be <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	429a      	cmp	r2, r3
 8004932:	d913      	bls.n	800495c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	1ad2      	subs	r2, r2, r3
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	4293      	cmp	r3, r2
 800494c:	bf28      	it	cs
 800494e:	4613      	movcs	r3, r2
 8004950:	461a      	mov	r2, r3
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f001 f80f 	bl	8005978 <USBD_CtlContinueRx>
 800495a:	e030      	b.n	80049be <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b03      	cmp	r3, #3
 8004966:	d10b      	bne.n	8004980 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f001 f80a 	bl	800599a <USBD_CtlSendStatus>
 8004986:	e01a      	b.n	80049be <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b03      	cmp	r3, #3
 8004992:	d114      	bne.n	80049be <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00e      	beq.n	80049be <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	7afa      	ldrb	r2, [r7, #11]
 80049aa:	4611      	mov	r1, r2
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	4798      	blx	r3
 80049b0:	4603      	mov	r3, r0
 80049b2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
 80049bc:	e000      	b.n	80049c0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	460b      	mov	r3, r1
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80049d6:	7afb      	ldrb	r3, [r7, #11]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d16b      	bne.n	8004ab4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3314      	adds	r3, #20
 80049e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d156      	bne.n	8004a9a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d914      	bls.n	8004a22 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	1ad2      	subs	r2, r2, r3
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 ff84 	bl	800591c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a14:	2300      	movs	r3, #0
 8004a16:	2200      	movs	r2, #0
 8004a18:	2100      	movs	r1, #0
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f001 fc56 	bl	80062cc <USBD_LL_PrepareReceive>
 8004a20:	e03b      	b.n	8004a9a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d11c      	bne.n	8004a68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d316      	bcc.n	8004a68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d20f      	bcs.n	8004a68 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 ff65 	bl	800591c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2100      	movs	r1, #0
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f001 fc33 	bl	80062cc <USBD_LL_PrepareReceive>
 8004a66:	e018      	b.n	8004a9a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d10b      	bne.n	8004a8c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a8c:	2180      	movs	r1, #128	; 0x80
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f001 fb72 	bl	8006178 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 ff93 	bl	80059c0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d122      	bne.n	8004aea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff fe98 	bl	80047da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004ab2:	e01a      	b.n	8004aea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d114      	bne.n	8004aea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00e      	beq.n	8004aea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	7afa      	ldrb	r2, [r7, #11]
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	4798      	blx	r3
 8004adc:	4603      	mov	r3, r0
 8004ade:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004ae6:	7dfb      	ldrb	r3, [r7, #23]
 8004ae8:	e000      	b.n	8004aec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e02f      	b.n	8004b88 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00f      	beq.n	8004b52 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6852      	ldr	r2, [r2, #4]
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b52:	2340      	movs	r3, #64	; 0x40
 8004b54:	2200      	movs	r2, #0
 8004b56:	2100      	movs	r1, #0
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f001 fac8 	bl	80060ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2240      	movs	r2, #64	; 0x40
 8004b6a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b6e:	2340      	movs	r3, #64	; 0x40
 8004b70:	2200      	movs	r2, #0
 8004b72:	2180      	movs	r1, #128	; 0x80
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f001 faba 	bl	80060ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2240      	movs	r2, #64	; 0x40
 8004b84:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2204      	movs	r2, #4
 8004bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d106      	bne.n	8004bfe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e012      	b.n	8004c48 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d10b      	bne.n	8004c46 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3708      	adds	r7, #8
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e014      	b.n	8004c94 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d10d      	bne.n	8004c92 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	78fa      	ldrb	r2, [r7, #3]
 8004c8c:	4611      	mov	r1, r2
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e014      	b.n	8004ce0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d10d      	bne.n	8004cde <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d007      	beq.n	8004cde <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	78fa      	ldrb	r2, [r7, #3]
 8004cd8:	4611      	mov	r1, r2
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b082      	sub	sp, #8
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d009      	beq.n	8004d2c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6852      	ldr	r2, [r2, #4]
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	4611      	mov	r1, r2
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	4798      	blx	r3
  }

  return USBD_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b087      	sub	sp, #28
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004d54:	8a3b      	ldrh	r3, [r7, #16]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	b21a      	sxth	r2, r3
 8004d5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	b21b      	sxth	r3, r3
 8004d62:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004d64:	89fb      	ldrh	r3, [r7, #14]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d005      	beq.n	8004d9a <USBD_StdDevReq+0x26>
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d853      	bhi.n	8004e3a <USBD_StdDevReq+0xc6>
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00b      	beq.n	8004dae <USBD_StdDevReq+0x3a>
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d14f      	bne.n	8004e3a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	6839      	ldr	r1, [r7, #0]
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
 8004da8:	4603      	mov	r3, r0
 8004daa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dac:	e04a      	b.n	8004e44 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	785b      	ldrb	r3, [r3, #1]
 8004db2:	2b09      	cmp	r3, #9
 8004db4:	d83b      	bhi.n	8004e2e <USBD_StdDevReq+0xba>
 8004db6:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <USBD_StdDevReq+0x48>)
 8004db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbc:	08004e11 	.word	0x08004e11
 8004dc0:	08004e25 	.word	0x08004e25
 8004dc4:	08004e2f 	.word	0x08004e2f
 8004dc8:	08004e1b 	.word	0x08004e1b
 8004dcc:	08004e2f 	.word	0x08004e2f
 8004dd0:	08004def 	.word	0x08004def
 8004dd4:	08004de5 	.word	0x08004de5
 8004dd8:	08004e2f 	.word	0x08004e2f
 8004ddc:	08004e07 	.word	0x08004e07
 8004de0:	08004df9 	.word	0x08004df9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f9de 	bl	80051a8 <USBD_GetDescriptor>
          break;
 8004dec:	e024      	b.n	8004e38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fb43 	bl	800547c <USBD_SetAddress>
          break;
 8004df6:	e01f      	b.n	8004e38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004df8:	6839      	ldr	r1, [r7, #0]
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fb82 	bl	8005504 <USBD_SetConfig>
 8004e00:	4603      	mov	r3, r0
 8004e02:	73fb      	strb	r3, [r7, #15]
          break;
 8004e04:	e018      	b.n	8004e38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004e06:	6839      	ldr	r1, [r7, #0]
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fc21 	bl	8005650 <USBD_GetConfig>
          break;
 8004e0e:	e013      	b.n	8004e38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004e10:	6839      	ldr	r1, [r7, #0]
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fc52 	bl	80056bc <USBD_GetStatus>
          break;
 8004e18:	e00e      	b.n	8004e38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004e1a:	6839      	ldr	r1, [r7, #0]
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fc81 	bl	8005724 <USBD_SetFeature>
          break;
 8004e22:	e009      	b.n	8004e38 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fc90 	bl	800574c <USBD_ClrFeature>
          break;
 8004e2c:	e004      	b.n	8004e38 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fce7 	bl	8005804 <USBD_CtlError>
          break;
 8004e36:	bf00      	nop
      }
      break;
 8004e38:	e004      	b.n	8004e44 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004e3a:	6839      	ldr	r1, [r7, #0]
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fce1 	bl	8005804 <USBD_CtlError>
      break;
 8004e42:	bf00      	nop
  }

  return ret;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop

08004e50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	d005      	beq.n	8004e76 <USBD_StdItfReq+0x26>
 8004e6a:	2b40      	cmp	r3, #64	; 0x40
 8004e6c:	d82f      	bhi.n	8004ece <USBD_StdItfReq+0x7e>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <USBD_StdItfReq+0x26>
 8004e72:	2b20      	cmp	r3, #32
 8004e74:	d12b      	bne.n	8004ece <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d81d      	bhi.n	8004ec0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	889b      	ldrh	r3, [r3, #4]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d813      	bhi.n	8004eb6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	6839      	ldr	r1, [r7, #0]
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	4798      	blx	r3
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	88db      	ldrh	r3, [r3, #6]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d110      	bne.n	8004eca <USBD_StdItfReq+0x7a>
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10d      	bne.n	8004eca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fd73 	bl	800599a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004eb4:	e009      	b.n	8004eca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004eb6:	6839      	ldr	r1, [r7, #0]
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fca3 	bl	8005804 <USBD_CtlError>
          break;
 8004ebe:	e004      	b.n	8004eca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fc9e 	bl	8005804 <USBD_CtlError>
          break;
 8004ec8:	e000      	b.n	8004ecc <USBD_StdItfReq+0x7c>
          break;
 8004eca:	bf00      	nop
      }
      break;
 8004ecc:	e004      	b.n	8004ed8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004ece:	6839      	ldr	r1, [r7, #0]
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fc97 	bl	8005804 <USBD_CtlError>
      break;
 8004ed6:	bf00      	nop
  }

  return ret;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	889b      	ldrh	r3, [r3, #4]
 8004ef4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004efe:	2b40      	cmp	r3, #64	; 0x40
 8004f00:	d007      	beq.n	8004f12 <USBD_StdEPReq+0x30>
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	f200 8145 	bhi.w	8005192 <USBD_StdEPReq+0x2b0>
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00c      	beq.n	8004f26 <USBD_StdEPReq+0x44>
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	f040 8140 	bne.w	8005192 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	6839      	ldr	r1, [r7, #0]
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	4798      	blx	r3
 8004f20:	4603      	mov	r3, r0
 8004f22:	73fb      	strb	r3, [r7, #15]
      break;
 8004f24:	e13a      	b.n	800519c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d007      	beq.n	8004f3e <USBD_StdEPReq+0x5c>
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	f300 8129 	bgt.w	8005186 <USBD_StdEPReq+0x2a4>
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d07f      	beq.n	8005038 <USBD_StdEPReq+0x156>
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d03c      	beq.n	8004fb6 <USBD_StdEPReq+0xd4>
 8004f3c:	e123      	b.n	8005186 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d002      	beq.n	8004f50 <USBD_StdEPReq+0x6e>
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d016      	beq.n	8004f7c <USBD_StdEPReq+0x9a>
 8004f4e:	e02c      	b.n	8004faa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f50:	7bbb      	ldrb	r3, [r7, #14]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00d      	beq.n	8004f72 <USBD_StdEPReq+0x90>
 8004f56:	7bbb      	ldrb	r3, [r7, #14]
 8004f58:	2b80      	cmp	r3, #128	; 0x80
 8004f5a:	d00a      	beq.n	8004f72 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f5c:	7bbb      	ldrb	r3, [r7, #14]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f001 f909 	bl	8006178 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f66:	2180      	movs	r1, #128	; 0x80
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f001 f905 	bl	8006178 <USBD_LL_StallEP>
 8004f6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004f70:	e020      	b.n	8004fb4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004f72:	6839      	ldr	r1, [r7, #0]
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fc45 	bl	8005804 <USBD_CtlError>
              break;
 8004f7a:	e01b      	b.n	8004fb4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	885b      	ldrh	r3, [r3, #2]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10e      	bne.n	8004fa2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004f84:	7bbb      	ldrb	r3, [r7, #14]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00b      	beq.n	8004fa2 <USBD_StdEPReq+0xc0>
 8004f8a:	7bbb      	ldrb	r3, [r7, #14]
 8004f8c:	2b80      	cmp	r3, #128	; 0x80
 8004f8e:	d008      	beq.n	8004fa2 <USBD_StdEPReq+0xc0>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	88db      	ldrh	r3, [r3, #6]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d104      	bne.n	8004fa2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f98:	7bbb      	ldrb	r3, [r7, #14]
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f001 f8eb 	bl	8006178 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fcf9 	bl	800599a <USBD_CtlSendStatus>

              break;
 8004fa8:	e004      	b.n	8004fb4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004faa:	6839      	ldr	r1, [r7, #0]
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fc29 	bl	8005804 <USBD_CtlError>
              break;
 8004fb2:	bf00      	nop
          }
          break;
 8004fb4:	e0ec      	b.n	8005190 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d002      	beq.n	8004fc8 <USBD_StdEPReq+0xe6>
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d016      	beq.n	8004ff4 <USBD_StdEPReq+0x112>
 8004fc6:	e030      	b.n	800502a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004fc8:	7bbb      	ldrb	r3, [r7, #14]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00d      	beq.n	8004fea <USBD_StdEPReq+0x108>
 8004fce:	7bbb      	ldrb	r3, [r7, #14]
 8004fd0:	2b80      	cmp	r3, #128	; 0x80
 8004fd2:	d00a      	beq.n	8004fea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004fd4:	7bbb      	ldrb	r3, [r7, #14]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 f8cd 	bl	8006178 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004fde:	2180      	movs	r1, #128	; 0x80
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f001 f8c9 	bl	8006178 <USBD_LL_StallEP>
 8004fe6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004fe8:	e025      	b.n	8005036 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fc09 	bl	8005804 <USBD_CtlError>
              break;
 8004ff2:	e020      	b.n	8005036 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	885b      	ldrh	r3, [r3, #2]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d11b      	bne.n	8005034 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004ffc:	7bbb      	ldrb	r3, [r7, #14]
 8004ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005002:	2b00      	cmp	r3, #0
 8005004:	d004      	beq.n	8005010 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005006:	7bbb      	ldrb	r3, [r7, #14]
 8005008:	4619      	mov	r1, r3
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f001 f8d3 	bl	80061b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fcc2 	bl	800599a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	4798      	blx	r3
 8005024:	4603      	mov	r3, r0
 8005026:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005028:	e004      	b.n	8005034 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fbe9 	bl	8005804 <USBD_CtlError>
              break;
 8005032:	e000      	b.n	8005036 <USBD_StdEPReq+0x154>
              break;
 8005034:	bf00      	nop
          }
          break;
 8005036:	e0ab      	b.n	8005190 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b02      	cmp	r3, #2
 8005042:	d002      	beq.n	800504a <USBD_StdEPReq+0x168>
 8005044:	2b03      	cmp	r3, #3
 8005046:	d032      	beq.n	80050ae <USBD_StdEPReq+0x1cc>
 8005048:	e097      	b.n	800517a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800504a:	7bbb      	ldrb	r3, [r7, #14]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <USBD_StdEPReq+0x17e>
 8005050:	7bbb      	ldrb	r3, [r7, #14]
 8005052:	2b80      	cmp	r3, #128	; 0x80
 8005054:	d004      	beq.n	8005060 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005056:	6839      	ldr	r1, [r7, #0]
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fbd3 	bl	8005804 <USBD_CtlError>
                break;
 800505e:	e091      	b.n	8005184 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005064:	2b00      	cmp	r3, #0
 8005066:	da0b      	bge.n	8005080 <USBD_StdEPReq+0x19e>
 8005068:	7bbb      	ldrb	r3, [r7, #14]
 800506a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	3310      	adds	r3, #16
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	4413      	add	r3, r2
 800507c:	3304      	adds	r3, #4
 800507e:	e00b      	b.n	8005098 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005080:	7bbb      	ldrb	r3, [r7, #14]
 8005082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005086:	4613      	mov	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4413      	add	r3, r2
 8005096:	3304      	adds	r3, #4
 8005098:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2202      	movs	r2, #2
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fc1d 	bl	80058e6 <USBD_CtlSendData>
              break;
 80050ac:	e06a      	b.n	8005184 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80050ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	da11      	bge.n	80050da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80050b6:	7bbb      	ldrb	r3, [r7, #14]
 80050b8:	f003 020f 	and.w	r2, r3, #15
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	3324      	adds	r3, #36	; 0x24
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d117      	bne.n	8005100 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fb96 	bl	8005804 <USBD_CtlError>
                  break;
 80050d8:	e054      	b.n	8005184 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80050da:	7bbb      	ldrb	r3, [r7, #14]
 80050dc:	f003 020f 	and.w	r2, r3, #15
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d104      	bne.n	8005100 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80050f6:	6839      	ldr	r1, [r7, #0]
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fb83 	bl	8005804 <USBD_CtlError>
                  break;
 80050fe:	e041      	b.n	8005184 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005104:	2b00      	cmp	r3, #0
 8005106:	da0b      	bge.n	8005120 <USBD_StdEPReq+0x23e>
 8005108:	7bbb      	ldrb	r3, [r7, #14]
 800510a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	3310      	adds	r3, #16
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	4413      	add	r3, r2
 800511c:	3304      	adds	r3, #4
 800511e:	e00b      	b.n	8005138 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005120:	7bbb      	ldrb	r3, [r7, #14]
 8005122:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	4413      	add	r3, r2
 8005136:	3304      	adds	r3, #4
 8005138:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800513a:	7bbb      	ldrb	r3, [r7, #14]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <USBD_StdEPReq+0x264>
 8005140:	7bbb      	ldrb	r3, [r7, #14]
 8005142:	2b80      	cmp	r3, #128	; 0x80
 8005144:	d103      	bne.n	800514e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e00e      	b.n	800516c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800514e:	7bbb      	ldrb	r3, [r7, #14]
 8005150:	4619      	mov	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f001 f84e 	bl	80061f4 <USBD_LL_IsStallEP>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2201      	movs	r2, #1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e002      	b.n	800516c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2202      	movs	r2, #2
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fbb7 	bl	80058e6 <USBD_CtlSendData>
              break;
 8005178:	e004      	b.n	8005184 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800517a:	6839      	ldr	r1, [r7, #0]
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fb41 	bl	8005804 <USBD_CtlError>
              break;
 8005182:	bf00      	nop
          }
          break;
 8005184:	e004      	b.n	8005190 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fb3b 	bl	8005804 <USBD_CtlError>
          break;
 800518e:	bf00      	nop
      }
      break;
 8005190:	e004      	b.n	800519c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005192:	6839      	ldr	r1, [r7, #0]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fb35 	bl	8005804 <USBD_CtlError>
      break;
 800519a:	bf00      	nop
  }

  return ret;
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	885b      	ldrh	r3, [r3, #2]
 80051c2:	0a1b      	lsrs	r3, r3, #8
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	2b06      	cmp	r3, #6
 80051ca:	f200 8128 	bhi.w	800541e <USBD_GetDescriptor+0x276>
 80051ce:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <USBD_GetDescriptor+0x2c>)
 80051d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d4:	080051f1 	.word	0x080051f1
 80051d8:	08005209 	.word	0x08005209
 80051dc:	08005249 	.word	0x08005249
 80051e0:	0800541f 	.word	0x0800541f
 80051e4:	0800541f 	.word	0x0800541f
 80051e8:	080053bf 	.word	0x080053bf
 80051ec:	080053eb 	.word	0x080053eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	7c12      	ldrb	r2, [r2, #16]
 80051fc:	f107 0108 	add.w	r1, r7, #8
 8005200:	4610      	mov	r0, r2
 8005202:	4798      	blx	r3
 8005204:	60f8      	str	r0, [r7, #12]
      break;
 8005206:	e112      	b.n	800542e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	7c1b      	ldrb	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10d      	bne.n	800522c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	f107 0208 	add.w	r2, r7, #8
 800521c:	4610      	mov	r0, r2
 800521e:	4798      	blx	r3
 8005220:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3301      	adds	r3, #1
 8005226:	2202      	movs	r2, #2
 8005228:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800522a:	e100      	b.n	800542e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	f107 0208 	add.w	r2, r7, #8
 8005238:	4610      	mov	r0, r2
 800523a:	4798      	blx	r3
 800523c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	2202      	movs	r2, #2
 8005244:	701a      	strb	r2, [r3, #0]
      break;
 8005246:	e0f2      	b.n	800542e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	885b      	ldrh	r3, [r3, #2]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b05      	cmp	r3, #5
 8005250:	f200 80ac 	bhi.w	80053ac <USBD_GetDescriptor+0x204>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <USBD_GetDescriptor+0xb4>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	08005275 	.word	0x08005275
 8005260:	080052a9 	.word	0x080052a9
 8005264:	080052dd 	.word	0x080052dd
 8005268:	08005311 	.word	0x08005311
 800526c:	08005345 	.word	0x08005345
 8005270:	08005379 	.word	0x08005379
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	7c12      	ldrb	r2, [r2, #16]
 800528c:	f107 0108 	add.w	r1, r7, #8
 8005290:	4610      	mov	r0, r2
 8005292:	4798      	blx	r3
 8005294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005296:	e091      	b.n	80053bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005298:	6839      	ldr	r1, [r7, #0]
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fab2 	bl	8005804 <USBD_CtlError>
            err++;
 80052a0:	7afb      	ldrb	r3, [r7, #11]
 80052a2:	3301      	adds	r3, #1
 80052a4:	72fb      	strb	r3, [r7, #11]
          break;
 80052a6:	e089      	b.n	80053bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	7c12      	ldrb	r2, [r2, #16]
 80052c0:	f107 0108 	add.w	r1, r7, #8
 80052c4:	4610      	mov	r0, r2
 80052c6:	4798      	blx	r3
 80052c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052ca:	e077      	b.n	80053bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052cc:	6839      	ldr	r1, [r7, #0]
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fa98 	bl	8005804 <USBD_CtlError>
            err++;
 80052d4:	7afb      	ldrb	r3, [r7, #11]
 80052d6:	3301      	adds	r3, #1
 80052d8:	72fb      	strb	r3, [r7, #11]
          break;
 80052da:	e06f      	b.n	80053bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00b      	beq.n	8005300 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	7c12      	ldrb	r2, [r2, #16]
 80052f4:	f107 0108 	add.w	r1, r7, #8
 80052f8:	4610      	mov	r0, r2
 80052fa:	4798      	blx	r3
 80052fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052fe:	e05d      	b.n	80053bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fa7e 	bl	8005804 <USBD_CtlError>
            err++;
 8005308:	7afb      	ldrb	r3, [r7, #11]
 800530a:	3301      	adds	r3, #1
 800530c:	72fb      	strb	r3, [r7, #11]
          break;
 800530e:	e055      	b.n	80053bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00b      	beq.n	8005334 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	7c12      	ldrb	r2, [r2, #16]
 8005328:	f107 0108 	add.w	r1, r7, #8
 800532c:	4610      	mov	r0, r2
 800532e:	4798      	blx	r3
 8005330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005332:	e043      	b.n	80053bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa64 	bl	8005804 <USBD_CtlError>
            err++;
 800533c:	7afb      	ldrb	r3, [r7, #11]
 800533e:	3301      	adds	r3, #1
 8005340:	72fb      	strb	r3, [r7, #11]
          break;
 8005342:	e03b      	b.n	80053bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00b      	beq.n	8005368 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	7c12      	ldrb	r2, [r2, #16]
 800535c:	f107 0108 	add.w	r1, r7, #8
 8005360:	4610      	mov	r0, r2
 8005362:	4798      	blx	r3
 8005364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005366:	e029      	b.n	80053bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa4a 	bl	8005804 <USBD_CtlError>
            err++;
 8005370:	7afb      	ldrb	r3, [r7, #11]
 8005372:	3301      	adds	r3, #1
 8005374:	72fb      	strb	r3, [r7, #11]
          break;
 8005376:	e021      	b.n	80053bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00b      	beq.n	800539c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	7c12      	ldrb	r2, [r2, #16]
 8005390:	f107 0108 	add.w	r1, r7, #8
 8005394:	4610      	mov	r0, r2
 8005396:	4798      	blx	r3
 8005398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800539a:	e00f      	b.n	80053bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fa30 	bl	8005804 <USBD_CtlError>
            err++;
 80053a4:	7afb      	ldrb	r3, [r7, #11]
 80053a6:	3301      	adds	r3, #1
 80053a8:	72fb      	strb	r3, [r7, #11]
          break;
 80053aa:	e007      	b.n	80053bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa28 	bl	8005804 <USBD_CtlError>
          err++;
 80053b4:	7afb      	ldrb	r3, [r7, #11]
 80053b6:	3301      	adds	r3, #1
 80053b8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80053ba:	bf00      	nop
      }
      break;
 80053bc:	e037      	b.n	800542e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	7c1b      	ldrb	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ce:	f107 0208 	add.w	r2, r7, #8
 80053d2:	4610      	mov	r0, r2
 80053d4:	4798      	blx	r3
 80053d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80053d8:	e029      	b.n	800542e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fa11 	bl	8005804 <USBD_CtlError>
        err++;
 80053e2:	7afb      	ldrb	r3, [r7, #11]
 80053e4:	3301      	adds	r3, #1
 80053e6:	72fb      	strb	r3, [r7, #11]
      break;
 80053e8:	e021      	b.n	800542e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	7c1b      	ldrb	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10d      	bne.n	800540e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	f107 0208 	add.w	r2, r7, #8
 80053fe:	4610      	mov	r0, r2
 8005400:	4798      	blx	r3
 8005402:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	2207      	movs	r2, #7
 800540a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800540c:	e00f      	b.n	800542e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f9f7 	bl	8005804 <USBD_CtlError>
        err++;
 8005416:	7afb      	ldrb	r3, [r7, #11]
 8005418:	3301      	adds	r3, #1
 800541a:	72fb      	strb	r3, [r7, #11]
      break;
 800541c:	e007      	b.n	800542e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f9ef 	bl	8005804 <USBD_CtlError>
      err++;
 8005426:	7afb      	ldrb	r3, [r7, #11]
 8005428:	3301      	adds	r3, #1
 800542a:	72fb      	strb	r3, [r7, #11]
      break;
 800542c:	bf00      	nop
  }

  if (err != 0U)
 800542e:	7afb      	ldrb	r3, [r7, #11]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d11e      	bne.n	8005472 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	88db      	ldrh	r3, [r3, #6]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d016      	beq.n	800546a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800543c:	893b      	ldrh	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	88da      	ldrh	r2, [r3, #6]
 8005446:	893b      	ldrh	r3, [r7, #8]
 8005448:	4293      	cmp	r3, r2
 800544a:	bf28      	it	cs
 800544c:	4613      	movcs	r3, r2
 800544e:	b29b      	uxth	r3, r3
 8005450:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005452:	893b      	ldrh	r3, [r7, #8]
 8005454:	461a      	mov	r2, r3
 8005456:	68f9      	ldr	r1, [r7, #12]
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fa44 	bl	80058e6 <USBD_CtlSendData>
 800545e:	e009      	b.n	8005474 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f9ce 	bl	8005804 <USBD_CtlError>
 8005468:	e004      	b.n	8005474 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa95 	bl	800599a <USBD_CtlSendStatus>
 8005470:	e000      	b.n	8005474 <USBD_GetDescriptor+0x2cc>
    return;
 8005472:	bf00      	nop
  }
}
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop

0800547c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	889b      	ldrh	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d131      	bne.n	80054f2 <USBD_SetAddress+0x76>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	88db      	ldrh	r3, [r3, #6]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d12d      	bne.n	80054f2 <USBD_SetAddress+0x76>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	885b      	ldrh	r3, [r3, #2]
 800549a:	2b7f      	cmp	r3, #127	; 0x7f
 800549c:	d829      	bhi.n	80054f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	885b      	ldrh	r3, [r3, #2]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d104      	bne.n	80054c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80054b6:	6839      	ldr	r1, [r7, #0]
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f9a3 	bl	8005804 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054be:	e01d      	b.n	80054fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	7bfa      	ldrb	r2, [r7, #15]
 80054c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 febd 	bl	800624c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fa61 	bl	800599a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2202      	movs	r2, #2
 80054e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054e6:	e009      	b.n	80054fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054f0:	e004      	b.n	80054fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80054f2:	6839      	ldr	r1, [r7, #0]
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f985 	bl	8005804 <USBD_CtlError>
  }
}
 80054fa:	bf00      	nop
 80054fc:	bf00      	nop
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	885b      	ldrh	r3, [r3, #2]
 8005516:	b2da      	uxtb	r2, r3
 8005518:	4b4c      	ldr	r3, [pc, #304]	; (800564c <USBD_SetConfig+0x148>)
 800551a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800551c:	4b4b      	ldr	r3, [pc, #300]	; (800564c <USBD_SetConfig+0x148>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d905      	bls.n	8005530 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f96c 	bl	8005804 <USBD_CtlError>
    return USBD_FAIL;
 800552c:	2303      	movs	r3, #3
 800552e:	e088      	b.n	8005642 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d002      	beq.n	8005542 <USBD_SetConfig+0x3e>
 800553c:	2b03      	cmp	r3, #3
 800553e:	d025      	beq.n	800558c <USBD_SetConfig+0x88>
 8005540:	e071      	b.n	8005626 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005542:	4b42      	ldr	r3, [pc, #264]	; (800564c <USBD_SetConfig+0x148>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01c      	beq.n	8005584 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800554a:	4b40      	ldr	r3, [pc, #256]	; (800564c <USBD_SetConfig+0x148>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005554:	4b3d      	ldr	r3, [pc, #244]	; (800564c <USBD_SetConfig+0x148>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	4619      	mov	r1, r3
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff f948 	bl	80047f0 <USBD_SetClassConfig>
 8005560:	4603      	mov	r3, r0
 8005562:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d004      	beq.n	8005574 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800556a:	6839      	ldr	r1, [r7, #0]
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f949 	bl	8005804 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005572:	e065      	b.n	8005640 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fa10 	bl	800599a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2203      	movs	r2, #3
 800557e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005582:	e05d      	b.n	8005640 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fa08 	bl	800599a <USBD_CtlSendStatus>
      break;
 800558a:	e059      	b.n	8005640 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800558c:	4b2f      	ldr	r3, [pc, #188]	; (800564c <USBD_SetConfig+0x148>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d112      	bne.n	80055ba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800559c:	4b2b      	ldr	r3, [pc, #172]	; (800564c <USBD_SetConfig+0x148>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80055a6:	4b29      	ldr	r3, [pc, #164]	; (800564c <USBD_SetConfig+0x148>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff f93b 	bl	8004828 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9f1 	bl	800599a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80055b8:	e042      	b.n	8005640 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80055ba:	4b24      	ldr	r3, [pc, #144]	; (800564c <USBD_SetConfig+0x148>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d02a      	beq.n	800561e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff f929 	bl	8004828 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80055d6:	4b1d      	ldr	r3, [pc, #116]	; (800564c <USBD_SetConfig+0x148>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <USBD_SetConfig+0x148>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	4619      	mov	r1, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7ff f902 	bl	80047f0 <USBD_SetClassConfig>
 80055ec:	4603      	mov	r3, r0
 80055ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00f      	beq.n	8005616 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f903 	bl	8005804 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	b2db      	uxtb	r3, r3
 8005604:	4619      	mov	r1, r3
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff f90e 	bl	8004828 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005614:	e014      	b.n	8005640 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f9bf 	bl	800599a <USBD_CtlSendStatus>
      break;
 800561c:	e010      	b.n	8005640 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f9bb 	bl	800599a <USBD_CtlSendStatus>
      break;
 8005624:	e00c      	b.n	8005640 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005626:	6839      	ldr	r1, [r7, #0]
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f8eb 	bl	8005804 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800562e:	4b07      	ldr	r3, [pc, #28]	; (800564c <USBD_SetConfig+0x148>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff f8f7 	bl	8004828 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800563a:	2303      	movs	r3, #3
 800563c:	73fb      	strb	r3, [r7, #15]
      break;
 800563e:	bf00      	nop
  }

  return ret;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	2000019c 	.word	0x2000019c

08005650 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	88db      	ldrh	r3, [r3, #6]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d004      	beq.n	800566c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f8cd 	bl	8005804 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800566a:	e023      	b.n	80056b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	dc02      	bgt.n	800567e <USBD_GetConfig+0x2e>
 8005678:	2b00      	cmp	r3, #0
 800567a:	dc03      	bgt.n	8005684 <USBD_GetConfig+0x34>
 800567c:	e015      	b.n	80056aa <USBD_GetConfig+0x5a>
 800567e:	2b03      	cmp	r3, #3
 8005680:	d00b      	beq.n	800569a <USBD_GetConfig+0x4a>
 8005682:	e012      	b.n	80056aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3308      	adds	r3, #8
 800568e:	2201      	movs	r2, #1
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f927 	bl	80058e6 <USBD_CtlSendData>
        break;
 8005698:	e00c      	b.n	80056b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3304      	adds	r3, #4
 800569e:	2201      	movs	r2, #1
 80056a0:	4619      	mov	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f91f 	bl	80058e6 <USBD_CtlSendData>
        break;
 80056a8:	e004      	b.n	80056b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f8a9 	bl	8005804 <USBD_CtlError>
        break;
 80056b2:	bf00      	nop
}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d81e      	bhi.n	8005712 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	88db      	ldrh	r3, [r3, #6]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d004      	beq.n	80056e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f890 	bl	8005804 <USBD_CtlError>
        break;
 80056e4:	e01a      	b.n	800571c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f043 0202 	orr.w	r2, r3, #2
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	330c      	adds	r3, #12
 8005706:	2202      	movs	r2, #2
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f8eb 	bl	80058e6 <USBD_CtlSendData>
      break;
 8005710:	e004      	b.n	800571c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f875 	bl	8005804 <USBD_CtlError>
      break;
 800571a:	bf00      	nop
  }
}
 800571c:	bf00      	nop
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	885b      	ldrh	r3, [r3, #2]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d106      	bne.n	8005744 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f92b 	bl	800599a <USBD_CtlSendStatus>
  }
}
 8005744:	bf00      	nop
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800575c:	b2db      	uxtb	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	2b02      	cmp	r3, #2
 8005762:	d80b      	bhi.n	800577c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	885b      	ldrh	r3, [r3, #2]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d10c      	bne.n	8005786 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f910 	bl	800599a <USBD_CtlSendStatus>
      }
      break;
 800577a:	e004      	b.n	8005786 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f840 	bl	8005804 <USBD_CtlError>
      break;
 8005784:	e000      	b.n	8005788 <USBD_ClrFeature+0x3c>
      break;
 8005786:	bf00      	nop
  }
}
 8005788:	bf00      	nop
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	781a      	ldrb	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3301      	adds	r3, #1
 80057aa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	781a      	ldrb	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3301      	adds	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff fabb 	bl	8004d36 <SWAPBYTE>
 80057c0:	4603      	mov	r3, r0
 80057c2:	461a      	mov	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3301      	adds	r3, #1
 80057d2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff faae 	bl	8004d36 <SWAPBYTE>
 80057da:	4603      	mov	r3, r0
 80057dc:	461a      	mov	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3301      	adds	r3, #1
 80057ec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff faa1 	bl	8004d36 <SWAPBYTE>
 80057f4:	4603      	mov	r3, r0
 80057f6:	461a      	mov	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	80da      	strh	r2, [r3, #6]
}
 80057fc:	bf00      	nop
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800580e:	2180      	movs	r1, #128	; 0x80
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fcb1 	bl	8006178 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005816:	2100      	movs	r1, #0
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fcad 	bl	8006178 <USBD_LL_StallEP>
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d036      	beq.n	80058aa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005840:	6938      	ldr	r0, [r7, #16]
 8005842:	f000 f836 	bl	80058b2 <USBD_GetLen>
 8005846:	4603      	mov	r3, r0
 8005848:	3301      	adds	r3, #1
 800584a:	b29b      	uxth	r3, r3
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005854:	7dfb      	ldrb	r3, [r7, #23]
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	4413      	add	r3, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	7812      	ldrb	r2, [r2, #0]
 800585e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	3301      	adds	r3, #1
 8005864:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	4413      	add	r3, r2
 800586c:	2203      	movs	r2, #3
 800586e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005870:	7dfb      	ldrb	r3, [r7, #23]
 8005872:	3301      	adds	r3, #1
 8005874:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005876:	e013      	b.n	80058a0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005878:	7dfb      	ldrb	r3, [r7, #23]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	4413      	add	r3, r2
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	7812      	ldrb	r2, [r2, #0]
 8005882:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	3301      	adds	r3, #1
 8005888:	613b      	str	r3, [r7, #16]
    idx++;
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	3301      	adds	r3, #1
 800588e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005890:	7dfb      	ldrb	r3, [r7, #23]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	4413      	add	r3, r2
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
    idx++;
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	3301      	adds	r3, #1
 800589e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e7      	bne.n	8005878 <USBD_GetString+0x52>
 80058a8:	e000      	b.n	80058ac <USBD_GetString+0x86>
    return;
 80058aa:	bf00      	nop
  }
}
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80058c2:	e005      	b.n	80058d0 <USBD_GetLen+0x1e>
  {
    len++;
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	3301      	adds	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	3301      	adds	r3, #1
 80058ce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f5      	bne.n	80058c4 <USBD_GetLen+0x12>
  }

  return len;
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	2100      	movs	r1, #0
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 fcbc 	bl	800628a <USBD_LL_Transmit>

  return USBD_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	2100      	movs	r1, #0
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fcab 	bl	800628a <USBD_LL_Transmit>

  return USBD_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2203      	movs	r2, #3
 800594e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	2100      	movs	r1, #0
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 fcaf 	bl	80062cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	2100      	movs	r1, #0
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 fc9e 	bl	80062cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2204      	movs	r2, #4
 80059a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80059aa:	2300      	movs	r3, #0
 80059ac:	2200      	movs	r2, #0
 80059ae:	2100      	movs	r1, #0
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fc6a 	bl	800628a <USBD_LL_Transmit>

  return USBD_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2205      	movs	r2, #5
 80059cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059d0:	2300      	movs	r3, #0
 80059d2:	2200      	movs	r2, #0
 80059d4:	2100      	movs	r1, #0
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fc78 	bl	80062cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80059ec:	2200      	movs	r2, #0
 80059ee:	4912      	ldr	r1, [pc, #72]	; (8005a38 <MX_USB_DEVICE_Init+0x50>)
 80059f0:	4812      	ldr	r0, [pc, #72]	; (8005a3c <MX_USB_DEVICE_Init+0x54>)
 80059f2:	f7fe fe8f 	bl	8004714 <USBD_Init>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80059fc:	f7fa feae 	bl	800075c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005a00:	490f      	ldr	r1, [pc, #60]	; (8005a40 <MX_USB_DEVICE_Init+0x58>)
 8005a02:	480e      	ldr	r0, [pc, #56]	; (8005a3c <MX_USB_DEVICE_Init+0x54>)
 8005a04:	f7fe feb6 	bl	8004774 <USBD_RegisterClass>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005a0e:	f7fa fea5 	bl	800075c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005a12:	490c      	ldr	r1, [pc, #48]	; (8005a44 <MX_USB_DEVICE_Init+0x5c>)
 8005a14:	4809      	ldr	r0, [pc, #36]	; (8005a3c <MX_USB_DEVICE_Init+0x54>)
 8005a16:	f7fe fe07 	bl	8004628 <USBD_CDC_RegisterInterface>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005a20:	f7fa fe9c 	bl	800075c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005a24:	4805      	ldr	r0, [pc, #20]	; (8005a3c <MX_USB_DEVICE_Init+0x54>)
 8005a26:	f7fe fecc 	bl	80047c2 <USBD_Start>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005a30:	f7fa fe94 	bl	800075c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005a34:	bf00      	nop
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20000130 	.word	0x20000130
 8005a3c:	200003c8 	.word	0x200003c8
 8005a40:	20000018 	.word	0x20000018
 8005a44:	2000011c 	.word	0x2000011c

08005a48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4905      	ldr	r1, [pc, #20]	; (8005a64 <CDC_Init_FS+0x1c>)
 8005a50:	4805      	ldr	r0, [pc, #20]	; (8005a68 <CDC_Init_FS+0x20>)
 8005a52:	f7fe fdfe 	bl	8004652 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005a56:	4905      	ldr	r1, [pc, #20]	; (8005a6c <CDC_Init_FS+0x24>)
 8005a58:	4803      	ldr	r0, [pc, #12]	; (8005a68 <CDC_Init_FS+0x20>)
 8005a5a:	f7fe fe18 	bl	800468e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005a5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20000e98 	.word	0x20000e98
 8005a68:	200003c8 	.word	0x200003c8
 8005a6c:	20000698 	.word	0x20000698

08005a70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005a74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	4603      	mov	r3, r0
 8005a88:	6039      	str	r1, [r7, #0]
 8005a8a:	71fb      	strb	r3, [r7, #7]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005a90:	79fb      	ldrb	r3, [r7, #7]
 8005a92:	2b23      	cmp	r3, #35	; 0x23
 8005a94:	d84a      	bhi.n	8005b2c <CDC_Control_FS+0xac>
 8005a96:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <CDC_Control_FS+0x1c>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005b2d 	.word	0x08005b2d
 8005aa0:	08005b2d 	.word	0x08005b2d
 8005aa4:	08005b2d 	.word	0x08005b2d
 8005aa8:	08005b2d 	.word	0x08005b2d
 8005aac:	08005b2d 	.word	0x08005b2d
 8005ab0:	08005b2d 	.word	0x08005b2d
 8005ab4:	08005b2d 	.word	0x08005b2d
 8005ab8:	08005b2d 	.word	0x08005b2d
 8005abc:	08005b2d 	.word	0x08005b2d
 8005ac0:	08005b2d 	.word	0x08005b2d
 8005ac4:	08005b2d 	.word	0x08005b2d
 8005ac8:	08005b2d 	.word	0x08005b2d
 8005acc:	08005b2d 	.word	0x08005b2d
 8005ad0:	08005b2d 	.word	0x08005b2d
 8005ad4:	08005b2d 	.word	0x08005b2d
 8005ad8:	08005b2d 	.word	0x08005b2d
 8005adc:	08005b2d 	.word	0x08005b2d
 8005ae0:	08005b2d 	.word	0x08005b2d
 8005ae4:	08005b2d 	.word	0x08005b2d
 8005ae8:	08005b2d 	.word	0x08005b2d
 8005aec:	08005b2d 	.word	0x08005b2d
 8005af0:	08005b2d 	.word	0x08005b2d
 8005af4:	08005b2d 	.word	0x08005b2d
 8005af8:	08005b2d 	.word	0x08005b2d
 8005afc:	08005b2d 	.word	0x08005b2d
 8005b00:	08005b2d 	.word	0x08005b2d
 8005b04:	08005b2d 	.word	0x08005b2d
 8005b08:	08005b2d 	.word	0x08005b2d
 8005b0c:	08005b2d 	.word	0x08005b2d
 8005b10:	08005b2d 	.word	0x08005b2d
 8005b14:	08005b2d 	.word	0x08005b2d
 8005b18:	08005b2d 	.word	0x08005b2d
 8005b1c:	08005b2d 	.word	0x08005b2d
 8005b20:	08005b2d 	.word	0x08005b2d
 8005b24:	08005b2d 	.word	0x08005b2d
 8005b28:	08005b2d 	.word	0x08005b2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005b2c:	bf00      	nop
  }

  return (USBD_OK);
 8005b2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	4805      	ldr	r0, [pc, #20]	; (8005b60 <CDC_Receive_FS+0x24>)
 8005b4a:	f7fe fda0 	bl	800468e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005b4e:	4804      	ldr	r0, [pc, #16]	; (8005b60 <CDC_Receive_FS+0x24>)
 8005b50:	f7fe fdb6 	bl	80046c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005b54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	200003c8 	.word	0x200003c8

08005b64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005b76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	6039      	str	r1, [r7, #0]
 8005b92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	2212      	movs	r2, #18
 8005b98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005b9a:	4b03      	ldr	r3, [pc, #12]	; (8005ba8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	2000014c 	.word	0x2000014c

08005bac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	6039      	str	r1, [r7, #0]
 8005bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2204      	movs	r2, #4
 8005bbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005bbe:	4b03      	ldr	r3, [pc, #12]	; (8005bcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	20000160 	.word	0x20000160

08005bd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	6039      	str	r1, [r7, #0]
 8005bda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005bdc:	79fb      	ldrb	r3, [r7, #7]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d105      	bne.n	8005bee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	4907      	ldr	r1, [pc, #28]	; (8005c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8005be6:	4808      	ldr	r0, [pc, #32]	; (8005c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8005be8:	f7ff fe1d 	bl	8005826 <USBD_GetString>
 8005bec:	e004      	b.n	8005bf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	4904      	ldr	r1, [pc, #16]	; (8005c04 <USBD_FS_ProductStrDescriptor+0x34>)
 8005bf2:	4805      	ldr	r0, [pc, #20]	; (8005c08 <USBD_FS_ProductStrDescriptor+0x38>)
 8005bf4:	f7ff fe17 	bl	8005826 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005bf8:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20001698 	.word	0x20001698
 8005c08:	0800642c 	.word	0x0800642c

08005c0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	6039      	str	r1, [r7, #0]
 8005c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	4904      	ldr	r1, [pc, #16]	; (8005c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005c1c:	4804      	ldr	r0, [pc, #16]	; (8005c30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005c1e:	f7ff fe02 	bl	8005826 <USBD_GetString>
  return USBD_StrDesc;
 8005c22:	4b02      	ldr	r3, [pc, #8]	; (8005c2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20001698 	.word	0x20001698
 8005c30:	08006444 	.word	0x08006444

08005c34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	6039      	str	r1, [r7, #0]
 8005c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	221a      	movs	r2, #26
 8005c44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005c46:	f000 f843 	bl	8005cd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005c4a:	4b02      	ldr	r3, [pc, #8]	; (8005c54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20000164 	.word	0x20000164

08005c58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	6039      	str	r1, [r7, #0]
 8005c62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005c64:	79fb      	ldrb	r3, [r7, #7]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	4907      	ldr	r1, [pc, #28]	; (8005c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005c6e:	4808      	ldr	r0, [pc, #32]	; (8005c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005c70:	f7ff fdd9 	bl	8005826 <USBD_GetString>
 8005c74:	e004      	b.n	8005c80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	4904      	ldr	r1, [pc, #16]	; (8005c8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8005c7a:	4805      	ldr	r0, [pc, #20]	; (8005c90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005c7c:	f7ff fdd3 	bl	8005826 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c80:	4b02      	ldr	r3, [pc, #8]	; (8005c8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20001698 	.word	0x20001698
 8005c90:	08006458 	.word	0x08006458

08005c94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	6039      	str	r1, [r7, #0]
 8005c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d105      	bne.n	8005cb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	4907      	ldr	r1, [pc, #28]	; (8005cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005caa:	4808      	ldr	r0, [pc, #32]	; (8005ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005cac:	f7ff fdbb 	bl	8005826 <USBD_GetString>
 8005cb0:	e004      	b.n	8005cbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	4904      	ldr	r1, [pc, #16]	; (8005cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005cb6:	4805      	ldr	r0, [pc, #20]	; (8005ccc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005cb8:	f7ff fdb5 	bl	8005826 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005cbc:	4b02      	ldr	r3, [pc, #8]	; (8005cc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20001698 	.word	0x20001698
 8005ccc:	08006464 	.word	0x08006464

08005cd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005cd6:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <Get_SerialNum+0x44>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005cdc:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <Get_SerialNum+0x48>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <Get_SerialNum+0x4c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4413      	add	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005cf6:	2208      	movs	r2, #8
 8005cf8:	4909      	ldr	r1, [pc, #36]	; (8005d20 <Get_SerialNum+0x50>)
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f814 	bl	8005d28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005d00:	2204      	movs	r2, #4
 8005d02:	4908      	ldr	r1, [pc, #32]	; (8005d24 <Get_SerialNum+0x54>)
 8005d04:	68b8      	ldr	r0, [r7, #8]
 8005d06:	f000 f80f 	bl	8005d28 <IntToUnicode>
  }
}
 8005d0a:	bf00      	nop
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	1fff7a10 	.word	0x1fff7a10
 8005d18:	1fff7a14 	.word	0x1fff7a14
 8005d1c:	1fff7a18 	.word	0x1fff7a18
 8005d20:	20000166 	.word	0x20000166
 8005d24:	20000176 	.word	0x20000176

08005d28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	4613      	mov	r3, r2
 8005d34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	75fb      	strb	r3, [r7, #23]
 8005d3e:	e027      	b.n	8005d90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	0f1b      	lsrs	r3, r3, #28
 8005d44:	2b09      	cmp	r3, #9
 8005d46:	d80b      	bhi.n	8005d60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	0f1b      	lsrs	r3, r3, #28
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	4619      	mov	r1, r3
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	440b      	add	r3, r1
 8005d58:	3230      	adds	r2, #48	; 0x30
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e00a      	b.n	8005d76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	0f1b      	lsrs	r3, r3, #28
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	440b      	add	r3, r1
 8005d70:	3237      	adds	r2, #55	; 0x37
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	3301      	adds	r3, #1
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	4413      	add	r3, r2
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	75fb      	strb	r3, [r7, #23]
 8005d90:	7dfa      	ldrb	r2, [r7, #23]
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d3d3      	bcc.n	8005d40 <IntToUnicode+0x18>
  }
}
 8005d98:	bf00      	nop
 8005d9a:	bf00      	nop
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	; 0x28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005db0:	f107 0314 	add.w	r3, r7, #20
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	605a      	str	r2, [r3, #4]
 8005dba:	609a      	str	r2, [r3, #8]
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dc8:	d13a      	bne.n	8005e40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dca:	2300      	movs	r3, #0
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	4b1e      	ldr	r3, [pc, #120]	; (8005e48 <HAL_PCD_MspInit+0xa0>)
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd2:	4a1d      	ldr	r2, [pc, #116]	; (8005e48 <HAL_PCD_MspInit+0xa0>)
 8005dd4:	f043 0301 	orr.w	r3, r3, #1
 8005dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8005dda:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <HAL_PCD_MspInit+0xa0>)
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005de6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dec:	2302      	movs	r3, #2
 8005dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005df4:	2303      	movs	r3, #3
 8005df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005df8:	230a      	movs	r3, #10
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dfc:	f107 0314 	add.w	r3, r7, #20
 8005e00:	4619      	mov	r1, r3
 8005e02:	4812      	ldr	r0, [pc, #72]	; (8005e4c <HAL_PCD_MspInit+0xa4>)
 8005e04:	f7fa fef6 	bl	8000bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005e08:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <HAL_PCD_MspInit+0xa0>)
 8005e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0c:	4a0e      	ldr	r2, [pc, #56]	; (8005e48 <HAL_PCD_MspInit+0xa0>)
 8005e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e12:	6353      	str	r3, [r2, #52]	; 0x34
 8005e14:	2300      	movs	r3, #0
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <HAL_PCD_MspInit+0xa0>)
 8005e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1c:	4a0a      	ldr	r2, [pc, #40]	; (8005e48 <HAL_PCD_MspInit+0xa0>)
 8005e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e22:	6453      	str	r3, [r2, #68]	; 0x44
 8005e24:	4b08      	ldr	r3, [pc, #32]	; (8005e48 <HAL_PCD_MspInit+0xa0>)
 8005e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005e30:	2200      	movs	r2, #0
 8005e32:	2100      	movs	r1, #0
 8005e34:	2043      	movs	r0, #67	; 0x43
 8005e36:	f7fa fea6 	bl	8000b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005e3a:	2043      	movs	r0, #67	; 0x43
 8005e3c:	f7fa febf 	bl	8000bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005e40:	bf00      	nop
 8005e42:	3728      	adds	r7, #40	; 0x28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	40020000 	.word	0x40020000

08005e50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e64:	4619      	mov	r1, r3
 8005e66:	4610      	mov	r0, r2
 8005e68:	f7fe fcf6 	bl	8004858 <USBD_LL_SetupStage>
}
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005e86:	78fa      	ldrb	r2, [r7, #3]
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	78fb      	ldrb	r3, [r7, #3]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	f7fe fd30 	bl	8004902 <USBD_LL_DataOutStage>
}
 8005ea2:	bf00      	nop
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005ebc:	78fa      	ldrb	r2, [r7, #3]
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	1a9b      	subs	r3, r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	3348      	adds	r3, #72	; 0x48
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	f7fe fd79 	bl	80049c8 <USBD_LL_DataInStage>
}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe fe8d 	bl	8004c0c <USBD_LL_SOF>
}
 8005ef2:	bf00      	nop
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005f02:	2301      	movs	r3, #1
 8005f04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d001      	beq.n	8005f12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005f0e:	f7fa fc25 	bl	800075c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f18:	7bfa      	ldrb	r2, [r7, #15]
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fe fe37 	bl	8004b90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fe fde3 	bl	8004af4 <USBD_LL_Reset>
}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fe fe32 	bl	8004bb0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6812      	ldr	r2, [r2, #0]
 8005f5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f6c:	4b04      	ldr	r3, [pc, #16]	; (8005f80 <HAL_PCD_SuspendCallback+0x48>)
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	4a03      	ldr	r2, [pc, #12]	; (8005f80 <HAL_PCD_SuspendCallback+0x48>)
 8005f72:	f043 0306 	orr.w	r3, r3, #6
 8005f76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005f78:	bf00      	nop
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	e000ed00 	.word	0xe000ed00

08005f84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fe fe22 	bl	8004bdc <USBD_LL_Resume>
}
 8005f98:	bf00      	nop
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe fe70 	bl	8004c9c <USBD_LL_IsoOUTIncomplete>
}
 8005fbc:	bf00      	nop
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fd6:	78fa      	ldrb	r2, [r7, #3]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe fe38 	bl	8004c50 <USBD_LL_IsoINIncomplete>
}
 8005fe0:	bf00      	nop
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fe fe76 	bl	8004ce8 <USBD_LL_DevConnected>
}
 8005ffc:	bf00      	nop
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006012:	4618      	mov	r0, r3
 8006014:	f7fe fe73 	bl	8004cfe <USBD_LL_DevDisconnected>
}
 8006018:	bf00      	nop
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d13c      	bne.n	80060aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006030:	4a20      	ldr	r2, [pc, #128]	; (80060b4 <USBD_LL_Init+0x94>)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a1e      	ldr	r2, [pc, #120]	; (80060b4 <USBD_LL_Init+0x94>)
 800603c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006040:	4b1c      	ldr	r3, [pc, #112]	; (80060b4 <USBD_LL_Init+0x94>)
 8006042:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006046:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006048:	4b1a      	ldr	r3, [pc, #104]	; (80060b4 <USBD_LL_Init+0x94>)
 800604a:	2204      	movs	r2, #4
 800604c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800604e:	4b19      	ldr	r3, [pc, #100]	; (80060b4 <USBD_LL_Init+0x94>)
 8006050:	2202      	movs	r2, #2
 8006052:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006054:	4b17      	ldr	r3, [pc, #92]	; (80060b4 <USBD_LL_Init+0x94>)
 8006056:	2200      	movs	r2, #0
 8006058:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800605a:	4b16      	ldr	r3, [pc, #88]	; (80060b4 <USBD_LL_Init+0x94>)
 800605c:	2202      	movs	r2, #2
 800605e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006060:	4b14      	ldr	r3, [pc, #80]	; (80060b4 <USBD_LL_Init+0x94>)
 8006062:	2201      	movs	r2, #1
 8006064:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006066:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <USBD_LL_Init+0x94>)
 8006068:	2200      	movs	r2, #0
 800606a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800606c:	4b11      	ldr	r3, [pc, #68]	; (80060b4 <USBD_LL_Init+0x94>)
 800606e:	2200      	movs	r2, #0
 8006070:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006072:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <USBD_LL_Init+0x94>)
 8006074:	2200      	movs	r2, #0
 8006076:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006078:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <USBD_LL_Init+0x94>)
 800607a:	2200      	movs	r2, #0
 800607c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800607e:	480d      	ldr	r0, [pc, #52]	; (80060b4 <USBD_LL_Init+0x94>)
 8006080:	f7fa ff88 	bl	8000f94 <HAL_PCD_Init>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800608a:	f7fa fb67 	bl	800075c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800608e:	2180      	movs	r1, #128	; 0x80
 8006090:	4808      	ldr	r0, [pc, #32]	; (80060b4 <USBD_LL_Init+0x94>)
 8006092:	f7fc f8e6 	bl	8002262 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006096:	2240      	movs	r2, #64	; 0x40
 8006098:	2100      	movs	r1, #0
 800609a:	4806      	ldr	r0, [pc, #24]	; (80060b4 <USBD_LL_Init+0x94>)
 800609c:	f7fc f89a 	bl	80021d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80060a0:	2280      	movs	r2, #128	; 0x80
 80060a2:	2101      	movs	r1, #1
 80060a4:	4803      	ldr	r0, [pc, #12]	; (80060b4 <USBD_LL_Init+0x94>)
 80060a6:	f7fc f895 	bl	80021d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20001898 	.word	0x20001898

080060b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fb f87d 	bl	80011ce <HAL_PCD_Start>
 80060d4:	4603      	mov	r3, r0
 80060d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 f942 	bl	8006364 <USBD_Get_USB_Status>
 80060e0:	4603      	mov	r3, r0
 80060e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80060e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b084      	sub	sp, #16
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	4608      	mov	r0, r1
 80060f8:	4611      	mov	r1, r2
 80060fa:	461a      	mov	r2, r3
 80060fc:	4603      	mov	r3, r0
 80060fe:	70fb      	strb	r3, [r7, #3]
 8006100:	460b      	mov	r3, r1
 8006102:	70bb      	strb	r3, [r7, #2]
 8006104:	4613      	mov	r3, r2
 8006106:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800610c:	2300      	movs	r3, #0
 800610e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006116:	78bb      	ldrb	r3, [r7, #2]
 8006118:	883a      	ldrh	r2, [r7, #0]
 800611a:	78f9      	ldrb	r1, [r7, #3]
 800611c:	f7fb fc61 	bl	80019e2 <HAL_PCD_EP_Open>
 8006120:	4603      	mov	r3, r0
 8006122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	4618      	mov	r0, r3
 8006128:	f000 f91c 	bl	8006364 <USBD_Get_USB_Status>
 800612c:	4603      	mov	r3, r0
 800612e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006130:	7bbb      	ldrb	r3, [r7, #14]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006154:	78fa      	ldrb	r2, [r7, #3]
 8006156:	4611      	mov	r1, r2
 8006158:	4618      	mov	r0, r3
 800615a:	f7fb fcaa 	bl	8001ab2 <HAL_PCD_EP_Close>
 800615e:	4603      	mov	r3, r0
 8006160:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	4618      	mov	r0, r3
 8006166:	f000 f8fd 	bl	8006364 <USBD_Get_USB_Status>
 800616a:	4603      	mov	r3, r0
 800616c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800616e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006192:	78fa      	ldrb	r2, [r7, #3]
 8006194:	4611      	mov	r1, r2
 8006196:	4618      	mov	r0, r3
 8006198:	f7fb fd82 	bl	8001ca0 <HAL_PCD_EP_SetStall>
 800619c:	4603      	mov	r3, r0
 800619e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f8de 	bl	8006364 <USBD_Get_USB_Status>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b084      	sub	sp, #16
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	460b      	mov	r3, r1
 80061c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061d0:	78fa      	ldrb	r2, [r7, #3]
 80061d2:	4611      	mov	r1, r2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fb fdc7 	bl	8001d68 <HAL_PCD_EP_ClrStall>
 80061da:	4603      	mov	r3, r0
 80061dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 f8bf 	bl	8006364 <USBD_Get_USB_Status>
 80061e6:	4603      	mov	r3, r0
 80061e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006206:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800620c:	2b00      	cmp	r3, #0
 800620e:	da0b      	bge.n	8006228 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	4613      	mov	r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	333e      	adds	r3, #62	; 0x3e
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	e00b      	b.n	8006240 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800622e:	68f9      	ldr	r1, [r7, #12]
 8006230:	4613      	mov	r3, r2
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	1a9b      	subs	r3, r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800623e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006240:	4618      	mov	r0, r3
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	4611      	mov	r1, r2
 800626a:	4618      	mov	r0, r3
 800626c:	f7fb fb94 	bl	8001998 <HAL_PCD_SetAddress>
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 f874 	bl	8006364 <USBD_Get_USB_Status>
 800627c:	4603      	mov	r3, r0
 800627e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006280:	7bbb      	ldrb	r3, [r7, #14]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b086      	sub	sp, #24
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	460b      	mov	r3, r1
 8006298:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80062a8:	7af9      	ldrb	r1, [r7, #11]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	f7fb fcad 	bl	8001c0c <HAL_PCD_EP_Transmit>
 80062b2:	4603      	mov	r3, r0
 80062b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 f853 	bl	8006364 <USBD_Get_USB_Status>
 80062be:	4603      	mov	r3, r0
 80062c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80062c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	460b      	mov	r3, r1
 80062da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80062ea:	7af9      	ldrb	r1, [r7, #11]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	f7fb fc29 	bl	8001b46 <HAL_PCD_EP_Receive>
 80062f4:	4603      	mov	r3, r0
 80062f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 f832 	bl	8006364 <USBD_Get_USB_Status>
 8006300:	4603      	mov	r3, r0
 8006302:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006304:	7dbb      	ldrb	r3, [r7, #22]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	460b      	mov	r3, r1
 8006318:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006320:	78fa      	ldrb	r2, [r7, #3]
 8006322:	4611      	mov	r1, r2
 8006324:	4618      	mov	r0, r3
 8006326:	f7fb fc59 	bl	8001bdc <HAL_PCD_EP_GetRxCount>
 800632a:	4603      	mov	r3, r0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800633c:	4b03      	ldr	r3, [pc, #12]	; (800634c <USBD_static_malloc+0x18>)
}
 800633e:	4618      	mov	r0, r3
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	200001a0 	.word	0x200001a0

08006350 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]

}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	2b03      	cmp	r3, #3
 8006376:	d817      	bhi.n	80063a8 <USBD_Get_USB_Status+0x44>
 8006378:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <USBD_Get_USB_Status+0x1c>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	08006391 	.word	0x08006391
 8006384:	08006397 	.word	0x08006397
 8006388:	0800639d 	.word	0x0800639d
 800638c:	080063a3 	.word	0x080063a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	73fb      	strb	r3, [r7, #15]
    break;
 8006394:	e00b      	b.n	80063ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006396:	2303      	movs	r3, #3
 8006398:	73fb      	strb	r3, [r7, #15]
    break;
 800639a:	e008      	b.n	80063ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800639c:	2301      	movs	r3, #1
 800639e:	73fb      	strb	r3, [r7, #15]
    break;
 80063a0:	e005      	b.n	80063ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80063a2:	2303      	movs	r3, #3
 80063a4:	73fb      	strb	r3, [r7, #15]
    break;
 80063a6:	e002      	b.n	80063ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80063a8:	2303      	movs	r3, #3
 80063aa:	73fb      	strb	r3, [r7, #15]
    break;
 80063ac:	bf00      	nop
  }
  return usb_status;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <__libc_init_array>:
 80063bc:	b570      	push	{r4, r5, r6, lr}
 80063be:	4d0d      	ldr	r5, [pc, #52]	; (80063f4 <__libc_init_array+0x38>)
 80063c0:	4c0d      	ldr	r4, [pc, #52]	; (80063f8 <__libc_init_array+0x3c>)
 80063c2:	1b64      	subs	r4, r4, r5
 80063c4:	10a4      	asrs	r4, r4, #2
 80063c6:	2600      	movs	r6, #0
 80063c8:	42a6      	cmp	r6, r4
 80063ca:	d109      	bne.n	80063e0 <__libc_init_array+0x24>
 80063cc:	4d0b      	ldr	r5, [pc, #44]	; (80063fc <__libc_init_array+0x40>)
 80063ce:	4c0c      	ldr	r4, [pc, #48]	; (8006400 <__libc_init_array+0x44>)
 80063d0:	f000 f820 	bl	8006414 <_init>
 80063d4:	1b64      	subs	r4, r4, r5
 80063d6:	10a4      	asrs	r4, r4, #2
 80063d8:	2600      	movs	r6, #0
 80063da:	42a6      	cmp	r6, r4
 80063dc:	d105      	bne.n	80063ea <__libc_init_array+0x2e>
 80063de:	bd70      	pop	{r4, r5, r6, pc}
 80063e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e4:	4798      	blx	r3
 80063e6:	3601      	adds	r6, #1
 80063e8:	e7ee      	b.n	80063c8 <__libc_init_array+0xc>
 80063ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ee:	4798      	blx	r3
 80063f0:	3601      	adds	r6, #1
 80063f2:	e7f2      	b.n	80063da <__libc_init_array+0x1e>
 80063f4:	0800648c 	.word	0x0800648c
 80063f8:	0800648c 	.word	0x0800648c
 80063fc:	0800648c 	.word	0x0800648c
 8006400:	08006490 	.word	0x08006490

08006404 <memset>:
 8006404:	4402      	add	r2, r0
 8006406:	4603      	mov	r3, r0
 8006408:	4293      	cmp	r3, r2
 800640a:	d100      	bne.n	800640e <memset+0xa>
 800640c:	4770      	bx	lr
 800640e:	f803 1b01 	strb.w	r1, [r3], #1
 8006412:	e7f9      	b.n	8006408 <memset+0x4>

08006414 <_init>:
 8006414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006416:	bf00      	nop
 8006418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641a:	bc08      	pop	{r3}
 800641c:	469e      	mov	lr, r3
 800641e:	4770      	bx	lr

08006420 <_fini>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	bf00      	nop
 8006424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006426:	bc08      	pop	{r3}
 8006428:	469e      	mov	lr, r3
 800642a:	4770      	bx	lr
