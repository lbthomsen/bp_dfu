
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08072000  08072000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065e4  08072198  08072198  00002198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0807877c  0807877c  0000877c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08078834  08078834  000100dc  2**0
                  CONTENTS
  4 .ARM          00000008  08078834  08078834  00008834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807883c  0807883c  000100dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807883c  0807883c  0000883c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08078840  08078840  00008840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08078844  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e18  200000dc  08078920  000100dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ef4  08078920  00010ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000100dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012289  00000000  00000000  0001010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd6  00000000  00000000  00022395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00025070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  00025b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181bd  00000000  00000000  00026578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e84c  00000000  00000000  0003e735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086caa  00000000  00000000  0004cf81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3c2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bec  00000000  00000000  000d3c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08072198 <__do_global_dtors_aux>:
 8072198:	b510      	push	{r4, lr}
 807219a:	4c05      	ldr	r4, [pc, #20]	; (80721b0 <__do_global_dtors_aux+0x18>)
 807219c:	7823      	ldrb	r3, [r4, #0]
 807219e:	b933      	cbnz	r3, 80721ae <__do_global_dtors_aux+0x16>
 80721a0:	4b04      	ldr	r3, [pc, #16]	; (80721b4 <__do_global_dtors_aux+0x1c>)
 80721a2:	b113      	cbz	r3, 80721aa <__do_global_dtors_aux+0x12>
 80721a4:	4804      	ldr	r0, [pc, #16]	; (80721b8 <__do_global_dtors_aux+0x20>)
 80721a6:	f3af 8000 	nop.w
 80721aa:	2301      	movs	r3, #1
 80721ac:	7023      	strb	r3, [r4, #0]
 80721ae:	bd10      	pop	{r4, pc}
 80721b0:	200000dc 	.word	0x200000dc
 80721b4:	00000000 	.word	0x00000000
 80721b8:	08078764 	.word	0x08078764

080721bc <frame_dummy>:
 80721bc:	b508      	push	{r3, lr}
 80721be:	4b03      	ldr	r3, [pc, #12]	; (80721cc <frame_dummy+0x10>)
 80721c0:	b11b      	cbz	r3, 80721ca <frame_dummy+0xe>
 80721c2:	4903      	ldr	r1, [pc, #12]	; (80721d0 <frame_dummy+0x14>)
 80721c4:	4803      	ldr	r0, [pc, #12]	; (80721d4 <frame_dummy+0x18>)
 80721c6:	f3af 8000 	nop.w
 80721ca:	bd08      	pop	{r3, pc}
 80721cc:	00000000 	.word	0x00000000
 80721d0:	200000e0 	.word	0x200000e0
 80721d4:	08078764 	.word	0x08078764

080721d8 <__aeabi_uldivmod>:
 80721d8:	b953      	cbnz	r3, 80721f0 <__aeabi_uldivmod+0x18>
 80721da:	b94a      	cbnz	r2, 80721f0 <__aeabi_uldivmod+0x18>
 80721dc:	2900      	cmp	r1, #0
 80721de:	bf08      	it	eq
 80721e0:	2800      	cmpeq	r0, #0
 80721e2:	bf1c      	itt	ne
 80721e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80721e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80721ec:	f000 b96e 	b.w	80724cc <__aeabi_idiv0>
 80721f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80721f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80721f8:	f000 f806 	bl	8072208 <__udivmoddi4>
 80721fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8072200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8072204:	b004      	add	sp, #16
 8072206:	4770      	bx	lr

08072208 <__udivmoddi4>:
 8072208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 807220c:	9d08      	ldr	r5, [sp, #32]
 807220e:	4604      	mov	r4, r0
 8072210:	468c      	mov	ip, r1
 8072212:	2b00      	cmp	r3, #0
 8072214:	f040 8083 	bne.w	807231e <__udivmoddi4+0x116>
 8072218:	428a      	cmp	r2, r1
 807221a:	4617      	mov	r7, r2
 807221c:	d947      	bls.n	80722ae <__udivmoddi4+0xa6>
 807221e:	fab2 f282 	clz	r2, r2
 8072222:	b142      	cbz	r2, 8072236 <__udivmoddi4+0x2e>
 8072224:	f1c2 0020 	rsb	r0, r2, #32
 8072228:	fa24 f000 	lsr.w	r0, r4, r0
 807222c:	4091      	lsls	r1, r2
 807222e:	4097      	lsls	r7, r2
 8072230:	ea40 0c01 	orr.w	ip, r0, r1
 8072234:	4094      	lsls	r4, r2
 8072236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 807223a:	0c23      	lsrs	r3, r4, #16
 807223c:	fbbc f6f8 	udiv	r6, ip, r8
 8072240:	fa1f fe87 	uxth.w	lr, r7
 8072244:	fb08 c116 	mls	r1, r8, r6, ip
 8072248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 807224c:	fb06 f10e 	mul.w	r1, r6, lr
 8072250:	4299      	cmp	r1, r3
 8072252:	d909      	bls.n	8072268 <__udivmoddi4+0x60>
 8072254:	18fb      	adds	r3, r7, r3
 8072256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 807225a:	f080 8119 	bcs.w	8072490 <__udivmoddi4+0x288>
 807225e:	4299      	cmp	r1, r3
 8072260:	f240 8116 	bls.w	8072490 <__udivmoddi4+0x288>
 8072264:	3e02      	subs	r6, #2
 8072266:	443b      	add	r3, r7
 8072268:	1a5b      	subs	r3, r3, r1
 807226a:	b2a4      	uxth	r4, r4
 807226c:	fbb3 f0f8 	udiv	r0, r3, r8
 8072270:	fb08 3310 	mls	r3, r8, r0, r3
 8072274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8072278:	fb00 fe0e 	mul.w	lr, r0, lr
 807227c:	45a6      	cmp	lr, r4
 807227e:	d909      	bls.n	8072294 <__udivmoddi4+0x8c>
 8072280:	193c      	adds	r4, r7, r4
 8072282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8072286:	f080 8105 	bcs.w	8072494 <__udivmoddi4+0x28c>
 807228a:	45a6      	cmp	lr, r4
 807228c:	f240 8102 	bls.w	8072494 <__udivmoddi4+0x28c>
 8072290:	3802      	subs	r0, #2
 8072292:	443c      	add	r4, r7
 8072294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8072298:	eba4 040e 	sub.w	r4, r4, lr
 807229c:	2600      	movs	r6, #0
 807229e:	b11d      	cbz	r5, 80722a8 <__udivmoddi4+0xa0>
 80722a0:	40d4      	lsrs	r4, r2
 80722a2:	2300      	movs	r3, #0
 80722a4:	e9c5 4300 	strd	r4, r3, [r5]
 80722a8:	4631      	mov	r1, r6
 80722aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80722ae:	b902      	cbnz	r2, 80722b2 <__udivmoddi4+0xaa>
 80722b0:	deff      	udf	#255	; 0xff
 80722b2:	fab2 f282 	clz	r2, r2
 80722b6:	2a00      	cmp	r2, #0
 80722b8:	d150      	bne.n	807235c <__udivmoddi4+0x154>
 80722ba:	1bcb      	subs	r3, r1, r7
 80722bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80722c0:	fa1f f887 	uxth.w	r8, r7
 80722c4:	2601      	movs	r6, #1
 80722c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80722ca:	0c21      	lsrs	r1, r4, #16
 80722cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80722d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80722d4:	fb08 f30c 	mul.w	r3, r8, ip
 80722d8:	428b      	cmp	r3, r1
 80722da:	d907      	bls.n	80722ec <__udivmoddi4+0xe4>
 80722dc:	1879      	adds	r1, r7, r1
 80722de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80722e2:	d202      	bcs.n	80722ea <__udivmoddi4+0xe2>
 80722e4:	428b      	cmp	r3, r1
 80722e6:	f200 80e9 	bhi.w	80724bc <__udivmoddi4+0x2b4>
 80722ea:	4684      	mov	ip, r0
 80722ec:	1ac9      	subs	r1, r1, r3
 80722ee:	b2a3      	uxth	r3, r4
 80722f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80722f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80722f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80722fc:	fb08 f800 	mul.w	r8, r8, r0
 8072300:	45a0      	cmp	r8, r4
 8072302:	d907      	bls.n	8072314 <__udivmoddi4+0x10c>
 8072304:	193c      	adds	r4, r7, r4
 8072306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 807230a:	d202      	bcs.n	8072312 <__udivmoddi4+0x10a>
 807230c:	45a0      	cmp	r8, r4
 807230e:	f200 80d9 	bhi.w	80724c4 <__udivmoddi4+0x2bc>
 8072312:	4618      	mov	r0, r3
 8072314:	eba4 0408 	sub.w	r4, r4, r8
 8072318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 807231c:	e7bf      	b.n	807229e <__udivmoddi4+0x96>
 807231e:	428b      	cmp	r3, r1
 8072320:	d909      	bls.n	8072336 <__udivmoddi4+0x12e>
 8072322:	2d00      	cmp	r5, #0
 8072324:	f000 80b1 	beq.w	807248a <__udivmoddi4+0x282>
 8072328:	2600      	movs	r6, #0
 807232a:	e9c5 0100 	strd	r0, r1, [r5]
 807232e:	4630      	mov	r0, r6
 8072330:	4631      	mov	r1, r6
 8072332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8072336:	fab3 f683 	clz	r6, r3
 807233a:	2e00      	cmp	r6, #0
 807233c:	d14a      	bne.n	80723d4 <__udivmoddi4+0x1cc>
 807233e:	428b      	cmp	r3, r1
 8072340:	d302      	bcc.n	8072348 <__udivmoddi4+0x140>
 8072342:	4282      	cmp	r2, r0
 8072344:	f200 80b8 	bhi.w	80724b8 <__udivmoddi4+0x2b0>
 8072348:	1a84      	subs	r4, r0, r2
 807234a:	eb61 0103 	sbc.w	r1, r1, r3
 807234e:	2001      	movs	r0, #1
 8072350:	468c      	mov	ip, r1
 8072352:	2d00      	cmp	r5, #0
 8072354:	d0a8      	beq.n	80722a8 <__udivmoddi4+0xa0>
 8072356:	e9c5 4c00 	strd	r4, ip, [r5]
 807235a:	e7a5      	b.n	80722a8 <__udivmoddi4+0xa0>
 807235c:	f1c2 0320 	rsb	r3, r2, #32
 8072360:	fa20 f603 	lsr.w	r6, r0, r3
 8072364:	4097      	lsls	r7, r2
 8072366:	fa01 f002 	lsl.w	r0, r1, r2
 807236a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 807236e:	40d9      	lsrs	r1, r3
 8072370:	4330      	orrs	r0, r6
 8072372:	0c03      	lsrs	r3, r0, #16
 8072374:	fbb1 f6fe 	udiv	r6, r1, lr
 8072378:	fa1f f887 	uxth.w	r8, r7
 807237c:	fb0e 1116 	mls	r1, lr, r6, r1
 8072380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8072384:	fb06 f108 	mul.w	r1, r6, r8
 8072388:	4299      	cmp	r1, r3
 807238a:	fa04 f402 	lsl.w	r4, r4, r2
 807238e:	d909      	bls.n	80723a4 <__udivmoddi4+0x19c>
 8072390:	18fb      	adds	r3, r7, r3
 8072392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8072396:	f080 808d 	bcs.w	80724b4 <__udivmoddi4+0x2ac>
 807239a:	4299      	cmp	r1, r3
 807239c:	f240 808a 	bls.w	80724b4 <__udivmoddi4+0x2ac>
 80723a0:	3e02      	subs	r6, #2
 80723a2:	443b      	add	r3, r7
 80723a4:	1a5b      	subs	r3, r3, r1
 80723a6:	b281      	uxth	r1, r0
 80723a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80723ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80723b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80723b4:	fb00 f308 	mul.w	r3, r0, r8
 80723b8:	428b      	cmp	r3, r1
 80723ba:	d907      	bls.n	80723cc <__udivmoddi4+0x1c4>
 80723bc:	1879      	adds	r1, r7, r1
 80723be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80723c2:	d273      	bcs.n	80724ac <__udivmoddi4+0x2a4>
 80723c4:	428b      	cmp	r3, r1
 80723c6:	d971      	bls.n	80724ac <__udivmoddi4+0x2a4>
 80723c8:	3802      	subs	r0, #2
 80723ca:	4439      	add	r1, r7
 80723cc:	1acb      	subs	r3, r1, r3
 80723ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80723d2:	e778      	b.n	80722c6 <__udivmoddi4+0xbe>
 80723d4:	f1c6 0c20 	rsb	ip, r6, #32
 80723d8:	fa03 f406 	lsl.w	r4, r3, r6
 80723dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80723e0:	431c      	orrs	r4, r3
 80723e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80723e6:	fa01 f306 	lsl.w	r3, r1, r6
 80723ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80723ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80723f2:	431f      	orrs	r7, r3
 80723f4:	0c3b      	lsrs	r3, r7, #16
 80723f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80723fa:	fa1f f884 	uxth.w	r8, r4
 80723fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8072402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8072406:	fb09 fa08 	mul.w	sl, r9, r8
 807240a:	458a      	cmp	sl, r1
 807240c:	fa02 f206 	lsl.w	r2, r2, r6
 8072410:	fa00 f306 	lsl.w	r3, r0, r6
 8072414:	d908      	bls.n	8072428 <__udivmoddi4+0x220>
 8072416:	1861      	adds	r1, r4, r1
 8072418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 807241c:	d248      	bcs.n	80724b0 <__udivmoddi4+0x2a8>
 807241e:	458a      	cmp	sl, r1
 8072420:	d946      	bls.n	80724b0 <__udivmoddi4+0x2a8>
 8072422:	f1a9 0902 	sub.w	r9, r9, #2
 8072426:	4421      	add	r1, r4
 8072428:	eba1 010a 	sub.w	r1, r1, sl
 807242c:	b2bf      	uxth	r7, r7
 807242e:	fbb1 f0fe 	udiv	r0, r1, lr
 8072432:	fb0e 1110 	mls	r1, lr, r0, r1
 8072436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 807243a:	fb00 f808 	mul.w	r8, r0, r8
 807243e:	45b8      	cmp	r8, r7
 8072440:	d907      	bls.n	8072452 <__udivmoddi4+0x24a>
 8072442:	19e7      	adds	r7, r4, r7
 8072444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8072448:	d22e      	bcs.n	80724a8 <__udivmoddi4+0x2a0>
 807244a:	45b8      	cmp	r8, r7
 807244c:	d92c      	bls.n	80724a8 <__udivmoddi4+0x2a0>
 807244e:	3802      	subs	r0, #2
 8072450:	4427      	add	r7, r4
 8072452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8072456:	eba7 0708 	sub.w	r7, r7, r8
 807245a:	fba0 8902 	umull	r8, r9, r0, r2
 807245e:	454f      	cmp	r7, r9
 8072460:	46c6      	mov	lr, r8
 8072462:	4649      	mov	r1, r9
 8072464:	d31a      	bcc.n	807249c <__udivmoddi4+0x294>
 8072466:	d017      	beq.n	8072498 <__udivmoddi4+0x290>
 8072468:	b15d      	cbz	r5, 8072482 <__udivmoddi4+0x27a>
 807246a:	ebb3 020e 	subs.w	r2, r3, lr
 807246e:	eb67 0701 	sbc.w	r7, r7, r1
 8072472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8072476:	40f2      	lsrs	r2, r6
 8072478:	ea4c 0202 	orr.w	r2, ip, r2
 807247c:	40f7      	lsrs	r7, r6
 807247e:	e9c5 2700 	strd	r2, r7, [r5]
 8072482:	2600      	movs	r6, #0
 8072484:	4631      	mov	r1, r6
 8072486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 807248a:	462e      	mov	r6, r5
 807248c:	4628      	mov	r0, r5
 807248e:	e70b      	b.n	80722a8 <__udivmoddi4+0xa0>
 8072490:	4606      	mov	r6, r0
 8072492:	e6e9      	b.n	8072268 <__udivmoddi4+0x60>
 8072494:	4618      	mov	r0, r3
 8072496:	e6fd      	b.n	8072294 <__udivmoddi4+0x8c>
 8072498:	4543      	cmp	r3, r8
 807249a:	d2e5      	bcs.n	8072468 <__udivmoddi4+0x260>
 807249c:	ebb8 0e02 	subs.w	lr, r8, r2
 80724a0:	eb69 0104 	sbc.w	r1, r9, r4
 80724a4:	3801      	subs	r0, #1
 80724a6:	e7df      	b.n	8072468 <__udivmoddi4+0x260>
 80724a8:	4608      	mov	r0, r1
 80724aa:	e7d2      	b.n	8072452 <__udivmoddi4+0x24a>
 80724ac:	4660      	mov	r0, ip
 80724ae:	e78d      	b.n	80723cc <__udivmoddi4+0x1c4>
 80724b0:	4681      	mov	r9, r0
 80724b2:	e7b9      	b.n	8072428 <__udivmoddi4+0x220>
 80724b4:	4666      	mov	r6, ip
 80724b6:	e775      	b.n	80723a4 <__udivmoddi4+0x19c>
 80724b8:	4630      	mov	r0, r6
 80724ba:	e74a      	b.n	8072352 <__udivmoddi4+0x14a>
 80724bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80724c0:	4439      	add	r1, r7
 80724c2:	e713      	b.n	80722ec <__udivmoddi4+0xe4>
 80724c4:	3802      	subs	r0, #2
 80724c6:	443c      	add	r4, r7
 80724c8:	e724      	b.n	8072314 <__udivmoddi4+0x10c>
 80724ca:	bf00      	nop

080724cc <__aeabi_idiv0>:
 80724cc:	4770      	bx	lr
 80724ce:	bf00      	nop

080724d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80724d0:	b580      	push	{r7, lr}
 80724d2:	b082      	sub	sp, #8
 80724d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80724d6:	f000 f991 	bl	80727fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80724da:	f000 f827 	bl	807252c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80724de:	f000 f88d 	bl	80725fc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80724e2:	f005 fc99 	bl	8077e18 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, then = 0;
 80724e6:	2300      	movs	r3, #0
 80724e8:	603b      	str	r3, [r7, #0]
 80724ea:	2300      	movs	r3, #0
 80724ec:	607b      	str	r3, [r7, #4]

  while (1)
  {

	now = HAL_GetTick();
 80724ee:	f000 f9eb 	bl	80728c8 <HAL_GetTick>
 80724f2:	6038      	str	r0, [r7, #0]
	if (now % 100 == 0 && now != then) {
 80724f4:	683a      	ldr	r2, [r7, #0]
 80724f6:	4b0b      	ldr	r3, [pc, #44]	; (8072524 <main+0x54>)
 80724f8:	fba3 1302 	umull	r1, r3, r3, r2
 80724fc:	095b      	lsrs	r3, r3, #5
 80724fe:	2164      	movs	r1, #100	; 0x64
 8072500:	fb01 f303 	mul.w	r3, r1, r3
 8072504:	1ad3      	subs	r3, r2, r3
 8072506:	2b00      	cmp	r3, #0
 8072508:	d1f1      	bne.n	80724ee <main+0x1e>
 807250a:	683a      	ldr	r2, [r7, #0]
 807250c:	687b      	ldr	r3, [r7, #4]
 807250e:	429a      	cmp	r2, r3
 8072510:	d0ed      	beq.n	80724ee <main+0x1e>

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8072512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8072516:	4804      	ldr	r0, [pc, #16]	; (8072528 <main+0x58>)
 8072518:	f000 fcb5 	bl	8072e86 <HAL_GPIO_TogglePin>

		then = now;
 807251c:	683b      	ldr	r3, [r7, #0]
 807251e:	607b      	str	r3, [r7, #4]
	now = HAL_GetTick();
 8072520:	e7e5      	b.n	80724ee <main+0x1e>
 8072522:	bf00      	nop
 8072524:	51eb851f 	.word	0x51eb851f
 8072528:	40020800 	.word	0x40020800

0807252c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 807252c:	b580      	push	{r7, lr}
 807252e:	b094      	sub	sp, #80	; 0x50
 8072530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8072532:	f107 0320 	add.w	r3, r7, #32
 8072536:	2230      	movs	r2, #48	; 0x30
 8072538:	2100      	movs	r1, #0
 807253a:	4618      	mov	r0, r3
 807253c:	f006 f90a 	bl	8078754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8072540:	f107 030c 	add.w	r3, r7, #12
 8072544:	2200      	movs	r2, #0
 8072546:	601a      	str	r2, [r3, #0]
 8072548:	605a      	str	r2, [r3, #4]
 807254a:	609a      	str	r2, [r3, #8]
 807254c:	60da      	str	r2, [r3, #12]
 807254e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8072550:	2300      	movs	r3, #0
 8072552:	60bb      	str	r3, [r7, #8]
 8072554:	4b27      	ldr	r3, [pc, #156]	; (80725f4 <SystemClock_Config+0xc8>)
 8072556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8072558:	4a26      	ldr	r2, [pc, #152]	; (80725f4 <SystemClock_Config+0xc8>)
 807255a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807255e:	6413      	str	r3, [r2, #64]	; 0x40
 8072560:	4b24      	ldr	r3, [pc, #144]	; (80725f4 <SystemClock_Config+0xc8>)
 8072562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8072564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8072568:	60bb      	str	r3, [r7, #8]
 807256a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 807256c:	2300      	movs	r3, #0
 807256e:	607b      	str	r3, [r7, #4]
 8072570:	4b21      	ldr	r3, [pc, #132]	; (80725f8 <SystemClock_Config+0xcc>)
 8072572:	681b      	ldr	r3, [r3, #0]
 8072574:	4a20      	ldr	r2, [pc, #128]	; (80725f8 <SystemClock_Config+0xcc>)
 8072576:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 807257a:	6013      	str	r3, [r2, #0]
 807257c:	4b1e      	ldr	r3, [pc, #120]	; (80725f8 <SystemClock_Config+0xcc>)
 807257e:	681b      	ldr	r3, [r3, #0]
 8072580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8072584:	607b      	str	r3, [r7, #4]
 8072586:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8072588:	2301      	movs	r3, #1
 807258a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 807258c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8072590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8072592:	2302      	movs	r3, #2
 8072594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8072596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 807259a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 807259c:	2319      	movs	r3, #25
 807259e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80725a0:	23c0      	movs	r3, #192	; 0xc0
 80725a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80725a4:	2302      	movs	r3, #2
 80725a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80725a8:	2304      	movs	r3, #4
 80725aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80725ac:	f107 0320 	add.w	r3, r7, #32
 80725b0:	4618      	mov	r0, r3
 80725b2:	f001 fddd 	bl	8074170 <HAL_RCC_OscConfig>
 80725b6:	4603      	mov	r3, r0
 80725b8:	2b00      	cmp	r3, #0
 80725ba:	d001      	beq.n	80725c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80725bc:	f000 f880 	bl	80726c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80725c0:	230f      	movs	r3, #15
 80725c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80725c4:	2302      	movs	r3, #2
 80725c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80725c8:	2300      	movs	r3, #0
 80725ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80725cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80725d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80725d2:	2300      	movs	r3, #0
 80725d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80725d6:	f107 030c 	add.w	r3, r7, #12
 80725da:	2103      	movs	r1, #3
 80725dc:	4618      	mov	r0, r3
 80725de:	f002 f83f 	bl	8074660 <HAL_RCC_ClockConfig>
 80725e2:	4603      	mov	r3, r0
 80725e4:	2b00      	cmp	r3, #0
 80725e6:	d001      	beq.n	80725ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80725e8:	f000 f86a 	bl	80726c0 <Error_Handler>
  }
}
 80725ec:	bf00      	nop
 80725ee:	3750      	adds	r7, #80	; 0x50
 80725f0:	46bd      	mov	sp, r7
 80725f2:	bd80      	pop	{r7, pc}
 80725f4:	40023800 	.word	0x40023800
 80725f8:	40007000 	.word	0x40007000

080725fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80725fc:	b580      	push	{r7, lr}
 80725fe:	b088      	sub	sp, #32
 8072600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8072602:	f107 030c 	add.w	r3, r7, #12
 8072606:	2200      	movs	r2, #0
 8072608:	601a      	str	r2, [r3, #0]
 807260a:	605a      	str	r2, [r3, #4]
 807260c:	609a      	str	r2, [r3, #8]
 807260e:	60da      	str	r2, [r3, #12]
 8072610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8072612:	2300      	movs	r3, #0
 8072614:	60bb      	str	r3, [r7, #8]
 8072616:	4b26      	ldr	r3, [pc, #152]	; (80726b0 <MX_GPIO_Init+0xb4>)
 8072618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807261a:	4a25      	ldr	r2, [pc, #148]	; (80726b0 <MX_GPIO_Init+0xb4>)
 807261c:	f043 0304 	orr.w	r3, r3, #4
 8072620:	6313      	str	r3, [r2, #48]	; 0x30
 8072622:	4b23      	ldr	r3, [pc, #140]	; (80726b0 <MX_GPIO_Init+0xb4>)
 8072624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8072626:	f003 0304 	and.w	r3, r3, #4
 807262a:	60bb      	str	r3, [r7, #8]
 807262c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 807262e:	2300      	movs	r3, #0
 8072630:	607b      	str	r3, [r7, #4]
 8072632:	4b1f      	ldr	r3, [pc, #124]	; (80726b0 <MX_GPIO_Init+0xb4>)
 8072634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8072636:	4a1e      	ldr	r2, [pc, #120]	; (80726b0 <MX_GPIO_Init+0xb4>)
 8072638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 807263c:	6313      	str	r3, [r2, #48]	; 0x30
 807263e:	4b1c      	ldr	r3, [pc, #112]	; (80726b0 <MX_GPIO_Init+0xb4>)
 8072640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8072642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8072646:	607b      	str	r3, [r7, #4]
 8072648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 807264a:	2300      	movs	r3, #0
 807264c:	603b      	str	r3, [r7, #0]
 807264e:	4b18      	ldr	r3, [pc, #96]	; (80726b0 <MX_GPIO_Init+0xb4>)
 8072650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8072652:	4a17      	ldr	r2, [pc, #92]	; (80726b0 <MX_GPIO_Init+0xb4>)
 8072654:	f043 0301 	orr.w	r3, r3, #1
 8072658:	6313      	str	r3, [r2, #48]	; 0x30
 807265a:	4b15      	ldr	r3, [pc, #84]	; (80726b0 <MX_GPIO_Init+0xb4>)
 807265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807265e:	f003 0301 	and.w	r3, r3, #1
 8072662:	603b      	str	r3, [r7, #0]
 8072664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8072666:	2201      	movs	r2, #1
 8072668:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 807266c:	4811      	ldr	r0, [pc, #68]	; (80726b4 <MX_GPIO_Init+0xb8>)
 807266e:	f000 fbf1 	bl	8072e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8072672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8072676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8072678:	2311      	movs	r3, #17
 807267a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 807267c:	2300      	movs	r3, #0
 807267e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8072680:	2300      	movs	r3, #0
 8072682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8072684:	f107 030c 	add.w	r3, r7, #12
 8072688:	4619      	mov	r1, r3
 807268a:	480a      	ldr	r0, [pc, #40]	; (80726b4 <MX_GPIO_Init+0xb8>)
 807268c:	f000 fa5e 	bl	8072b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8072690:	2301      	movs	r3, #1
 8072692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8072694:	4b08      	ldr	r3, [pc, #32]	; (80726b8 <MX_GPIO_Init+0xbc>)
 8072696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8072698:	2301      	movs	r3, #1
 807269a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 807269c:	f107 030c 	add.w	r3, r7, #12
 80726a0:	4619      	mov	r1, r3
 80726a2:	4806      	ldr	r0, [pc, #24]	; (80726bc <MX_GPIO_Init+0xc0>)
 80726a4:	f000 fa52 	bl	8072b4c <HAL_GPIO_Init>

}
 80726a8:	bf00      	nop
 80726aa:	3720      	adds	r7, #32
 80726ac:	46bd      	mov	sp, r7
 80726ae:	bd80      	pop	{r7, pc}
 80726b0:	40023800 	.word	0x40023800
 80726b4:	40020800 	.word	0x40020800
 80726b8:	10210000 	.word	0x10210000
 80726bc:	40020000 	.word	0x40020000

080726c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80726c0:	b480      	push	{r7}
 80726c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80726c4:	b672      	cpsid	i
}
 80726c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80726c8:	e7fe      	b.n	80726c8 <Error_Handler+0x8>
	...

080726cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80726cc:	b480      	push	{r7}
 80726ce:	b083      	sub	sp, #12
 80726d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80726d2:	2300      	movs	r3, #0
 80726d4:	607b      	str	r3, [r7, #4]
 80726d6:	4b10      	ldr	r3, [pc, #64]	; (8072718 <HAL_MspInit+0x4c>)
 80726d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80726da:	4a0f      	ldr	r2, [pc, #60]	; (8072718 <HAL_MspInit+0x4c>)
 80726dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80726e0:	6453      	str	r3, [r2, #68]	; 0x44
 80726e2:	4b0d      	ldr	r3, [pc, #52]	; (8072718 <HAL_MspInit+0x4c>)
 80726e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80726e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80726ea:	607b      	str	r3, [r7, #4]
 80726ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80726ee:	2300      	movs	r3, #0
 80726f0:	603b      	str	r3, [r7, #0]
 80726f2:	4b09      	ldr	r3, [pc, #36]	; (8072718 <HAL_MspInit+0x4c>)
 80726f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80726f6:	4a08      	ldr	r2, [pc, #32]	; (8072718 <HAL_MspInit+0x4c>)
 80726f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80726fc:	6413      	str	r3, [r2, #64]	; 0x40
 80726fe:	4b06      	ldr	r3, [pc, #24]	; (8072718 <HAL_MspInit+0x4c>)
 8072700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8072702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8072706:	603b      	str	r3, [r7, #0]
 8072708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 807270a:	bf00      	nop
 807270c:	370c      	adds	r7, #12
 807270e:	46bd      	mov	sp, r7
 8072710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072714:	4770      	bx	lr
 8072716:	bf00      	nop
 8072718:	40023800 	.word	0x40023800

0807271c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 807271c:	b480      	push	{r7}
 807271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8072720:	e7fe      	b.n	8072720 <NMI_Handler+0x4>

08072722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8072722:	b480      	push	{r7}
 8072724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8072726:	e7fe      	b.n	8072726 <HardFault_Handler+0x4>

08072728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8072728:	b480      	push	{r7}
 807272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 807272c:	e7fe      	b.n	807272c <MemManage_Handler+0x4>

0807272e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 807272e:	b480      	push	{r7}
 8072730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8072732:	e7fe      	b.n	8072732 <BusFault_Handler+0x4>

08072734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8072734:	b480      	push	{r7}
 8072736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8072738:	e7fe      	b.n	8072738 <UsageFault_Handler+0x4>

0807273a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 807273a:	b480      	push	{r7}
 807273c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 807273e:	bf00      	nop
 8072740:	46bd      	mov	sp, r7
 8072742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072746:	4770      	bx	lr

08072748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8072748:	b480      	push	{r7}
 807274a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 807274c:	bf00      	nop
 807274e:	46bd      	mov	sp, r7
 8072750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072754:	4770      	bx	lr

08072756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8072756:	b480      	push	{r7}
 8072758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 807275a:	bf00      	nop
 807275c:	46bd      	mov	sp, r7
 807275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072762:	4770      	bx	lr

08072764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8072764:	b580      	push	{r7, lr}
 8072766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8072768:	f000 f89a 	bl	80728a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 807276c:	bf00      	nop
 807276e:	bd80      	pop	{r7, pc}

08072770 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8072770:	b580      	push	{r7, lr}
 8072772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8072774:	4802      	ldr	r0, [pc, #8]	; (8072780 <OTG_FS_IRQHandler+0x10>)
 8072776:	f000 fd29 	bl	80731cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 807277a:	bf00      	nop
 807277c:	bd80      	pop	{r7, pc}
 807277e:	bf00      	nop
 8072780:	20000aec 	.word	0x20000aec

08072784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8072784:	b480      	push	{r7}
 8072786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8072788:	4b06      	ldr	r3, [pc, #24]	; (80727a4 <SystemInit+0x20>)
 807278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 807278e:	4a05      	ldr	r2, [pc, #20]	; (80727a4 <SystemInit+0x20>)
 8072790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8072794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8072798:	bf00      	nop
 807279a:	46bd      	mov	sp, r7
 807279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80727a0:	4770      	bx	lr
 80727a2:	bf00      	nop
 80727a4:	e000ed00 	.word	0xe000ed00

080727a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80727a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80727e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80727ac:	480d      	ldr	r0, [pc, #52]	; (80727e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80727ae:	490e      	ldr	r1, [pc, #56]	; (80727e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80727b0:	4a0e      	ldr	r2, [pc, #56]	; (80727ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80727b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80727b4:	e002      	b.n	80727bc <LoopCopyDataInit>

080727b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80727b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80727b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80727ba:	3304      	adds	r3, #4

080727bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80727bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80727be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80727c0:	d3f9      	bcc.n	80727b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80727c2:	4a0b      	ldr	r2, [pc, #44]	; (80727f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80727c4:	4c0b      	ldr	r4, [pc, #44]	; (80727f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80727c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80727c8:	e001      	b.n	80727ce <LoopFillZerobss>

080727ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80727ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80727cc:	3204      	adds	r2, #4

080727ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80727ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80727d0:	d3fb      	bcc.n	80727ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80727d2:	f7ff ffd7 	bl	8072784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80727d6:	f005 ff99 	bl	807870c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80727da:	f7ff fe79 	bl	80724d0 <main>
  bx  lr    
 80727de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80727e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80727e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80727e8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 80727ec:	08078844 	.word	0x08078844
  ldr r2, =_sbss
 80727f0:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80727f4:	20000ef4 	.word	0x20000ef4

080727f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80727f8:	e7fe      	b.n	80727f8 <ADC_IRQHandler>
	...

080727fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80727fc:	b580      	push	{r7, lr}
 80727fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8072800:	4b0e      	ldr	r3, [pc, #56]	; (807283c <HAL_Init+0x40>)
 8072802:	681b      	ldr	r3, [r3, #0]
 8072804:	4a0d      	ldr	r2, [pc, #52]	; (807283c <HAL_Init+0x40>)
 8072806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 807280a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 807280c:	4b0b      	ldr	r3, [pc, #44]	; (807283c <HAL_Init+0x40>)
 807280e:	681b      	ldr	r3, [r3, #0]
 8072810:	4a0a      	ldr	r2, [pc, #40]	; (807283c <HAL_Init+0x40>)
 8072812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8072816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8072818:	4b08      	ldr	r3, [pc, #32]	; (807283c <HAL_Init+0x40>)
 807281a:	681b      	ldr	r3, [r3, #0]
 807281c:	4a07      	ldr	r2, [pc, #28]	; (807283c <HAL_Init+0x40>)
 807281e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8072822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8072824:	2003      	movs	r0, #3
 8072826:	f000 f94f 	bl	8072ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 807282a:	2000      	movs	r0, #0
 807282c:	f000 f808 	bl	8072840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8072830:	f7ff ff4c 	bl	80726cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8072834:	2300      	movs	r3, #0
}
 8072836:	4618      	mov	r0, r3
 8072838:	bd80      	pop	{r7, pc}
 807283a:	bf00      	nop
 807283c:	40023c00 	.word	0x40023c00

08072840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8072840:	b580      	push	{r7, lr}
 8072842:	b082      	sub	sp, #8
 8072844:	af00      	add	r7, sp, #0
 8072846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8072848:	4b12      	ldr	r3, [pc, #72]	; (8072894 <HAL_InitTick+0x54>)
 807284a:	681a      	ldr	r2, [r3, #0]
 807284c:	4b12      	ldr	r3, [pc, #72]	; (8072898 <HAL_InitTick+0x58>)
 807284e:	781b      	ldrb	r3, [r3, #0]
 8072850:	4619      	mov	r1, r3
 8072852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8072856:	fbb3 f3f1 	udiv	r3, r3, r1
 807285a:	fbb2 f3f3 	udiv	r3, r2, r3
 807285e:	4618      	mov	r0, r3
 8072860:	f000 f967 	bl	8072b32 <HAL_SYSTICK_Config>
 8072864:	4603      	mov	r3, r0
 8072866:	2b00      	cmp	r3, #0
 8072868:	d001      	beq.n	807286e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 807286a:	2301      	movs	r3, #1
 807286c:	e00e      	b.n	807288c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 807286e:	687b      	ldr	r3, [r7, #4]
 8072870:	2b0f      	cmp	r3, #15
 8072872:	d80a      	bhi.n	807288a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8072874:	2200      	movs	r2, #0
 8072876:	6879      	ldr	r1, [r7, #4]
 8072878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 807287c:	f000 f92f 	bl	8072ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8072880:	4a06      	ldr	r2, [pc, #24]	; (807289c <HAL_InitTick+0x5c>)
 8072882:	687b      	ldr	r3, [r7, #4]
 8072884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8072886:	2300      	movs	r3, #0
 8072888:	e000      	b.n	807288c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 807288a:	2301      	movs	r3, #1
}
 807288c:	4618      	mov	r0, r3
 807288e:	3708      	adds	r7, #8
 8072890:	46bd      	mov	sp, r7
 8072892:	bd80      	pop	{r7, pc}
 8072894:	20000000 	.word	0x20000000
 8072898:	20000008 	.word	0x20000008
 807289c:	20000004 	.word	0x20000004

080728a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80728a0:	b480      	push	{r7}
 80728a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80728a4:	4b06      	ldr	r3, [pc, #24]	; (80728c0 <HAL_IncTick+0x20>)
 80728a6:	781b      	ldrb	r3, [r3, #0]
 80728a8:	461a      	mov	r2, r3
 80728aa:	4b06      	ldr	r3, [pc, #24]	; (80728c4 <HAL_IncTick+0x24>)
 80728ac:	681b      	ldr	r3, [r3, #0]
 80728ae:	4413      	add	r3, r2
 80728b0:	4a04      	ldr	r2, [pc, #16]	; (80728c4 <HAL_IncTick+0x24>)
 80728b2:	6013      	str	r3, [r2, #0]
}
 80728b4:	bf00      	nop
 80728b6:	46bd      	mov	sp, r7
 80728b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80728bc:	4770      	bx	lr
 80728be:	bf00      	nop
 80728c0:	20000008 	.word	0x20000008
 80728c4:	20000618 	.word	0x20000618

080728c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80728c8:	b480      	push	{r7}
 80728ca:	af00      	add	r7, sp, #0
  return uwTick;
 80728cc:	4b03      	ldr	r3, [pc, #12]	; (80728dc <HAL_GetTick+0x14>)
 80728ce:	681b      	ldr	r3, [r3, #0]
}
 80728d0:	4618      	mov	r0, r3
 80728d2:	46bd      	mov	sp, r7
 80728d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80728d8:	4770      	bx	lr
 80728da:	bf00      	nop
 80728dc:	20000618 	.word	0x20000618

080728e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80728e0:	b580      	push	{r7, lr}
 80728e2:	b084      	sub	sp, #16
 80728e4:	af00      	add	r7, sp, #0
 80728e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80728e8:	f7ff ffee 	bl	80728c8 <HAL_GetTick>
 80728ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80728ee:	687b      	ldr	r3, [r7, #4]
 80728f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80728f2:	68fb      	ldr	r3, [r7, #12]
 80728f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80728f8:	d005      	beq.n	8072906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80728fa:	4b0a      	ldr	r3, [pc, #40]	; (8072924 <HAL_Delay+0x44>)
 80728fc:	781b      	ldrb	r3, [r3, #0]
 80728fe:	461a      	mov	r2, r3
 8072900:	68fb      	ldr	r3, [r7, #12]
 8072902:	4413      	add	r3, r2
 8072904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8072906:	bf00      	nop
 8072908:	f7ff ffde 	bl	80728c8 <HAL_GetTick>
 807290c:	4602      	mov	r2, r0
 807290e:	68bb      	ldr	r3, [r7, #8]
 8072910:	1ad3      	subs	r3, r2, r3
 8072912:	68fa      	ldr	r2, [r7, #12]
 8072914:	429a      	cmp	r2, r3
 8072916:	d8f7      	bhi.n	8072908 <HAL_Delay+0x28>
  {
  }
}
 8072918:	bf00      	nop
 807291a:	bf00      	nop
 807291c:	3710      	adds	r7, #16
 807291e:	46bd      	mov	sp, r7
 8072920:	bd80      	pop	{r7, pc}
 8072922:	bf00      	nop
 8072924:	20000008 	.word	0x20000008

08072928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8072928:	b480      	push	{r7}
 807292a:	b085      	sub	sp, #20
 807292c:	af00      	add	r7, sp, #0
 807292e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8072930:	687b      	ldr	r3, [r7, #4]
 8072932:	f003 0307 	and.w	r3, r3, #7
 8072936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8072938:	4b0c      	ldr	r3, [pc, #48]	; (807296c <__NVIC_SetPriorityGrouping+0x44>)
 807293a:	68db      	ldr	r3, [r3, #12]
 807293c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 807293e:	68ba      	ldr	r2, [r7, #8]
 8072940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8072944:	4013      	ands	r3, r2
 8072946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8072948:	68fb      	ldr	r3, [r7, #12]
 807294a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 807294c:	68bb      	ldr	r3, [r7, #8]
 807294e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8072950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8072954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8072958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 807295a:	4a04      	ldr	r2, [pc, #16]	; (807296c <__NVIC_SetPriorityGrouping+0x44>)
 807295c:	68bb      	ldr	r3, [r7, #8]
 807295e:	60d3      	str	r3, [r2, #12]
}
 8072960:	bf00      	nop
 8072962:	3714      	adds	r7, #20
 8072964:	46bd      	mov	sp, r7
 8072966:	f85d 7b04 	ldr.w	r7, [sp], #4
 807296a:	4770      	bx	lr
 807296c:	e000ed00 	.word	0xe000ed00

08072970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8072970:	b480      	push	{r7}
 8072972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8072974:	4b04      	ldr	r3, [pc, #16]	; (8072988 <__NVIC_GetPriorityGrouping+0x18>)
 8072976:	68db      	ldr	r3, [r3, #12]
 8072978:	0a1b      	lsrs	r3, r3, #8
 807297a:	f003 0307 	and.w	r3, r3, #7
}
 807297e:	4618      	mov	r0, r3
 8072980:	46bd      	mov	sp, r7
 8072982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072986:	4770      	bx	lr
 8072988:	e000ed00 	.word	0xe000ed00

0807298c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 807298c:	b480      	push	{r7}
 807298e:	b083      	sub	sp, #12
 8072990:	af00      	add	r7, sp, #0
 8072992:	4603      	mov	r3, r0
 8072994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8072996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 807299a:	2b00      	cmp	r3, #0
 807299c:	db0b      	blt.n	80729b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 807299e:	79fb      	ldrb	r3, [r7, #7]
 80729a0:	f003 021f 	and.w	r2, r3, #31
 80729a4:	4907      	ldr	r1, [pc, #28]	; (80729c4 <__NVIC_EnableIRQ+0x38>)
 80729a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80729aa:	095b      	lsrs	r3, r3, #5
 80729ac:	2001      	movs	r0, #1
 80729ae:	fa00 f202 	lsl.w	r2, r0, r2
 80729b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80729b6:	bf00      	nop
 80729b8:	370c      	adds	r7, #12
 80729ba:	46bd      	mov	sp, r7
 80729bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80729c0:	4770      	bx	lr
 80729c2:	bf00      	nop
 80729c4:	e000e100 	.word	0xe000e100

080729c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80729c8:	b480      	push	{r7}
 80729ca:	b083      	sub	sp, #12
 80729cc:	af00      	add	r7, sp, #0
 80729ce:	4603      	mov	r3, r0
 80729d0:	6039      	str	r1, [r7, #0]
 80729d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80729d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80729d8:	2b00      	cmp	r3, #0
 80729da:	db0a      	blt.n	80729f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80729dc:	683b      	ldr	r3, [r7, #0]
 80729de:	b2da      	uxtb	r2, r3
 80729e0:	490c      	ldr	r1, [pc, #48]	; (8072a14 <__NVIC_SetPriority+0x4c>)
 80729e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80729e6:	0112      	lsls	r2, r2, #4
 80729e8:	b2d2      	uxtb	r2, r2
 80729ea:	440b      	add	r3, r1
 80729ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80729f0:	e00a      	b.n	8072a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80729f2:	683b      	ldr	r3, [r7, #0]
 80729f4:	b2da      	uxtb	r2, r3
 80729f6:	4908      	ldr	r1, [pc, #32]	; (8072a18 <__NVIC_SetPriority+0x50>)
 80729f8:	79fb      	ldrb	r3, [r7, #7]
 80729fa:	f003 030f 	and.w	r3, r3, #15
 80729fe:	3b04      	subs	r3, #4
 8072a00:	0112      	lsls	r2, r2, #4
 8072a02:	b2d2      	uxtb	r2, r2
 8072a04:	440b      	add	r3, r1
 8072a06:	761a      	strb	r2, [r3, #24]
}
 8072a08:	bf00      	nop
 8072a0a:	370c      	adds	r7, #12
 8072a0c:	46bd      	mov	sp, r7
 8072a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072a12:	4770      	bx	lr
 8072a14:	e000e100 	.word	0xe000e100
 8072a18:	e000ed00 	.word	0xe000ed00

08072a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8072a1c:	b480      	push	{r7}
 8072a1e:	b089      	sub	sp, #36	; 0x24
 8072a20:	af00      	add	r7, sp, #0
 8072a22:	60f8      	str	r0, [r7, #12]
 8072a24:	60b9      	str	r1, [r7, #8]
 8072a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8072a28:	68fb      	ldr	r3, [r7, #12]
 8072a2a:	f003 0307 	and.w	r3, r3, #7
 8072a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8072a30:	69fb      	ldr	r3, [r7, #28]
 8072a32:	f1c3 0307 	rsb	r3, r3, #7
 8072a36:	2b04      	cmp	r3, #4
 8072a38:	bf28      	it	cs
 8072a3a:	2304      	movcs	r3, #4
 8072a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8072a3e:	69fb      	ldr	r3, [r7, #28]
 8072a40:	3304      	adds	r3, #4
 8072a42:	2b06      	cmp	r3, #6
 8072a44:	d902      	bls.n	8072a4c <NVIC_EncodePriority+0x30>
 8072a46:	69fb      	ldr	r3, [r7, #28]
 8072a48:	3b03      	subs	r3, #3
 8072a4a:	e000      	b.n	8072a4e <NVIC_EncodePriority+0x32>
 8072a4c:	2300      	movs	r3, #0
 8072a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8072a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8072a54:	69bb      	ldr	r3, [r7, #24]
 8072a56:	fa02 f303 	lsl.w	r3, r2, r3
 8072a5a:	43da      	mvns	r2, r3
 8072a5c:	68bb      	ldr	r3, [r7, #8]
 8072a5e:	401a      	ands	r2, r3
 8072a60:	697b      	ldr	r3, [r7, #20]
 8072a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8072a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8072a68:	697b      	ldr	r3, [r7, #20]
 8072a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8072a6e:	43d9      	mvns	r1, r3
 8072a70:	687b      	ldr	r3, [r7, #4]
 8072a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8072a74:	4313      	orrs	r3, r2
         );
}
 8072a76:	4618      	mov	r0, r3
 8072a78:	3724      	adds	r7, #36	; 0x24
 8072a7a:	46bd      	mov	sp, r7
 8072a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072a80:	4770      	bx	lr
	...

08072a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8072a84:	b580      	push	{r7, lr}
 8072a86:	b082      	sub	sp, #8
 8072a88:	af00      	add	r7, sp, #0
 8072a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8072a8c:	687b      	ldr	r3, [r7, #4]
 8072a8e:	3b01      	subs	r3, #1
 8072a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8072a94:	d301      	bcc.n	8072a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8072a96:	2301      	movs	r3, #1
 8072a98:	e00f      	b.n	8072aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8072a9a:	4a0a      	ldr	r2, [pc, #40]	; (8072ac4 <SysTick_Config+0x40>)
 8072a9c:	687b      	ldr	r3, [r7, #4]
 8072a9e:	3b01      	subs	r3, #1
 8072aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8072aa2:	210f      	movs	r1, #15
 8072aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8072aa8:	f7ff ff8e 	bl	80729c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8072aac:	4b05      	ldr	r3, [pc, #20]	; (8072ac4 <SysTick_Config+0x40>)
 8072aae:	2200      	movs	r2, #0
 8072ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8072ab2:	4b04      	ldr	r3, [pc, #16]	; (8072ac4 <SysTick_Config+0x40>)
 8072ab4:	2207      	movs	r2, #7
 8072ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8072ab8:	2300      	movs	r3, #0
}
 8072aba:	4618      	mov	r0, r3
 8072abc:	3708      	adds	r7, #8
 8072abe:	46bd      	mov	sp, r7
 8072ac0:	bd80      	pop	{r7, pc}
 8072ac2:	bf00      	nop
 8072ac4:	e000e010 	.word	0xe000e010

08072ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8072ac8:	b580      	push	{r7, lr}
 8072aca:	b082      	sub	sp, #8
 8072acc:	af00      	add	r7, sp, #0
 8072ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8072ad0:	6878      	ldr	r0, [r7, #4]
 8072ad2:	f7ff ff29 	bl	8072928 <__NVIC_SetPriorityGrouping>
}
 8072ad6:	bf00      	nop
 8072ad8:	3708      	adds	r7, #8
 8072ada:	46bd      	mov	sp, r7
 8072adc:	bd80      	pop	{r7, pc}

08072ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8072ade:	b580      	push	{r7, lr}
 8072ae0:	b086      	sub	sp, #24
 8072ae2:	af00      	add	r7, sp, #0
 8072ae4:	4603      	mov	r3, r0
 8072ae6:	60b9      	str	r1, [r7, #8]
 8072ae8:	607a      	str	r2, [r7, #4]
 8072aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8072aec:	2300      	movs	r3, #0
 8072aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8072af0:	f7ff ff3e 	bl	8072970 <__NVIC_GetPriorityGrouping>
 8072af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8072af6:	687a      	ldr	r2, [r7, #4]
 8072af8:	68b9      	ldr	r1, [r7, #8]
 8072afa:	6978      	ldr	r0, [r7, #20]
 8072afc:	f7ff ff8e 	bl	8072a1c <NVIC_EncodePriority>
 8072b00:	4602      	mov	r2, r0
 8072b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8072b06:	4611      	mov	r1, r2
 8072b08:	4618      	mov	r0, r3
 8072b0a:	f7ff ff5d 	bl	80729c8 <__NVIC_SetPriority>
}
 8072b0e:	bf00      	nop
 8072b10:	3718      	adds	r7, #24
 8072b12:	46bd      	mov	sp, r7
 8072b14:	bd80      	pop	{r7, pc}

08072b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8072b16:	b580      	push	{r7, lr}
 8072b18:	b082      	sub	sp, #8
 8072b1a:	af00      	add	r7, sp, #0
 8072b1c:	4603      	mov	r3, r0
 8072b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8072b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8072b24:	4618      	mov	r0, r3
 8072b26:	f7ff ff31 	bl	807298c <__NVIC_EnableIRQ>
}
 8072b2a:	bf00      	nop
 8072b2c:	3708      	adds	r7, #8
 8072b2e:	46bd      	mov	sp, r7
 8072b30:	bd80      	pop	{r7, pc}

08072b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8072b32:	b580      	push	{r7, lr}
 8072b34:	b082      	sub	sp, #8
 8072b36:	af00      	add	r7, sp, #0
 8072b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8072b3a:	6878      	ldr	r0, [r7, #4]
 8072b3c:	f7ff ffa2 	bl	8072a84 <SysTick_Config>
 8072b40:	4603      	mov	r3, r0
}
 8072b42:	4618      	mov	r0, r3
 8072b44:	3708      	adds	r7, #8
 8072b46:	46bd      	mov	sp, r7
 8072b48:	bd80      	pop	{r7, pc}
	...

08072b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8072b4c:	b480      	push	{r7}
 8072b4e:	b089      	sub	sp, #36	; 0x24
 8072b50:	af00      	add	r7, sp, #0
 8072b52:	6078      	str	r0, [r7, #4]
 8072b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8072b56:	2300      	movs	r3, #0
 8072b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8072b5a:	2300      	movs	r3, #0
 8072b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8072b5e:	2300      	movs	r3, #0
 8072b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8072b62:	2300      	movs	r3, #0
 8072b64:	61fb      	str	r3, [r7, #28]
 8072b66:	e159      	b.n	8072e1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8072b68:	2201      	movs	r2, #1
 8072b6a:	69fb      	ldr	r3, [r7, #28]
 8072b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8072b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8072b72:	683b      	ldr	r3, [r7, #0]
 8072b74:	681b      	ldr	r3, [r3, #0]
 8072b76:	697a      	ldr	r2, [r7, #20]
 8072b78:	4013      	ands	r3, r2
 8072b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8072b7c:	693a      	ldr	r2, [r7, #16]
 8072b7e:	697b      	ldr	r3, [r7, #20]
 8072b80:	429a      	cmp	r2, r3
 8072b82:	f040 8148 	bne.w	8072e16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8072b86:	683b      	ldr	r3, [r7, #0]
 8072b88:	685b      	ldr	r3, [r3, #4]
 8072b8a:	f003 0303 	and.w	r3, r3, #3
 8072b8e:	2b01      	cmp	r3, #1
 8072b90:	d005      	beq.n	8072b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8072b92:	683b      	ldr	r3, [r7, #0]
 8072b94:	685b      	ldr	r3, [r3, #4]
 8072b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8072b9a:	2b02      	cmp	r3, #2
 8072b9c:	d130      	bne.n	8072c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8072b9e:	687b      	ldr	r3, [r7, #4]
 8072ba0:	689b      	ldr	r3, [r3, #8]
 8072ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8072ba4:	69fb      	ldr	r3, [r7, #28]
 8072ba6:	005b      	lsls	r3, r3, #1
 8072ba8:	2203      	movs	r2, #3
 8072baa:	fa02 f303 	lsl.w	r3, r2, r3
 8072bae:	43db      	mvns	r3, r3
 8072bb0:	69ba      	ldr	r2, [r7, #24]
 8072bb2:	4013      	ands	r3, r2
 8072bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8072bb6:	683b      	ldr	r3, [r7, #0]
 8072bb8:	68da      	ldr	r2, [r3, #12]
 8072bba:	69fb      	ldr	r3, [r7, #28]
 8072bbc:	005b      	lsls	r3, r3, #1
 8072bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8072bc2:	69ba      	ldr	r2, [r7, #24]
 8072bc4:	4313      	orrs	r3, r2
 8072bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8072bc8:	687b      	ldr	r3, [r7, #4]
 8072bca:	69ba      	ldr	r2, [r7, #24]
 8072bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8072bce:	687b      	ldr	r3, [r7, #4]
 8072bd0:	685b      	ldr	r3, [r3, #4]
 8072bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8072bd4:	2201      	movs	r2, #1
 8072bd6:	69fb      	ldr	r3, [r7, #28]
 8072bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8072bdc:	43db      	mvns	r3, r3
 8072bde:	69ba      	ldr	r2, [r7, #24]
 8072be0:	4013      	ands	r3, r2
 8072be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8072be4:	683b      	ldr	r3, [r7, #0]
 8072be6:	685b      	ldr	r3, [r3, #4]
 8072be8:	091b      	lsrs	r3, r3, #4
 8072bea:	f003 0201 	and.w	r2, r3, #1
 8072bee:	69fb      	ldr	r3, [r7, #28]
 8072bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8072bf4:	69ba      	ldr	r2, [r7, #24]
 8072bf6:	4313      	orrs	r3, r2
 8072bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8072bfa:	687b      	ldr	r3, [r7, #4]
 8072bfc:	69ba      	ldr	r2, [r7, #24]
 8072bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8072c00:	683b      	ldr	r3, [r7, #0]
 8072c02:	685b      	ldr	r3, [r3, #4]
 8072c04:	f003 0303 	and.w	r3, r3, #3
 8072c08:	2b03      	cmp	r3, #3
 8072c0a:	d017      	beq.n	8072c3c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8072c0c:	687b      	ldr	r3, [r7, #4]
 8072c0e:	68db      	ldr	r3, [r3, #12]
 8072c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8072c12:	69fb      	ldr	r3, [r7, #28]
 8072c14:	005b      	lsls	r3, r3, #1
 8072c16:	2203      	movs	r2, #3
 8072c18:	fa02 f303 	lsl.w	r3, r2, r3
 8072c1c:	43db      	mvns	r3, r3
 8072c1e:	69ba      	ldr	r2, [r7, #24]
 8072c20:	4013      	ands	r3, r2
 8072c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8072c24:	683b      	ldr	r3, [r7, #0]
 8072c26:	689a      	ldr	r2, [r3, #8]
 8072c28:	69fb      	ldr	r3, [r7, #28]
 8072c2a:	005b      	lsls	r3, r3, #1
 8072c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8072c30:	69ba      	ldr	r2, [r7, #24]
 8072c32:	4313      	orrs	r3, r2
 8072c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8072c36:	687b      	ldr	r3, [r7, #4]
 8072c38:	69ba      	ldr	r2, [r7, #24]
 8072c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8072c3c:	683b      	ldr	r3, [r7, #0]
 8072c3e:	685b      	ldr	r3, [r3, #4]
 8072c40:	f003 0303 	and.w	r3, r3, #3
 8072c44:	2b02      	cmp	r3, #2
 8072c46:	d123      	bne.n	8072c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8072c48:	69fb      	ldr	r3, [r7, #28]
 8072c4a:	08da      	lsrs	r2, r3, #3
 8072c4c:	687b      	ldr	r3, [r7, #4]
 8072c4e:	3208      	adds	r2, #8
 8072c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8072c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8072c56:	69fb      	ldr	r3, [r7, #28]
 8072c58:	f003 0307 	and.w	r3, r3, #7
 8072c5c:	009b      	lsls	r3, r3, #2
 8072c5e:	220f      	movs	r2, #15
 8072c60:	fa02 f303 	lsl.w	r3, r2, r3
 8072c64:	43db      	mvns	r3, r3
 8072c66:	69ba      	ldr	r2, [r7, #24]
 8072c68:	4013      	ands	r3, r2
 8072c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8072c6c:	683b      	ldr	r3, [r7, #0]
 8072c6e:	691a      	ldr	r2, [r3, #16]
 8072c70:	69fb      	ldr	r3, [r7, #28]
 8072c72:	f003 0307 	and.w	r3, r3, #7
 8072c76:	009b      	lsls	r3, r3, #2
 8072c78:	fa02 f303 	lsl.w	r3, r2, r3
 8072c7c:	69ba      	ldr	r2, [r7, #24]
 8072c7e:	4313      	orrs	r3, r2
 8072c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8072c82:	69fb      	ldr	r3, [r7, #28]
 8072c84:	08da      	lsrs	r2, r3, #3
 8072c86:	687b      	ldr	r3, [r7, #4]
 8072c88:	3208      	adds	r2, #8
 8072c8a:	69b9      	ldr	r1, [r7, #24]
 8072c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8072c90:	687b      	ldr	r3, [r7, #4]
 8072c92:	681b      	ldr	r3, [r3, #0]
 8072c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8072c96:	69fb      	ldr	r3, [r7, #28]
 8072c98:	005b      	lsls	r3, r3, #1
 8072c9a:	2203      	movs	r2, #3
 8072c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8072ca0:	43db      	mvns	r3, r3
 8072ca2:	69ba      	ldr	r2, [r7, #24]
 8072ca4:	4013      	ands	r3, r2
 8072ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8072ca8:	683b      	ldr	r3, [r7, #0]
 8072caa:	685b      	ldr	r3, [r3, #4]
 8072cac:	f003 0203 	and.w	r2, r3, #3
 8072cb0:	69fb      	ldr	r3, [r7, #28]
 8072cb2:	005b      	lsls	r3, r3, #1
 8072cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8072cb8:	69ba      	ldr	r2, [r7, #24]
 8072cba:	4313      	orrs	r3, r2
 8072cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8072cbe:	687b      	ldr	r3, [r7, #4]
 8072cc0:	69ba      	ldr	r2, [r7, #24]
 8072cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8072cc4:	683b      	ldr	r3, [r7, #0]
 8072cc6:	685b      	ldr	r3, [r3, #4]
 8072cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8072ccc:	2b00      	cmp	r3, #0
 8072cce:	f000 80a2 	beq.w	8072e16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8072cd2:	2300      	movs	r3, #0
 8072cd4:	60fb      	str	r3, [r7, #12]
 8072cd6:	4b57      	ldr	r3, [pc, #348]	; (8072e34 <HAL_GPIO_Init+0x2e8>)
 8072cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8072cda:	4a56      	ldr	r2, [pc, #344]	; (8072e34 <HAL_GPIO_Init+0x2e8>)
 8072cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8072ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8072ce2:	4b54      	ldr	r3, [pc, #336]	; (8072e34 <HAL_GPIO_Init+0x2e8>)
 8072ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8072ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8072cea:	60fb      	str	r3, [r7, #12]
 8072cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8072cee:	4a52      	ldr	r2, [pc, #328]	; (8072e38 <HAL_GPIO_Init+0x2ec>)
 8072cf0:	69fb      	ldr	r3, [r7, #28]
 8072cf2:	089b      	lsrs	r3, r3, #2
 8072cf4:	3302      	adds	r3, #2
 8072cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8072cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8072cfc:	69fb      	ldr	r3, [r7, #28]
 8072cfe:	f003 0303 	and.w	r3, r3, #3
 8072d02:	009b      	lsls	r3, r3, #2
 8072d04:	220f      	movs	r2, #15
 8072d06:	fa02 f303 	lsl.w	r3, r2, r3
 8072d0a:	43db      	mvns	r3, r3
 8072d0c:	69ba      	ldr	r2, [r7, #24]
 8072d0e:	4013      	ands	r3, r2
 8072d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8072d12:	687b      	ldr	r3, [r7, #4]
 8072d14:	4a49      	ldr	r2, [pc, #292]	; (8072e3c <HAL_GPIO_Init+0x2f0>)
 8072d16:	4293      	cmp	r3, r2
 8072d18:	d019      	beq.n	8072d4e <HAL_GPIO_Init+0x202>
 8072d1a:	687b      	ldr	r3, [r7, #4]
 8072d1c:	4a48      	ldr	r2, [pc, #288]	; (8072e40 <HAL_GPIO_Init+0x2f4>)
 8072d1e:	4293      	cmp	r3, r2
 8072d20:	d013      	beq.n	8072d4a <HAL_GPIO_Init+0x1fe>
 8072d22:	687b      	ldr	r3, [r7, #4]
 8072d24:	4a47      	ldr	r2, [pc, #284]	; (8072e44 <HAL_GPIO_Init+0x2f8>)
 8072d26:	4293      	cmp	r3, r2
 8072d28:	d00d      	beq.n	8072d46 <HAL_GPIO_Init+0x1fa>
 8072d2a:	687b      	ldr	r3, [r7, #4]
 8072d2c:	4a46      	ldr	r2, [pc, #280]	; (8072e48 <HAL_GPIO_Init+0x2fc>)
 8072d2e:	4293      	cmp	r3, r2
 8072d30:	d007      	beq.n	8072d42 <HAL_GPIO_Init+0x1f6>
 8072d32:	687b      	ldr	r3, [r7, #4]
 8072d34:	4a45      	ldr	r2, [pc, #276]	; (8072e4c <HAL_GPIO_Init+0x300>)
 8072d36:	4293      	cmp	r3, r2
 8072d38:	d101      	bne.n	8072d3e <HAL_GPIO_Init+0x1f2>
 8072d3a:	2304      	movs	r3, #4
 8072d3c:	e008      	b.n	8072d50 <HAL_GPIO_Init+0x204>
 8072d3e:	2307      	movs	r3, #7
 8072d40:	e006      	b.n	8072d50 <HAL_GPIO_Init+0x204>
 8072d42:	2303      	movs	r3, #3
 8072d44:	e004      	b.n	8072d50 <HAL_GPIO_Init+0x204>
 8072d46:	2302      	movs	r3, #2
 8072d48:	e002      	b.n	8072d50 <HAL_GPIO_Init+0x204>
 8072d4a:	2301      	movs	r3, #1
 8072d4c:	e000      	b.n	8072d50 <HAL_GPIO_Init+0x204>
 8072d4e:	2300      	movs	r3, #0
 8072d50:	69fa      	ldr	r2, [r7, #28]
 8072d52:	f002 0203 	and.w	r2, r2, #3
 8072d56:	0092      	lsls	r2, r2, #2
 8072d58:	4093      	lsls	r3, r2
 8072d5a:	69ba      	ldr	r2, [r7, #24]
 8072d5c:	4313      	orrs	r3, r2
 8072d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8072d60:	4935      	ldr	r1, [pc, #212]	; (8072e38 <HAL_GPIO_Init+0x2ec>)
 8072d62:	69fb      	ldr	r3, [r7, #28]
 8072d64:	089b      	lsrs	r3, r3, #2
 8072d66:	3302      	adds	r3, #2
 8072d68:	69ba      	ldr	r2, [r7, #24]
 8072d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8072d6e:	4b38      	ldr	r3, [pc, #224]	; (8072e50 <HAL_GPIO_Init+0x304>)
 8072d70:	681b      	ldr	r3, [r3, #0]
 8072d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8072d74:	693b      	ldr	r3, [r7, #16]
 8072d76:	43db      	mvns	r3, r3
 8072d78:	69ba      	ldr	r2, [r7, #24]
 8072d7a:	4013      	ands	r3, r2
 8072d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8072d7e:	683b      	ldr	r3, [r7, #0]
 8072d80:	685b      	ldr	r3, [r3, #4]
 8072d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8072d86:	2b00      	cmp	r3, #0
 8072d88:	d003      	beq.n	8072d92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8072d8a:	69ba      	ldr	r2, [r7, #24]
 8072d8c:	693b      	ldr	r3, [r7, #16]
 8072d8e:	4313      	orrs	r3, r2
 8072d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8072d92:	4a2f      	ldr	r2, [pc, #188]	; (8072e50 <HAL_GPIO_Init+0x304>)
 8072d94:	69bb      	ldr	r3, [r7, #24]
 8072d96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8072d98:	4b2d      	ldr	r3, [pc, #180]	; (8072e50 <HAL_GPIO_Init+0x304>)
 8072d9a:	685b      	ldr	r3, [r3, #4]
 8072d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8072d9e:	693b      	ldr	r3, [r7, #16]
 8072da0:	43db      	mvns	r3, r3
 8072da2:	69ba      	ldr	r2, [r7, #24]
 8072da4:	4013      	ands	r3, r2
 8072da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8072da8:	683b      	ldr	r3, [r7, #0]
 8072daa:	685b      	ldr	r3, [r3, #4]
 8072dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8072db0:	2b00      	cmp	r3, #0
 8072db2:	d003      	beq.n	8072dbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8072db4:	69ba      	ldr	r2, [r7, #24]
 8072db6:	693b      	ldr	r3, [r7, #16]
 8072db8:	4313      	orrs	r3, r2
 8072dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8072dbc:	4a24      	ldr	r2, [pc, #144]	; (8072e50 <HAL_GPIO_Init+0x304>)
 8072dbe:	69bb      	ldr	r3, [r7, #24]
 8072dc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8072dc2:	4b23      	ldr	r3, [pc, #140]	; (8072e50 <HAL_GPIO_Init+0x304>)
 8072dc4:	689b      	ldr	r3, [r3, #8]
 8072dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8072dc8:	693b      	ldr	r3, [r7, #16]
 8072dca:	43db      	mvns	r3, r3
 8072dcc:	69ba      	ldr	r2, [r7, #24]
 8072dce:	4013      	ands	r3, r2
 8072dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8072dd2:	683b      	ldr	r3, [r7, #0]
 8072dd4:	685b      	ldr	r3, [r3, #4]
 8072dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8072dda:	2b00      	cmp	r3, #0
 8072ddc:	d003      	beq.n	8072de6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8072dde:	69ba      	ldr	r2, [r7, #24]
 8072de0:	693b      	ldr	r3, [r7, #16]
 8072de2:	4313      	orrs	r3, r2
 8072de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8072de6:	4a1a      	ldr	r2, [pc, #104]	; (8072e50 <HAL_GPIO_Init+0x304>)
 8072de8:	69bb      	ldr	r3, [r7, #24]
 8072dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8072dec:	4b18      	ldr	r3, [pc, #96]	; (8072e50 <HAL_GPIO_Init+0x304>)
 8072dee:	68db      	ldr	r3, [r3, #12]
 8072df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8072df2:	693b      	ldr	r3, [r7, #16]
 8072df4:	43db      	mvns	r3, r3
 8072df6:	69ba      	ldr	r2, [r7, #24]
 8072df8:	4013      	ands	r3, r2
 8072dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8072dfc:	683b      	ldr	r3, [r7, #0]
 8072dfe:	685b      	ldr	r3, [r3, #4]
 8072e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8072e04:	2b00      	cmp	r3, #0
 8072e06:	d003      	beq.n	8072e10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8072e08:	69ba      	ldr	r2, [r7, #24]
 8072e0a:	693b      	ldr	r3, [r7, #16]
 8072e0c:	4313      	orrs	r3, r2
 8072e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8072e10:	4a0f      	ldr	r2, [pc, #60]	; (8072e50 <HAL_GPIO_Init+0x304>)
 8072e12:	69bb      	ldr	r3, [r7, #24]
 8072e14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8072e16:	69fb      	ldr	r3, [r7, #28]
 8072e18:	3301      	adds	r3, #1
 8072e1a:	61fb      	str	r3, [r7, #28]
 8072e1c:	69fb      	ldr	r3, [r7, #28]
 8072e1e:	2b0f      	cmp	r3, #15
 8072e20:	f67f aea2 	bls.w	8072b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8072e24:	bf00      	nop
 8072e26:	bf00      	nop
 8072e28:	3724      	adds	r7, #36	; 0x24
 8072e2a:	46bd      	mov	sp, r7
 8072e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072e30:	4770      	bx	lr
 8072e32:	bf00      	nop
 8072e34:	40023800 	.word	0x40023800
 8072e38:	40013800 	.word	0x40013800
 8072e3c:	40020000 	.word	0x40020000
 8072e40:	40020400 	.word	0x40020400
 8072e44:	40020800 	.word	0x40020800
 8072e48:	40020c00 	.word	0x40020c00
 8072e4c:	40021000 	.word	0x40021000
 8072e50:	40013c00 	.word	0x40013c00

08072e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8072e54:	b480      	push	{r7}
 8072e56:	b083      	sub	sp, #12
 8072e58:	af00      	add	r7, sp, #0
 8072e5a:	6078      	str	r0, [r7, #4]
 8072e5c:	460b      	mov	r3, r1
 8072e5e:	807b      	strh	r3, [r7, #2]
 8072e60:	4613      	mov	r3, r2
 8072e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8072e64:	787b      	ldrb	r3, [r7, #1]
 8072e66:	2b00      	cmp	r3, #0
 8072e68:	d003      	beq.n	8072e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8072e6a:	887a      	ldrh	r2, [r7, #2]
 8072e6c:	687b      	ldr	r3, [r7, #4]
 8072e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8072e70:	e003      	b.n	8072e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8072e72:	887b      	ldrh	r3, [r7, #2]
 8072e74:	041a      	lsls	r2, r3, #16
 8072e76:	687b      	ldr	r3, [r7, #4]
 8072e78:	619a      	str	r2, [r3, #24]
}
 8072e7a:	bf00      	nop
 8072e7c:	370c      	adds	r7, #12
 8072e7e:	46bd      	mov	sp, r7
 8072e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072e84:	4770      	bx	lr

08072e86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8072e86:	b480      	push	{r7}
 8072e88:	b085      	sub	sp, #20
 8072e8a:	af00      	add	r7, sp, #0
 8072e8c:	6078      	str	r0, [r7, #4]
 8072e8e:	460b      	mov	r3, r1
 8072e90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8072e92:	687b      	ldr	r3, [r7, #4]
 8072e94:	695b      	ldr	r3, [r3, #20]
 8072e96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8072e98:	887a      	ldrh	r2, [r7, #2]
 8072e9a:	68fb      	ldr	r3, [r7, #12]
 8072e9c:	4013      	ands	r3, r2
 8072e9e:	041a      	lsls	r2, r3, #16
 8072ea0:	68fb      	ldr	r3, [r7, #12]
 8072ea2:	43d9      	mvns	r1, r3
 8072ea4:	887b      	ldrh	r3, [r7, #2]
 8072ea6:	400b      	ands	r3, r1
 8072ea8:	431a      	orrs	r2, r3
 8072eaa:	687b      	ldr	r3, [r7, #4]
 8072eac:	619a      	str	r2, [r3, #24]
}
 8072eae:	bf00      	nop
 8072eb0:	3714      	adds	r7, #20
 8072eb2:	46bd      	mov	sp, r7
 8072eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072eb8:	4770      	bx	lr

08072eba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8072eba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8072ebc:	b08f      	sub	sp, #60	; 0x3c
 8072ebe:	af0a      	add	r7, sp, #40	; 0x28
 8072ec0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8072ec2:	687b      	ldr	r3, [r7, #4]
 8072ec4:	2b00      	cmp	r3, #0
 8072ec6:	d101      	bne.n	8072ecc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8072ec8:	2301      	movs	r3, #1
 8072eca:	e10f      	b.n	80730ec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8072ecc:	687b      	ldr	r3, [r7, #4]
 8072ece:	681b      	ldr	r3, [r3, #0]
 8072ed0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8072ed2:	687b      	ldr	r3, [r7, #4]
 8072ed4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8072ed8:	b2db      	uxtb	r3, r3
 8072eda:	2b00      	cmp	r3, #0
 8072edc:	d106      	bne.n	8072eec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8072ede:	687b      	ldr	r3, [r7, #4]
 8072ee0:	2200      	movs	r2, #0
 8072ee2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8072ee6:	6878      	ldr	r0, [r7, #4]
 8072ee8:	f005 f91c 	bl	8078124 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8072eec:	687b      	ldr	r3, [r7, #4]
 8072eee:	2203      	movs	r2, #3
 8072ef0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8072ef4:	68bb      	ldr	r3, [r7, #8]
 8072ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8072ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8072efc:	2b00      	cmp	r3, #0
 8072efe:	d102      	bne.n	8072f06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8072f00:	687b      	ldr	r3, [r7, #4]
 8072f02:	2200      	movs	r2, #0
 8072f04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8072f06:	687b      	ldr	r3, [r7, #4]
 8072f08:	681b      	ldr	r3, [r3, #0]
 8072f0a:	4618      	mov	r0, r3
 8072f0c:	f001 fe65 	bl	8074bda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8072f10:	687b      	ldr	r3, [r7, #4]
 8072f12:	681b      	ldr	r3, [r3, #0]
 8072f14:	603b      	str	r3, [r7, #0]
 8072f16:	687e      	ldr	r6, [r7, #4]
 8072f18:	466d      	mov	r5, sp
 8072f1a:	f106 0410 	add.w	r4, r6, #16
 8072f1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8072f20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8072f22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8072f24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8072f26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8072f2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8072f2e:	1d33      	adds	r3, r6, #4
 8072f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8072f32:	6838      	ldr	r0, [r7, #0]
 8072f34:	f001 fd3c 	bl	80749b0 <USB_CoreInit>
 8072f38:	4603      	mov	r3, r0
 8072f3a:	2b00      	cmp	r3, #0
 8072f3c:	d005      	beq.n	8072f4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8072f3e:	687b      	ldr	r3, [r7, #4]
 8072f40:	2202      	movs	r2, #2
 8072f42:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8072f46:	2301      	movs	r3, #1
 8072f48:	e0d0      	b.n	80730ec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8072f4a:	687b      	ldr	r3, [r7, #4]
 8072f4c:	681b      	ldr	r3, [r3, #0]
 8072f4e:	2100      	movs	r1, #0
 8072f50:	4618      	mov	r0, r3
 8072f52:	f001 fe53 	bl	8074bfc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8072f56:	2300      	movs	r3, #0
 8072f58:	73fb      	strb	r3, [r7, #15]
 8072f5a:	e04a      	b.n	8072ff2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8072f5c:	7bfa      	ldrb	r2, [r7, #15]
 8072f5e:	6879      	ldr	r1, [r7, #4]
 8072f60:	4613      	mov	r3, r2
 8072f62:	00db      	lsls	r3, r3, #3
 8072f64:	1a9b      	subs	r3, r3, r2
 8072f66:	009b      	lsls	r3, r3, #2
 8072f68:	440b      	add	r3, r1
 8072f6a:	333d      	adds	r3, #61	; 0x3d
 8072f6c:	2201      	movs	r2, #1
 8072f6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8072f70:	7bfa      	ldrb	r2, [r7, #15]
 8072f72:	6879      	ldr	r1, [r7, #4]
 8072f74:	4613      	mov	r3, r2
 8072f76:	00db      	lsls	r3, r3, #3
 8072f78:	1a9b      	subs	r3, r3, r2
 8072f7a:	009b      	lsls	r3, r3, #2
 8072f7c:	440b      	add	r3, r1
 8072f7e:	333c      	adds	r3, #60	; 0x3c
 8072f80:	7bfa      	ldrb	r2, [r7, #15]
 8072f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8072f84:	7bfa      	ldrb	r2, [r7, #15]
 8072f86:	7bfb      	ldrb	r3, [r7, #15]
 8072f88:	b298      	uxth	r0, r3
 8072f8a:	6879      	ldr	r1, [r7, #4]
 8072f8c:	4613      	mov	r3, r2
 8072f8e:	00db      	lsls	r3, r3, #3
 8072f90:	1a9b      	subs	r3, r3, r2
 8072f92:	009b      	lsls	r3, r3, #2
 8072f94:	440b      	add	r3, r1
 8072f96:	3342      	adds	r3, #66	; 0x42
 8072f98:	4602      	mov	r2, r0
 8072f9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8072f9c:	7bfa      	ldrb	r2, [r7, #15]
 8072f9e:	6879      	ldr	r1, [r7, #4]
 8072fa0:	4613      	mov	r3, r2
 8072fa2:	00db      	lsls	r3, r3, #3
 8072fa4:	1a9b      	subs	r3, r3, r2
 8072fa6:	009b      	lsls	r3, r3, #2
 8072fa8:	440b      	add	r3, r1
 8072faa:	333f      	adds	r3, #63	; 0x3f
 8072fac:	2200      	movs	r2, #0
 8072fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8072fb0:	7bfa      	ldrb	r2, [r7, #15]
 8072fb2:	6879      	ldr	r1, [r7, #4]
 8072fb4:	4613      	mov	r3, r2
 8072fb6:	00db      	lsls	r3, r3, #3
 8072fb8:	1a9b      	subs	r3, r3, r2
 8072fba:	009b      	lsls	r3, r3, #2
 8072fbc:	440b      	add	r3, r1
 8072fbe:	3344      	adds	r3, #68	; 0x44
 8072fc0:	2200      	movs	r2, #0
 8072fc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8072fc4:	7bfa      	ldrb	r2, [r7, #15]
 8072fc6:	6879      	ldr	r1, [r7, #4]
 8072fc8:	4613      	mov	r3, r2
 8072fca:	00db      	lsls	r3, r3, #3
 8072fcc:	1a9b      	subs	r3, r3, r2
 8072fce:	009b      	lsls	r3, r3, #2
 8072fd0:	440b      	add	r3, r1
 8072fd2:	3348      	adds	r3, #72	; 0x48
 8072fd4:	2200      	movs	r2, #0
 8072fd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8072fd8:	7bfa      	ldrb	r2, [r7, #15]
 8072fda:	6879      	ldr	r1, [r7, #4]
 8072fdc:	4613      	mov	r3, r2
 8072fde:	00db      	lsls	r3, r3, #3
 8072fe0:	1a9b      	subs	r3, r3, r2
 8072fe2:	009b      	lsls	r3, r3, #2
 8072fe4:	440b      	add	r3, r1
 8072fe6:	3350      	adds	r3, #80	; 0x50
 8072fe8:	2200      	movs	r2, #0
 8072fea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8072fec:	7bfb      	ldrb	r3, [r7, #15]
 8072fee:	3301      	adds	r3, #1
 8072ff0:	73fb      	strb	r3, [r7, #15]
 8072ff2:	7bfa      	ldrb	r2, [r7, #15]
 8072ff4:	687b      	ldr	r3, [r7, #4]
 8072ff6:	685b      	ldr	r3, [r3, #4]
 8072ff8:	429a      	cmp	r2, r3
 8072ffa:	d3af      	bcc.n	8072f5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8072ffc:	2300      	movs	r3, #0
 8072ffe:	73fb      	strb	r3, [r7, #15]
 8073000:	e044      	b.n	807308c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8073002:	7bfa      	ldrb	r2, [r7, #15]
 8073004:	6879      	ldr	r1, [r7, #4]
 8073006:	4613      	mov	r3, r2
 8073008:	00db      	lsls	r3, r3, #3
 807300a:	1a9b      	subs	r3, r3, r2
 807300c:	009b      	lsls	r3, r3, #2
 807300e:	440b      	add	r3, r1
 8073010:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8073014:	2200      	movs	r2, #0
 8073016:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8073018:	7bfa      	ldrb	r2, [r7, #15]
 807301a:	6879      	ldr	r1, [r7, #4]
 807301c:	4613      	mov	r3, r2
 807301e:	00db      	lsls	r3, r3, #3
 8073020:	1a9b      	subs	r3, r3, r2
 8073022:	009b      	lsls	r3, r3, #2
 8073024:	440b      	add	r3, r1
 8073026:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 807302a:	7bfa      	ldrb	r2, [r7, #15]
 807302c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 807302e:	7bfa      	ldrb	r2, [r7, #15]
 8073030:	6879      	ldr	r1, [r7, #4]
 8073032:	4613      	mov	r3, r2
 8073034:	00db      	lsls	r3, r3, #3
 8073036:	1a9b      	subs	r3, r3, r2
 8073038:	009b      	lsls	r3, r3, #2
 807303a:	440b      	add	r3, r1
 807303c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8073040:	2200      	movs	r2, #0
 8073042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8073044:	7bfa      	ldrb	r2, [r7, #15]
 8073046:	6879      	ldr	r1, [r7, #4]
 8073048:	4613      	mov	r3, r2
 807304a:	00db      	lsls	r3, r3, #3
 807304c:	1a9b      	subs	r3, r3, r2
 807304e:	009b      	lsls	r3, r3, #2
 8073050:	440b      	add	r3, r1
 8073052:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8073056:	2200      	movs	r2, #0
 8073058:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 807305a:	7bfa      	ldrb	r2, [r7, #15]
 807305c:	6879      	ldr	r1, [r7, #4]
 807305e:	4613      	mov	r3, r2
 8073060:	00db      	lsls	r3, r3, #3
 8073062:	1a9b      	subs	r3, r3, r2
 8073064:	009b      	lsls	r3, r3, #2
 8073066:	440b      	add	r3, r1
 8073068:	f503 7302 	add.w	r3, r3, #520	; 0x208
 807306c:	2200      	movs	r2, #0
 807306e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8073070:	7bfa      	ldrb	r2, [r7, #15]
 8073072:	6879      	ldr	r1, [r7, #4]
 8073074:	4613      	mov	r3, r2
 8073076:	00db      	lsls	r3, r3, #3
 8073078:	1a9b      	subs	r3, r3, r2
 807307a:	009b      	lsls	r3, r3, #2
 807307c:	440b      	add	r3, r1
 807307e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8073082:	2200      	movs	r2, #0
 8073084:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8073086:	7bfb      	ldrb	r3, [r7, #15]
 8073088:	3301      	adds	r3, #1
 807308a:	73fb      	strb	r3, [r7, #15]
 807308c:	7bfa      	ldrb	r2, [r7, #15]
 807308e:	687b      	ldr	r3, [r7, #4]
 8073090:	685b      	ldr	r3, [r3, #4]
 8073092:	429a      	cmp	r2, r3
 8073094:	d3b5      	bcc.n	8073002 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8073096:	687b      	ldr	r3, [r7, #4]
 8073098:	681b      	ldr	r3, [r3, #0]
 807309a:	603b      	str	r3, [r7, #0]
 807309c:	687e      	ldr	r6, [r7, #4]
 807309e:	466d      	mov	r5, sp
 80730a0:	f106 0410 	add.w	r4, r6, #16
 80730a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80730a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80730a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80730aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80730ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80730b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80730b4:	1d33      	adds	r3, r6, #4
 80730b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80730b8:	6838      	ldr	r0, [r7, #0]
 80730ba:	f001 fdc9 	bl	8074c50 <USB_DevInit>
 80730be:	4603      	mov	r3, r0
 80730c0:	2b00      	cmp	r3, #0
 80730c2:	d005      	beq.n	80730d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80730c4:	687b      	ldr	r3, [r7, #4]
 80730c6:	2202      	movs	r2, #2
 80730c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80730cc:	2301      	movs	r3, #1
 80730ce:	e00d      	b.n	80730ec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80730d0:	687b      	ldr	r3, [r7, #4]
 80730d2:	2200      	movs	r2, #0
 80730d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80730d8:	687b      	ldr	r3, [r7, #4]
 80730da:	2201      	movs	r2, #1
 80730dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80730e0:	687b      	ldr	r3, [r7, #4]
 80730e2:	681b      	ldr	r3, [r3, #0]
 80730e4:	4618      	mov	r0, r3
 80730e6:	f002 fd35 	bl	8075b54 <USB_DevDisconnect>

  return HAL_OK;
 80730ea:	2300      	movs	r3, #0
}
 80730ec:	4618      	mov	r0, r3
 80730ee:	3714      	adds	r7, #20
 80730f0:	46bd      	mov	sp, r7
 80730f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080730f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80730f4:	b580      	push	{r7, lr}
 80730f6:	b084      	sub	sp, #16
 80730f8:	af00      	add	r7, sp, #0
 80730fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80730fc:	687b      	ldr	r3, [r7, #4]
 80730fe:	681b      	ldr	r3, [r3, #0]
 8073100:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8073102:	687b      	ldr	r3, [r7, #4]
 8073104:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8073108:	2b01      	cmp	r3, #1
 807310a:	d101      	bne.n	8073110 <HAL_PCD_Start+0x1c>
 807310c:	2302      	movs	r3, #2
 807310e:	e020      	b.n	8073152 <HAL_PCD_Start+0x5e>
 8073110:	687b      	ldr	r3, [r7, #4]
 8073112:	2201      	movs	r2, #1
 8073114:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8073118:	687b      	ldr	r3, [r7, #4]
 807311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807311c:	2b01      	cmp	r3, #1
 807311e:	d109      	bne.n	8073134 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8073120:	687b      	ldr	r3, [r7, #4]
 8073122:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8073124:	2b01      	cmp	r3, #1
 8073126:	d005      	beq.n	8073134 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8073128:	68fb      	ldr	r3, [r7, #12]
 807312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807312c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8073130:	68fb      	ldr	r3, [r7, #12]
 8073132:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8073134:	687b      	ldr	r3, [r7, #4]
 8073136:	681b      	ldr	r3, [r3, #0]
 8073138:	4618      	mov	r0, r3
 807313a:	f001 fd3d 	bl	8074bb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 807313e:	687b      	ldr	r3, [r7, #4]
 8073140:	681b      	ldr	r3, [r3, #0]
 8073142:	4618      	mov	r0, r3
 8073144:	f002 fce5 	bl	8075b12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8073148:	687b      	ldr	r3, [r7, #4]
 807314a:	2200      	movs	r2, #0
 807314c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8073150:	2300      	movs	r3, #0
}
 8073152:	4618      	mov	r0, r3
 8073154:	3710      	adds	r7, #16
 8073156:	46bd      	mov	sp, r7
 8073158:	bd80      	pop	{r7, pc}

0807315a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 807315a:	b580      	push	{r7, lr}
 807315c:	b084      	sub	sp, #16
 807315e:	af00      	add	r7, sp, #0
 8073160:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8073162:	687b      	ldr	r3, [r7, #4]
 8073164:	681b      	ldr	r3, [r3, #0]
 8073166:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8073168:	687b      	ldr	r3, [r7, #4]
 807316a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 807316e:	2b01      	cmp	r3, #1
 8073170:	d101      	bne.n	8073176 <HAL_PCD_Stop+0x1c>
 8073172:	2302      	movs	r3, #2
 8073174:	e026      	b.n	80731c4 <HAL_PCD_Stop+0x6a>
 8073176:	687b      	ldr	r3, [r7, #4]
 8073178:	2201      	movs	r2, #1
 807317a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 807317e:	687b      	ldr	r3, [r7, #4]
 8073180:	681b      	ldr	r3, [r3, #0]
 8073182:	4618      	mov	r0, r3
 8073184:	f001 fd29 	bl	8074bda <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8073188:	687b      	ldr	r3, [r7, #4]
 807318a:	681b      	ldr	r3, [r3, #0]
 807318c:	4618      	mov	r0, r3
 807318e:	f002 fce1 	bl	8075b54 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8073192:	687b      	ldr	r3, [r7, #4]
 8073194:	681b      	ldr	r3, [r3, #0]
 8073196:	2110      	movs	r1, #16
 8073198:	4618      	mov	r0, r3
 807319a:	f001 febd 	bl	8074f18 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 807319e:	687b      	ldr	r3, [r7, #4]
 80731a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80731a2:	2b01      	cmp	r3, #1
 80731a4:	d109      	bne.n	80731ba <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80731a6:	687b      	ldr	r3, [r7, #4]
 80731a8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80731aa:	2b01      	cmp	r3, #1
 80731ac:	d005      	beq.n	80731ba <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80731ae:	68fb      	ldr	r3, [r7, #12]
 80731b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80731b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80731b6:	68fb      	ldr	r3, [r7, #12]
 80731b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 80731ba:	687b      	ldr	r3, [r7, #4]
 80731bc:	2200      	movs	r2, #0
 80731be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80731c2:	2300      	movs	r3, #0
}
 80731c4:	4618      	mov	r0, r3
 80731c6:	3710      	adds	r7, #16
 80731c8:	46bd      	mov	sp, r7
 80731ca:	bd80      	pop	{r7, pc}

080731cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80731cc:	b590      	push	{r4, r7, lr}
 80731ce:	b08d      	sub	sp, #52	; 0x34
 80731d0:	af00      	add	r7, sp, #0
 80731d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80731d4:	687b      	ldr	r3, [r7, #4]
 80731d6:	681b      	ldr	r3, [r3, #0]
 80731d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80731da:	6a3b      	ldr	r3, [r7, #32]
 80731dc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80731de:	687b      	ldr	r3, [r7, #4]
 80731e0:	681b      	ldr	r3, [r3, #0]
 80731e2:	4618      	mov	r0, r3
 80731e4:	f002 fd6a 	bl	8075cbc <USB_GetMode>
 80731e8:	4603      	mov	r3, r0
 80731ea:	2b00      	cmp	r3, #0
 80731ec:	f040 839d 	bne.w	807392a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80731f0:	687b      	ldr	r3, [r7, #4]
 80731f2:	681b      	ldr	r3, [r3, #0]
 80731f4:	4618      	mov	r0, r3
 80731f6:	f002 fcce 	bl	8075b96 <USB_ReadInterrupts>
 80731fa:	4603      	mov	r3, r0
 80731fc:	2b00      	cmp	r3, #0
 80731fe:	f000 8393 	beq.w	8073928 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8073202:	687b      	ldr	r3, [r7, #4]
 8073204:	681b      	ldr	r3, [r3, #0]
 8073206:	4618      	mov	r0, r3
 8073208:	f002 fcc5 	bl	8075b96 <USB_ReadInterrupts>
 807320c:	4603      	mov	r3, r0
 807320e:	f003 0302 	and.w	r3, r3, #2
 8073212:	2b02      	cmp	r3, #2
 8073214:	d107      	bne.n	8073226 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8073216:	687b      	ldr	r3, [r7, #4]
 8073218:	681b      	ldr	r3, [r3, #0]
 807321a:	695a      	ldr	r2, [r3, #20]
 807321c:	687b      	ldr	r3, [r7, #4]
 807321e:	681b      	ldr	r3, [r3, #0]
 8073220:	f002 0202 	and.w	r2, r2, #2
 8073224:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8073226:	687b      	ldr	r3, [r7, #4]
 8073228:	681b      	ldr	r3, [r3, #0]
 807322a:	4618      	mov	r0, r3
 807322c:	f002 fcb3 	bl	8075b96 <USB_ReadInterrupts>
 8073230:	4603      	mov	r3, r0
 8073232:	f003 0310 	and.w	r3, r3, #16
 8073236:	2b10      	cmp	r3, #16
 8073238:	d161      	bne.n	80732fe <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 807323a:	687b      	ldr	r3, [r7, #4]
 807323c:	681b      	ldr	r3, [r3, #0]
 807323e:	699a      	ldr	r2, [r3, #24]
 8073240:	687b      	ldr	r3, [r7, #4]
 8073242:	681b      	ldr	r3, [r3, #0]
 8073244:	f022 0210 	bic.w	r2, r2, #16
 8073248:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 807324a:	6a3b      	ldr	r3, [r7, #32]
 807324c:	6a1b      	ldr	r3, [r3, #32]
 807324e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8073250:	69bb      	ldr	r3, [r7, #24]
 8073252:	f003 020f 	and.w	r2, r3, #15
 8073256:	4613      	mov	r3, r2
 8073258:	00db      	lsls	r3, r3, #3
 807325a:	1a9b      	subs	r3, r3, r2
 807325c:	009b      	lsls	r3, r3, #2
 807325e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8073262:	687a      	ldr	r2, [r7, #4]
 8073264:	4413      	add	r3, r2
 8073266:	3304      	adds	r3, #4
 8073268:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 807326a:	69bb      	ldr	r3, [r7, #24]
 807326c:	0c5b      	lsrs	r3, r3, #17
 807326e:	f003 030f 	and.w	r3, r3, #15
 8073272:	2b02      	cmp	r3, #2
 8073274:	d124      	bne.n	80732c0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8073276:	69ba      	ldr	r2, [r7, #24]
 8073278:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 807327c:	4013      	ands	r3, r2
 807327e:	2b00      	cmp	r3, #0
 8073280:	d035      	beq.n	80732ee <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8073282:	697b      	ldr	r3, [r7, #20]
 8073284:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8073286:	69bb      	ldr	r3, [r7, #24]
 8073288:	091b      	lsrs	r3, r3, #4
 807328a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 807328c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8073290:	b29b      	uxth	r3, r3
 8073292:	461a      	mov	r2, r3
 8073294:	6a38      	ldr	r0, [r7, #32]
 8073296:	f002 fb19 	bl	80758cc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 807329a:	697b      	ldr	r3, [r7, #20]
 807329c:	68da      	ldr	r2, [r3, #12]
 807329e:	69bb      	ldr	r3, [r7, #24]
 80732a0:	091b      	lsrs	r3, r3, #4
 80732a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80732a6:	441a      	add	r2, r3
 80732a8:	697b      	ldr	r3, [r7, #20]
 80732aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80732ac:	697b      	ldr	r3, [r7, #20]
 80732ae:	699a      	ldr	r2, [r3, #24]
 80732b0:	69bb      	ldr	r3, [r7, #24]
 80732b2:	091b      	lsrs	r3, r3, #4
 80732b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80732b8:	441a      	add	r2, r3
 80732ba:	697b      	ldr	r3, [r7, #20]
 80732bc:	619a      	str	r2, [r3, #24]
 80732be:	e016      	b.n	80732ee <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80732c0:	69bb      	ldr	r3, [r7, #24]
 80732c2:	0c5b      	lsrs	r3, r3, #17
 80732c4:	f003 030f 	and.w	r3, r3, #15
 80732c8:	2b06      	cmp	r3, #6
 80732ca:	d110      	bne.n	80732ee <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80732cc:	687b      	ldr	r3, [r7, #4]
 80732ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80732d2:	2208      	movs	r2, #8
 80732d4:	4619      	mov	r1, r3
 80732d6:	6a38      	ldr	r0, [r7, #32]
 80732d8:	f002 faf8 	bl	80758cc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80732dc:	697b      	ldr	r3, [r7, #20]
 80732de:	699a      	ldr	r2, [r3, #24]
 80732e0:	69bb      	ldr	r3, [r7, #24]
 80732e2:	091b      	lsrs	r3, r3, #4
 80732e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80732e8:	441a      	add	r2, r3
 80732ea:	697b      	ldr	r3, [r7, #20]
 80732ec:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80732ee:	687b      	ldr	r3, [r7, #4]
 80732f0:	681b      	ldr	r3, [r3, #0]
 80732f2:	699a      	ldr	r2, [r3, #24]
 80732f4:	687b      	ldr	r3, [r7, #4]
 80732f6:	681b      	ldr	r3, [r3, #0]
 80732f8:	f042 0210 	orr.w	r2, r2, #16
 80732fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80732fe:	687b      	ldr	r3, [r7, #4]
 8073300:	681b      	ldr	r3, [r3, #0]
 8073302:	4618      	mov	r0, r3
 8073304:	f002 fc47 	bl	8075b96 <USB_ReadInterrupts>
 8073308:	4603      	mov	r3, r0
 807330a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 807330e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8073312:	d16e      	bne.n	80733f2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8073314:	2300      	movs	r3, #0
 8073316:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8073318:	687b      	ldr	r3, [r7, #4]
 807331a:	681b      	ldr	r3, [r3, #0]
 807331c:	4618      	mov	r0, r3
 807331e:	f002 fc4d 	bl	8075bbc <USB_ReadDevAllOutEpInterrupt>
 8073322:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8073324:	e062      	b.n	80733ec <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8073326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8073328:	f003 0301 	and.w	r3, r3, #1
 807332c:	2b00      	cmp	r3, #0
 807332e:	d057      	beq.n	80733e0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8073330:	687b      	ldr	r3, [r7, #4]
 8073332:	681b      	ldr	r3, [r3, #0]
 8073334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8073336:	b2d2      	uxtb	r2, r2
 8073338:	4611      	mov	r1, r2
 807333a:	4618      	mov	r0, r3
 807333c:	f002 fc72 	bl	8075c24 <USB_ReadDevOutEPInterrupt>
 8073340:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8073342:	693b      	ldr	r3, [r7, #16]
 8073344:	f003 0301 	and.w	r3, r3, #1
 8073348:	2b00      	cmp	r3, #0
 807334a:	d00c      	beq.n	8073366 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 807334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807334e:	015a      	lsls	r2, r3, #5
 8073350:	69fb      	ldr	r3, [r7, #28]
 8073352:	4413      	add	r3, r2
 8073354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073358:	461a      	mov	r2, r3
 807335a:	2301      	movs	r3, #1
 807335c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 807335e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8073360:	6878      	ldr	r0, [r7, #4]
 8073362:	f000 fd4f 	bl	8073e04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8073366:	693b      	ldr	r3, [r7, #16]
 8073368:	f003 0308 	and.w	r3, r3, #8
 807336c:	2b00      	cmp	r3, #0
 807336e:	d00c      	beq.n	807338a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8073370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073372:	015a      	lsls	r2, r3, #5
 8073374:	69fb      	ldr	r3, [r7, #28]
 8073376:	4413      	add	r3, r2
 8073378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807337c:	461a      	mov	r2, r3
 807337e:	2308      	movs	r3, #8
 8073380:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8073382:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8073384:	6878      	ldr	r0, [r7, #4]
 8073386:	f000 fe49 	bl	807401c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 807338a:	693b      	ldr	r3, [r7, #16]
 807338c:	f003 0310 	and.w	r3, r3, #16
 8073390:	2b00      	cmp	r3, #0
 8073392:	d008      	beq.n	80733a6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8073394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073396:	015a      	lsls	r2, r3, #5
 8073398:	69fb      	ldr	r3, [r7, #28]
 807339a:	4413      	add	r3, r2
 807339c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80733a0:	461a      	mov	r2, r3
 80733a2:	2310      	movs	r3, #16
 80733a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80733a6:	693b      	ldr	r3, [r7, #16]
 80733a8:	f003 0320 	and.w	r3, r3, #32
 80733ac:	2b00      	cmp	r3, #0
 80733ae:	d008      	beq.n	80733c2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80733b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80733b2:	015a      	lsls	r2, r3, #5
 80733b4:	69fb      	ldr	r3, [r7, #28]
 80733b6:	4413      	add	r3, r2
 80733b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80733bc:	461a      	mov	r2, r3
 80733be:	2320      	movs	r3, #32
 80733c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80733c2:	693b      	ldr	r3, [r7, #16]
 80733c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80733c8:	2b00      	cmp	r3, #0
 80733ca:	d009      	beq.n	80733e0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80733cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80733ce:	015a      	lsls	r2, r3, #5
 80733d0:	69fb      	ldr	r3, [r7, #28]
 80733d2:	4413      	add	r3, r2
 80733d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80733d8:	461a      	mov	r2, r3
 80733da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80733de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80733e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80733e2:	3301      	adds	r3, #1
 80733e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80733e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80733e8:	085b      	lsrs	r3, r3, #1
 80733ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80733ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80733ee:	2b00      	cmp	r3, #0
 80733f0:	d199      	bne.n	8073326 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80733f2:	687b      	ldr	r3, [r7, #4]
 80733f4:	681b      	ldr	r3, [r3, #0]
 80733f6:	4618      	mov	r0, r3
 80733f8:	f002 fbcd 	bl	8075b96 <USB_ReadInterrupts>
 80733fc:	4603      	mov	r3, r0
 80733fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8073402:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8073406:	f040 80c0 	bne.w	807358a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 807340a:	687b      	ldr	r3, [r7, #4]
 807340c:	681b      	ldr	r3, [r3, #0]
 807340e:	4618      	mov	r0, r3
 8073410:	f002 fbee 	bl	8075bf0 <USB_ReadDevAllInEpInterrupt>
 8073414:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8073416:	2300      	movs	r3, #0
 8073418:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 807341a:	e0b2      	b.n	8073582 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 807341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807341e:	f003 0301 	and.w	r3, r3, #1
 8073422:	2b00      	cmp	r3, #0
 8073424:	f000 80a7 	beq.w	8073576 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8073428:	687b      	ldr	r3, [r7, #4]
 807342a:	681b      	ldr	r3, [r3, #0]
 807342c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 807342e:	b2d2      	uxtb	r2, r2
 8073430:	4611      	mov	r1, r2
 8073432:	4618      	mov	r0, r3
 8073434:	f002 fc14 	bl	8075c60 <USB_ReadDevInEPInterrupt>
 8073438:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 807343a:	693b      	ldr	r3, [r7, #16]
 807343c:	f003 0301 	and.w	r3, r3, #1
 8073440:	2b00      	cmp	r3, #0
 8073442:	d057      	beq.n	80734f4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8073444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073446:	f003 030f 	and.w	r3, r3, #15
 807344a:	2201      	movs	r2, #1
 807344c:	fa02 f303 	lsl.w	r3, r2, r3
 8073450:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8073452:	69fb      	ldr	r3, [r7, #28]
 8073454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 807345a:	68fb      	ldr	r3, [r7, #12]
 807345c:	43db      	mvns	r3, r3
 807345e:	69f9      	ldr	r1, [r7, #28]
 8073460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8073464:	4013      	ands	r3, r2
 8073466:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8073468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807346a:	015a      	lsls	r2, r3, #5
 807346c:	69fb      	ldr	r3, [r7, #28]
 807346e:	4413      	add	r3, r2
 8073470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8073474:	461a      	mov	r2, r3
 8073476:	2301      	movs	r3, #1
 8073478:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 807347a:	687b      	ldr	r3, [r7, #4]
 807347c:	691b      	ldr	r3, [r3, #16]
 807347e:	2b01      	cmp	r3, #1
 8073480:	d132      	bne.n	80734e8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8073482:	6879      	ldr	r1, [r7, #4]
 8073484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8073486:	4613      	mov	r3, r2
 8073488:	00db      	lsls	r3, r3, #3
 807348a:	1a9b      	subs	r3, r3, r2
 807348c:	009b      	lsls	r3, r3, #2
 807348e:	440b      	add	r3, r1
 8073490:	3348      	adds	r3, #72	; 0x48
 8073492:	6819      	ldr	r1, [r3, #0]
 8073494:	6878      	ldr	r0, [r7, #4]
 8073496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8073498:	4613      	mov	r3, r2
 807349a:	00db      	lsls	r3, r3, #3
 807349c:	1a9b      	subs	r3, r3, r2
 807349e:	009b      	lsls	r3, r3, #2
 80734a0:	4403      	add	r3, r0
 80734a2:	3344      	adds	r3, #68	; 0x44
 80734a4:	681b      	ldr	r3, [r3, #0]
 80734a6:	4419      	add	r1, r3
 80734a8:	6878      	ldr	r0, [r7, #4]
 80734aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80734ac:	4613      	mov	r3, r2
 80734ae:	00db      	lsls	r3, r3, #3
 80734b0:	1a9b      	subs	r3, r3, r2
 80734b2:	009b      	lsls	r3, r3, #2
 80734b4:	4403      	add	r3, r0
 80734b6:	3348      	adds	r3, #72	; 0x48
 80734b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80734ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80734bc:	2b00      	cmp	r3, #0
 80734be:	d113      	bne.n	80734e8 <HAL_PCD_IRQHandler+0x31c>
 80734c0:	6879      	ldr	r1, [r7, #4]
 80734c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80734c4:	4613      	mov	r3, r2
 80734c6:	00db      	lsls	r3, r3, #3
 80734c8:	1a9b      	subs	r3, r3, r2
 80734ca:	009b      	lsls	r3, r3, #2
 80734cc:	440b      	add	r3, r1
 80734ce:	3350      	adds	r3, #80	; 0x50
 80734d0:	681b      	ldr	r3, [r3, #0]
 80734d2:	2b00      	cmp	r3, #0
 80734d4:	d108      	bne.n	80734e8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80734d6:	687b      	ldr	r3, [r7, #4]
 80734d8:	6818      	ldr	r0, [r3, #0]
 80734da:	687b      	ldr	r3, [r7, #4]
 80734dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80734e0:	461a      	mov	r2, r3
 80734e2:	2101      	movs	r1, #1
 80734e4:	f002 fc1c 	bl	8075d20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80734e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80734ea:	b2db      	uxtb	r3, r3
 80734ec:	4619      	mov	r1, r3
 80734ee:	6878      	ldr	r0, [r7, #4]
 80734f0:	f004 fe99 	bl	8078226 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80734f4:	693b      	ldr	r3, [r7, #16]
 80734f6:	f003 0308 	and.w	r3, r3, #8
 80734fa:	2b00      	cmp	r3, #0
 80734fc:	d008      	beq.n	8073510 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80734fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073500:	015a      	lsls	r2, r3, #5
 8073502:	69fb      	ldr	r3, [r7, #28]
 8073504:	4413      	add	r3, r2
 8073506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807350a:	461a      	mov	r2, r3
 807350c:	2308      	movs	r3, #8
 807350e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8073510:	693b      	ldr	r3, [r7, #16]
 8073512:	f003 0310 	and.w	r3, r3, #16
 8073516:	2b00      	cmp	r3, #0
 8073518:	d008      	beq.n	807352c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 807351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807351c:	015a      	lsls	r2, r3, #5
 807351e:	69fb      	ldr	r3, [r7, #28]
 8073520:	4413      	add	r3, r2
 8073522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8073526:	461a      	mov	r2, r3
 8073528:	2310      	movs	r3, #16
 807352a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 807352c:	693b      	ldr	r3, [r7, #16]
 807352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8073532:	2b00      	cmp	r3, #0
 8073534:	d008      	beq.n	8073548 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8073536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073538:	015a      	lsls	r2, r3, #5
 807353a:	69fb      	ldr	r3, [r7, #28]
 807353c:	4413      	add	r3, r2
 807353e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8073542:	461a      	mov	r2, r3
 8073544:	2340      	movs	r3, #64	; 0x40
 8073546:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8073548:	693b      	ldr	r3, [r7, #16]
 807354a:	f003 0302 	and.w	r3, r3, #2
 807354e:	2b00      	cmp	r3, #0
 8073550:	d008      	beq.n	8073564 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8073552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073554:	015a      	lsls	r2, r3, #5
 8073556:	69fb      	ldr	r3, [r7, #28]
 8073558:	4413      	add	r3, r2
 807355a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807355e:	461a      	mov	r2, r3
 8073560:	2302      	movs	r3, #2
 8073562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8073564:	693b      	ldr	r3, [r7, #16]
 8073566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 807356a:	2b00      	cmp	r3, #0
 807356c:	d003      	beq.n	8073576 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 807356e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8073570:	6878      	ldr	r0, [r7, #4]
 8073572:	f000 fbb9 	bl	8073ce8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8073576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073578:	3301      	adds	r3, #1
 807357a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 807357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807357e:	085b      	lsrs	r3, r3, #1
 8073580:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8073582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8073584:	2b00      	cmp	r3, #0
 8073586:	f47f af49 	bne.w	807341c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 807358a:	687b      	ldr	r3, [r7, #4]
 807358c:	681b      	ldr	r3, [r3, #0]
 807358e:	4618      	mov	r0, r3
 8073590:	f002 fb01 	bl	8075b96 <USB_ReadInterrupts>
 8073594:	4603      	mov	r3, r0
 8073596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 807359a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 807359e:	d122      	bne.n	80735e6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80735a0:	69fb      	ldr	r3, [r7, #28]
 80735a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80735a6:	685b      	ldr	r3, [r3, #4]
 80735a8:	69fa      	ldr	r2, [r7, #28]
 80735aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80735ae:	f023 0301 	bic.w	r3, r3, #1
 80735b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80735b4:	687b      	ldr	r3, [r7, #4]
 80735b6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80735ba:	2b01      	cmp	r3, #1
 80735bc:	d108      	bne.n	80735d0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80735be:	687b      	ldr	r3, [r7, #4]
 80735c0:	2200      	movs	r2, #0
 80735c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80735c6:	2100      	movs	r1, #0
 80735c8:	6878      	ldr	r0, [r7, #4]
 80735ca:	f000 fdc5 	bl	8074158 <HAL_PCDEx_LPM_Callback>
 80735ce:	e002      	b.n	80735d6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80735d0:	6878      	ldr	r0, [r7, #4]
 80735d2:	f004 fe95 	bl	8078300 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80735d6:	687b      	ldr	r3, [r7, #4]
 80735d8:	681b      	ldr	r3, [r3, #0]
 80735da:	695a      	ldr	r2, [r3, #20]
 80735dc:	687b      	ldr	r3, [r7, #4]
 80735de:	681b      	ldr	r3, [r3, #0]
 80735e0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80735e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80735e6:	687b      	ldr	r3, [r7, #4]
 80735e8:	681b      	ldr	r3, [r3, #0]
 80735ea:	4618      	mov	r0, r3
 80735ec:	f002 fad3 	bl	8075b96 <USB_ReadInterrupts>
 80735f0:	4603      	mov	r3, r0
 80735f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80735f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80735fa:	d112      	bne.n	8073622 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80735fc:	69fb      	ldr	r3, [r7, #28]
 80735fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073602:	689b      	ldr	r3, [r3, #8]
 8073604:	f003 0301 	and.w	r3, r3, #1
 8073608:	2b01      	cmp	r3, #1
 807360a:	d102      	bne.n	8073612 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 807360c:	6878      	ldr	r0, [r7, #4]
 807360e:	f004 fe51 	bl	80782b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8073612:	687b      	ldr	r3, [r7, #4]
 8073614:	681b      	ldr	r3, [r3, #0]
 8073616:	695a      	ldr	r2, [r3, #20]
 8073618:	687b      	ldr	r3, [r7, #4]
 807361a:	681b      	ldr	r3, [r3, #0]
 807361c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8073620:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8073622:	687b      	ldr	r3, [r7, #4]
 8073624:	681b      	ldr	r3, [r3, #0]
 8073626:	4618      	mov	r0, r3
 8073628:	f002 fab5 	bl	8075b96 <USB_ReadInterrupts>
 807362c:	4603      	mov	r3, r0
 807362e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8073632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8073636:	f040 80c7 	bne.w	80737c8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 807363a:	69fb      	ldr	r3, [r7, #28]
 807363c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073640:	685b      	ldr	r3, [r3, #4]
 8073642:	69fa      	ldr	r2, [r7, #28]
 8073644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8073648:	f023 0301 	bic.w	r3, r3, #1
 807364c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 807364e:	687b      	ldr	r3, [r7, #4]
 8073650:	681b      	ldr	r3, [r3, #0]
 8073652:	2110      	movs	r1, #16
 8073654:	4618      	mov	r0, r3
 8073656:	f001 fc5f 	bl	8074f18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 807365a:	2300      	movs	r3, #0
 807365c:	62fb      	str	r3, [r7, #44]	; 0x2c
 807365e:	e056      	b.n	807370e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8073660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8073662:	015a      	lsls	r2, r3, #5
 8073664:	69fb      	ldr	r3, [r7, #28]
 8073666:	4413      	add	r3, r2
 8073668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807366c:	461a      	mov	r2, r3
 807366e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8073672:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8073674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8073676:	015a      	lsls	r2, r3, #5
 8073678:	69fb      	ldr	r3, [r7, #28]
 807367a:	4413      	add	r3, r2
 807367c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8073680:	681b      	ldr	r3, [r3, #0]
 8073682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8073684:	0151      	lsls	r1, r2, #5
 8073686:	69fa      	ldr	r2, [r7, #28]
 8073688:	440a      	add	r2, r1
 807368a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807368e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8073692:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8073694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8073696:	015a      	lsls	r2, r3, #5
 8073698:	69fb      	ldr	r3, [r7, #28]
 807369a:	4413      	add	r3, r2
 807369c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80736a0:	681b      	ldr	r3, [r3, #0]
 80736a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80736a4:	0151      	lsls	r1, r2, #5
 80736a6:	69fa      	ldr	r2, [r7, #28]
 80736a8:	440a      	add	r2, r1
 80736aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80736ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80736b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80736b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80736b6:	015a      	lsls	r2, r3, #5
 80736b8:	69fb      	ldr	r3, [r7, #28]
 80736ba:	4413      	add	r3, r2
 80736bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80736c0:	461a      	mov	r2, r3
 80736c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80736c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80736c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80736ca:	015a      	lsls	r2, r3, #5
 80736cc:	69fb      	ldr	r3, [r7, #28]
 80736ce:	4413      	add	r3, r2
 80736d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80736d4:	681b      	ldr	r3, [r3, #0]
 80736d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80736d8:	0151      	lsls	r1, r2, #5
 80736da:	69fa      	ldr	r2, [r7, #28]
 80736dc:	440a      	add	r2, r1
 80736de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80736e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80736e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80736e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80736ea:	015a      	lsls	r2, r3, #5
 80736ec:	69fb      	ldr	r3, [r7, #28]
 80736ee:	4413      	add	r3, r2
 80736f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80736f4:	681b      	ldr	r3, [r3, #0]
 80736f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80736f8:	0151      	lsls	r1, r2, #5
 80736fa:	69fa      	ldr	r2, [r7, #28]
 80736fc:	440a      	add	r2, r1
 80736fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8073702:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8073706:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8073708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 807370a:	3301      	adds	r3, #1
 807370c:	62fb      	str	r3, [r7, #44]	; 0x2c
 807370e:	687b      	ldr	r3, [r7, #4]
 8073710:	685b      	ldr	r3, [r3, #4]
 8073712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8073714:	429a      	cmp	r2, r3
 8073716:	d3a3      	bcc.n	8073660 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8073718:	69fb      	ldr	r3, [r7, #28]
 807371a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807371e:	69db      	ldr	r3, [r3, #28]
 8073720:	69fa      	ldr	r2, [r7, #28]
 8073722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8073726:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 807372a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 807372c:	687b      	ldr	r3, [r7, #4]
 807372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8073730:	2b00      	cmp	r3, #0
 8073732:	d016      	beq.n	8073762 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8073734:	69fb      	ldr	r3, [r7, #28]
 8073736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807373a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 807373e:	69fa      	ldr	r2, [r7, #28]
 8073740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8073744:	f043 030b 	orr.w	r3, r3, #11
 8073748:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 807374c:	69fb      	ldr	r3, [r7, #28]
 807374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8073754:	69fa      	ldr	r2, [r7, #28]
 8073756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807375a:	f043 030b 	orr.w	r3, r3, #11
 807375e:	6453      	str	r3, [r2, #68]	; 0x44
 8073760:	e015      	b.n	807378e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8073762:	69fb      	ldr	r3, [r7, #28]
 8073764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073768:	695b      	ldr	r3, [r3, #20]
 807376a:	69fa      	ldr	r2, [r7, #28]
 807376c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8073770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8073774:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8073778:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 807377a:	69fb      	ldr	r3, [r7, #28]
 807377c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073780:	691b      	ldr	r3, [r3, #16]
 8073782:	69fa      	ldr	r2, [r7, #28]
 8073784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8073788:	f043 030b 	orr.w	r3, r3, #11
 807378c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 807378e:	69fb      	ldr	r3, [r7, #28]
 8073790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073794:	681b      	ldr	r3, [r3, #0]
 8073796:	69fa      	ldr	r2, [r7, #28]
 8073798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807379c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80737a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80737a2:	687b      	ldr	r3, [r7, #4]
 80737a4:	6818      	ldr	r0, [r3, #0]
 80737a6:	687b      	ldr	r3, [r7, #4]
 80737a8:	691b      	ldr	r3, [r3, #16]
 80737aa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80737ac:	687b      	ldr	r3, [r7, #4]
 80737ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80737b2:	461a      	mov	r2, r3
 80737b4:	f002 fab4 	bl	8075d20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80737b8:	687b      	ldr	r3, [r7, #4]
 80737ba:	681b      	ldr	r3, [r3, #0]
 80737bc:	695a      	ldr	r2, [r3, #20]
 80737be:	687b      	ldr	r3, [r7, #4]
 80737c0:	681b      	ldr	r3, [r3, #0]
 80737c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80737c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80737c8:	687b      	ldr	r3, [r7, #4]
 80737ca:	681b      	ldr	r3, [r3, #0]
 80737cc:	4618      	mov	r0, r3
 80737ce:	f002 f9e2 	bl	8075b96 <USB_ReadInterrupts>
 80737d2:	4603      	mov	r3, r0
 80737d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80737d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80737dc:	d124      	bne.n	8073828 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80737de:	687b      	ldr	r3, [r7, #4]
 80737e0:	681b      	ldr	r3, [r3, #0]
 80737e2:	4618      	mov	r0, r3
 80737e4:	f002 fa78 	bl	8075cd8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80737e8:	687b      	ldr	r3, [r7, #4]
 80737ea:	681b      	ldr	r3, [r3, #0]
 80737ec:	4618      	mov	r0, r3
 80737ee:	f001 fbf4 	bl	8074fda <USB_GetDevSpeed>
 80737f2:	4603      	mov	r3, r0
 80737f4:	461a      	mov	r2, r3
 80737f6:	687b      	ldr	r3, [r7, #4]
 80737f8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80737fa:	687b      	ldr	r3, [r7, #4]
 80737fc:	681c      	ldr	r4, [r3, #0]
 80737fe:	f001 f8cb 	bl	8074998 <HAL_RCC_GetHCLKFreq>
 8073802:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8073804:	687b      	ldr	r3, [r7, #4]
 8073806:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8073808:	b2db      	uxtb	r3, r3
 807380a:	461a      	mov	r2, r3
 807380c:	4620      	mov	r0, r4
 807380e:	f001 f931 	bl	8074a74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8073812:	6878      	ldr	r0, [r7, #4]
 8073814:	f004 fd2f 	bl	8078276 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8073818:	687b      	ldr	r3, [r7, #4]
 807381a:	681b      	ldr	r3, [r3, #0]
 807381c:	695a      	ldr	r2, [r3, #20]
 807381e:	687b      	ldr	r3, [r7, #4]
 8073820:	681b      	ldr	r3, [r3, #0]
 8073822:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8073826:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8073828:	687b      	ldr	r3, [r7, #4]
 807382a:	681b      	ldr	r3, [r3, #0]
 807382c:	4618      	mov	r0, r3
 807382e:	f002 f9b2 	bl	8075b96 <USB_ReadInterrupts>
 8073832:	4603      	mov	r3, r0
 8073834:	f003 0308 	and.w	r3, r3, #8
 8073838:	2b08      	cmp	r3, #8
 807383a:	d10a      	bne.n	8073852 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 807383c:	6878      	ldr	r0, [r7, #4]
 807383e:	f004 fd0c 	bl	807825a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8073842:	687b      	ldr	r3, [r7, #4]
 8073844:	681b      	ldr	r3, [r3, #0]
 8073846:	695a      	ldr	r2, [r3, #20]
 8073848:	687b      	ldr	r3, [r7, #4]
 807384a:	681b      	ldr	r3, [r3, #0]
 807384c:	f002 0208 	and.w	r2, r2, #8
 8073850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8073852:	687b      	ldr	r3, [r7, #4]
 8073854:	681b      	ldr	r3, [r3, #0]
 8073856:	4618      	mov	r0, r3
 8073858:	f002 f99d 	bl	8075b96 <USB_ReadInterrupts>
 807385c:	4603      	mov	r3, r0
 807385e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8073862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8073866:	d10f      	bne.n	8073888 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8073868:	2300      	movs	r3, #0
 807386a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 807386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807386e:	b2db      	uxtb	r3, r3
 8073870:	4619      	mov	r1, r3
 8073872:	6878      	ldr	r0, [r7, #4]
 8073874:	f004 fd64 	bl	8078340 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8073878:	687b      	ldr	r3, [r7, #4]
 807387a:	681b      	ldr	r3, [r3, #0]
 807387c:	695a      	ldr	r2, [r3, #20]
 807387e:	687b      	ldr	r3, [r7, #4]
 8073880:	681b      	ldr	r3, [r3, #0]
 8073882:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8073886:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8073888:	687b      	ldr	r3, [r7, #4]
 807388a:	681b      	ldr	r3, [r3, #0]
 807388c:	4618      	mov	r0, r3
 807388e:	f002 f982 	bl	8075b96 <USB_ReadInterrupts>
 8073892:	4603      	mov	r3, r0
 8073894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8073898:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 807389c:	d10f      	bne.n	80738be <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 807389e:	2300      	movs	r3, #0
 80738a0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80738a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80738a4:	b2db      	uxtb	r3, r3
 80738a6:	4619      	mov	r1, r3
 80738a8:	6878      	ldr	r0, [r7, #4]
 80738aa:	f004 fd37 	bl	807831c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80738ae:	687b      	ldr	r3, [r7, #4]
 80738b0:	681b      	ldr	r3, [r3, #0]
 80738b2:	695a      	ldr	r2, [r3, #20]
 80738b4:	687b      	ldr	r3, [r7, #4]
 80738b6:	681b      	ldr	r3, [r3, #0]
 80738b8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80738bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80738be:	687b      	ldr	r3, [r7, #4]
 80738c0:	681b      	ldr	r3, [r3, #0]
 80738c2:	4618      	mov	r0, r3
 80738c4:	f002 f967 	bl	8075b96 <USB_ReadInterrupts>
 80738c8:	4603      	mov	r3, r0
 80738ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80738ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80738d2:	d10a      	bne.n	80738ea <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80738d4:	6878      	ldr	r0, [r7, #4]
 80738d6:	f004 fd45 	bl	8078364 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80738da:	687b      	ldr	r3, [r7, #4]
 80738dc:	681b      	ldr	r3, [r3, #0]
 80738de:	695a      	ldr	r2, [r3, #20]
 80738e0:	687b      	ldr	r3, [r7, #4]
 80738e2:	681b      	ldr	r3, [r3, #0]
 80738e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80738e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80738ea:	687b      	ldr	r3, [r7, #4]
 80738ec:	681b      	ldr	r3, [r3, #0]
 80738ee:	4618      	mov	r0, r3
 80738f0:	f002 f951 	bl	8075b96 <USB_ReadInterrupts>
 80738f4:	4603      	mov	r3, r0
 80738f6:	f003 0304 	and.w	r3, r3, #4
 80738fa:	2b04      	cmp	r3, #4
 80738fc:	d115      	bne.n	807392a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80738fe:	687b      	ldr	r3, [r7, #4]
 8073900:	681b      	ldr	r3, [r3, #0]
 8073902:	685b      	ldr	r3, [r3, #4]
 8073904:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8073906:	69bb      	ldr	r3, [r7, #24]
 8073908:	f003 0304 	and.w	r3, r3, #4
 807390c:	2b00      	cmp	r3, #0
 807390e:	d002      	beq.n	8073916 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8073910:	6878      	ldr	r0, [r7, #4]
 8073912:	f004 fd35 	bl	8078380 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8073916:	687b      	ldr	r3, [r7, #4]
 8073918:	681b      	ldr	r3, [r3, #0]
 807391a:	6859      	ldr	r1, [r3, #4]
 807391c:	687b      	ldr	r3, [r7, #4]
 807391e:	681b      	ldr	r3, [r3, #0]
 8073920:	69ba      	ldr	r2, [r7, #24]
 8073922:	430a      	orrs	r2, r1
 8073924:	605a      	str	r2, [r3, #4]
 8073926:	e000      	b.n	807392a <HAL_PCD_IRQHandler+0x75e>
      return;
 8073928:	bf00      	nop
    }
  }
}
 807392a:	3734      	adds	r7, #52	; 0x34
 807392c:	46bd      	mov	sp, r7
 807392e:	bd90      	pop	{r4, r7, pc}

08073930 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8073930:	b580      	push	{r7, lr}
 8073932:	b082      	sub	sp, #8
 8073934:	af00      	add	r7, sp, #0
 8073936:	6078      	str	r0, [r7, #4]
 8073938:	460b      	mov	r3, r1
 807393a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 807393c:	687b      	ldr	r3, [r7, #4]
 807393e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8073942:	2b01      	cmp	r3, #1
 8073944:	d101      	bne.n	807394a <HAL_PCD_SetAddress+0x1a>
 8073946:	2302      	movs	r3, #2
 8073948:	e013      	b.n	8073972 <HAL_PCD_SetAddress+0x42>
 807394a:	687b      	ldr	r3, [r7, #4]
 807394c:	2201      	movs	r2, #1
 807394e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8073952:	687b      	ldr	r3, [r7, #4]
 8073954:	78fa      	ldrb	r2, [r7, #3]
 8073956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 807395a:	687b      	ldr	r3, [r7, #4]
 807395c:	681b      	ldr	r3, [r3, #0]
 807395e:	78fa      	ldrb	r2, [r7, #3]
 8073960:	4611      	mov	r1, r2
 8073962:	4618      	mov	r0, r3
 8073964:	f002 f8af 	bl	8075ac6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8073968:	687b      	ldr	r3, [r7, #4]
 807396a:	2200      	movs	r2, #0
 807396c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8073970:	2300      	movs	r3, #0
}
 8073972:	4618      	mov	r0, r3
 8073974:	3708      	adds	r7, #8
 8073976:	46bd      	mov	sp, r7
 8073978:	bd80      	pop	{r7, pc}

0807397a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 807397a:	b580      	push	{r7, lr}
 807397c:	b084      	sub	sp, #16
 807397e:	af00      	add	r7, sp, #0
 8073980:	6078      	str	r0, [r7, #4]
 8073982:	4608      	mov	r0, r1
 8073984:	4611      	mov	r1, r2
 8073986:	461a      	mov	r2, r3
 8073988:	4603      	mov	r3, r0
 807398a:	70fb      	strb	r3, [r7, #3]
 807398c:	460b      	mov	r3, r1
 807398e:	803b      	strh	r3, [r7, #0]
 8073990:	4613      	mov	r3, r2
 8073992:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8073994:	2300      	movs	r3, #0
 8073996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8073998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 807399c:	2b00      	cmp	r3, #0
 807399e:	da0f      	bge.n	80739c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80739a0:	78fb      	ldrb	r3, [r7, #3]
 80739a2:	f003 020f 	and.w	r2, r3, #15
 80739a6:	4613      	mov	r3, r2
 80739a8:	00db      	lsls	r3, r3, #3
 80739aa:	1a9b      	subs	r3, r3, r2
 80739ac:	009b      	lsls	r3, r3, #2
 80739ae:	3338      	adds	r3, #56	; 0x38
 80739b0:	687a      	ldr	r2, [r7, #4]
 80739b2:	4413      	add	r3, r2
 80739b4:	3304      	adds	r3, #4
 80739b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80739b8:	68fb      	ldr	r3, [r7, #12]
 80739ba:	2201      	movs	r2, #1
 80739bc:	705a      	strb	r2, [r3, #1]
 80739be:	e00f      	b.n	80739e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80739c0:	78fb      	ldrb	r3, [r7, #3]
 80739c2:	f003 020f 	and.w	r2, r3, #15
 80739c6:	4613      	mov	r3, r2
 80739c8:	00db      	lsls	r3, r3, #3
 80739ca:	1a9b      	subs	r3, r3, r2
 80739cc:	009b      	lsls	r3, r3, #2
 80739ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80739d2:	687a      	ldr	r2, [r7, #4]
 80739d4:	4413      	add	r3, r2
 80739d6:	3304      	adds	r3, #4
 80739d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80739da:	68fb      	ldr	r3, [r7, #12]
 80739dc:	2200      	movs	r2, #0
 80739de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80739e0:	78fb      	ldrb	r3, [r7, #3]
 80739e2:	f003 030f 	and.w	r3, r3, #15
 80739e6:	b2da      	uxtb	r2, r3
 80739e8:	68fb      	ldr	r3, [r7, #12]
 80739ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80739ec:	883a      	ldrh	r2, [r7, #0]
 80739ee:	68fb      	ldr	r3, [r7, #12]
 80739f0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80739f2:	68fb      	ldr	r3, [r7, #12]
 80739f4:	78ba      	ldrb	r2, [r7, #2]
 80739f6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80739f8:	68fb      	ldr	r3, [r7, #12]
 80739fa:	785b      	ldrb	r3, [r3, #1]
 80739fc:	2b00      	cmp	r3, #0
 80739fe:	d004      	beq.n	8073a0a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8073a00:	68fb      	ldr	r3, [r7, #12]
 8073a02:	781b      	ldrb	r3, [r3, #0]
 8073a04:	b29a      	uxth	r2, r3
 8073a06:	68fb      	ldr	r3, [r7, #12]
 8073a08:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8073a0a:	78bb      	ldrb	r3, [r7, #2]
 8073a0c:	2b02      	cmp	r3, #2
 8073a0e:	d102      	bne.n	8073a16 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8073a10:	68fb      	ldr	r3, [r7, #12]
 8073a12:	2200      	movs	r2, #0
 8073a14:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8073a16:	687b      	ldr	r3, [r7, #4]
 8073a18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8073a1c:	2b01      	cmp	r3, #1
 8073a1e:	d101      	bne.n	8073a24 <HAL_PCD_EP_Open+0xaa>
 8073a20:	2302      	movs	r3, #2
 8073a22:	e00e      	b.n	8073a42 <HAL_PCD_EP_Open+0xc8>
 8073a24:	687b      	ldr	r3, [r7, #4]
 8073a26:	2201      	movs	r2, #1
 8073a28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8073a2c:	687b      	ldr	r3, [r7, #4]
 8073a2e:	681b      	ldr	r3, [r3, #0]
 8073a30:	68f9      	ldr	r1, [r7, #12]
 8073a32:	4618      	mov	r0, r3
 8073a34:	f001 faf6 	bl	8075024 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8073a38:	687b      	ldr	r3, [r7, #4]
 8073a3a:	2200      	movs	r2, #0
 8073a3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8073a40:	7afb      	ldrb	r3, [r7, #11]
}
 8073a42:	4618      	mov	r0, r3
 8073a44:	3710      	adds	r7, #16
 8073a46:	46bd      	mov	sp, r7
 8073a48:	bd80      	pop	{r7, pc}

08073a4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8073a4a:	b580      	push	{r7, lr}
 8073a4c:	b086      	sub	sp, #24
 8073a4e:	af00      	add	r7, sp, #0
 8073a50:	60f8      	str	r0, [r7, #12]
 8073a52:	607a      	str	r2, [r7, #4]
 8073a54:	603b      	str	r3, [r7, #0]
 8073a56:	460b      	mov	r3, r1
 8073a58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8073a5a:	7afb      	ldrb	r3, [r7, #11]
 8073a5c:	f003 020f 	and.w	r2, r3, #15
 8073a60:	4613      	mov	r3, r2
 8073a62:	00db      	lsls	r3, r3, #3
 8073a64:	1a9b      	subs	r3, r3, r2
 8073a66:	009b      	lsls	r3, r3, #2
 8073a68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8073a6c:	68fa      	ldr	r2, [r7, #12]
 8073a6e:	4413      	add	r3, r2
 8073a70:	3304      	adds	r3, #4
 8073a72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8073a74:	697b      	ldr	r3, [r7, #20]
 8073a76:	687a      	ldr	r2, [r7, #4]
 8073a78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8073a7a:	697b      	ldr	r3, [r7, #20]
 8073a7c:	683a      	ldr	r2, [r7, #0]
 8073a7e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8073a80:	697b      	ldr	r3, [r7, #20]
 8073a82:	2200      	movs	r2, #0
 8073a84:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8073a86:	697b      	ldr	r3, [r7, #20]
 8073a88:	2200      	movs	r2, #0
 8073a8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8073a8c:	7afb      	ldrb	r3, [r7, #11]
 8073a8e:	f003 030f 	and.w	r3, r3, #15
 8073a92:	b2da      	uxtb	r2, r3
 8073a94:	697b      	ldr	r3, [r7, #20]
 8073a96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8073a98:	68fb      	ldr	r3, [r7, #12]
 8073a9a:	691b      	ldr	r3, [r3, #16]
 8073a9c:	2b01      	cmp	r3, #1
 8073a9e:	d102      	bne.n	8073aa6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8073aa0:	687a      	ldr	r2, [r7, #4]
 8073aa2:	697b      	ldr	r3, [r7, #20]
 8073aa4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8073aa6:	7afb      	ldrb	r3, [r7, #11]
 8073aa8:	f003 030f 	and.w	r3, r3, #15
 8073aac:	2b00      	cmp	r3, #0
 8073aae:	d109      	bne.n	8073ac4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8073ab0:	68fb      	ldr	r3, [r7, #12]
 8073ab2:	6818      	ldr	r0, [r3, #0]
 8073ab4:	68fb      	ldr	r3, [r7, #12]
 8073ab6:	691b      	ldr	r3, [r3, #16]
 8073ab8:	b2db      	uxtb	r3, r3
 8073aba:	461a      	mov	r2, r3
 8073abc:	6979      	ldr	r1, [r7, #20]
 8073abe:	f001 fd7d 	bl	80755bc <USB_EP0StartXfer>
 8073ac2:	e008      	b.n	8073ad6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8073ac4:	68fb      	ldr	r3, [r7, #12]
 8073ac6:	6818      	ldr	r0, [r3, #0]
 8073ac8:	68fb      	ldr	r3, [r7, #12]
 8073aca:	691b      	ldr	r3, [r3, #16]
 8073acc:	b2db      	uxtb	r3, r3
 8073ace:	461a      	mov	r2, r3
 8073ad0:	6979      	ldr	r1, [r7, #20]
 8073ad2:	f001 fb2f 	bl	8075134 <USB_EPStartXfer>
  }

  return HAL_OK;
 8073ad6:	2300      	movs	r3, #0
}
 8073ad8:	4618      	mov	r0, r3
 8073ada:	3718      	adds	r7, #24
 8073adc:	46bd      	mov	sp, r7
 8073ade:	bd80      	pop	{r7, pc}

08073ae0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8073ae0:	b580      	push	{r7, lr}
 8073ae2:	b086      	sub	sp, #24
 8073ae4:	af00      	add	r7, sp, #0
 8073ae6:	60f8      	str	r0, [r7, #12]
 8073ae8:	607a      	str	r2, [r7, #4]
 8073aea:	603b      	str	r3, [r7, #0]
 8073aec:	460b      	mov	r3, r1
 8073aee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8073af0:	7afb      	ldrb	r3, [r7, #11]
 8073af2:	f003 020f 	and.w	r2, r3, #15
 8073af6:	4613      	mov	r3, r2
 8073af8:	00db      	lsls	r3, r3, #3
 8073afa:	1a9b      	subs	r3, r3, r2
 8073afc:	009b      	lsls	r3, r3, #2
 8073afe:	3338      	adds	r3, #56	; 0x38
 8073b00:	68fa      	ldr	r2, [r7, #12]
 8073b02:	4413      	add	r3, r2
 8073b04:	3304      	adds	r3, #4
 8073b06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8073b08:	697b      	ldr	r3, [r7, #20]
 8073b0a:	687a      	ldr	r2, [r7, #4]
 8073b0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8073b0e:	697b      	ldr	r3, [r7, #20]
 8073b10:	683a      	ldr	r2, [r7, #0]
 8073b12:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8073b14:	697b      	ldr	r3, [r7, #20]
 8073b16:	2200      	movs	r2, #0
 8073b18:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8073b1a:	697b      	ldr	r3, [r7, #20]
 8073b1c:	2201      	movs	r2, #1
 8073b1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8073b20:	7afb      	ldrb	r3, [r7, #11]
 8073b22:	f003 030f 	and.w	r3, r3, #15
 8073b26:	b2da      	uxtb	r2, r3
 8073b28:	697b      	ldr	r3, [r7, #20]
 8073b2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8073b2c:	68fb      	ldr	r3, [r7, #12]
 8073b2e:	691b      	ldr	r3, [r3, #16]
 8073b30:	2b01      	cmp	r3, #1
 8073b32:	d102      	bne.n	8073b3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8073b34:	687a      	ldr	r2, [r7, #4]
 8073b36:	697b      	ldr	r3, [r7, #20]
 8073b38:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8073b3a:	7afb      	ldrb	r3, [r7, #11]
 8073b3c:	f003 030f 	and.w	r3, r3, #15
 8073b40:	2b00      	cmp	r3, #0
 8073b42:	d109      	bne.n	8073b58 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8073b44:	68fb      	ldr	r3, [r7, #12]
 8073b46:	6818      	ldr	r0, [r3, #0]
 8073b48:	68fb      	ldr	r3, [r7, #12]
 8073b4a:	691b      	ldr	r3, [r3, #16]
 8073b4c:	b2db      	uxtb	r3, r3
 8073b4e:	461a      	mov	r2, r3
 8073b50:	6979      	ldr	r1, [r7, #20]
 8073b52:	f001 fd33 	bl	80755bc <USB_EP0StartXfer>
 8073b56:	e008      	b.n	8073b6a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8073b58:	68fb      	ldr	r3, [r7, #12]
 8073b5a:	6818      	ldr	r0, [r3, #0]
 8073b5c:	68fb      	ldr	r3, [r7, #12]
 8073b5e:	691b      	ldr	r3, [r3, #16]
 8073b60:	b2db      	uxtb	r3, r3
 8073b62:	461a      	mov	r2, r3
 8073b64:	6979      	ldr	r1, [r7, #20]
 8073b66:	f001 fae5 	bl	8075134 <USB_EPStartXfer>
  }

  return HAL_OK;
 8073b6a:	2300      	movs	r3, #0
}
 8073b6c:	4618      	mov	r0, r3
 8073b6e:	3718      	adds	r7, #24
 8073b70:	46bd      	mov	sp, r7
 8073b72:	bd80      	pop	{r7, pc}

08073b74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8073b74:	b580      	push	{r7, lr}
 8073b76:	b084      	sub	sp, #16
 8073b78:	af00      	add	r7, sp, #0
 8073b7a:	6078      	str	r0, [r7, #4]
 8073b7c:	460b      	mov	r3, r1
 8073b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8073b80:	78fb      	ldrb	r3, [r7, #3]
 8073b82:	f003 020f 	and.w	r2, r3, #15
 8073b86:	687b      	ldr	r3, [r7, #4]
 8073b88:	685b      	ldr	r3, [r3, #4]
 8073b8a:	429a      	cmp	r2, r3
 8073b8c:	d901      	bls.n	8073b92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8073b8e:	2301      	movs	r3, #1
 8073b90:	e050      	b.n	8073c34 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8073b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8073b96:	2b00      	cmp	r3, #0
 8073b98:	da0f      	bge.n	8073bba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8073b9a:	78fb      	ldrb	r3, [r7, #3]
 8073b9c:	f003 020f 	and.w	r2, r3, #15
 8073ba0:	4613      	mov	r3, r2
 8073ba2:	00db      	lsls	r3, r3, #3
 8073ba4:	1a9b      	subs	r3, r3, r2
 8073ba6:	009b      	lsls	r3, r3, #2
 8073ba8:	3338      	adds	r3, #56	; 0x38
 8073baa:	687a      	ldr	r2, [r7, #4]
 8073bac:	4413      	add	r3, r2
 8073bae:	3304      	adds	r3, #4
 8073bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8073bb2:	68fb      	ldr	r3, [r7, #12]
 8073bb4:	2201      	movs	r2, #1
 8073bb6:	705a      	strb	r2, [r3, #1]
 8073bb8:	e00d      	b.n	8073bd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8073bba:	78fa      	ldrb	r2, [r7, #3]
 8073bbc:	4613      	mov	r3, r2
 8073bbe:	00db      	lsls	r3, r3, #3
 8073bc0:	1a9b      	subs	r3, r3, r2
 8073bc2:	009b      	lsls	r3, r3, #2
 8073bc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8073bc8:	687a      	ldr	r2, [r7, #4]
 8073bca:	4413      	add	r3, r2
 8073bcc:	3304      	adds	r3, #4
 8073bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8073bd0:	68fb      	ldr	r3, [r7, #12]
 8073bd2:	2200      	movs	r2, #0
 8073bd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8073bd6:	68fb      	ldr	r3, [r7, #12]
 8073bd8:	2201      	movs	r2, #1
 8073bda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8073bdc:	78fb      	ldrb	r3, [r7, #3]
 8073bde:	f003 030f 	and.w	r3, r3, #15
 8073be2:	b2da      	uxtb	r2, r3
 8073be4:	68fb      	ldr	r3, [r7, #12]
 8073be6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8073be8:	687b      	ldr	r3, [r7, #4]
 8073bea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8073bee:	2b01      	cmp	r3, #1
 8073bf0:	d101      	bne.n	8073bf6 <HAL_PCD_EP_SetStall+0x82>
 8073bf2:	2302      	movs	r3, #2
 8073bf4:	e01e      	b.n	8073c34 <HAL_PCD_EP_SetStall+0xc0>
 8073bf6:	687b      	ldr	r3, [r7, #4]
 8073bf8:	2201      	movs	r2, #1
 8073bfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8073bfe:	687b      	ldr	r3, [r7, #4]
 8073c00:	681b      	ldr	r3, [r3, #0]
 8073c02:	68f9      	ldr	r1, [r7, #12]
 8073c04:	4618      	mov	r0, r3
 8073c06:	f001 fe8a 	bl	807591e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8073c0a:	78fb      	ldrb	r3, [r7, #3]
 8073c0c:	f003 030f 	and.w	r3, r3, #15
 8073c10:	2b00      	cmp	r3, #0
 8073c12:	d10a      	bne.n	8073c2a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8073c14:	687b      	ldr	r3, [r7, #4]
 8073c16:	6818      	ldr	r0, [r3, #0]
 8073c18:	687b      	ldr	r3, [r7, #4]
 8073c1a:	691b      	ldr	r3, [r3, #16]
 8073c1c:	b2d9      	uxtb	r1, r3
 8073c1e:	687b      	ldr	r3, [r7, #4]
 8073c20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8073c24:	461a      	mov	r2, r3
 8073c26:	f002 f87b 	bl	8075d20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8073c2a:	687b      	ldr	r3, [r7, #4]
 8073c2c:	2200      	movs	r2, #0
 8073c2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8073c32:	2300      	movs	r3, #0
}
 8073c34:	4618      	mov	r0, r3
 8073c36:	3710      	adds	r7, #16
 8073c38:	46bd      	mov	sp, r7
 8073c3a:	bd80      	pop	{r7, pc}

08073c3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8073c3c:	b580      	push	{r7, lr}
 8073c3e:	b084      	sub	sp, #16
 8073c40:	af00      	add	r7, sp, #0
 8073c42:	6078      	str	r0, [r7, #4]
 8073c44:	460b      	mov	r3, r1
 8073c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8073c48:	78fb      	ldrb	r3, [r7, #3]
 8073c4a:	f003 020f 	and.w	r2, r3, #15
 8073c4e:	687b      	ldr	r3, [r7, #4]
 8073c50:	685b      	ldr	r3, [r3, #4]
 8073c52:	429a      	cmp	r2, r3
 8073c54:	d901      	bls.n	8073c5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8073c56:	2301      	movs	r3, #1
 8073c58:	e042      	b.n	8073ce0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8073c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8073c5e:	2b00      	cmp	r3, #0
 8073c60:	da0f      	bge.n	8073c82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8073c62:	78fb      	ldrb	r3, [r7, #3]
 8073c64:	f003 020f 	and.w	r2, r3, #15
 8073c68:	4613      	mov	r3, r2
 8073c6a:	00db      	lsls	r3, r3, #3
 8073c6c:	1a9b      	subs	r3, r3, r2
 8073c6e:	009b      	lsls	r3, r3, #2
 8073c70:	3338      	adds	r3, #56	; 0x38
 8073c72:	687a      	ldr	r2, [r7, #4]
 8073c74:	4413      	add	r3, r2
 8073c76:	3304      	adds	r3, #4
 8073c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8073c7a:	68fb      	ldr	r3, [r7, #12]
 8073c7c:	2201      	movs	r2, #1
 8073c7e:	705a      	strb	r2, [r3, #1]
 8073c80:	e00f      	b.n	8073ca2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8073c82:	78fb      	ldrb	r3, [r7, #3]
 8073c84:	f003 020f 	and.w	r2, r3, #15
 8073c88:	4613      	mov	r3, r2
 8073c8a:	00db      	lsls	r3, r3, #3
 8073c8c:	1a9b      	subs	r3, r3, r2
 8073c8e:	009b      	lsls	r3, r3, #2
 8073c90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8073c94:	687a      	ldr	r2, [r7, #4]
 8073c96:	4413      	add	r3, r2
 8073c98:	3304      	adds	r3, #4
 8073c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8073c9c:	68fb      	ldr	r3, [r7, #12]
 8073c9e:	2200      	movs	r2, #0
 8073ca0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8073ca2:	68fb      	ldr	r3, [r7, #12]
 8073ca4:	2200      	movs	r2, #0
 8073ca6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8073ca8:	78fb      	ldrb	r3, [r7, #3]
 8073caa:	f003 030f 	and.w	r3, r3, #15
 8073cae:	b2da      	uxtb	r2, r3
 8073cb0:	68fb      	ldr	r3, [r7, #12]
 8073cb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8073cb4:	687b      	ldr	r3, [r7, #4]
 8073cb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8073cba:	2b01      	cmp	r3, #1
 8073cbc:	d101      	bne.n	8073cc2 <HAL_PCD_EP_ClrStall+0x86>
 8073cbe:	2302      	movs	r3, #2
 8073cc0:	e00e      	b.n	8073ce0 <HAL_PCD_EP_ClrStall+0xa4>
 8073cc2:	687b      	ldr	r3, [r7, #4]
 8073cc4:	2201      	movs	r2, #1
 8073cc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8073cca:	687b      	ldr	r3, [r7, #4]
 8073ccc:	681b      	ldr	r3, [r3, #0]
 8073cce:	68f9      	ldr	r1, [r7, #12]
 8073cd0:	4618      	mov	r0, r3
 8073cd2:	f001 fe92 	bl	80759fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8073cd6:	687b      	ldr	r3, [r7, #4]
 8073cd8:	2200      	movs	r2, #0
 8073cda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8073cde:	2300      	movs	r3, #0
}
 8073ce0:	4618      	mov	r0, r3
 8073ce2:	3710      	adds	r7, #16
 8073ce4:	46bd      	mov	sp, r7
 8073ce6:	bd80      	pop	{r7, pc}

08073ce8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8073ce8:	b580      	push	{r7, lr}
 8073cea:	b08a      	sub	sp, #40	; 0x28
 8073cec:	af02      	add	r7, sp, #8
 8073cee:	6078      	str	r0, [r7, #4]
 8073cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8073cf2:	687b      	ldr	r3, [r7, #4]
 8073cf4:	681b      	ldr	r3, [r3, #0]
 8073cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8073cf8:	697b      	ldr	r3, [r7, #20]
 8073cfa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8073cfc:	683a      	ldr	r2, [r7, #0]
 8073cfe:	4613      	mov	r3, r2
 8073d00:	00db      	lsls	r3, r3, #3
 8073d02:	1a9b      	subs	r3, r3, r2
 8073d04:	009b      	lsls	r3, r3, #2
 8073d06:	3338      	adds	r3, #56	; 0x38
 8073d08:	687a      	ldr	r2, [r7, #4]
 8073d0a:	4413      	add	r3, r2
 8073d0c:	3304      	adds	r3, #4
 8073d0e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8073d10:	68fb      	ldr	r3, [r7, #12]
 8073d12:	699a      	ldr	r2, [r3, #24]
 8073d14:	68fb      	ldr	r3, [r7, #12]
 8073d16:	695b      	ldr	r3, [r3, #20]
 8073d18:	429a      	cmp	r2, r3
 8073d1a:	d901      	bls.n	8073d20 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8073d1c:	2301      	movs	r3, #1
 8073d1e:	e06c      	b.n	8073dfa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8073d20:	68fb      	ldr	r3, [r7, #12]
 8073d22:	695a      	ldr	r2, [r3, #20]
 8073d24:	68fb      	ldr	r3, [r7, #12]
 8073d26:	699b      	ldr	r3, [r3, #24]
 8073d28:	1ad3      	subs	r3, r2, r3
 8073d2a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8073d2c:	68fb      	ldr	r3, [r7, #12]
 8073d2e:	689b      	ldr	r3, [r3, #8]
 8073d30:	69fa      	ldr	r2, [r7, #28]
 8073d32:	429a      	cmp	r2, r3
 8073d34:	d902      	bls.n	8073d3c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8073d36:	68fb      	ldr	r3, [r7, #12]
 8073d38:	689b      	ldr	r3, [r3, #8]
 8073d3a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8073d3c:	69fb      	ldr	r3, [r7, #28]
 8073d3e:	3303      	adds	r3, #3
 8073d40:	089b      	lsrs	r3, r3, #2
 8073d42:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8073d44:	e02b      	b.n	8073d9e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8073d46:	68fb      	ldr	r3, [r7, #12]
 8073d48:	695a      	ldr	r2, [r3, #20]
 8073d4a:	68fb      	ldr	r3, [r7, #12]
 8073d4c:	699b      	ldr	r3, [r3, #24]
 8073d4e:	1ad3      	subs	r3, r2, r3
 8073d50:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8073d52:	68fb      	ldr	r3, [r7, #12]
 8073d54:	689b      	ldr	r3, [r3, #8]
 8073d56:	69fa      	ldr	r2, [r7, #28]
 8073d58:	429a      	cmp	r2, r3
 8073d5a:	d902      	bls.n	8073d62 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8073d5c:	68fb      	ldr	r3, [r7, #12]
 8073d5e:	689b      	ldr	r3, [r3, #8]
 8073d60:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8073d62:	69fb      	ldr	r3, [r7, #28]
 8073d64:	3303      	adds	r3, #3
 8073d66:	089b      	lsrs	r3, r3, #2
 8073d68:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8073d6a:	68fb      	ldr	r3, [r7, #12]
 8073d6c:	68d9      	ldr	r1, [r3, #12]
 8073d6e:	683b      	ldr	r3, [r7, #0]
 8073d70:	b2da      	uxtb	r2, r3
 8073d72:	69fb      	ldr	r3, [r7, #28]
 8073d74:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8073d76:	687b      	ldr	r3, [r7, #4]
 8073d78:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8073d7a:	b2db      	uxtb	r3, r3
 8073d7c:	9300      	str	r3, [sp, #0]
 8073d7e:	4603      	mov	r3, r0
 8073d80:	6978      	ldr	r0, [r7, #20]
 8073d82:	f001 fd6e 	bl	8075862 <USB_WritePacket>

    ep->xfer_buff  += len;
 8073d86:	68fb      	ldr	r3, [r7, #12]
 8073d88:	68da      	ldr	r2, [r3, #12]
 8073d8a:	69fb      	ldr	r3, [r7, #28]
 8073d8c:	441a      	add	r2, r3
 8073d8e:	68fb      	ldr	r3, [r7, #12]
 8073d90:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8073d92:	68fb      	ldr	r3, [r7, #12]
 8073d94:	699a      	ldr	r2, [r3, #24]
 8073d96:	69fb      	ldr	r3, [r7, #28]
 8073d98:	441a      	add	r2, r3
 8073d9a:	68fb      	ldr	r3, [r7, #12]
 8073d9c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8073d9e:	683b      	ldr	r3, [r7, #0]
 8073da0:	015a      	lsls	r2, r3, #5
 8073da2:	693b      	ldr	r3, [r7, #16]
 8073da4:	4413      	add	r3, r2
 8073da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8073daa:	699b      	ldr	r3, [r3, #24]
 8073dac:	b29b      	uxth	r3, r3
 8073dae:	69ba      	ldr	r2, [r7, #24]
 8073db0:	429a      	cmp	r2, r3
 8073db2:	d809      	bhi.n	8073dc8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8073db4:	68fb      	ldr	r3, [r7, #12]
 8073db6:	699a      	ldr	r2, [r3, #24]
 8073db8:	68fb      	ldr	r3, [r7, #12]
 8073dba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8073dbc:	429a      	cmp	r2, r3
 8073dbe:	d203      	bcs.n	8073dc8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8073dc0:	68fb      	ldr	r3, [r7, #12]
 8073dc2:	695b      	ldr	r3, [r3, #20]
 8073dc4:	2b00      	cmp	r3, #0
 8073dc6:	d1be      	bne.n	8073d46 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8073dc8:	68fb      	ldr	r3, [r7, #12]
 8073dca:	695a      	ldr	r2, [r3, #20]
 8073dcc:	68fb      	ldr	r3, [r7, #12]
 8073dce:	699b      	ldr	r3, [r3, #24]
 8073dd0:	429a      	cmp	r2, r3
 8073dd2:	d811      	bhi.n	8073df8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8073dd4:	683b      	ldr	r3, [r7, #0]
 8073dd6:	f003 030f 	and.w	r3, r3, #15
 8073dda:	2201      	movs	r2, #1
 8073ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8073de0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8073de2:	693b      	ldr	r3, [r7, #16]
 8073de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8073dea:	68bb      	ldr	r3, [r7, #8]
 8073dec:	43db      	mvns	r3, r3
 8073dee:	6939      	ldr	r1, [r7, #16]
 8073df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8073df4:	4013      	ands	r3, r2
 8073df6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8073df8:	2300      	movs	r3, #0
}
 8073dfa:	4618      	mov	r0, r3
 8073dfc:	3720      	adds	r7, #32
 8073dfe:	46bd      	mov	sp, r7
 8073e00:	bd80      	pop	{r7, pc}
	...

08073e04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8073e04:	b580      	push	{r7, lr}
 8073e06:	b086      	sub	sp, #24
 8073e08:	af00      	add	r7, sp, #0
 8073e0a:	6078      	str	r0, [r7, #4]
 8073e0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8073e0e:	687b      	ldr	r3, [r7, #4]
 8073e10:	681b      	ldr	r3, [r3, #0]
 8073e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8073e14:	697b      	ldr	r3, [r7, #20]
 8073e16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8073e18:	697b      	ldr	r3, [r7, #20]
 8073e1a:	333c      	adds	r3, #60	; 0x3c
 8073e1c:	3304      	adds	r3, #4
 8073e1e:	681b      	ldr	r3, [r3, #0]
 8073e20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8073e22:	683b      	ldr	r3, [r7, #0]
 8073e24:	015a      	lsls	r2, r3, #5
 8073e26:	693b      	ldr	r3, [r7, #16]
 8073e28:	4413      	add	r3, r2
 8073e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073e2e:	689b      	ldr	r3, [r3, #8]
 8073e30:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8073e32:	687b      	ldr	r3, [r7, #4]
 8073e34:	691b      	ldr	r3, [r3, #16]
 8073e36:	2b01      	cmp	r3, #1
 8073e38:	f040 80a0 	bne.w	8073f7c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8073e3c:	68bb      	ldr	r3, [r7, #8]
 8073e3e:	f003 0308 	and.w	r3, r3, #8
 8073e42:	2b00      	cmp	r3, #0
 8073e44:	d015      	beq.n	8073e72 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8073e46:	68fb      	ldr	r3, [r7, #12]
 8073e48:	4a72      	ldr	r2, [pc, #456]	; (8074014 <PCD_EP_OutXfrComplete_int+0x210>)
 8073e4a:	4293      	cmp	r3, r2
 8073e4c:	f240 80dd 	bls.w	807400a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8073e50:	68bb      	ldr	r3, [r7, #8]
 8073e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8073e56:	2b00      	cmp	r3, #0
 8073e58:	f000 80d7 	beq.w	807400a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8073e5c:	683b      	ldr	r3, [r7, #0]
 8073e5e:	015a      	lsls	r2, r3, #5
 8073e60:	693b      	ldr	r3, [r7, #16]
 8073e62:	4413      	add	r3, r2
 8073e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073e68:	461a      	mov	r2, r3
 8073e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8073e6e:	6093      	str	r3, [r2, #8]
 8073e70:	e0cb      	b.n	807400a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8073e72:	68bb      	ldr	r3, [r7, #8]
 8073e74:	f003 0320 	and.w	r3, r3, #32
 8073e78:	2b00      	cmp	r3, #0
 8073e7a:	d009      	beq.n	8073e90 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8073e7c:	683b      	ldr	r3, [r7, #0]
 8073e7e:	015a      	lsls	r2, r3, #5
 8073e80:	693b      	ldr	r3, [r7, #16]
 8073e82:	4413      	add	r3, r2
 8073e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073e88:	461a      	mov	r2, r3
 8073e8a:	2320      	movs	r3, #32
 8073e8c:	6093      	str	r3, [r2, #8]
 8073e8e:	e0bc      	b.n	807400a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8073e90:	68bb      	ldr	r3, [r7, #8]
 8073e92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8073e96:	2b00      	cmp	r3, #0
 8073e98:	f040 80b7 	bne.w	807400a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8073e9c:	68fb      	ldr	r3, [r7, #12]
 8073e9e:	4a5d      	ldr	r2, [pc, #372]	; (8074014 <PCD_EP_OutXfrComplete_int+0x210>)
 8073ea0:	4293      	cmp	r3, r2
 8073ea2:	d90f      	bls.n	8073ec4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8073ea4:	68bb      	ldr	r3, [r7, #8]
 8073ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8073eaa:	2b00      	cmp	r3, #0
 8073eac:	d00a      	beq.n	8073ec4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8073eae:	683b      	ldr	r3, [r7, #0]
 8073eb0:	015a      	lsls	r2, r3, #5
 8073eb2:	693b      	ldr	r3, [r7, #16]
 8073eb4:	4413      	add	r3, r2
 8073eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073eba:	461a      	mov	r2, r3
 8073ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8073ec0:	6093      	str	r3, [r2, #8]
 8073ec2:	e0a2      	b.n	807400a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8073ec4:	6879      	ldr	r1, [r7, #4]
 8073ec6:	683a      	ldr	r2, [r7, #0]
 8073ec8:	4613      	mov	r3, r2
 8073eca:	00db      	lsls	r3, r3, #3
 8073ecc:	1a9b      	subs	r3, r3, r2
 8073ece:	009b      	lsls	r3, r3, #2
 8073ed0:	440b      	add	r3, r1
 8073ed2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8073ed6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8073ed8:	683b      	ldr	r3, [r7, #0]
 8073eda:	0159      	lsls	r1, r3, #5
 8073edc:	693b      	ldr	r3, [r7, #16]
 8073ede:	440b      	add	r3, r1
 8073ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073ee4:	691b      	ldr	r3, [r3, #16]
 8073ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8073eea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8073eec:	6878      	ldr	r0, [r7, #4]
 8073eee:	683a      	ldr	r2, [r7, #0]
 8073ef0:	4613      	mov	r3, r2
 8073ef2:	00db      	lsls	r3, r3, #3
 8073ef4:	1a9b      	subs	r3, r3, r2
 8073ef6:	009b      	lsls	r3, r3, #2
 8073ef8:	4403      	add	r3, r0
 8073efa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8073efe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8073f00:	6879      	ldr	r1, [r7, #4]
 8073f02:	683a      	ldr	r2, [r7, #0]
 8073f04:	4613      	mov	r3, r2
 8073f06:	00db      	lsls	r3, r3, #3
 8073f08:	1a9b      	subs	r3, r3, r2
 8073f0a:	009b      	lsls	r3, r3, #2
 8073f0c:	440b      	add	r3, r1
 8073f0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8073f12:	6819      	ldr	r1, [r3, #0]
 8073f14:	6878      	ldr	r0, [r7, #4]
 8073f16:	683a      	ldr	r2, [r7, #0]
 8073f18:	4613      	mov	r3, r2
 8073f1a:	00db      	lsls	r3, r3, #3
 8073f1c:	1a9b      	subs	r3, r3, r2
 8073f1e:	009b      	lsls	r3, r3, #2
 8073f20:	4403      	add	r3, r0
 8073f22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8073f26:	681b      	ldr	r3, [r3, #0]
 8073f28:	4419      	add	r1, r3
 8073f2a:	6878      	ldr	r0, [r7, #4]
 8073f2c:	683a      	ldr	r2, [r7, #0]
 8073f2e:	4613      	mov	r3, r2
 8073f30:	00db      	lsls	r3, r3, #3
 8073f32:	1a9b      	subs	r3, r3, r2
 8073f34:	009b      	lsls	r3, r3, #2
 8073f36:	4403      	add	r3, r0
 8073f38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8073f3c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8073f3e:	683b      	ldr	r3, [r7, #0]
 8073f40:	2b00      	cmp	r3, #0
 8073f42:	d114      	bne.n	8073f6e <PCD_EP_OutXfrComplete_int+0x16a>
 8073f44:	6879      	ldr	r1, [r7, #4]
 8073f46:	683a      	ldr	r2, [r7, #0]
 8073f48:	4613      	mov	r3, r2
 8073f4a:	00db      	lsls	r3, r3, #3
 8073f4c:	1a9b      	subs	r3, r3, r2
 8073f4e:	009b      	lsls	r3, r3, #2
 8073f50:	440b      	add	r3, r1
 8073f52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8073f56:	681b      	ldr	r3, [r3, #0]
 8073f58:	2b00      	cmp	r3, #0
 8073f5a:	d108      	bne.n	8073f6e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8073f5c:	687b      	ldr	r3, [r7, #4]
 8073f5e:	6818      	ldr	r0, [r3, #0]
 8073f60:	687b      	ldr	r3, [r7, #4]
 8073f62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8073f66:	461a      	mov	r2, r3
 8073f68:	2101      	movs	r1, #1
 8073f6a:	f001 fed9 	bl	8075d20 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8073f6e:	683b      	ldr	r3, [r7, #0]
 8073f70:	b2db      	uxtb	r3, r3
 8073f72:	4619      	mov	r1, r3
 8073f74:	6878      	ldr	r0, [r7, #4]
 8073f76:	f004 f93b 	bl	80781f0 <HAL_PCD_DataOutStageCallback>
 8073f7a:	e046      	b.n	807400a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8073f7c:	68fb      	ldr	r3, [r7, #12]
 8073f7e:	4a26      	ldr	r2, [pc, #152]	; (8074018 <PCD_EP_OutXfrComplete_int+0x214>)
 8073f80:	4293      	cmp	r3, r2
 8073f82:	d124      	bne.n	8073fce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8073f84:	68bb      	ldr	r3, [r7, #8]
 8073f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8073f8a:	2b00      	cmp	r3, #0
 8073f8c:	d00a      	beq.n	8073fa4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8073f8e:	683b      	ldr	r3, [r7, #0]
 8073f90:	015a      	lsls	r2, r3, #5
 8073f92:	693b      	ldr	r3, [r7, #16]
 8073f94:	4413      	add	r3, r2
 8073f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073f9a:	461a      	mov	r2, r3
 8073f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8073fa0:	6093      	str	r3, [r2, #8]
 8073fa2:	e032      	b.n	807400a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8073fa4:	68bb      	ldr	r3, [r7, #8]
 8073fa6:	f003 0320 	and.w	r3, r3, #32
 8073faa:	2b00      	cmp	r3, #0
 8073fac:	d008      	beq.n	8073fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8073fae:	683b      	ldr	r3, [r7, #0]
 8073fb0:	015a      	lsls	r2, r3, #5
 8073fb2:	693b      	ldr	r3, [r7, #16]
 8073fb4:	4413      	add	r3, r2
 8073fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073fba:	461a      	mov	r2, r3
 8073fbc:	2320      	movs	r3, #32
 8073fbe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8073fc0:	683b      	ldr	r3, [r7, #0]
 8073fc2:	b2db      	uxtb	r3, r3
 8073fc4:	4619      	mov	r1, r3
 8073fc6:	6878      	ldr	r0, [r7, #4]
 8073fc8:	f004 f912 	bl	80781f0 <HAL_PCD_DataOutStageCallback>
 8073fcc:	e01d      	b.n	807400a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8073fce:	683b      	ldr	r3, [r7, #0]
 8073fd0:	2b00      	cmp	r3, #0
 8073fd2:	d114      	bne.n	8073ffe <PCD_EP_OutXfrComplete_int+0x1fa>
 8073fd4:	6879      	ldr	r1, [r7, #4]
 8073fd6:	683a      	ldr	r2, [r7, #0]
 8073fd8:	4613      	mov	r3, r2
 8073fda:	00db      	lsls	r3, r3, #3
 8073fdc:	1a9b      	subs	r3, r3, r2
 8073fde:	009b      	lsls	r3, r3, #2
 8073fe0:	440b      	add	r3, r1
 8073fe2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8073fe6:	681b      	ldr	r3, [r3, #0]
 8073fe8:	2b00      	cmp	r3, #0
 8073fea:	d108      	bne.n	8073ffe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8073fec:	687b      	ldr	r3, [r7, #4]
 8073fee:	6818      	ldr	r0, [r3, #0]
 8073ff0:	687b      	ldr	r3, [r7, #4]
 8073ff2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8073ff6:	461a      	mov	r2, r3
 8073ff8:	2100      	movs	r1, #0
 8073ffa:	f001 fe91 	bl	8075d20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8073ffe:	683b      	ldr	r3, [r7, #0]
 8074000:	b2db      	uxtb	r3, r3
 8074002:	4619      	mov	r1, r3
 8074004:	6878      	ldr	r0, [r7, #4]
 8074006:	f004 f8f3 	bl	80781f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 807400a:	2300      	movs	r3, #0
}
 807400c:	4618      	mov	r0, r3
 807400e:	3718      	adds	r7, #24
 8074010:	46bd      	mov	sp, r7
 8074012:	bd80      	pop	{r7, pc}
 8074014:	4f54300a 	.word	0x4f54300a
 8074018:	4f54310a 	.word	0x4f54310a

0807401c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 807401c:	b580      	push	{r7, lr}
 807401e:	b086      	sub	sp, #24
 8074020:	af00      	add	r7, sp, #0
 8074022:	6078      	str	r0, [r7, #4]
 8074024:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8074026:	687b      	ldr	r3, [r7, #4]
 8074028:	681b      	ldr	r3, [r3, #0]
 807402a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807402c:	697b      	ldr	r3, [r7, #20]
 807402e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8074030:	697b      	ldr	r3, [r7, #20]
 8074032:	333c      	adds	r3, #60	; 0x3c
 8074034:	3304      	adds	r3, #4
 8074036:	681b      	ldr	r3, [r3, #0]
 8074038:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 807403a:	683b      	ldr	r3, [r7, #0]
 807403c:	015a      	lsls	r2, r3, #5
 807403e:	693b      	ldr	r3, [r7, #16]
 8074040:	4413      	add	r3, r2
 8074042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074046:	689b      	ldr	r3, [r3, #8]
 8074048:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 807404a:	68fb      	ldr	r3, [r7, #12]
 807404c:	4a15      	ldr	r2, [pc, #84]	; (80740a4 <PCD_EP_OutSetupPacket_int+0x88>)
 807404e:	4293      	cmp	r3, r2
 8074050:	d90e      	bls.n	8074070 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8074052:	68bb      	ldr	r3, [r7, #8]
 8074054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8074058:	2b00      	cmp	r3, #0
 807405a:	d009      	beq.n	8074070 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 807405c:	683b      	ldr	r3, [r7, #0]
 807405e:	015a      	lsls	r2, r3, #5
 8074060:	693b      	ldr	r3, [r7, #16]
 8074062:	4413      	add	r3, r2
 8074064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074068:	461a      	mov	r2, r3
 807406a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 807406e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8074070:	6878      	ldr	r0, [r7, #4]
 8074072:	f004 f8ab 	bl	80781cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8074076:	68fb      	ldr	r3, [r7, #12]
 8074078:	4a0a      	ldr	r2, [pc, #40]	; (80740a4 <PCD_EP_OutSetupPacket_int+0x88>)
 807407a:	4293      	cmp	r3, r2
 807407c:	d90c      	bls.n	8074098 <PCD_EP_OutSetupPacket_int+0x7c>
 807407e:	687b      	ldr	r3, [r7, #4]
 8074080:	691b      	ldr	r3, [r3, #16]
 8074082:	2b01      	cmp	r3, #1
 8074084:	d108      	bne.n	8074098 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8074086:	687b      	ldr	r3, [r7, #4]
 8074088:	6818      	ldr	r0, [r3, #0]
 807408a:	687b      	ldr	r3, [r7, #4]
 807408c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8074090:	461a      	mov	r2, r3
 8074092:	2101      	movs	r1, #1
 8074094:	f001 fe44 	bl	8075d20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8074098:	2300      	movs	r3, #0
}
 807409a:	4618      	mov	r0, r3
 807409c:	3718      	adds	r7, #24
 807409e:	46bd      	mov	sp, r7
 80740a0:	bd80      	pop	{r7, pc}
 80740a2:	bf00      	nop
 80740a4:	4f54300a 	.word	0x4f54300a

080740a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80740a8:	b480      	push	{r7}
 80740aa:	b085      	sub	sp, #20
 80740ac:	af00      	add	r7, sp, #0
 80740ae:	6078      	str	r0, [r7, #4]
 80740b0:	460b      	mov	r3, r1
 80740b2:	70fb      	strb	r3, [r7, #3]
 80740b4:	4613      	mov	r3, r2
 80740b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80740b8:	687b      	ldr	r3, [r7, #4]
 80740ba:	681b      	ldr	r3, [r3, #0]
 80740bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80740be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80740c0:	78fb      	ldrb	r3, [r7, #3]
 80740c2:	2b00      	cmp	r3, #0
 80740c4:	d107      	bne.n	80740d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80740c6:	883b      	ldrh	r3, [r7, #0]
 80740c8:	0419      	lsls	r1, r3, #16
 80740ca:	687b      	ldr	r3, [r7, #4]
 80740cc:	681b      	ldr	r3, [r3, #0]
 80740ce:	68ba      	ldr	r2, [r7, #8]
 80740d0:	430a      	orrs	r2, r1
 80740d2:	629a      	str	r2, [r3, #40]	; 0x28
 80740d4:	e028      	b.n	8074128 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80740d6:	687b      	ldr	r3, [r7, #4]
 80740d8:	681b      	ldr	r3, [r3, #0]
 80740da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80740dc:	0c1b      	lsrs	r3, r3, #16
 80740de:	68ba      	ldr	r2, [r7, #8]
 80740e0:	4413      	add	r3, r2
 80740e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80740e4:	2300      	movs	r3, #0
 80740e6:	73fb      	strb	r3, [r7, #15]
 80740e8:	e00d      	b.n	8074106 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80740ea:	687b      	ldr	r3, [r7, #4]
 80740ec:	681a      	ldr	r2, [r3, #0]
 80740ee:	7bfb      	ldrb	r3, [r7, #15]
 80740f0:	3340      	adds	r3, #64	; 0x40
 80740f2:	009b      	lsls	r3, r3, #2
 80740f4:	4413      	add	r3, r2
 80740f6:	685b      	ldr	r3, [r3, #4]
 80740f8:	0c1b      	lsrs	r3, r3, #16
 80740fa:	68ba      	ldr	r2, [r7, #8]
 80740fc:	4413      	add	r3, r2
 80740fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8074100:	7bfb      	ldrb	r3, [r7, #15]
 8074102:	3301      	adds	r3, #1
 8074104:	73fb      	strb	r3, [r7, #15]
 8074106:	7bfa      	ldrb	r2, [r7, #15]
 8074108:	78fb      	ldrb	r3, [r7, #3]
 807410a:	3b01      	subs	r3, #1
 807410c:	429a      	cmp	r2, r3
 807410e:	d3ec      	bcc.n	80740ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8074110:	883b      	ldrh	r3, [r7, #0]
 8074112:	0418      	lsls	r0, r3, #16
 8074114:	687b      	ldr	r3, [r7, #4]
 8074116:	6819      	ldr	r1, [r3, #0]
 8074118:	78fb      	ldrb	r3, [r7, #3]
 807411a:	3b01      	subs	r3, #1
 807411c:	68ba      	ldr	r2, [r7, #8]
 807411e:	4302      	orrs	r2, r0
 8074120:	3340      	adds	r3, #64	; 0x40
 8074122:	009b      	lsls	r3, r3, #2
 8074124:	440b      	add	r3, r1
 8074126:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8074128:	2300      	movs	r3, #0
}
 807412a:	4618      	mov	r0, r3
 807412c:	3714      	adds	r7, #20
 807412e:	46bd      	mov	sp, r7
 8074130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074134:	4770      	bx	lr

08074136 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8074136:	b480      	push	{r7}
 8074138:	b083      	sub	sp, #12
 807413a:	af00      	add	r7, sp, #0
 807413c:	6078      	str	r0, [r7, #4]
 807413e:	460b      	mov	r3, r1
 8074140:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8074142:	687b      	ldr	r3, [r7, #4]
 8074144:	681b      	ldr	r3, [r3, #0]
 8074146:	887a      	ldrh	r2, [r7, #2]
 8074148:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 807414a:	2300      	movs	r3, #0
}
 807414c:	4618      	mov	r0, r3
 807414e:	370c      	adds	r7, #12
 8074150:	46bd      	mov	sp, r7
 8074152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074156:	4770      	bx	lr

08074158 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8074158:	b480      	push	{r7}
 807415a:	b083      	sub	sp, #12
 807415c:	af00      	add	r7, sp, #0
 807415e:	6078      	str	r0, [r7, #4]
 8074160:	460b      	mov	r3, r1
 8074162:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8074164:	bf00      	nop
 8074166:	370c      	adds	r7, #12
 8074168:	46bd      	mov	sp, r7
 807416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807416e:	4770      	bx	lr

08074170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8074170:	b580      	push	{r7, lr}
 8074172:	b086      	sub	sp, #24
 8074174:	af00      	add	r7, sp, #0
 8074176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8074178:	687b      	ldr	r3, [r7, #4]
 807417a:	2b00      	cmp	r3, #0
 807417c:	d101      	bne.n	8074182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 807417e:	2301      	movs	r3, #1
 8074180:	e264      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8074182:	687b      	ldr	r3, [r7, #4]
 8074184:	681b      	ldr	r3, [r3, #0]
 8074186:	f003 0301 	and.w	r3, r3, #1
 807418a:	2b00      	cmp	r3, #0
 807418c:	d075      	beq.n	807427a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 807418e:	4ba3      	ldr	r3, [pc, #652]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 8074190:	689b      	ldr	r3, [r3, #8]
 8074192:	f003 030c 	and.w	r3, r3, #12
 8074196:	2b04      	cmp	r3, #4
 8074198:	d00c      	beq.n	80741b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 807419a:	4ba0      	ldr	r3, [pc, #640]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 807419c:	689b      	ldr	r3, [r3, #8]
 807419e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80741a2:	2b08      	cmp	r3, #8
 80741a4:	d112      	bne.n	80741cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80741a6:	4b9d      	ldr	r3, [pc, #628]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80741a8:	685b      	ldr	r3, [r3, #4]
 80741aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80741ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80741b2:	d10b      	bne.n	80741cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80741b4:	4b99      	ldr	r3, [pc, #612]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80741b6:	681b      	ldr	r3, [r3, #0]
 80741b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80741bc:	2b00      	cmp	r3, #0
 80741be:	d05b      	beq.n	8074278 <HAL_RCC_OscConfig+0x108>
 80741c0:	687b      	ldr	r3, [r7, #4]
 80741c2:	685b      	ldr	r3, [r3, #4]
 80741c4:	2b00      	cmp	r3, #0
 80741c6:	d157      	bne.n	8074278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80741c8:	2301      	movs	r3, #1
 80741ca:	e23f      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80741cc:	687b      	ldr	r3, [r7, #4]
 80741ce:	685b      	ldr	r3, [r3, #4]
 80741d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80741d4:	d106      	bne.n	80741e4 <HAL_RCC_OscConfig+0x74>
 80741d6:	4b91      	ldr	r3, [pc, #580]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80741d8:	681b      	ldr	r3, [r3, #0]
 80741da:	4a90      	ldr	r2, [pc, #576]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80741dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80741e0:	6013      	str	r3, [r2, #0]
 80741e2:	e01d      	b.n	8074220 <HAL_RCC_OscConfig+0xb0>
 80741e4:	687b      	ldr	r3, [r7, #4]
 80741e6:	685b      	ldr	r3, [r3, #4]
 80741e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80741ec:	d10c      	bne.n	8074208 <HAL_RCC_OscConfig+0x98>
 80741ee:	4b8b      	ldr	r3, [pc, #556]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80741f0:	681b      	ldr	r3, [r3, #0]
 80741f2:	4a8a      	ldr	r2, [pc, #552]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80741f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80741f8:	6013      	str	r3, [r2, #0]
 80741fa:	4b88      	ldr	r3, [pc, #544]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80741fc:	681b      	ldr	r3, [r3, #0]
 80741fe:	4a87      	ldr	r2, [pc, #540]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 8074200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8074204:	6013      	str	r3, [r2, #0]
 8074206:	e00b      	b.n	8074220 <HAL_RCC_OscConfig+0xb0>
 8074208:	4b84      	ldr	r3, [pc, #528]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 807420a:	681b      	ldr	r3, [r3, #0]
 807420c:	4a83      	ldr	r2, [pc, #524]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 807420e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8074212:	6013      	str	r3, [r2, #0]
 8074214:	4b81      	ldr	r3, [pc, #516]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 8074216:	681b      	ldr	r3, [r3, #0]
 8074218:	4a80      	ldr	r2, [pc, #512]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 807421a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 807421e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8074220:	687b      	ldr	r3, [r7, #4]
 8074222:	685b      	ldr	r3, [r3, #4]
 8074224:	2b00      	cmp	r3, #0
 8074226:	d013      	beq.n	8074250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8074228:	f7fe fb4e 	bl	80728c8 <HAL_GetTick>
 807422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 807422e:	e008      	b.n	8074242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8074230:	f7fe fb4a 	bl	80728c8 <HAL_GetTick>
 8074234:	4602      	mov	r2, r0
 8074236:	693b      	ldr	r3, [r7, #16]
 8074238:	1ad3      	subs	r3, r2, r3
 807423a:	2b64      	cmp	r3, #100	; 0x64
 807423c:	d901      	bls.n	8074242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 807423e:	2303      	movs	r3, #3
 8074240:	e204      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8074242:	4b76      	ldr	r3, [pc, #472]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 8074244:	681b      	ldr	r3, [r3, #0]
 8074246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 807424a:	2b00      	cmp	r3, #0
 807424c:	d0f0      	beq.n	8074230 <HAL_RCC_OscConfig+0xc0>
 807424e:	e014      	b.n	807427a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8074250:	f7fe fb3a 	bl	80728c8 <HAL_GetTick>
 8074254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8074256:	e008      	b.n	807426a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8074258:	f7fe fb36 	bl	80728c8 <HAL_GetTick>
 807425c:	4602      	mov	r2, r0
 807425e:	693b      	ldr	r3, [r7, #16]
 8074260:	1ad3      	subs	r3, r2, r3
 8074262:	2b64      	cmp	r3, #100	; 0x64
 8074264:	d901      	bls.n	807426a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8074266:	2303      	movs	r3, #3
 8074268:	e1f0      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 807426a:	4b6c      	ldr	r3, [pc, #432]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 807426c:	681b      	ldr	r3, [r3, #0]
 807426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8074272:	2b00      	cmp	r3, #0
 8074274:	d1f0      	bne.n	8074258 <HAL_RCC_OscConfig+0xe8>
 8074276:	e000      	b.n	807427a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8074278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 807427a:	687b      	ldr	r3, [r7, #4]
 807427c:	681b      	ldr	r3, [r3, #0]
 807427e:	f003 0302 	and.w	r3, r3, #2
 8074282:	2b00      	cmp	r3, #0
 8074284:	d063      	beq.n	807434e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8074286:	4b65      	ldr	r3, [pc, #404]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 8074288:	689b      	ldr	r3, [r3, #8]
 807428a:	f003 030c 	and.w	r3, r3, #12
 807428e:	2b00      	cmp	r3, #0
 8074290:	d00b      	beq.n	80742aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8074292:	4b62      	ldr	r3, [pc, #392]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 8074294:	689b      	ldr	r3, [r3, #8]
 8074296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 807429a:	2b08      	cmp	r3, #8
 807429c:	d11c      	bne.n	80742d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 807429e:	4b5f      	ldr	r3, [pc, #380]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80742a0:	685b      	ldr	r3, [r3, #4]
 80742a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80742a6:	2b00      	cmp	r3, #0
 80742a8:	d116      	bne.n	80742d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80742aa:	4b5c      	ldr	r3, [pc, #368]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80742ac:	681b      	ldr	r3, [r3, #0]
 80742ae:	f003 0302 	and.w	r3, r3, #2
 80742b2:	2b00      	cmp	r3, #0
 80742b4:	d005      	beq.n	80742c2 <HAL_RCC_OscConfig+0x152>
 80742b6:	687b      	ldr	r3, [r7, #4]
 80742b8:	68db      	ldr	r3, [r3, #12]
 80742ba:	2b01      	cmp	r3, #1
 80742bc:	d001      	beq.n	80742c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80742be:	2301      	movs	r3, #1
 80742c0:	e1c4      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80742c2:	4b56      	ldr	r3, [pc, #344]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80742c4:	681b      	ldr	r3, [r3, #0]
 80742c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80742ca:	687b      	ldr	r3, [r7, #4]
 80742cc:	691b      	ldr	r3, [r3, #16]
 80742ce:	00db      	lsls	r3, r3, #3
 80742d0:	4952      	ldr	r1, [pc, #328]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80742d2:	4313      	orrs	r3, r2
 80742d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80742d6:	e03a      	b.n	807434e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80742d8:	687b      	ldr	r3, [r7, #4]
 80742da:	68db      	ldr	r3, [r3, #12]
 80742dc:	2b00      	cmp	r3, #0
 80742de:	d020      	beq.n	8074322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80742e0:	4b4f      	ldr	r3, [pc, #316]	; (8074420 <HAL_RCC_OscConfig+0x2b0>)
 80742e2:	2201      	movs	r2, #1
 80742e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80742e6:	f7fe faef 	bl	80728c8 <HAL_GetTick>
 80742ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80742ec:	e008      	b.n	8074300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80742ee:	f7fe faeb 	bl	80728c8 <HAL_GetTick>
 80742f2:	4602      	mov	r2, r0
 80742f4:	693b      	ldr	r3, [r7, #16]
 80742f6:	1ad3      	subs	r3, r2, r3
 80742f8:	2b02      	cmp	r3, #2
 80742fa:	d901      	bls.n	8074300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80742fc:	2303      	movs	r3, #3
 80742fe:	e1a5      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8074300:	4b46      	ldr	r3, [pc, #280]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 8074302:	681b      	ldr	r3, [r3, #0]
 8074304:	f003 0302 	and.w	r3, r3, #2
 8074308:	2b00      	cmp	r3, #0
 807430a:	d0f0      	beq.n	80742ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 807430c:	4b43      	ldr	r3, [pc, #268]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 807430e:	681b      	ldr	r3, [r3, #0]
 8074310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8074314:	687b      	ldr	r3, [r7, #4]
 8074316:	691b      	ldr	r3, [r3, #16]
 8074318:	00db      	lsls	r3, r3, #3
 807431a:	4940      	ldr	r1, [pc, #256]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 807431c:	4313      	orrs	r3, r2
 807431e:	600b      	str	r3, [r1, #0]
 8074320:	e015      	b.n	807434e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8074322:	4b3f      	ldr	r3, [pc, #252]	; (8074420 <HAL_RCC_OscConfig+0x2b0>)
 8074324:	2200      	movs	r2, #0
 8074326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8074328:	f7fe face 	bl	80728c8 <HAL_GetTick>
 807432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 807432e:	e008      	b.n	8074342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8074330:	f7fe faca 	bl	80728c8 <HAL_GetTick>
 8074334:	4602      	mov	r2, r0
 8074336:	693b      	ldr	r3, [r7, #16]
 8074338:	1ad3      	subs	r3, r2, r3
 807433a:	2b02      	cmp	r3, #2
 807433c:	d901      	bls.n	8074342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 807433e:	2303      	movs	r3, #3
 8074340:	e184      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8074342:	4b36      	ldr	r3, [pc, #216]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 8074344:	681b      	ldr	r3, [r3, #0]
 8074346:	f003 0302 	and.w	r3, r3, #2
 807434a:	2b00      	cmp	r3, #0
 807434c:	d1f0      	bne.n	8074330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 807434e:	687b      	ldr	r3, [r7, #4]
 8074350:	681b      	ldr	r3, [r3, #0]
 8074352:	f003 0308 	and.w	r3, r3, #8
 8074356:	2b00      	cmp	r3, #0
 8074358:	d030      	beq.n	80743bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 807435a:	687b      	ldr	r3, [r7, #4]
 807435c:	695b      	ldr	r3, [r3, #20]
 807435e:	2b00      	cmp	r3, #0
 8074360:	d016      	beq.n	8074390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8074362:	4b30      	ldr	r3, [pc, #192]	; (8074424 <HAL_RCC_OscConfig+0x2b4>)
 8074364:	2201      	movs	r2, #1
 8074366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8074368:	f7fe faae 	bl	80728c8 <HAL_GetTick>
 807436c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 807436e:	e008      	b.n	8074382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8074370:	f7fe faaa 	bl	80728c8 <HAL_GetTick>
 8074374:	4602      	mov	r2, r0
 8074376:	693b      	ldr	r3, [r7, #16]
 8074378:	1ad3      	subs	r3, r2, r3
 807437a:	2b02      	cmp	r3, #2
 807437c:	d901      	bls.n	8074382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 807437e:	2303      	movs	r3, #3
 8074380:	e164      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8074382:	4b26      	ldr	r3, [pc, #152]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 8074384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8074386:	f003 0302 	and.w	r3, r3, #2
 807438a:	2b00      	cmp	r3, #0
 807438c:	d0f0      	beq.n	8074370 <HAL_RCC_OscConfig+0x200>
 807438e:	e015      	b.n	80743bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8074390:	4b24      	ldr	r3, [pc, #144]	; (8074424 <HAL_RCC_OscConfig+0x2b4>)
 8074392:	2200      	movs	r2, #0
 8074394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8074396:	f7fe fa97 	bl	80728c8 <HAL_GetTick>
 807439a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 807439c:	e008      	b.n	80743b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 807439e:	f7fe fa93 	bl	80728c8 <HAL_GetTick>
 80743a2:	4602      	mov	r2, r0
 80743a4:	693b      	ldr	r3, [r7, #16]
 80743a6:	1ad3      	subs	r3, r2, r3
 80743a8:	2b02      	cmp	r3, #2
 80743aa:	d901      	bls.n	80743b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80743ac:	2303      	movs	r3, #3
 80743ae:	e14d      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80743b0:	4b1a      	ldr	r3, [pc, #104]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80743b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80743b4:	f003 0302 	and.w	r3, r3, #2
 80743b8:	2b00      	cmp	r3, #0
 80743ba:	d1f0      	bne.n	807439e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80743bc:	687b      	ldr	r3, [r7, #4]
 80743be:	681b      	ldr	r3, [r3, #0]
 80743c0:	f003 0304 	and.w	r3, r3, #4
 80743c4:	2b00      	cmp	r3, #0
 80743c6:	f000 80a0 	beq.w	807450a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80743ca:	2300      	movs	r3, #0
 80743cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80743ce:	4b13      	ldr	r3, [pc, #76]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80743d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80743d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80743d6:	2b00      	cmp	r3, #0
 80743d8:	d10f      	bne.n	80743fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80743da:	2300      	movs	r3, #0
 80743dc:	60bb      	str	r3, [r7, #8]
 80743de:	4b0f      	ldr	r3, [pc, #60]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80743e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80743e2:	4a0e      	ldr	r2, [pc, #56]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80743e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80743e8:	6413      	str	r3, [r2, #64]	; 0x40
 80743ea:	4b0c      	ldr	r3, [pc, #48]	; (807441c <HAL_RCC_OscConfig+0x2ac>)
 80743ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80743ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80743f2:	60bb      	str	r3, [r7, #8]
 80743f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80743f6:	2301      	movs	r3, #1
 80743f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80743fa:	4b0b      	ldr	r3, [pc, #44]	; (8074428 <HAL_RCC_OscConfig+0x2b8>)
 80743fc:	681b      	ldr	r3, [r3, #0]
 80743fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8074402:	2b00      	cmp	r3, #0
 8074404:	d121      	bne.n	807444a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8074406:	4b08      	ldr	r3, [pc, #32]	; (8074428 <HAL_RCC_OscConfig+0x2b8>)
 8074408:	681b      	ldr	r3, [r3, #0]
 807440a:	4a07      	ldr	r2, [pc, #28]	; (8074428 <HAL_RCC_OscConfig+0x2b8>)
 807440c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8074410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8074412:	f7fe fa59 	bl	80728c8 <HAL_GetTick>
 8074416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8074418:	e011      	b.n	807443e <HAL_RCC_OscConfig+0x2ce>
 807441a:	bf00      	nop
 807441c:	40023800 	.word	0x40023800
 8074420:	42470000 	.word	0x42470000
 8074424:	42470e80 	.word	0x42470e80
 8074428:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 807442c:	f7fe fa4c 	bl	80728c8 <HAL_GetTick>
 8074430:	4602      	mov	r2, r0
 8074432:	693b      	ldr	r3, [r7, #16]
 8074434:	1ad3      	subs	r3, r2, r3
 8074436:	2b02      	cmp	r3, #2
 8074438:	d901      	bls.n	807443e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 807443a:	2303      	movs	r3, #3
 807443c:	e106      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 807443e:	4b85      	ldr	r3, [pc, #532]	; (8074654 <HAL_RCC_OscConfig+0x4e4>)
 8074440:	681b      	ldr	r3, [r3, #0]
 8074442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8074446:	2b00      	cmp	r3, #0
 8074448:	d0f0      	beq.n	807442c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 807444a:	687b      	ldr	r3, [r7, #4]
 807444c:	689b      	ldr	r3, [r3, #8]
 807444e:	2b01      	cmp	r3, #1
 8074450:	d106      	bne.n	8074460 <HAL_RCC_OscConfig+0x2f0>
 8074452:	4b81      	ldr	r3, [pc, #516]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 8074454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8074456:	4a80      	ldr	r2, [pc, #512]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 8074458:	f043 0301 	orr.w	r3, r3, #1
 807445c:	6713      	str	r3, [r2, #112]	; 0x70
 807445e:	e01c      	b.n	807449a <HAL_RCC_OscConfig+0x32a>
 8074460:	687b      	ldr	r3, [r7, #4]
 8074462:	689b      	ldr	r3, [r3, #8]
 8074464:	2b05      	cmp	r3, #5
 8074466:	d10c      	bne.n	8074482 <HAL_RCC_OscConfig+0x312>
 8074468:	4b7b      	ldr	r3, [pc, #492]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 807446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807446c:	4a7a      	ldr	r2, [pc, #488]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 807446e:	f043 0304 	orr.w	r3, r3, #4
 8074472:	6713      	str	r3, [r2, #112]	; 0x70
 8074474:	4b78      	ldr	r3, [pc, #480]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 8074476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8074478:	4a77      	ldr	r2, [pc, #476]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 807447a:	f043 0301 	orr.w	r3, r3, #1
 807447e:	6713      	str	r3, [r2, #112]	; 0x70
 8074480:	e00b      	b.n	807449a <HAL_RCC_OscConfig+0x32a>
 8074482:	4b75      	ldr	r3, [pc, #468]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 8074484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8074486:	4a74      	ldr	r2, [pc, #464]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 8074488:	f023 0301 	bic.w	r3, r3, #1
 807448c:	6713      	str	r3, [r2, #112]	; 0x70
 807448e:	4b72      	ldr	r3, [pc, #456]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 8074490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8074492:	4a71      	ldr	r2, [pc, #452]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 8074494:	f023 0304 	bic.w	r3, r3, #4
 8074498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 807449a:	687b      	ldr	r3, [r7, #4]
 807449c:	689b      	ldr	r3, [r3, #8]
 807449e:	2b00      	cmp	r3, #0
 80744a0:	d015      	beq.n	80744ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80744a2:	f7fe fa11 	bl	80728c8 <HAL_GetTick>
 80744a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80744a8:	e00a      	b.n	80744c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80744aa:	f7fe fa0d 	bl	80728c8 <HAL_GetTick>
 80744ae:	4602      	mov	r2, r0
 80744b0:	693b      	ldr	r3, [r7, #16]
 80744b2:	1ad3      	subs	r3, r2, r3
 80744b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80744b8:	4293      	cmp	r3, r2
 80744ba:	d901      	bls.n	80744c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80744bc:	2303      	movs	r3, #3
 80744be:	e0c5      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80744c0:	4b65      	ldr	r3, [pc, #404]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 80744c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80744c4:	f003 0302 	and.w	r3, r3, #2
 80744c8:	2b00      	cmp	r3, #0
 80744ca:	d0ee      	beq.n	80744aa <HAL_RCC_OscConfig+0x33a>
 80744cc:	e014      	b.n	80744f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80744ce:	f7fe f9fb 	bl	80728c8 <HAL_GetTick>
 80744d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80744d4:	e00a      	b.n	80744ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80744d6:	f7fe f9f7 	bl	80728c8 <HAL_GetTick>
 80744da:	4602      	mov	r2, r0
 80744dc:	693b      	ldr	r3, [r7, #16]
 80744de:	1ad3      	subs	r3, r2, r3
 80744e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80744e4:	4293      	cmp	r3, r2
 80744e6:	d901      	bls.n	80744ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80744e8:	2303      	movs	r3, #3
 80744ea:	e0af      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80744ec:	4b5a      	ldr	r3, [pc, #360]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 80744ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80744f0:	f003 0302 	and.w	r3, r3, #2
 80744f4:	2b00      	cmp	r3, #0
 80744f6:	d1ee      	bne.n	80744d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80744f8:	7dfb      	ldrb	r3, [r7, #23]
 80744fa:	2b01      	cmp	r3, #1
 80744fc:	d105      	bne.n	807450a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80744fe:	4b56      	ldr	r3, [pc, #344]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 8074500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8074502:	4a55      	ldr	r2, [pc, #340]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 8074504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8074508:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 807450a:	687b      	ldr	r3, [r7, #4]
 807450c:	699b      	ldr	r3, [r3, #24]
 807450e:	2b00      	cmp	r3, #0
 8074510:	f000 809b 	beq.w	807464a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8074514:	4b50      	ldr	r3, [pc, #320]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 8074516:	689b      	ldr	r3, [r3, #8]
 8074518:	f003 030c 	and.w	r3, r3, #12
 807451c:	2b08      	cmp	r3, #8
 807451e:	d05c      	beq.n	80745da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8074520:	687b      	ldr	r3, [r7, #4]
 8074522:	699b      	ldr	r3, [r3, #24]
 8074524:	2b02      	cmp	r3, #2
 8074526:	d141      	bne.n	80745ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8074528:	4b4c      	ldr	r3, [pc, #304]	; (807465c <HAL_RCC_OscConfig+0x4ec>)
 807452a:	2200      	movs	r2, #0
 807452c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807452e:	f7fe f9cb 	bl	80728c8 <HAL_GetTick>
 8074532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8074534:	e008      	b.n	8074548 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8074536:	f7fe f9c7 	bl	80728c8 <HAL_GetTick>
 807453a:	4602      	mov	r2, r0
 807453c:	693b      	ldr	r3, [r7, #16]
 807453e:	1ad3      	subs	r3, r2, r3
 8074540:	2b02      	cmp	r3, #2
 8074542:	d901      	bls.n	8074548 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8074544:	2303      	movs	r3, #3
 8074546:	e081      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8074548:	4b43      	ldr	r3, [pc, #268]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 807454a:	681b      	ldr	r3, [r3, #0]
 807454c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8074550:	2b00      	cmp	r3, #0
 8074552:	d1f0      	bne.n	8074536 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8074554:	687b      	ldr	r3, [r7, #4]
 8074556:	69da      	ldr	r2, [r3, #28]
 8074558:	687b      	ldr	r3, [r7, #4]
 807455a:	6a1b      	ldr	r3, [r3, #32]
 807455c:	431a      	orrs	r2, r3
 807455e:	687b      	ldr	r3, [r7, #4]
 8074560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8074562:	019b      	lsls	r3, r3, #6
 8074564:	431a      	orrs	r2, r3
 8074566:	687b      	ldr	r3, [r7, #4]
 8074568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807456a:	085b      	lsrs	r3, r3, #1
 807456c:	3b01      	subs	r3, #1
 807456e:	041b      	lsls	r3, r3, #16
 8074570:	431a      	orrs	r2, r3
 8074572:	687b      	ldr	r3, [r7, #4]
 8074574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8074576:	061b      	lsls	r3, r3, #24
 8074578:	4937      	ldr	r1, [pc, #220]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 807457a:	4313      	orrs	r3, r2
 807457c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 807457e:	4b37      	ldr	r3, [pc, #220]	; (807465c <HAL_RCC_OscConfig+0x4ec>)
 8074580:	2201      	movs	r2, #1
 8074582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8074584:	f7fe f9a0 	bl	80728c8 <HAL_GetTick>
 8074588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807458a:	e008      	b.n	807459e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 807458c:	f7fe f99c 	bl	80728c8 <HAL_GetTick>
 8074590:	4602      	mov	r2, r0
 8074592:	693b      	ldr	r3, [r7, #16]
 8074594:	1ad3      	subs	r3, r2, r3
 8074596:	2b02      	cmp	r3, #2
 8074598:	d901      	bls.n	807459e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 807459a:	2303      	movs	r3, #3
 807459c:	e056      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807459e:	4b2e      	ldr	r3, [pc, #184]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 80745a0:	681b      	ldr	r3, [r3, #0]
 80745a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80745a6:	2b00      	cmp	r3, #0
 80745a8:	d0f0      	beq.n	807458c <HAL_RCC_OscConfig+0x41c>
 80745aa:	e04e      	b.n	807464a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80745ac:	4b2b      	ldr	r3, [pc, #172]	; (807465c <HAL_RCC_OscConfig+0x4ec>)
 80745ae:	2200      	movs	r2, #0
 80745b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80745b2:	f7fe f989 	bl	80728c8 <HAL_GetTick>
 80745b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80745b8:	e008      	b.n	80745cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80745ba:	f7fe f985 	bl	80728c8 <HAL_GetTick>
 80745be:	4602      	mov	r2, r0
 80745c0:	693b      	ldr	r3, [r7, #16]
 80745c2:	1ad3      	subs	r3, r2, r3
 80745c4:	2b02      	cmp	r3, #2
 80745c6:	d901      	bls.n	80745cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80745c8:	2303      	movs	r3, #3
 80745ca:	e03f      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80745cc:	4b22      	ldr	r3, [pc, #136]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 80745ce:	681b      	ldr	r3, [r3, #0]
 80745d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80745d4:	2b00      	cmp	r3, #0
 80745d6:	d1f0      	bne.n	80745ba <HAL_RCC_OscConfig+0x44a>
 80745d8:	e037      	b.n	807464a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80745da:	687b      	ldr	r3, [r7, #4]
 80745dc:	699b      	ldr	r3, [r3, #24]
 80745de:	2b01      	cmp	r3, #1
 80745e0:	d101      	bne.n	80745e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80745e2:	2301      	movs	r3, #1
 80745e4:	e032      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80745e6:	4b1c      	ldr	r3, [pc, #112]	; (8074658 <HAL_RCC_OscConfig+0x4e8>)
 80745e8:	685b      	ldr	r3, [r3, #4]
 80745ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80745ec:	687b      	ldr	r3, [r7, #4]
 80745ee:	699b      	ldr	r3, [r3, #24]
 80745f0:	2b01      	cmp	r3, #1
 80745f2:	d028      	beq.n	8074646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80745f4:	68fb      	ldr	r3, [r7, #12]
 80745f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80745fa:	687b      	ldr	r3, [r7, #4]
 80745fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80745fe:	429a      	cmp	r2, r3
 8074600:	d121      	bne.n	8074646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8074602:	68fb      	ldr	r3, [r7, #12]
 8074604:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8074608:	687b      	ldr	r3, [r7, #4]
 807460a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 807460c:	429a      	cmp	r2, r3
 807460e:	d11a      	bne.n	8074646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8074610:	68fa      	ldr	r2, [r7, #12]
 8074612:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8074616:	4013      	ands	r3, r2
 8074618:	687a      	ldr	r2, [r7, #4]
 807461a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 807461c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 807461e:	4293      	cmp	r3, r2
 8074620:	d111      	bne.n	8074646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8074622:	68fb      	ldr	r3, [r7, #12]
 8074624:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8074628:	687b      	ldr	r3, [r7, #4]
 807462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807462c:	085b      	lsrs	r3, r3, #1
 807462e:	3b01      	subs	r3, #1
 8074630:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8074632:	429a      	cmp	r2, r3
 8074634:	d107      	bne.n	8074646 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8074636:	68fb      	ldr	r3, [r7, #12]
 8074638:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 807463c:	687b      	ldr	r3, [r7, #4]
 807463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8074640:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8074642:	429a      	cmp	r2, r3
 8074644:	d001      	beq.n	807464a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8074646:	2301      	movs	r3, #1
 8074648:	e000      	b.n	807464c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 807464a:	2300      	movs	r3, #0
}
 807464c:	4618      	mov	r0, r3
 807464e:	3718      	adds	r7, #24
 8074650:	46bd      	mov	sp, r7
 8074652:	bd80      	pop	{r7, pc}
 8074654:	40007000 	.word	0x40007000
 8074658:	40023800 	.word	0x40023800
 807465c:	42470060 	.word	0x42470060

08074660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8074660:	b580      	push	{r7, lr}
 8074662:	b084      	sub	sp, #16
 8074664:	af00      	add	r7, sp, #0
 8074666:	6078      	str	r0, [r7, #4]
 8074668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 807466a:	687b      	ldr	r3, [r7, #4]
 807466c:	2b00      	cmp	r3, #0
 807466e:	d101      	bne.n	8074674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8074670:	2301      	movs	r3, #1
 8074672:	e0cc      	b.n	807480e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8074674:	4b68      	ldr	r3, [pc, #416]	; (8074818 <HAL_RCC_ClockConfig+0x1b8>)
 8074676:	681b      	ldr	r3, [r3, #0]
 8074678:	f003 0307 	and.w	r3, r3, #7
 807467c:	683a      	ldr	r2, [r7, #0]
 807467e:	429a      	cmp	r2, r3
 8074680:	d90c      	bls.n	807469c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8074682:	4b65      	ldr	r3, [pc, #404]	; (8074818 <HAL_RCC_ClockConfig+0x1b8>)
 8074684:	683a      	ldr	r2, [r7, #0]
 8074686:	b2d2      	uxtb	r2, r2
 8074688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 807468a:	4b63      	ldr	r3, [pc, #396]	; (8074818 <HAL_RCC_ClockConfig+0x1b8>)
 807468c:	681b      	ldr	r3, [r3, #0]
 807468e:	f003 0307 	and.w	r3, r3, #7
 8074692:	683a      	ldr	r2, [r7, #0]
 8074694:	429a      	cmp	r2, r3
 8074696:	d001      	beq.n	807469c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8074698:	2301      	movs	r3, #1
 807469a:	e0b8      	b.n	807480e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 807469c:	687b      	ldr	r3, [r7, #4]
 807469e:	681b      	ldr	r3, [r3, #0]
 80746a0:	f003 0302 	and.w	r3, r3, #2
 80746a4:	2b00      	cmp	r3, #0
 80746a6:	d020      	beq.n	80746ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80746a8:	687b      	ldr	r3, [r7, #4]
 80746aa:	681b      	ldr	r3, [r3, #0]
 80746ac:	f003 0304 	and.w	r3, r3, #4
 80746b0:	2b00      	cmp	r3, #0
 80746b2:	d005      	beq.n	80746c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80746b4:	4b59      	ldr	r3, [pc, #356]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 80746b6:	689b      	ldr	r3, [r3, #8]
 80746b8:	4a58      	ldr	r2, [pc, #352]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 80746ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80746be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80746c0:	687b      	ldr	r3, [r7, #4]
 80746c2:	681b      	ldr	r3, [r3, #0]
 80746c4:	f003 0308 	and.w	r3, r3, #8
 80746c8:	2b00      	cmp	r3, #0
 80746ca:	d005      	beq.n	80746d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80746cc:	4b53      	ldr	r3, [pc, #332]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 80746ce:	689b      	ldr	r3, [r3, #8]
 80746d0:	4a52      	ldr	r2, [pc, #328]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 80746d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80746d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80746d8:	4b50      	ldr	r3, [pc, #320]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 80746da:	689b      	ldr	r3, [r3, #8]
 80746dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80746e0:	687b      	ldr	r3, [r7, #4]
 80746e2:	689b      	ldr	r3, [r3, #8]
 80746e4:	494d      	ldr	r1, [pc, #308]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 80746e6:	4313      	orrs	r3, r2
 80746e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80746ea:	687b      	ldr	r3, [r7, #4]
 80746ec:	681b      	ldr	r3, [r3, #0]
 80746ee:	f003 0301 	and.w	r3, r3, #1
 80746f2:	2b00      	cmp	r3, #0
 80746f4:	d044      	beq.n	8074780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80746f6:	687b      	ldr	r3, [r7, #4]
 80746f8:	685b      	ldr	r3, [r3, #4]
 80746fa:	2b01      	cmp	r3, #1
 80746fc:	d107      	bne.n	807470e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80746fe:	4b47      	ldr	r3, [pc, #284]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 8074700:	681b      	ldr	r3, [r3, #0]
 8074702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8074706:	2b00      	cmp	r3, #0
 8074708:	d119      	bne.n	807473e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807470a:	2301      	movs	r3, #1
 807470c:	e07f      	b.n	807480e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 807470e:	687b      	ldr	r3, [r7, #4]
 8074710:	685b      	ldr	r3, [r3, #4]
 8074712:	2b02      	cmp	r3, #2
 8074714:	d003      	beq.n	807471e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8074716:	687b      	ldr	r3, [r7, #4]
 8074718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 807471a:	2b03      	cmp	r3, #3
 807471c:	d107      	bne.n	807472e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807471e:	4b3f      	ldr	r3, [pc, #252]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 8074720:	681b      	ldr	r3, [r3, #0]
 8074722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8074726:	2b00      	cmp	r3, #0
 8074728:	d109      	bne.n	807473e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807472a:	2301      	movs	r3, #1
 807472c:	e06f      	b.n	807480e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 807472e:	4b3b      	ldr	r3, [pc, #236]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 8074730:	681b      	ldr	r3, [r3, #0]
 8074732:	f003 0302 	and.w	r3, r3, #2
 8074736:	2b00      	cmp	r3, #0
 8074738:	d101      	bne.n	807473e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807473a:	2301      	movs	r3, #1
 807473c:	e067      	b.n	807480e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 807473e:	4b37      	ldr	r3, [pc, #220]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 8074740:	689b      	ldr	r3, [r3, #8]
 8074742:	f023 0203 	bic.w	r2, r3, #3
 8074746:	687b      	ldr	r3, [r7, #4]
 8074748:	685b      	ldr	r3, [r3, #4]
 807474a:	4934      	ldr	r1, [pc, #208]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 807474c:	4313      	orrs	r3, r2
 807474e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8074750:	f7fe f8ba 	bl	80728c8 <HAL_GetTick>
 8074754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8074756:	e00a      	b.n	807476e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8074758:	f7fe f8b6 	bl	80728c8 <HAL_GetTick>
 807475c:	4602      	mov	r2, r0
 807475e:	68fb      	ldr	r3, [r7, #12]
 8074760:	1ad3      	subs	r3, r2, r3
 8074762:	f241 3288 	movw	r2, #5000	; 0x1388
 8074766:	4293      	cmp	r3, r2
 8074768:	d901      	bls.n	807476e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 807476a:	2303      	movs	r3, #3
 807476c:	e04f      	b.n	807480e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 807476e:	4b2b      	ldr	r3, [pc, #172]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 8074770:	689b      	ldr	r3, [r3, #8]
 8074772:	f003 020c 	and.w	r2, r3, #12
 8074776:	687b      	ldr	r3, [r7, #4]
 8074778:	685b      	ldr	r3, [r3, #4]
 807477a:	009b      	lsls	r3, r3, #2
 807477c:	429a      	cmp	r2, r3
 807477e:	d1eb      	bne.n	8074758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8074780:	4b25      	ldr	r3, [pc, #148]	; (8074818 <HAL_RCC_ClockConfig+0x1b8>)
 8074782:	681b      	ldr	r3, [r3, #0]
 8074784:	f003 0307 	and.w	r3, r3, #7
 8074788:	683a      	ldr	r2, [r7, #0]
 807478a:	429a      	cmp	r2, r3
 807478c:	d20c      	bcs.n	80747a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 807478e:	4b22      	ldr	r3, [pc, #136]	; (8074818 <HAL_RCC_ClockConfig+0x1b8>)
 8074790:	683a      	ldr	r2, [r7, #0]
 8074792:	b2d2      	uxtb	r2, r2
 8074794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8074796:	4b20      	ldr	r3, [pc, #128]	; (8074818 <HAL_RCC_ClockConfig+0x1b8>)
 8074798:	681b      	ldr	r3, [r3, #0]
 807479a:	f003 0307 	and.w	r3, r3, #7
 807479e:	683a      	ldr	r2, [r7, #0]
 80747a0:	429a      	cmp	r2, r3
 80747a2:	d001      	beq.n	80747a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80747a4:	2301      	movs	r3, #1
 80747a6:	e032      	b.n	807480e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80747a8:	687b      	ldr	r3, [r7, #4]
 80747aa:	681b      	ldr	r3, [r3, #0]
 80747ac:	f003 0304 	and.w	r3, r3, #4
 80747b0:	2b00      	cmp	r3, #0
 80747b2:	d008      	beq.n	80747c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80747b4:	4b19      	ldr	r3, [pc, #100]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 80747b6:	689b      	ldr	r3, [r3, #8]
 80747b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80747bc:	687b      	ldr	r3, [r7, #4]
 80747be:	68db      	ldr	r3, [r3, #12]
 80747c0:	4916      	ldr	r1, [pc, #88]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 80747c2:	4313      	orrs	r3, r2
 80747c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80747c6:	687b      	ldr	r3, [r7, #4]
 80747c8:	681b      	ldr	r3, [r3, #0]
 80747ca:	f003 0308 	and.w	r3, r3, #8
 80747ce:	2b00      	cmp	r3, #0
 80747d0:	d009      	beq.n	80747e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80747d2:	4b12      	ldr	r3, [pc, #72]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 80747d4:	689b      	ldr	r3, [r3, #8]
 80747d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80747da:	687b      	ldr	r3, [r7, #4]
 80747dc:	691b      	ldr	r3, [r3, #16]
 80747de:	00db      	lsls	r3, r3, #3
 80747e0:	490e      	ldr	r1, [pc, #56]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 80747e2:	4313      	orrs	r3, r2
 80747e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80747e6:	f000 f821 	bl	807482c <HAL_RCC_GetSysClockFreq>
 80747ea:	4602      	mov	r2, r0
 80747ec:	4b0b      	ldr	r3, [pc, #44]	; (807481c <HAL_RCC_ClockConfig+0x1bc>)
 80747ee:	689b      	ldr	r3, [r3, #8]
 80747f0:	091b      	lsrs	r3, r3, #4
 80747f2:	f003 030f 	and.w	r3, r3, #15
 80747f6:	490a      	ldr	r1, [pc, #40]	; (8074820 <HAL_RCC_ClockConfig+0x1c0>)
 80747f8:	5ccb      	ldrb	r3, [r1, r3]
 80747fa:	fa22 f303 	lsr.w	r3, r2, r3
 80747fe:	4a09      	ldr	r2, [pc, #36]	; (8074824 <HAL_RCC_ClockConfig+0x1c4>)
 8074800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8074802:	4b09      	ldr	r3, [pc, #36]	; (8074828 <HAL_RCC_ClockConfig+0x1c8>)
 8074804:	681b      	ldr	r3, [r3, #0]
 8074806:	4618      	mov	r0, r3
 8074808:	f7fe f81a 	bl	8072840 <HAL_InitTick>

  return HAL_OK;
 807480c:	2300      	movs	r3, #0
}
 807480e:	4618      	mov	r0, r3
 8074810:	3710      	adds	r7, #16
 8074812:	46bd      	mov	sp, r7
 8074814:	bd80      	pop	{r7, pc}
 8074816:	bf00      	nop
 8074818:	40023c00 	.word	0x40023c00
 807481c:	40023800 	.word	0x40023800
 8074820:	08078824 	.word	0x08078824
 8074824:	20000000 	.word	0x20000000
 8074828:	20000004 	.word	0x20000004

0807482c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 807482c:	b5b0      	push	{r4, r5, r7, lr}
 807482e:	b084      	sub	sp, #16
 8074830:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8074832:	2100      	movs	r1, #0
 8074834:	6079      	str	r1, [r7, #4]
 8074836:	2100      	movs	r1, #0
 8074838:	60f9      	str	r1, [r7, #12]
 807483a:	2100      	movs	r1, #0
 807483c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 807483e:	2100      	movs	r1, #0
 8074840:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8074842:	4952      	ldr	r1, [pc, #328]	; (807498c <HAL_RCC_GetSysClockFreq+0x160>)
 8074844:	6889      	ldr	r1, [r1, #8]
 8074846:	f001 010c 	and.w	r1, r1, #12
 807484a:	2908      	cmp	r1, #8
 807484c:	d00d      	beq.n	807486a <HAL_RCC_GetSysClockFreq+0x3e>
 807484e:	2908      	cmp	r1, #8
 8074850:	f200 8094 	bhi.w	807497c <HAL_RCC_GetSysClockFreq+0x150>
 8074854:	2900      	cmp	r1, #0
 8074856:	d002      	beq.n	807485e <HAL_RCC_GetSysClockFreq+0x32>
 8074858:	2904      	cmp	r1, #4
 807485a:	d003      	beq.n	8074864 <HAL_RCC_GetSysClockFreq+0x38>
 807485c:	e08e      	b.n	807497c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 807485e:	4b4c      	ldr	r3, [pc, #304]	; (8074990 <HAL_RCC_GetSysClockFreq+0x164>)
 8074860:	60bb      	str	r3, [r7, #8]
       break;
 8074862:	e08e      	b.n	8074982 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8074864:	4b4b      	ldr	r3, [pc, #300]	; (8074994 <HAL_RCC_GetSysClockFreq+0x168>)
 8074866:	60bb      	str	r3, [r7, #8]
      break;
 8074868:	e08b      	b.n	8074982 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 807486a:	4948      	ldr	r1, [pc, #288]	; (807498c <HAL_RCC_GetSysClockFreq+0x160>)
 807486c:	6849      	ldr	r1, [r1, #4]
 807486e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8074872:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8074874:	4945      	ldr	r1, [pc, #276]	; (807498c <HAL_RCC_GetSysClockFreq+0x160>)
 8074876:	6849      	ldr	r1, [r1, #4]
 8074878:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 807487c:	2900      	cmp	r1, #0
 807487e:	d024      	beq.n	80748ca <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8074880:	4942      	ldr	r1, [pc, #264]	; (807498c <HAL_RCC_GetSysClockFreq+0x160>)
 8074882:	6849      	ldr	r1, [r1, #4]
 8074884:	0989      	lsrs	r1, r1, #6
 8074886:	4608      	mov	r0, r1
 8074888:	f04f 0100 	mov.w	r1, #0
 807488c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8074890:	f04f 0500 	mov.w	r5, #0
 8074894:	ea00 0204 	and.w	r2, r0, r4
 8074898:	ea01 0305 	and.w	r3, r1, r5
 807489c:	493d      	ldr	r1, [pc, #244]	; (8074994 <HAL_RCC_GetSysClockFreq+0x168>)
 807489e:	fb01 f003 	mul.w	r0, r1, r3
 80748a2:	2100      	movs	r1, #0
 80748a4:	fb01 f102 	mul.w	r1, r1, r2
 80748a8:	1844      	adds	r4, r0, r1
 80748aa:	493a      	ldr	r1, [pc, #232]	; (8074994 <HAL_RCC_GetSysClockFreq+0x168>)
 80748ac:	fba2 0101 	umull	r0, r1, r2, r1
 80748b0:	1863      	adds	r3, r4, r1
 80748b2:	4619      	mov	r1, r3
 80748b4:	687b      	ldr	r3, [r7, #4]
 80748b6:	461a      	mov	r2, r3
 80748b8:	f04f 0300 	mov.w	r3, #0
 80748bc:	f7fd fc8c 	bl	80721d8 <__aeabi_uldivmod>
 80748c0:	4602      	mov	r2, r0
 80748c2:	460b      	mov	r3, r1
 80748c4:	4613      	mov	r3, r2
 80748c6:	60fb      	str	r3, [r7, #12]
 80748c8:	e04a      	b.n	8074960 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80748ca:	4b30      	ldr	r3, [pc, #192]	; (807498c <HAL_RCC_GetSysClockFreq+0x160>)
 80748cc:	685b      	ldr	r3, [r3, #4]
 80748ce:	099b      	lsrs	r3, r3, #6
 80748d0:	461a      	mov	r2, r3
 80748d2:	f04f 0300 	mov.w	r3, #0
 80748d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80748da:	f04f 0100 	mov.w	r1, #0
 80748de:	ea02 0400 	and.w	r4, r2, r0
 80748e2:	ea03 0501 	and.w	r5, r3, r1
 80748e6:	4620      	mov	r0, r4
 80748e8:	4629      	mov	r1, r5
 80748ea:	f04f 0200 	mov.w	r2, #0
 80748ee:	f04f 0300 	mov.w	r3, #0
 80748f2:	014b      	lsls	r3, r1, #5
 80748f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80748f8:	0142      	lsls	r2, r0, #5
 80748fa:	4610      	mov	r0, r2
 80748fc:	4619      	mov	r1, r3
 80748fe:	1b00      	subs	r0, r0, r4
 8074900:	eb61 0105 	sbc.w	r1, r1, r5
 8074904:	f04f 0200 	mov.w	r2, #0
 8074908:	f04f 0300 	mov.w	r3, #0
 807490c:	018b      	lsls	r3, r1, #6
 807490e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8074912:	0182      	lsls	r2, r0, #6
 8074914:	1a12      	subs	r2, r2, r0
 8074916:	eb63 0301 	sbc.w	r3, r3, r1
 807491a:	f04f 0000 	mov.w	r0, #0
 807491e:	f04f 0100 	mov.w	r1, #0
 8074922:	00d9      	lsls	r1, r3, #3
 8074924:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8074928:	00d0      	lsls	r0, r2, #3
 807492a:	4602      	mov	r2, r0
 807492c:	460b      	mov	r3, r1
 807492e:	1912      	adds	r2, r2, r4
 8074930:	eb45 0303 	adc.w	r3, r5, r3
 8074934:	f04f 0000 	mov.w	r0, #0
 8074938:	f04f 0100 	mov.w	r1, #0
 807493c:	0299      	lsls	r1, r3, #10
 807493e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8074942:	0290      	lsls	r0, r2, #10
 8074944:	4602      	mov	r2, r0
 8074946:	460b      	mov	r3, r1
 8074948:	4610      	mov	r0, r2
 807494a:	4619      	mov	r1, r3
 807494c:	687b      	ldr	r3, [r7, #4]
 807494e:	461a      	mov	r2, r3
 8074950:	f04f 0300 	mov.w	r3, #0
 8074954:	f7fd fc40 	bl	80721d8 <__aeabi_uldivmod>
 8074958:	4602      	mov	r2, r0
 807495a:	460b      	mov	r3, r1
 807495c:	4613      	mov	r3, r2
 807495e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8074960:	4b0a      	ldr	r3, [pc, #40]	; (807498c <HAL_RCC_GetSysClockFreq+0x160>)
 8074962:	685b      	ldr	r3, [r3, #4]
 8074964:	0c1b      	lsrs	r3, r3, #16
 8074966:	f003 0303 	and.w	r3, r3, #3
 807496a:	3301      	adds	r3, #1
 807496c:	005b      	lsls	r3, r3, #1
 807496e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8074970:	68fa      	ldr	r2, [r7, #12]
 8074972:	683b      	ldr	r3, [r7, #0]
 8074974:	fbb2 f3f3 	udiv	r3, r2, r3
 8074978:	60bb      	str	r3, [r7, #8]
      break;
 807497a:	e002      	b.n	8074982 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 807497c:	4b04      	ldr	r3, [pc, #16]	; (8074990 <HAL_RCC_GetSysClockFreq+0x164>)
 807497e:	60bb      	str	r3, [r7, #8]
      break;
 8074980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8074982:	68bb      	ldr	r3, [r7, #8]
}
 8074984:	4618      	mov	r0, r3
 8074986:	3710      	adds	r7, #16
 8074988:	46bd      	mov	sp, r7
 807498a:	bdb0      	pop	{r4, r5, r7, pc}
 807498c:	40023800 	.word	0x40023800
 8074990:	00f42400 	.word	0x00f42400
 8074994:	017d7840 	.word	0x017d7840

08074998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8074998:	b480      	push	{r7}
 807499a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 807499c:	4b03      	ldr	r3, [pc, #12]	; (80749ac <HAL_RCC_GetHCLKFreq+0x14>)
 807499e:	681b      	ldr	r3, [r3, #0]
}
 80749a0:	4618      	mov	r0, r3
 80749a2:	46bd      	mov	sp, r7
 80749a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80749a8:	4770      	bx	lr
 80749aa:	bf00      	nop
 80749ac:	20000000 	.word	0x20000000

080749b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80749b0:	b084      	sub	sp, #16
 80749b2:	b580      	push	{r7, lr}
 80749b4:	b084      	sub	sp, #16
 80749b6:	af00      	add	r7, sp, #0
 80749b8:	6078      	str	r0, [r7, #4]
 80749ba:	f107 001c 	add.w	r0, r7, #28
 80749be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80749c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80749c4:	2b01      	cmp	r3, #1
 80749c6:	d122      	bne.n	8074a0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80749c8:	687b      	ldr	r3, [r7, #4]
 80749ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80749cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80749d0:	687b      	ldr	r3, [r7, #4]
 80749d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80749d4:	687b      	ldr	r3, [r7, #4]
 80749d6:	68db      	ldr	r3, [r3, #12]
 80749d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80749dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80749e0:	687a      	ldr	r2, [r7, #4]
 80749e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80749e4:	687b      	ldr	r3, [r7, #4]
 80749e6:	68db      	ldr	r3, [r3, #12]
 80749e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80749ec:	687b      	ldr	r3, [r7, #4]
 80749ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80749f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80749f2:	2b01      	cmp	r3, #1
 80749f4:	d105      	bne.n	8074a02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80749f6:	687b      	ldr	r3, [r7, #4]
 80749f8:	68db      	ldr	r3, [r3, #12]
 80749fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80749fe:	687b      	ldr	r3, [r7, #4]
 8074a00:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8074a02:	6878      	ldr	r0, [r7, #4]
 8074a04:	f001 f9ea 	bl	8075ddc <USB_CoreReset>
 8074a08:	4603      	mov	r3, r0
 8074a0a:	73fb      	strb	r3, [r7, #15]
 8074a0c:	e01a      	b.n	8074a44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8074a0e:	687b      	ldr	r3, [r7, #4]
 8074a10:	68db      	ldr	r3, [r3, #12]
 8074a12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8074a16:	687b      	ldr	r3, [r7, #4]
 8074a18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8074a1a:	6878      	ldr	r0, [r7, #4]
 8074a1c:	f001 f9de 	bl	8075ddc <USB_CoreReset>
 8074a20:	4603      	mov	r3, r0
 8074a22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8074a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8074a26:	2b00      	cmp	r3, #0
 8074a28:	d106      	bne.n	8074a38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8074a2a:	687b      	ldr	r3, [r7, #4]
 8074a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8074a2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8074a32:	687b      	ldr	r3, [r7, #4]
 8074a34:	639a      	str	r2, [r3, #56]	; 0x38
 8074a36:	e005      	b.n	8074a44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8074a38:	687b      	ldr	r3, [r7, #4]
 8074a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8074a3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8074a40:	687b      	ldr	r3, [r7, #4]
 8074a42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8074a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8074a46:	2b01      	cmp	r3, #1
 8074a48:	d10b      	bne.n	8074a62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8074a4a:	687b      	ldr	r3, [r7, #4]
 8074a4c:	689b      	ldr	r3, [r3, #8]
 8074a4e:	f043 0206 	orr.w	r2, r3, #6
 8074a52:	687b      	ldr	r3, [r7, #4]
 8074a54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8074a56:	687b      	ldr	r3, [r7, #4]
 8074a58:	689b      	ldr	r3, [r3, #8]
 8074a5a:	f043 0220 	orr.w	r2, r3, #32
 8074a5e:	687b      	ldr	r3, [r7, #4]
 8074a60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8074a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8074a64:	4618      	mov	r0, r3
 8074a66:	3710      	adds	r7, #16
 8074a68:	46bd      	mov	sp, r7
 8074a6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8074a6e:	b004      	add	sp, #16
 8074a70:	4770      	bx	lr
	...

08074a74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8074a74:	b480      	push	{r7}
 8074a76:	b087      	sub	sp, #28
 8074a78:	af00      	add	r7, sp, #0
 8074a7a:	60f8      	str	r0, [r7, #12]
 8074a7c:	60b9      	str	r1, [r7, #8]
 8074a7e:	4613      	mov	r3, r2
 8074a80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8074a82:	79fb      	ldrb	r3, [r7, #7]
 8074a84:	2b02      	cmp	r3, #2
 8074a86:	d165      	bne.n	8074b54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8074a88:	68bb      	ldr	r3, [r7, #8]
 8074a8a:	4a41      	ldr	r2, [pc, #260]	; (8074b90 <USB_SetTurnaroundTime+0x11c>)
 8074a8c:	4293      	cmp	r3, r2
 8074a8e:	d906      	bls.n	8074a9e <USB_SetTurnaroundTime+0x2a>
 8074a90:	68bb      	ldr	r3, [r7, #8]
 8074a92:	4a40      	ldr	r2, [pc, #256]	; (8074b94 <USB_SetTurnaroundTime+0x120>)
 8074a94:	4293      	cmp	r3, r2
 8074a96:	d202      	bcs.n	8074a9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8074a98:	230f      	movs	r3, #15
 8074a9a:	617b      	str	r3, [r7, #20]
 8074a9c:	e062      	b.n	8074b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8074a9e:	68bb      	ldr	r3, [r7, #8]
 8074aa0:	4a3c      	ldr	r2, [pc, #240]	; (8074b94 <USB_SetTurnaroundTime+0x120>)
 8074aa2:	4293      	cmp	r3, r2
 8074aa4:	d306      	bcc.n	8074ab4 <USB_SetTurnaroundTime+0x40>
 8074aa6:	68bb      	ldr	r3, [r7, #8]
 8074aa8:	4a3b      	ldr	r2, [pc, #236]	; (8074b98 <USB_SetTurnaroundTime+0x124>)
 8074aaa:	4293      	cmp	r3, r2
 8074aac:	d202      	bcs.n	8074ab4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8074aae:	230e      	movs	r3, #14
 8074ab0:	617b      	str	r3, [r7, #20]
 8074ab2:	e057      	b.n	8074b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8074ab4:	68bb      	ldr	r3, [r7, #8]
 8074ab6:	4a38      	ldr	r2, [pc, #224]	; (8074b98 <USB_SetTurnaroundTime+0x124>)
 8074ab8:	4293      	cmp	r3, r2
 8074aba:	d306      	bcc.n	8074aca <USB_SetTurnaroundTime+0x56>
 8074abc:	68bb      	ldr	r3, [r7, #8]
 8074abe:	4a37      	ldr	r2, [pc, #220]	; (8074b9c <USB_SetTurnaroundTime+0x128>)
 8074ac0:	4293      	cmp	r3, r2
 8074ac2:	d202      	bcs.n	8074aca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8074ac4:	230d      	movs	r3, #13
 8074ac6:	617b      	str	r3, [r7, #20]
 8074ac8:	e04c      	b.n	8074b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8074aca:	68bb      	ldr	r3, [r7, #8]
 8074acc:	4a33      	ldr	r2, [pc, #204]	; (8074b9c <USB_SetTurnaroundTime+0x128>)
 8074ace:	4293      	cmp	r3, r2
 8074ad0:	d306      	bcc.n	8074ae0 <USB_SetTurnaroundTime+0x6c>
 8074ad2:	68bb      	ldr	r3, [r7, #8]
 8074ad4:	4a32      	ldr	r2, [pc, #200]	; (8074ba0 <USB_SetTurnaroundTime+0x12c>)
 8074ad6:	4293      	cmp	r3, r2
 8074ad8:	d802      	bhi.n	8074ae0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8074ada:	230c      	movs	r3, #12
 8074adc:	617b      	str	r3, [r7, #20]
 8074ade:	e041      	b.n	8074b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8074ae0:	68bb      	ldr	r3, [r7, #8]
 8074ae2:	4a2f      	ldr	r2, [pc, #188]	; (8074ba0 <USB_SetTurnaroundTime+0x12c>)
 8074ae4:	4293      	cmp	r3, r2
 8074ae6:	d906      	bls.n	8074af6 <USB_SetTurnaroundTime+0x82>
 8074ae8:	68bb      	ldr	r3, [r7, #8]
 8074aea:	4a2e      	ldr	r2, [pc, #184]	; (8074ba4 <USB_SetTurnaroundTime+0x130>)
 8074aec:	4293      	cmp	r3, r2
 8074aee:	d802      	bhi.n	8074af6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8074af0:	230b      	movs	r3, #11
 8074af2:	617b      	str	r3, [r7, #20]
 8074af4:	e036      	b.n	8074b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8074af6:	68bb      	ldr	r3, [r7, #8]
 8074af8:	4a2a      	ldr	r2, [pc, #168]	; (8074ba4 <USB_SetTurnaroundTime+0x130>)
 8074afa:	4293      	cmp	r3, r2
 8074afc:	d906      	bls.n	8074b0c <USB_SetTurnaroundTime+0x98>
 8074afe:	68bb      	ldr	r3, [r7, #8]
 8074b00:	4a29      	ldr	r2, [pc, #164]	; (8074ba8 <USB_SetTurnaroundTime+0x134>)
 8074b02:	4293      	cmp	r3, r2
 8074b04:	d802      	bhi.n	8074b0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8074b06:	230a      	movs	r3, #10
 8074b08:	617b      	str	r3, [r7, #20]
 8074b0a:	e02b      	b.n	8074b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8074b0c:	68bb      	ldr	r3, [r7, #8]
 8074b0e:	4a26      	ldr	r2, [pc, #152]	; (8074ba8 <USB_SetTurnaroundTime+0x134>)
 8074b10:	4293      	cmp	r3, r2
 8074b12:	d906      	bls.n	8074b22 <USB_SetTurnaroundTime+0xae>
 8074b14:	68bb      	ldr	r3, [r7, #8]
 8074b16:	4a25      	ldr	r2, [pc, #148]	; (8074bac <USB_SetTurnaroundTime+0x138>)
 8074b18:	4293      	cmp	r3, r2
 8074b1a:	d202      	bcs.n	8074b22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8074b1c:	2309      	movs	r3, #9
 8074b1e:	617b      	str	r3, [r7, #20]
 8074b20:	e020      	b.n	8074b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8074b22:	68bb      	ldr	r3, [r7, #8]
 8074b24:	4a21      	ldr	r2, [pc, #132]	; (8074bac <USB_SetTurnaroundTime+0x138>)
 8074b26:	4293      	cmp	r3, r2
 8074b28:	d306      	bcc.n	8074b38 <USB_SetTurnaroundTime+0xc4>
 8074b2a:	68bb      	ldr	r3, [r7, #8]
 8074b2c:	4a20      	ldr	r2, [pc, #128]	; (8074bb0 <USB_SetTurnaroundTime+0x13c>)
 8074b2e:	4293      	cmp	r3, r2
 8074b30:	d802      	bhi.n	8074b38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8074b32:	2308      	movs	r3, #8
 8074b34:	617b      	str	r3, [r7, #20]
 8074b36:	e015      	b.n	8074b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8074b38:	68bb      	ldr	r3, [r7, #8]
 8074b3a:	4a1d      	ldr	r2, [pc, #116]	; (8074bb0 <USB_SetTurnaroundTime+0x13c>)
 8074b3c:	4293      	cmp	r3, r2
 8074b3e:	d906      	bls.n	8074b4e <USB_SetTurnaroundTime+0xda>
 8074b40:	68bb      	ldr	r3, [r7, #8]
 8074b42:	4a1c      	ldr	r2, [pc, #112]	; (8074bb4 <USB_SetTurnaroundTime+0x140>)
 8074b44:	4293      	cmp	r3, r2
 8074b46:	d202      	bcs.n	8074b4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8074b48:	2307      	movs	r3, #7
 8074b4a:	617b      	str	r3, [r7, #20]
 8074b4c:	e00a      	b.n	8074b64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8074b4e:	2306      	movs	r3, #6
 8074b50:	617b      	str	r3, [r7, #20]
 8074b52:	e007      	b.n	8074b64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8074b54:	79fb      	ldrb	r3, [r7, #7]
 8074b56:	2b00      	cmp	r3, #0
 8074b58:	d102      	bne.n	8074b60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8074b5a:	2309      	movs	r3, #9
 8074b5c:	617b      	str	r3, [r7, #20]
 8074b5e:	e001      	b.n	8074b64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8074b60:	2309      	movs	r3, #9
 8074b62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8074b64:	68fb      	ldr	r3, [r7, #12]
 8074b66:	68db      	ldr	r3, [r3, #12]
 8074b68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8074b6c:	68fb      	ldr	r3, [r7, #12]
 8074b6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8074b70:	68fb      	ldr	r3, [r7, #12]
 8074b72:	68da      	ldr	r2, [r3, #12]
 8074b74:	697b      	ldr	r3, [r7, #20]
 8074b76:	029b      	lsls	r3, r3, #10
 8074b78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8074b7c:	431a      	orrs	r2, r3
 8074b7e:	68fb      	ldr	r3, [r7, #12]
 8074b80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8074b82:	2300      	movs	r3, #0
}
 8074b84:	4618      	mov	r0, r3
 8074b86:	371c      	adds	r7, #28
 8074b88:	46bd      	mov	sp, r7
 8074b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074b8e:	4770      	bx	lr
 8074b90:	00d8acbf 	.word	0x00d8acbf
 8074b94:	00e4e1c0 	.word	0x00e4e1c0
 8074b98:	00f42400 	.word	0x00f42400
 8074b9c:	01067380 	.word	0x01067380
 8074ba0:	011a499f 	.word	0x011a499f
 8074ba4:	01312cff 	.word	0x01312cff
 8074ba8:	014ca43f 	.word	0x014ca43f
 8074bac:	016e3600 	.word	0x016e3600
 8074bb0:	01a6ab1f 	.word	0x01a6ab1f
 8074bb4:	01e84800 	.word	0x01e84800

08074bb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8074bb8:	b480      	push	{r7}
 8074bba:	b083      	sub	sp, #12
 8074bbc:	af00      	add	r7, sp, #0
 8074bbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8074bc0:	687b      	ldr	r3, [r7, #4]
 8074bc2:	689b      	ldr	r3, [r3, #8]
 8074bc4:	f043 0201 	orr.w	r2, r3, #1
 8074bc8:	687b      	ldr	r3, [r7, #4]
 8074bca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8074bcc:	2300      	movs	r3, #0
}
 8074bce:	4618      	mov	r0, r3
 8074bd0:	370c      	adds	r7, #12
 8074bd2:	46bd      	mov	sp, r7
 8074bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074bd8:	4770      	bx	lr

08074bda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8074bda:	b480      	push	{r7}
 8074bdc:	b083      	sub	sp, #12
 8074bde:	af00      	add	r7, sp, #0
 8074be0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8074be2:	687b      	ldr	r3, [r7, #4]
 8074be4:	689b      	ldr	r3, [r3, #8]
 8074be6:	f023 0201 	bic.w	r2, r3, #1
 8074bea:	687b      	ldr	r3, [r7, #4]
 8074bec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8074bee:	2300      	movs	r3, #0
}
 8074bf0:	4618      	mov	r0, r3
 8074bf2:	370c      	adds	r7, #12
 8074bf4:	46bd      	mov	sp, r7
 8074bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074bfa:	4770      	bx	lr

08074bfc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8074bfc:	b580      	push	{r7, lr}
 8074bfe:	b082      	sub	sp, #8
 8074c00:	af00      	add	r7, sp, #0
 8074c02:	6078      	str	r0, [r7, #4]
 8074c04:	460b      	mov	r3, r1
 8074c06:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8074c08:	687b      	ldr	r3, [r7, #4]
 8074c0a:	68db      	ldr	r3, [r3, #12]
 8074c0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8074c10:	687b      	ldr	r3, [r7, #4]
 8074c12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8074c14:	78fb      	ldrb	r3, [r7, #3]
 8074c16:	2b01      	cmp	r3, #1
 8074c18:	d106      	bne.n	8074c28 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8074c1a:	687b      	ldr	r3, [r7, #4]
 8074c1c:	68db      	ldr	r3, [r3, #12]
 8074c1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8074c22:	687b      	ldr	r3, [r7, #4]
 8074c24:	60da      	str	r2, [r3, #12]
 8074c26:	e00b      	b.n	8074c40 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8074c28:	78fb      	ldrb	r3, [r7, #3]
 8074c2a:	2b00      	cmp	r3, #0
 8074c2c:	d106      	bne.n	8074c3c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8074c2e:	687b      	ldr	r3, [r7, #4]
 8074c30:	68db      	ldr	r3, [r3, #12]
 8074c32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8074c36:	687b      	ldr	r3, [r7, #4]
 8074c38:	60da      	str	r2, [r3, #12]
 8074c3a:	e001      	b.n	8074c40 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8074c3c:	2301      	movs	r3, #1
 8074c3e:	e003      	b.n	8074c48 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8074c40:	2032      	movs	r0, #50	; 0x32
 8074c42:	f7fd fe4d 	bl	80728e0 <HAL_Delay>

  return HAL_OK;
 8074c46:	2300      	movs	r3, #0
}
 8074c48:	4618      	mov	r0, r3
 8074c4a:	3708      	adds	r7, #8
 8074c4c:	46bd      	mov	sp, r7
 8074c4e:	bd80      	pop	{r7, pc}

08074c50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8074c50:	b084      	sub	sp, #16
 8074c52:	b580      	push	{r7, lr}
 8074c54:	b086      	sub	sp, #24
 8074c56:	af00      	add	r7, sp, #0
 8074c58:	6078      	str	r0, [r7, #4]
 8074c5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8074c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8074c62:	2300      	movs	r3, #0
 8074c64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8074c66:	687b      	ldr	r3, [r7, #4]
 8074c68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8074c6a:	2300      	movs	r3, #0
 8074c6c:	613b      	str	r3, [r7, #16]
 8074c6e:	e009      	b.n	8074c84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8074c70:	687a      	ldr	r2, [r7, #4]
 8074c72:	693b      	ldr	r3, [r7, #16]
 8074c74:	3340      	adds	r3, #64	; 0x40
 8074c76:	009b      	lsls	r3, r3, #2
 8074c78:	4413      	add	r3, r2
 8074c7a:	2200      	movs	r2, #0
 8074c7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8074c7e:	693b      	ldr	r3, [r7, #16]
 8074c80:	3301      	adds	r3, #1
 8074c82:	613b      	str	r3, [r7, #16]
 8074c84:	693b      	ldr	r3, [r7, #16]
 8074c86:	2b0e      	cmp	r3, #14
 8074c88:	d9f2      	bls.n	8074c70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8074c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8074c8c:	2b00      	cmp	r3, #0
 8074c8e:	d11c      	bne.n	8074cca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8074c90:	68fb      	ldr	r3, [r7, #12]
 8074c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074c96:	685b      	ldr	r3, [r3, #4]
 8074c98:	68fa      	ldr	r2, [r7, #12]
 8074c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8074c9e:	f043 0302 	orr.w	r3, r3, #2
 8074ca2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8074ca4:	687b      	ldr	r3, [r7, #4]
 8074ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8074ca8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8074cac:	687b      	ldr	r3, [r7, #4]
 8074cae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8074cb0:	687b      	ldr	r3, [r7, #4]
 8074cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8074cb4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8074cb8:	687b      	ldr	r3, [r7, #4]
 8074cba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8074cbc:	687b      	ldr	r3, [r7, #4]
 8074cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8074cc0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8074cc4:	687b      	ldr	r3, [r7, #4]
 8074cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8074cc8:	e00b      	b.n	8074ce2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8074cca:	687b      	ldr	r3, [r7, #4]
 8074ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8074cce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8074cd2:	687b      	ldr	r3, [r7, #4]
 8074cd4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8074cd6:	687b      	ldr	r3, [r7, #4]
 8074cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8074cda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8074cde:	687b      	ldr	r3, [r7, #4]
 8074ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8074ce2:	68fb      	ldr	r3, [r7, #12]
 8074ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8074ce8:	461a      	mov	r2, r3
 8074cea:	2300      	movs	r3, #0
 8074cec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8074cee:	68fb      	ldr	r3, [r7, #12]
 8074cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074cf4:	4619      	mov	r1, r3
 8074cf6:	68fb      	ldr	r3, [r7, #12]
 8074cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074cfc:	461a      	mov	r2, r3
 8074cfe:	680b      	ldr	r3, [r1, #0]
 8074d00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8074d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8074d04:	2b01      	cmp	r3, #1
 8074d06:	d10c      	bne.n	8074d22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8074d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8074d0a:	2b00      	cmp	r3, #0
 8074d0c:	d104      	bne.n	8074d18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8074d0e:	2100      	movs	r1, #0
 8074d10:	6878      	ldr	r0, [r7, #4]
 8074d12:	f000 f949 	bl	8074fa8 <USB_SetDevSpeed>
 8074d16:	e008      	b.n	8074d2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8074d18:	2101      	movs	r1, #1
 8074d1a:	6878      	ldr	r0, [r7, #4]
 8074d1c:	f000 f944 	bl	8074fa8 <USB_SetDevSpeed>
 8074d20:	e003      	b.n	8074d2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8074d22:	2103      	movs	r1, #3
 8074d24:	6878      	ldr	r0, [r7, #4]
 8074d26:	f000 f93f 	bl	8074fa8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8074d2a:	2110      	movs	r1, #16
 8074d2c:	6878      	ldr	r0, [r7, #4]
 8074d2e:	f000 f8f3 	bl	8074f18 <USB_FlushTxFifo>
 8074d32:	4603      	mov	r3, r0
 8074d34:	2b00      	cmp	r3, #0
 8074d36:	d001      	beq.n	8074d3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8074d38:	2301      	movs	r3, #1
 8074d3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8074d3c:	6878      	ldr	r0, [r7, #4]
 8074d3e:	f000 f911 	bl	8074f64 <USB_FlushRxFifo>
 8074d42:	4603      	mov	r3, r0
 8074d44:	2b00      	cmp	r3, #0
 8074d46:	d001      	beq.n	8074d4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8074d48:	2301      	movs	r3, #1
 8074d4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8074d4c:	68fb      	ldr	r3, [r7, #12]
 8074d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074d52:	461a      	mov	r2, r3
 8074d54:	2300      	movs	r3, #0
 8074d56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8074d58:	68fb      	ldr	r3, [r7, #12]
 8074d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074d5e:	461a      	mov	r2, r3
 8074d60:	2300      	movs	r3, #0
 8074d62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8074d64:	68fb      	ldr	r3, [r7, #12]
 8074d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074d6a:	461a      	mov	r2, r3
 8074d6c:	2300      	movs	r3, #0
 8074d6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8074d70:	2300      	movs	r3, #0
 8074d72:	613b      	str	r3, [r7, #16]
 8074d74:	e043      	b.n	8074dfe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8074d76:	693b      	ldr	r3, [r7, #16]
 8074d78:	015a      	lsls	r2, r3, #5
 8074d7a:	68fb      	ldr	r3, [r7, #12]
 8074d7c:	4413      	add	r3, r2
 8074d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074d82:	681b      	ldr	r3, [r3, #0]
 8074d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8074d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8074d8c:	d118      	bne.n	8074dc0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8074d8e:	693b      	ldr	r3, [r7, #16]
 8074d90:	2b00      	cmp	r3, #0
 8074d92:	d10a      	bne.n	8074daa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8074d94:	693b      	ldr	r3, [r7, #16]
 8074d96:	015a      	lsls	r2, r3, #5
 8074d98:	68fb      	ldr	r3, [r7, #12]
 8074d9a:	4413      	add	r3, r2
 8074d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074da0:	461a      	mov	r2, r3
 8074da2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8074da6:	6013      	str	r3, [r2, #0]
 8074da8:	e013      	b.n	8074dd2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8074daa:	693b      	ldr	r3, [r7, #16]
 8074dac:	015a      	lsls	r2, r3, #5
 8074dae:	68fb      	ldr	r3, [r7, #12]
 8074db0:	4413      	add	r3, r2
 8074db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074db6:	461a      	mov	r2, r3
 8074db8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8074dbc:	6013      	str	r3, [r2, #0]
 8074dbe:	e008      	b.n	8074dd2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8074dc0:	693b      	ldr	r3, [r7, #16]
 8074dc2:	015a      	lsls	r2, r3, #5
 8074dc4:	68fb      	ldr	r3, [r7, #12]
 8074dc6:	4413      	add	r3, r2
 8074dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074dcc:	461a      	mov	r2, r3
 8074dce:	2300      	movs	r3, #0
 8074dd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8074dd2:	693b      	ldr	r3, [r7, #16]
 8074dd4:	015a      	lsls	r2, r3, #5
 8074dd6:	68fb      	ldr	r3, [r7, #12]
 8074dd8:	4413      	add	r3, r2
 8074dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074dde:	461a      	mov	r2, r3
 8074de0:	2300      	movs	r3, #0
 8074de2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8074de4:	693b      	ldr	r3, [r7, #16]
 8074de6:	015a      	lsls	r2, r3, #5
 8074de8:	68fb      	ldr	r3, [r7, #12]
 8074dea:	4413      	add	r3, r2
 8074dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074df0:	461a      	mov	r2, r3
 8074df2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8074df6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8074df8:	693b      	ldr	r3, [r7, #16]
 8074dfa:	3301      	adds	r3, #1
 8074dfc:	613b      	str	r3, [r7, #16]
 8074dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8074e00:	693a      	ldr	r2, [r7, #16]
 8074e02:	429a      	cmp	r2, r3
 8074e04:	d3b7      	bcc.n	8074d76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8074e06:	2300      	movs	r3, #0
 8074e08:	613b      	str	r3, [r7, #16]
 8074e0a:	e043      	b.n	8074e94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8074e0c:	693b      	ldr	r3, [r7, #16]
 8074e0e:	015a      	lsls	r2, r3, #5
 8074e10:	68fb      	ldr	r3, [r7, #12]
 8074e12:	4413      	add	r3, r2
 8074e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074e18:	681b      	ldr	r3, [r3, #0]
 8074e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8074e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8074e22:	d118      	bne.n	8074e56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8074e24:	693b      	ldr	r3, [r7, #16]
 8074e26:	2b00      	cmp	r3, #0
 8074e28:	d10a      	bne.n	8074e40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8074e2a:	693b      	ldr	r3, [r7, #16]
 8074e2c:	015a      	lsls	r2, r3, #5
 8074e2e:	68fb      	ldr	r3, [r7, #12]
 8074e30:	4413      	add	r3, r2
 8074e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074e36:	461a      	mov	r2, r3
 8074e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8074e3c:	6013      	str	r3, [r2, #0]
 8074e3e:	e013      	b.n	8074e68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8074e40:	693b      	ldr	r3, [r7, #16]
 8074e42:	015a      	lsls	r2, r3, #5
 8074e44:	68fb      	ldr	r3, [r7, #12]
 8074e46:	4413      	add	r3, r2
 8074e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074e4c:	461a      	mov	r2, r3
 8074e4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8074e52:	6013      	str	r3, [r2, #0]
 8074e54:	e008      	b.n	8074e68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8074e56:	693b      	ldr	r3, [r7, #16]
 8074e58:	015a      	lsls	r2, r3, #5
 8074e5a:	68fb      	ldr	r3, [r7, #12]
 8074e5c:	4413      	add	r3, r2
 8074e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074e62:	461a      	mov	r2, r3
 8074e64:	2300      	movs	r3, #0
 8074e66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8074e68:	693b      	ldr	r3, [r7, #16]
 8074e6a:	015a      	lsls	r2, r3, #5
 8074e6c:	68fb      	ldr	r3, [r7, #12]
 8074e6e:	4413      	add	r3, r2
 8074e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074e74:	461a      	mov	r2, r3
 8074e76:	2300      	movs	r3, #0
 8074e78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8074e7a:	693b      	ldr	r3, [r7, #16]
 8074e7c:	015a      	lsls	r2, r3, #5
 8074e7e:	68fb      	ldr	r3, [r7, #12]
 8074e80:	4413      	add	r3, r2
 8074e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074e86:	461a      	mov	r2, r3
 8074e88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8074e8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8074e8e:	693b      	ldr	r3, [r7, #16]
 8074e90:	3301      	adds	r3, #1
 8074e92:	613b      	str	r3, [r7, #16]
 8074e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8074e96:	693a      	ldr	r2, [r7, #16]
 8074e98:	429a      	cmp	r2, r3
 8074e9a:	d3b7      	bcc.n	8074e0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8074e9c:	68fb      	ldr	r3, [r7, #12]
 8074e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074ea2:	691b      	ldr	r3, [r3, #16]
 8074ea4:	68fa      	ldr	r2, [r7, #12]
 8074ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8074eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8074eae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8074eb0:	687b      	ldr	r3, [r7, #4]
 8074eb2:	2200      	movs	r2, #0
 8074eb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8074eb6:	687b      	ldr	r3, [r7, #4]
 8074eb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8074ebc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8074ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8074ec0:	2b00      	cmp	r3, #0
 8074ec2:	d105      	bne.n	8074ed0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8074ec4:	687b      	ldr	r3, [r7, #4]
 8074ec6:	699b      	ldr	r3, [r3, #24]
 8074ec8:	f043 0210 	orr.w	r2, r3, #16
 8074ecc:	687b      	ldr	r3, [r7, #4]
 8074ece:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8074ed0:	687b      	ldr	r3, [r7, #4]
 8074ed2:	699a      	ldr	r2, [r3, #24]
 8074ed4:	4b0f      	ldr	r3, [pc, #60]	; (8074f14 <USB_DevInit+0x2c4>)
 8074ed6:	4313      	orrs	r3, r2
 8074ed8:	687a      	ldr	r2, [r7, #4]
 8074eda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8074edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8074ede:	2b00      	cmp	r3, #0
 8074ee0:	d005      	beq.n	8074eee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8074ee2:	687b      	ldr	r3, [r7, #4]
 8074ee4:	699b      	ldr	r3, [r3, #24]
 8074ee6:	f043 0208 	orr.w	r2, r3, #8
 8074eea:	687b      	ldr	r3, [r7, #4]
 8074eec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8074eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8074ef0:	2b01      	cmp	r3, #1
 8074ef2:	d107      	bne.n	8074f04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8074ef4:	687b      	ldr	r3, [r7, #4]
 8074ef6:	699b      	ldr	r3, [r3, #24]
 8074ef8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8074efc:	f043 0304 	orr.w	r3, r3, #4
 8074f00:	687a      	ldr	r2, [r7, #4]
 8074f02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8074f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8074f06:	4618      	mov	r0, r3
 8074f08:	3718      	adds	r7, #24
 8074f0a:	46bd      	mov	sp, r7
 8074f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8074f10:	b004      	add	sp, #16
 8074f12:	4770      	bx	lr
 8074f14:	803c3800 	.word	0x803c3800

08074f18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8074f18:	b480      	push	{r7}
 8074f1a:	b085      	sub	sp, #20
 8074f1c:	af00      	add	r7, sp, #0
 8074f1e:	6078      	str	r0, [r7, #4]
 8074f20:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8074f22:	2300      	movs	r3, #0
 8074f24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8074f26:	683b      	ldr	r3, [r7, #0]
 8074f28:	019b      	lsls	r3, r3, #6
 8074f2a:	f043 0220 	orr.w	r2, r3, #32
 8074f2e:	687b      	ldr	r3, [r7, #4]
 8074f30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8074f32:	68fb      	ldr	r3, [r7, #12]
 8074f34:	3301      	adds	r3, #1
 8074f36:	60fb      	str	r3, [r7, #12]
 8074f38:	68fb      	ldr	r3, [r7, #12]
 8074f3a:	4a09      	ldr	r2, [pc, #36]	; (8074f60 <USB_FlushTxFifo+0x48>)
 8074f3c:	4293      	cmp	r3, r2
 8074f3e:	d901      	bls.n	8074f44 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8074f40:	2303      	movs	r3, #3
 8074f42:	e006      	b.n	8074f52 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8074f44:	687b      	ldr	r3, [r7, #4]
 8074f46:	691b      	ldr	r3, [r3, #16]
 8074f48:	f003 0320 	and.w	r3, r3, #32
 8074f4c:	2b20      	cmp	r3, #32
 8074f4e:	d0f0      	beq.n	8074f32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8074f50:	2300      	movs	r3, #0
}
 8074f52:	4618      	mov	r0, r3
 8074f54:	3714      	adds	r7, #20
 8074f56:	46bd      	mov	sp, r7
 8074f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074f5c:	4770      	bx	lr
 8074f5e:	bf00      	nop
 8074f60:	00030d40 	.word	0x00030d40

08074f64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8074f64:	b480      	push	{r7}
 8074f66:	b085      	sub	sp, #20
 8074f68:	af00      	add	r7, sp, #0
 8074f6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8074f6c:	2300      	movs	r3, #0
 8074f6e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8074f70:	687b      	ldr	r3, [r7, #4]
 8074f72:	2210      	movs	r2, #16
 8074f74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8074f76:	68fb      	ldr	r3, [r7, #12]
 8074f78:	3301      	adds	r3, #1
 8074f7a:	60fb      	str	r3, [r7, #12]
 8074f7c:	68fb      	ldr	r3, [r7, #12]
 8074f7e:	4a09      	ldr	r2, [pc, #36]	; (8074fa4 <USB_FlushRxFifo+0x40>)
 8074f80:	4293      	cmp	r3, r2
 8074f82:	d901      	bls.n	8074f88 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8074f84:	2303      	movs	r3, #3
 8074f86:	e006      	b.n	8074f96 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8074f88:	687b      	ldr	r3, [r7, #4]
 8074f8a:	691b      	ldr	r3, [r3, #16]
 8074f8c:	f003 0310 	and.w	r3, r3, #16
 8074f90:	2b10      	cmp	r3, #16
 8074f92:	d0f0      	beq.n	8074f76 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8074f94:	2300      	movs	r3, #0
}
 8074f96:	4618      	mov	r0, r3
 8074f98:	3714      	adds	r7, #20
 8074f9a:	46bd      	mov	sp, r7
 8074f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074fa0:	4770      	bx	lr
 8074fa2:	bf00      	nop
 8074fa4:	00030d40 	.word	0x00030d40

08074fa8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8074fa8:	b480      	push	{r7}
 8074faa:	b085      	sub	sp, #20
 8074fac:	af00      	add	r7, sp, #0
 8074fae:	6078      	str	r0, [r7, #4]
 8074fb0:	460b      	mov	r3, r1
 8074fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8074fb4:	687b      	ldr	r3, [r7, #4]
 8074fb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8074fb8:	68fb      	ldr	r3, [r7, #12]
 8074fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074fbe:	681a      	ldr	r2, [r3, #0]
 8074fc0:	78fb      	ldrb	r3, [r7, #3]
 8074fc2:	68f9      	ldr	r1, [r7, #12]
 8074fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8074fc8:	4313      	orrs	r3, r2
 8074fca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8074fcc:	2300      	movs	r3, #0
}
 8074fce:	4618      	mov	r0, r3
 8074fd0:	3714      	adds	r7, #20
 8074fd2:	46bd      	mov	sp, r7
 8074fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074fd8:	4770      	bx	lr

08074fda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8074fda:	b480      	push	{r7}
 8074fdc:	b087      	sub	sp, #28
 8074fde:	af00      	add	r7, sp, #0
 8074fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8074fe2:	687b      	ldr	r3, [r7, #4]
 8074fe4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8074fe6:	693b      	ldr	r3, [r7, #16]
 8074fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074fec:	689b      	ldr	r3, [r3, #8]
 8074fee:	f003 0306 	and.w	r3, r3, #6
 8074ff2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8074ff4:	68fb      	ldr	r3, [r7, #12]
 8074ff6:	2b00      	cmp	r3, #0
 8074ff8:	d102      	bne.n	8075000 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8074ffa:	2300      	movs	r3, #0
 8074ffc:	75fb      	strb	r3, [r7, #23]
 8074ffe:	e00a      	b.n	8075016 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8075000:	68fb      	ldr	r3, [r7, #12]
 8075002:	2b02      	cmp	r3, #2
 8075004:	d002      	beq.n	807500c <USB_GetDevSpeed+0x32>
 8075006:	68fb      	ldr	r3, [r7, #12]
 8075008:	2b06      	cmp	r3, #6
 807500a:	d102      	bne.n	8075012 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 807500c:	2302      	movs	r3, #2
 807500e:	75fb      	strb	r3, [r7, #23]
 8075010:	e001      	b.n	8075016 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8075012:	230f      	movs	r3, #15
 8075014:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8075016:	7dfb      	ldrb	r3, [r7, #23]
}
 8075018:	4618      	mov	r0, r3
 807501a:	371c      	adds	r7, #28
 807501c:	46bd      	mov	sp, r7
 807501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075022:	4770      	bx	lr

08075024 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8075024:	b480      	push	{r7}
 8075026:	b085      	sub	sp, #20
 8075028:	af00      	add	r7, sp, #0
 807502a:	6078      	str	r0, [r7, #4]
 807502c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 807502e:	687b      	ldr	r3, [r7, #4]
 8075030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8075032:	683b      	ldr	r3, [r7, #0]
 8075034:	781b      	ldrb	r3, [r3, #0]
 8075036:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8075038:	683b      	ldr	r3, [r7, #0]
 807503a:	785b      	ldrb	r3, [r3, #1]
 807503c:	2b01      	cmp	r3, #1
 807503e:	d13a      	bne.n	80750b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8075040:	68fb      	ldr	r3, [r7, #12]
 8075042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075046:	69da      	ldr	r2, [r3, #28]
 8075048:	683b      	ldr	r3, [r7, #0]
 807504a:	781b      	ldrb	r3, [r3, #0]
 807504c:	f003 030f 	and.w	r3, r3, #15
 8075050:	2101      	movs	r1, #1
 8075052:	fa01 f303 	lsl.w	r3, r1, r3
 8075056:	b29b      	uxth	r3, r3
 8075058:	68f9      	ldr	r1, [r7, #12]
 807505a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807505e:	4313      	orrs	r3, r2
 8075060:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8075062:	68bb      	ldr	r3, [r7, #8]
 8075064:	015a      	lsls	r2, r3, #5
 8075066:	68fb      	ldr	r3, [r7, #12]
 8075068:	4413      	add	r3, r2
 807506a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807506e:	681b      	ldr	r3, [r3, #0]
 8075070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8075074:	2b00      	cmp	r3, #0
 8075076:	d155      	bne.n	8075124 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8075078:	68bb      	ldr	r3, [r7, #8]
 807507a:	015a      	lsls	r2, r3, #5
 807507c:	68fb      	ldr	r3, [r7, #12]
 807507e:	4413      	add	r3, r2
 8075080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075084:	681a      	ldr	r2, [r3, #0]
 8075086:	683b      	ldr	r3, [r7, #0]
 8075088:	689b      	ldr	r3, [r3, #8]
 807508a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 807508e:	683b      	ldr	r3, [r7, #0]
 8075090:	78db      	ldrb	r3, [r3, #3]
 8075092:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8075094:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8075096:	68bb      	ldr	r3, [r7, #8]
 8075098:	059b      	lsls	r3, r3, #22
 807509a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 807509c:	4313      	orrs	r3, r2
 807509e:	68ba      	ldr	r2, [r7, #8]
 80750a0:	0151      	lsls	r1, r2, #5
 80750a2:	68fa      	ldr	r2, [r7, #12]
 80750a4:	440a      	add	r2, r1
 80750a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80750aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80750ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80750b2:	6013      	str	r3, [r2, #0]
 80750b4:	e036      	b.n	8075124 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80750b6:	68fb      	ldr	r3, [r7, #12]
 80750b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80750bc:	69da      	ldr	r2, [r3, #28]
 80750be:	683b      	ldr	r3, [r7, #0]
 80750c0:	781b      	ldrb	r3, [r3, #0]
 80750c2:	f003 030f 	and.w	r3, r3, #15
 80750c6:	2101      	movs	r1, #1
 80750c8:	fa01 f303 	lsl.w	r3, r1, r3
 80750cc:	041b      	lsls	r3, r3, #16
 80750ce:	68f9      	ldr	r1, [r7, #12]
 80750d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80750d4:	4313      	orrs	r3, r2
 80750d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80750d8:	68bb      	ldr	r3, [r7, #8]
 80750da:	015a      	lsls	r2, r3, #5
 80750dc:	68fb      	ldr	r3, [r7, #12]
 80750de:	4413      	add	r3, r2
 80750e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80750e4:	681b      	ldr	r3, [r3, #0]
 80750e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80750ea:	2b00      	cmp	r3, #0
 80750ec:	d11a      	bne.n	8075124 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80750ee:	68bb      	ldr	r3, [r7, #8]
 80750f0:	015a      	lsls	r2, r3, #5
 80750f2:	68fb      	ldr	r3, [r7, #12]
 80750f4:	4413      	add	r3, r2
 80750f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80750fa:	681a      	ldr	r2, [r3, #0]
 80750fc:	683b      	ldr	r3, [r7, #0]
 80750fe:	689b      	ldr	r3, [r3, #8]
 8075100:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8075104:	683b      	ldr	r3, [r7, #0]
 8075106:	78db      	ldrb	r3, [r3, #3]
 8075108:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 807510a:	430b      	orrs	r3, r1
 807510c:	4313      	orrs	r3, r2
 807510e:	68ba      	ldr	r2, [r7, #8]
 8075110:	0151      	lsls	r1, r2, #5
 8075112:	68fa      	ldr	r2, [r7, #12]
 8075114:	440a      	add	r2, r1
 8075116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807511a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807511e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8075122:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8075124:	2300      	movs	r3, #0
}
 8075126:	4618      	mov	r0, r3
 8075128:	3714      	adds	r7, #20
 807512a:	46bd      	mov	sp, r7
 807512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075130:	4770      	bx	lr
	...

08075134 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8075134:	b580      	push	{r7, lr}
 8075136:	b08a      	sub	sp, #40	; 0x28
 8075138:	af02      	add	r7, sp, #8
 807513a:	60f8      	str	r0, [r7, #12]
 807513c:	60b9      	str	r1, [r7, #8]
 807513e:	4613      	mov	r3, r2
 8075140:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075142:	68fb      	ldr	r3, [r7, #12]
 8075144:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8075146:	68bb      	ldr	r3, [r7, #8]
 8075148:	781b      	ldrb	r3, [r3, #0]
 807514a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 807514c:	68bb      	ldr	r3, [r7, #8]
 807514e:	785b      	ldrb	r3, [r3, #1]
 8075150:	2b01      	cmp	r3, #1
 8075152:	f040 815c 	bne.w	807540e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8075156:	68bb      	ldr	r3, [r7, #8]
 8075158:	695b      	ldr	r3, [r3, #20]
 807515a:	2b00      	cmp	r3, #0
 807515c:	d132      	bne.n	80751c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807515e:	69bb      	ldr	r3, [r7, #24]
 8075160:	015a      	lsls	r2, r3, #5
 8075162:	69fb      	ldr	r3, [r7, #28]
 8075164:	4413      	add	r3, r2
 8075166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807516a:	691b      	ldr	r3, [r3, #16]
 807516c:	69ba      	ldr	r2, [r7, #24]
 807516e:	0151      	lsls	r1, r2, #5
 8075170:	69fa      	ldr	r2, [r7, #28]
 8075172:	440a      	add	r2, r1
 8075174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075178:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807517c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8075180:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8075182:	69bb      	ldr	r3, [r7, #24]
 8075184:	015a      	lsls	r2, r3, #5
 8075186:	69fb      	ldr	r3, [r7, #28]
 8075188:	4413      	add	r3, r2
 807518a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807518e:	691b      	ldr	r3, [r3, #16]
 8075190:	69ba      	ldr	r2, [r7, #24]
 8075192:	0151      	lsls	r1, r2, #5
 8075194:	69fa      	ldr	r2, [r7, #28]
 8075196:	440a      	add	r2, r1
 8075198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807519c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80751a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80751a2:	69bb      	ldr	r3, [r7, #24]
 80751a4:	015a      	lsls	r2, r3, #5
 80751a6:	69fb      	ldr	r3, [r7, #28]
 80751a8:	4413      	add	r3, r2
 80751aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80751ae:	691b      	ldr	r3, [r3, #16]
 80751b0:	69ba      	ldr	r2, [r7, #24]
 80751b2:	0151      	lsls	r1, r2, #5
 80751b4:	69fa      	ldr	r2, [r7, #28]
 80751b6:	440a      	add	r2, r1
 80751b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80751bc:	0cdb      	lsrs	r3, r3, #19
 80751be:	04db      	lsls	r3, r3, #19
 80751c0:	6113      	str	r3, [r2, #16]
 80751c2:	e074      	b.n	80752ae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80751c4:	69bb      	ldr	r3, [r7, #24]
 80751c6:	015a      	lsls	r2, r3, #5
 80751c8:	69fb      	ldr	r3, [r7, #28]
 80751ca:	4413      	add	r3, r2
 80751cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80751d0:	691b      	ldr	r3, [r3, #16]
 80751d2:	69ba      	ldr	r2, [r7, #24]
 80751d4:	0151      	lsls	r1, r2, #5
 80751d6:	69fa      	ldr	r2, [r7, #28]
 80751d8:	440a      	add	r2, r1
 80751da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80751de:	0cdb      	lsrs	r3, r3, #19
 80751e0:	04db      	lsls	r3, r3, #19
 80751e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80751e4:	69bb      	ldr	r3, [r7, #24]
 80751e6:	015a      	lsls	r2, r3, #5
 80751e8:	69fb      	ldr	r3, [r7, #28]
 80751ea:	4413      	add	r3, r2
 80751ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80751f0:	691b      	ldr	r3, [r3, #16]
 80751f2:	69ba      	ldr	r2, [r7, #24]
 80751f4:	0151      	lsls	r1, r2, #5
 80751f6:	69fa      	ldr	r2, [r7, #28]
 80751f8:	440a      	add	r2, r1
 80751fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80751fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8075202:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8075206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8075208:	69bb      	ldr	r3, [r7, #24]
 807520a:	015a      	lsls	r2, r3, #5
 807520c:	69fb      	ldr	r3, [r7, #28]
 807520e:	4413      	add	r3, r2
 8075210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075214:	691a      	ldr	r2, [r3, #16]
 8075216:	68bb      	ldr	r3, [r7, #8]
 8075218:	6959      	ldr	r1, [r3, #20]
 807521a:	68bb      	ldr	r3, [r7, #8]
 807521c:	689b      	ldr	r3, [r3, #8]
 807521e:	440b      	add	r3, r1
 8075220:	1e59      	subs	r1, r3, #1
 8075222:	68bb      	ldr	r3, [r7, #8]
 8075224:	689b      	ldr	r3, [r3, #8]
 8075226:	fbb1 f3f3 	udiv	r3, r1, r3
 807522a:	04d9      	lsls	r1, r3, #19
 807522c:	4b9d      	ldr	r3, [pc, #628]	; (80754a4 <USB_EPStartXfer+0x370>)
 807522e:	400b      	ands	r3, r1
 8075230:	69b9      	ldr	r1, [r7, #24]
 8075232:	0148      	lsls	r0, r1, #5
 8075234:	69f9      	ldr	r1, [r7, #28]
 8075236:	4401      	add	r1, r0
 8075238:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 807523c:	4313      	orrs	r3, r2
 807523e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8075240:	69bb      	ldr	r3, [r7, #24]
 8075242:	015a      	lsls	r2, r3, #5
 8075244:	69fb      	ldr	r3, [r7, #28]
 8075246:	4413      	add	r3, r2
 8075248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807524c:	691a      	ldr	r2, [r3, #16]
 807524e:	68bb      	ldr	r3, [r7, #8]
 8075250:	695b      	ldr	r3, [r3, #20]
 8075252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8075256:	69b9      	ldr	r1, [r7, #24]
 8075258:	0148      	lsls	r0, r1, #5
 807525a:	69f9      	ldr	r1, [r7, #28]
 807525c:	4401      	add	r1, r0
 807525e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8075262:	4313      	orrs	r3, r2
 8075264:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8075266:	68bb      	ldr	r3, [r7, #8]
 8075268:	78db      	ldrb	r3, [r3, #3]
 807526a:	2b01      	cmp	r3, #1
 807526c:	d11f      	bne.n	80752ae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 807526e:	69bb      	ldr	r3, [r7, #24]
 8075270:	015a      	lsls	r2, r3, #5
 8075272:	69fb      	ldr	r3, [r7, #28]
 8075274:	4413      	add	r3, r2
 8075276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807527a:	691b      	ldr	r3, [r3, #16]
 807527c:	69ba      	ldr	r2, [r7, #24]
 807527e:	0151      	lsls	r1, r2, #5
 8075280:	69fa      	ldr	r2, [r7, #28]
 8075282:	440a      	add	r2, r1
 8075284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075288:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 807528c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 807528e:	69bb      	ldr	r3, [r7, #24]
 8075290:	015a      	lsls	r2, r3, #5
 8075292:	69fb      	ldr	r3, [r7, #28]
 8075294:	4413      	add	r3, r2
 8075296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807529a:	691b      	ldr	r3, [r3, #16]
 807529c:	69ba      	ldr	r2, [r7, #24]
 807529e:	0151      	lsls	r1, r2, #5
 80752a0:	69fa      	ldr	r2, [r7, #28]
 80752a2:	440a      	add	r2, r1
 80752a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80752a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80752ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80752ae:	79fb      	ldrb	r3, [r7, #7]
 80752b0:	2b01      	cmp	r3, #1
 80752b2:	d14b      	bne.n	807534c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80752b4:	68bb      	ldr	r3, [r7, #8]
 80752b6:	691b      	ldr	r3, [r3, #16]
 80752b8:	2b00      	cmp	r3, #0
 80752ba:	d009      	beq.n	80752d0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80752bc:	69bb      	ldr	r3, [r7, #24]
 80752be:	015a      	lsls	r2, r3, #5
 80752c0:	69fb      	ldr	r3, [r7, #28]
 80752c2:	4413      	add	r3, r2
 80752c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80752c8:	461a      	mov	r2, r3
 80752ca:	68bb      	ldr	r3, [r7, #8]
 80752cc:	691b      	ldr	r3, [r3, #16]
 80752ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80752d0:	68bb      	ldr	r3, [r7, #8]
 80752d2:	78db      	ldrb	r3, [r3, #3]
 80752d4:	2b01      	cmp	r3, #1
 80752d6:	d128      	bne.n	807532a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80752d8:	69fb      	ldr	r3, [r7, #28]
 80752da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80752de:	689b      	ldr	r3, [r3, #8]
 80752e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80752e4:	2b00      	cmp	r3, #0
 80752e6:	d110      	bne.n	807530a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80752e8:	69bb      	ldr	r3, [r7, #24]
 80752ea:	015a      	lsls	r2, r3, #5
 80752ec:	69fb      	ldr	r3, [r7, #28]
 80752ee:	4413      	add	r3, r2
 80752f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80752f4:	681b      	ldr	r3, [r3, #0]
 80752f6:	69ba      	ldr	r2, [r7, #24]
 80752f8:	0151      	lsls	r1, r2, #5
 80752fa:	69fa      	ldr	r2, [r7, #28]
 80752fc:	440a      	add	r2, r1
 80752fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075302:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8075306:	6013      	str	r3, [r2, #0]
 8075308:	e00f      	b.n	807532a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 807530a:	69bb      	ldr	r3, [r7, #24]
 807530c:	015a      	lsls	r2, r3, #5
 807530e:	69fb      	ldr	r3, [r7, #28]
 8075310:	4413      	add	r3, r2
 8075312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075316:	681b      	ldr	r3, [r3, #0]
 8075318:	69ba      	ldr	r2, [r7, #24]
 807531a:	0151      	lsls	r1, r2, #5
 807531c:	69fa      	ldr	r2, [r7, #28]
 807531e:	440a      	add	r2, r1
 8075320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8075328:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807532a:	69bb      	ldr	r3, [r7, #24]
 807532c:	015a      	lsls	r2, r3, #5
 807532e:	69fb      	ldr	r3, [r7, #28]
 8075330:	4413      	add	r3, r2
 8075332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075336:	681b      	ldr	r3, [r3, #0]
 8075338:	69ba      	ldr	r2, [r7, #24]
 807533a:	0151      	lsls	r1, r2, #5
 807533c:	69fa      	ldr	r2, [r7, #28]
 807533e:	440a      	add	r2, r1
 8075340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075344:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8075348:	6013      	str	r3, [r2, #0]
 807534a:	e12f      	b.n	80755ac <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807534c:	69bb      	ldr	r3, [r7, #24]
 807534e:	015a      	lsls	r2, r3, #5
 8075350:	69fb      	ldr	r3, [r7, #28]
 8075352:	4413      	add	r3, r2
 8075354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075358:	681b      	ldr	r3, [r3, #0]
 807535a:	69ba      	ldr	r2, [r7, #24]
 807535c:	0151      	lsls	r1, r2, #5
 807535e:	69fa      	ldr	r2, [r7, #28]
 8075360:	440a      	add	r2, r1
 8075362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075366:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807536a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 807536c:	68bb      	ldr	r3, [r7, #8]
 807536e:	78db      	ldrb	r3, [r3, #3]
 8075370:	2b01      	cmp	r3, #1
 8075372:	d015      	beq.n	80753a0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8075374:	68bb      	ldr	r3, [r7, #8]
 8075376:	695b      	ldr	r3, [r3, #20]
 8075378:	2b00      	cmp	r3, #0
 807537a:	f000 8117 	beq.w	80755ac <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 807537e:	69fb      	ldr	r3, [r7, #28]
 8075380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8075386:	68bb      	ldr	r3, [r7, #8]
 8075388:	781b      	ldrb	r3, [r3, #0]
 807538a:	f003 030f 	and.w	r3, r3, #15
 807538e:	2101      	movs	r1, #1
 8075390:	fa01 f303 	lsl.w	r3, r1, r3
 8075394:	69f9      	ldr	r1, [r7, #28]
 8075396:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807539a:	4313      	orrs	r3, r2
 807539c:	634b      	str	r3, [r1, #52]	; 0x34
 807539e:	e105      	b.n	80755ac <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80753a0:	69fb      	ldr	r3, [r7, #28]
 80753a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80753a6:	689b      	ldr	r3, [r3, #8]
 80753a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80753ac:	2b00      	cmp	r3, #0
 80753ae:	d110      	bne.n	80753d2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80753b0:	69bb      	ldr	r3, [r7, #24]
 80753b2:	015a      	lsls	r2, r3, #5
 80753b4:	69fb      	ldr	r3, [r7, #28]
 80753b6:	4413      	add	r3, r2
 80753b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80753bc:	681b      	ldr	r3, [r3, #0]
 80753be:	69ba      	ldr	r2, [r7, #24]
 80753c0:	0151      	lsls	r1, r2, #5
 80753c2:	69fa      	ldr	r2, [r7, #28]
 80753c4:	440a      	add	r2, r1
 80753c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80753ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80753ce:	6013      	str	r3, [r2, #0]
 80753d0:	e00f      	b.n	80753f2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80753d2:	69bb      	ldr	r3, [r7, #24]
 80753d4:	015a      	lsls	r2, r3, #5
 80753d6:	69fb      	ldr	r3, [r7, #28]
 80753d8:	4413      	add	r3, r2
 80753da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80753de:	681b      	ldr	r3, [r3, #0]
 80753e0:	69ba      	ldr	r2, [r7, #24]
 80753e2:	0151      	lsls	r1, r2, #5
 80753e4:	69fa      	ldr	r2, [r7, #28]
 80753e6:	440a      	add	r2, r1
 80753e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80753ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80753f0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80753f2:	68bb      	ldr	r3, [r7, #8]
 80753f4:	68d9      	ldr	r1, [r3, #12]
 80753f6:	68bb      	ldr	r3, [r7, #8]
 80753f8:	781a      	ldrb	r2, [r3, #0]
 80753fa:	68bb      	ldr	r3, [r7, #8]
 80753fc:	695b      	ldr	r3, [r3, #20]
 80753fe:	b298      	uxth	r0, r3
 8075400:	79fb      	ldrb	r3, [r7, #7]
 8075402:	9300      	str	r3, [sp, #0]
 8075404:	4603      	mov	r3, r0
 8075406:	68f8      	ldr	r0, [r7, #12]
 8075408:	f000 fa2b 	bl	8075862 <USB_WritePacket>
 807540c:	e0ce      	b.n	80755ac <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 807540e:	69bb      	ldr	r3, [r7, #24]
 8075410:	015a      	lsls	r2, r3, #5
 8075412:	69fb      	ldr	r3, [r7, #28]
 8075414:	4413      	add	r3, r2
 8075416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807541a:	691b      	ldr	r3, [r3, #16]
 807541c:	69ba      	ldr	r2, [r7, #24]
 807541e:	0151      	lsls	r1, r2, #5
 8075420:	69fa      	ldr	r2, [r7, #28]
 8075422:	440a      	add	r2, r1
 8075424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075428:	0cdb      	lsrs	r3, r3, #19
 807542a:	04db      	lsls	r3, r3, #19
 807542c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 807542e:	69bb      	ldr	r3, [r7, #24]
 8075430:	015a      	lsls	r2, r3, #5
 8075432:	69fb      	ldr	r3, [r7, #28]
 8075434:	4413      	add	r3, r2
 8075436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807543a:	691b      	ldr	r3, [r3, #16]
 807543c:	69ba      	ldr	r2, [r7, #24]
 807543e:	0151      	lsls	r1, r2, #5
 8075440:	69fa      	ldr	r2, [r7, #28]
 8075442:	440a      	add	r2, r1
 8075444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075448:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807544c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8075450:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8075452:	68bb      	ldr	r3, [r7, #8]
 8075454:	695b      	ldr	r3, [r3, #20]
 8075456:	2b00      	cmp	r3, #0
 8075458:	d126      	bne.n	80754a8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 807545a:	69bb      	ldr	r3, [r7, #24]
 807545c:	015a      	lsls	r2, r3, #5
 807545e:	69fb      	ldr	r3, [r7, #28]
 8075460:	4413      	add	r3, r2
 8075462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075466:	691a      	ldr	r2, [r3, #16]
 8075468:	68bb      	ldr	r3, [r7, #8]
 807546a:	689b      	ldr	r3, [r3, #8]
 807546c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8075470:	69b9      	ldr	r1, [r7, #24]
 8075472:	0148      	lsls	r0, r1, #5
 8075474:	69f9      	ldr	r1, [r7, #28]
 8075476:	4401      	add	r1, r0
 8075478:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 807547c:	4313      	orrs	r3, r2
 807547e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8075480:	69bb      	ldr	r3, [r7, #24]
 8075482:	015a      	lsls	r2, r3, #5
 8075484:	69fb      	ldr	r3, [r7, #28]
 8075486:	4413      	add	r3, r2
 8075488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807548c:	691b      	ldr	r3, [r3, #16]
 807548e:	69ba      	ldr	r2, [r7, #24]
 8075490:	0151      	lsls	r1, r2, #5
 8075492:	69fa      	ldr	r2, [r7, #28]
 8075494:	440a      	add	r2, r1
 8075496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807549a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807549e:	6113      	str	r3, [r2, #16]
 80754a0:	e036      	b.n	8075510 <USB_EPStartXfer+0x3dc>
 80754a2:	bf00      	nop
 80754a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80754a8:	68bb      	ldr	r3, [r7, #8]
 80754aa:	695a      	ldr	r2, [r3, #20]
 80754ac:	68bb      	ldr	r3, [r7, #8]
 80754ae:	689b      	ldr	r3, [r3, #8]
 80754b0:	4413      	add	r3, r2
 80754b2:	1e5a      	subs	r2, r3, #1
 80754b4:	68bb      	ldr	r3, [r7, #8]
 80754b6:	689b      	ldr	r3, [r3, #8]
 80754b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80754bc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80754be:	69bb      	ldr	r3, [r7, #24]
 80754c0:	015a      	lsls	r2, r3, #5
 80754c2:	69fb      	ldr	r3, [r7, #28]
 80754c4:	4413      	add	r3, r2
 80754c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80754ca:	691a      	ldr	r2, [r3, #16]
 80754cc:	8afb      	ldrh	r3, [r7, #22]
 80754ce:	04d9      	lsls	r1, r3, #19
 80754d0:	4b39      	ldr	r3, [pc, #228]	; (80755b8 <USB_EPStartXfer+0x484>)
 80754d2:	400b      	ands	r3, r1
 80754d4:	69b9      	ldr	r1, [r7, #24]
 80754d6:	0148      	lsls	r0, r1, #5
 80754d8:	69f9      	ldr	r1, [r7, #28]
 80754da:	4401      	add	r1, r0
 80754dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80754e0:	4313      	orrs	r3, r2
 80754e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80754e4:	69bb      	ldr	r3, [r7, #24]
 80754e6:	015a      	lsls	r2, r3, #5
 80754e8:	69fb      	ldr	r3, [r7, #28]
 80754ea:	4413      	add	r3, r2
 80754ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80754f0:	691a      	ldr	r2, [r3, #16]
 80754f2:	68bb      	ldr	r3, [r7, #8]
 80754f4:	689b      	ldr	r3, [r3, #8]
 80754f6:	8af9      	ldrh	r1, [r7, #22]
 80754f8:	fb01 f303 	mul.w	r3, r1, r3
 80754fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8075500:	69b9      	ldr	r1, [r7, #24]
 8075502:	0148      	lsls	r0, r1, #5
 8075504:	69f9      	ldr	r1, [r7, #28]
 8075506:	4401      	add	r1, r0
 8075508:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 807550c:	4313      	orrs	r3, r2
 807550e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8075510:	79fb      	ldrb	r3, [r7, #7]
 8075512:	2b01      	cmp	r3, #1
 8075514:	d10d      	bne.n	8075532 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8075516:	68bb      	ldr	r3, [r7, #8]
 8075518:	68db      	ldr	r3, [r3, #12]
 807551a:	2b00      	cmp	r3, #0
 807551c:	d009      	beq.n	8075532 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 807551e:	68bb      	ldr	r3, [r7, #8]
 8075520:	68d9      	ldr	r1, [r3, #12]
 8075522:	69bb      	ldr	r3, [r7, #24]
 8075524:	015a      	lsls	r2, r3, #5
 8075526:	69fb      	ldr	r3, [r7, #28]
 8075528:	4413      	add	r3, r2
 807552a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807552e:	460a      	mov	r2, r1
 8075530:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8075532:	68bb      	ldr	r3, [r7, #8]
 8075534:	78db      	ldrb	r3, [r3, #3]
 8075536:	2b01      	cmp	r3, #1
 8075538:	d128      	bne.n	807558c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 807553a:	69fb      	ldr	r3, [r7, #28]
 807553c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075540:	689b      	ldr	r3, [r3, #8]
 8075542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8075546:	2b00      	cmp	r3, #0
 8075548:	d110      	bne.n	807556c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 807554a:	69bb      	ldr	r3, [r7, #24]
 807554c:	015a      	lsls	r2, r3, #5
 807554e:	69fb      	ldr	r3, [r7, #28]
 8075550:	4413      	add	r3, r2
 8075552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075556:	681b      	ldr	r3, [r3, #0]
 8075558:	69ba      	ldr	r2, [r7, #24]
 807555a:	0151      	lsls	r1, r2, #5
 807555c:	69fa      	ldr	r2, [r7, #28]
 807555e:	440a      	add	r2, r1
 8075560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075564:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8075568:	6013      	str	r3, [r2, #0]
 807556a:	e00f      	b.n	807558c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 807556c:	69bb      	ldr	r3, [r7, #24]
 807556e:	015a      	lsls	r2, r3, #5
 8075570:	69fb      	ldr	r3, [r7, #28]
 8075572:	4413      	add	r3, r2
 8075574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075578:	681b      	ldr	r3, [r3, #0]
 807557a:	69ba      	ldr	r2, [r7, #24]
 807557c:	0151      	lsls	r1, r2, #5
 807557e:	69fa      	ldr	r2, [r7, #28]
 8075580:	440a      	add	r2, r1
 8075582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807558a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 807558c:	69bb      	ldr	r3, [r7, #24]
 807558e:	015a      	lsls	r2, r3, #5
 8075590:	69fb      	ldr	r3, [r7, #28]
 8075592:	4413      	add	r3, r2
 8075594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075598:	681b      	ldr	r3, [r3, #0]
 807559a:	69ba      	ldr	r2, [r7, #24]
 807559c:	0151      	lsls	r1, r2, #5
 807559e:	69fa      	ldr	r2, [r7, #28]
 80755a0:	440a      	add	r2, r1
 80755a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80755a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80755aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80755ac:	2300      	movs	r3, #0
}
 80755ae:	4618      	mov	r0, r3
 80755b0:	3720      	adds	r7, #32
 80755b2:	46bd      	mov	sp, r7
 80755b4:	bd80      	pop	{r7, pc}
 80755b6:	bf00      	nop
 80755b8:	1ff80000 	.word	0x1ff80000

080755bc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80755bc:	b480      	push	{r7}
 80755be:	b087      	sub	sp, #28
 80755c0:	af00      	add	r7, sp, #0
 80755c2:	60f8      	str	r0, [r7, #12]
 80755c4:	60b9      	str	r1, [r7, #8]
 80755c6:	4613      	mov	r3, r2
 80755c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80755ca:	68fb      	ldr	r3, [r7, #12]
 80755cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80755ce:	68bb      	ldr	r3, [r7, #8]
 80755d0:	781b      	ldrb	r3, [r3, #0]
 80755d2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80755d4:	68bb      	ldr	r3, [r7, #8]
 80755d6:	785b      	ldrb	r3, [r3, #1]
 80755d8:	2b01      	cmp	r3, #1
 80755da:	f040 80cd 	bne.w	8075778 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80755de:	68bb      	ldr	r3, [r7, #8]
 80755e0:	695b      	ldr	r3, [r3, #20]
 80755e2:	2b00      	cmp	r3, #0
 80755e4:	d132      	bne.n	807564c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80755e6:	693b      	ldr	r3, [r7, #16]
 80755e8:	015a      	lsls	r2, r3, #5
 80755ea:	697b      	ldr	r3, [r7, #20]
 80755ec:	4413      	add	r3, r2
 80755ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80755f2:	691b      	ldr	r3, [r3, #16]
 80755f4:	693a      	ldr	r2, [r7, #16]
 80755f6:	0151      	lsls	r1, r2, #5
 80755f8:	697a      	ldr	r2, [r7, #20]
 80755fa:	440a      	add	r2, r1
 80755fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075600:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8075604:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8075608:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 807560a:	693b      	ldr	r3, [r7, #16]
 807560c:	015a      	lsls	r2, r3, #5
 807560e:	697b      	ldr	r3, [r7, #20]
 8075610:	4413      	add	r3, r2
 8075612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075616:	691b      	ldr	r3, [r3, #16]
 8075618:	693a      	ldr	r2, [r7, #16]
 807561a:	0151      	lsls	r1, r2, #5
 807561c:	697a      	ldr	r2, [r7, #20]
 807561e:	440a      	add	r2, r1
 8075620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075624:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8075628:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807562a:	693b      	ldr	r3, [r7, #16]
 807562c:	015a      	lsls	r2, r3, #5
 807562e:	697b      	ldr	r3, [r7, #20]
 8075630:	4413      	add	r3, r2
 8075632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075636:	691b      	ldr	r3, [r3, #16]
 8075638:	693a      	ldr	r2, [r7, #16]
 807563a:	0151      	lsls	r1, r2, #5
 807563c:	697a      	ldr	r2, [r7, #20]
 807563e:	440a      	add	r2, r1
 8075640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075644:	0cdb      	lsrs	r3, r3, #19
 8075646:	04db      	lsls	r3, r3, #19
 8075648:	6113      	str	r3, [r2, #16]
 807564a:	e04e      	b.n	80756ea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807564c:	693b      	ldr	r3, [r7, #16]
 807564e:	015a      	lsls	r2, r3, #5
 8075650:	697b      	ldr	r3, [r7, #20]
 8075652:	4413      	add	r3, r2
 8075654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075658:	691b      	ldr	r3, [r3, #16]
 807565a:	693a      	ldr	r2, [r7, #16]
 807565c:	0151      	lsls	r1, r2, #5
 807565e:	697a      	ldr	r2, [r7, #20]
 8075660:	440a      	add	r2, r1
 8075662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075666:	0cdb      	lsrs	r3, r3, #19
 8075668:	04db      	lsls	r3, r3, #19
 807566a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807566c:	693b      	ldr	r3, [r7, #16]
 807566e:	015a      	lsls	r2, r3, #5
 8075670:	697b      	ldr	r3, [r7, #20]
 8075672:	4413      	add	r3, r2
 8075674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075678:	691b      	ldr	r3, [r3, #16]
 807567a:	693a      	ldr	r2, [r7, #16]
 807567c:	0151      	lsls	r1, r2, #5
 807567e:	697a      	ldr	r2, [r7, #20]
 8075680:	440a      	add	r2, r1
 8075682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075686:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807568a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807568e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8075690:	68bb      	ldr	r3, [r7, #8]
 8075692:	695a      	ldr	r2, [r3, #20]
 8075694:	68bb      	ldr	r3, [r7, #8]
 8075696:	689b      	ldr	r3, [r3, #8]
 8075698:	429a      	cmp	r2, r3
 807569a:	d903      	bls.n	80756a4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 807569c:	68bb      	ldr	r3, [r7, #8]
 807569e:	689a      	ldr	r2, [r3, #8]
 80756a0:	68bb      	ldr	r3, [r7, #8]
 80756a2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80756a4:	693b      	ldr	r3, [r7, #16]
 80756a6:	015a      	lsls	r2, r3, #5
 80756a8:	697b      	ldr	r3, [r7, #20]
 80756aa:	4413      	add	r3, r2
 80756ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80756b0:	691b      	ldr	r3, [r3, #16]
 80756b2:	693a      	ldr	r2, [r7, #16]
 80756b4:	0151      	lsls	r1, r2, #5
 80756b6:	697a      	ldr	r2, [r7, #20]
 80756b8:	440a      	add	r2, r1
 80756ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80756be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80756c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80756c4:	693b      	ldr	r3, [r7, #16]
 80756c6:	015a      	lsls	r2, r3, #5
 80756c8:	697b      	ldr	r3, [r7, #20]
 80756ca:	4413      	add	r3, r2
 80756cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80756d0:	691a      	ldr	r2, [r3, #16]
 80756d2:	68bb      	ldr	r3, [r7, #8]
 80756d4:	695b      	ldr	r3, [r3, #20]
 80756d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80756da:	6939      	ldr	r1, [r7, #16]
 80756dc:	0148      	lsls	r0, r1, #5
 80756de:	6979      	ldr	r1, [r7, #20]
 80756e0:	4401      	add	r1, r0
 80756e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80756e6:	4313      	orrs	r3, r2
 80756e8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80756ea:	79fb      	ldrb	r3, [r7, #7]
 80756ec:	2b01      	cmp	r3, #1
 80756ee:	d11e      	bne.n	807572e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80756f0:	68bb      	ldr	r3, [r7, #8]
 80756f2:	691b      	ldr	r3, [r3, #16]
 80756f4:	2b00      	cmp	r3, #0
 80756f6:	d009      	beq.n	807570c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80756f8:	693b      	ldr	r3, [r7, #16]
 80756fa:	015a      	lsls	r2, r3, #5
 80756fc:	697b      	ldr	r3, [r7, #20]
 80756fe:	4413      	add	r3, r2
 8075700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075704:	461a      	mov	r2, r3
 8075706:	68bb      	ldr	r3, [r7, #8]
 8075708:	691b      	ldr	r3, [r3, #16]
 807570a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807570c:	693b      	ldr	r3, [r7, #16]
 807570e:	015a      	lsls	r2, r3, #5
 8075710:	697b      	ldr	r3, [r7, #20]
 8075712:	4413      	add	r3, r2
 8075714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075718:	681b      	ldr	r3, [r3, #0]
 807571a:	693a      	ldr	r2, [r7, #16]
 807571c:	0151      	lsls	r1, r2, #5
 807571e:	697a      	ldr	r2, [r7, #20]
 8075720:	440a      	add	r2, r1
 8075722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075726:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807572a:	6013      	str	r3, [r2, #0]
 807572c:	e092      	b.n	8075854 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807572e:	693b      	ldr	r3, [r7, #16]
 8075730:	015a      	lsls	r2, r3, #5
 8075732:	697b      	ldr	r3, [r7, #20]
 8075734:	4413      	add	r3, r2
 8075736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807573a:	681b      	ldr	r3, [r3, #0]
 807573c:	693a      	ldr	r2, [r7, #16]
 807573e:	0151      	lsls	r1, r2, #5
 8075740:	697a      	ldr	r2, [r7, #20]
 8075742:	440a      	add	r2, r1
 8075744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075748:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807574c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 807574e:	68bb      	ldr	r3, [r7, #8]
 8075750:	695b      	ldr	r3, [r3, #20]
 8075752:	2b00      	cmp	r3, #0
 8075754:	d07e      	beq.n	8075854 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8075756:	697b      	ldr	r3, [r7, #20]
 8075758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807575c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 807575e:	68bb      	ldr	r3, [r7, #8]
 8075760:	781b      	ldrb	r3, [r3, #0]
 8075762:	f003 030f 	and.w	r3, r3, #15
 8075766:	2101      	movs	r1, #1
 8075768:	fa01 f303 	lsl.w	r3, r1, r3
 807576c:	6979      	ldr	r1, [r7, #20]
 807576e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8075772:	4313      	orrs	r3, r2
 8075774:	634b      	str	r3, [r1, #52]	; 0x34
 8075776:	e06d      	b.n	8075854 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8075778:	693b      	ldr	r3, [r7, #16]
 807577a:	015a      	lsls	r2, r3, #5
 807577c:	697b      	ldr	r3, [r7, #20]
 807577e:	4413      	add	r3, r2
 8075780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075784:	691b      	ldr	r3, [r3, #16]
 8075786:	693a      	ldr	r2, [r7, #16]
 8075788:	0151      	lsls	r1, r2, #5
 807578a:	697a      	ldr	r2, [r7, #20]
 807578c:	440a      	add	r2, r1
 807578e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075792:	0cdb      	lsrs	r3, r3, #19
 8075794:	04db      	lsls	r3, r3, #19
 8075796:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8075798:	693b      	ldr	r3, [r7, #16]
 807579a:	015a      	lsls	r2, r3, #5
 807579c:	697b      	ldr	r3, [r7, #20]
 807579e:	4413      	add	r3, r2
 80757a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80757a4:	691b      	ldr	r3, [r3, #16]
 80757a6:	693a      	ldr	r2, [r7, #16]
 80757a8:	0151      	lsls	r1, r2, #5
 80757aa:	697a      	ldr	r2, [r7, #20]
 80757ac:	440a      	add	r2, r1
 80757ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80757b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80757b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80757ba:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80757bc:	68bb      	ldr	r3, [r7, #8]
 80757be:	695b      	ldr	r3, [r3, #20]
 80757c0:	2b00      	cmp	r3, #0
 80757c2:	d003      	beq.n	80757cc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80757c4:	68bb      	ldr	r3, [r7, #8]
 80757c6:	689a      	ldr	r2, [r3, #8]
 80757c8:	68bb      	ldr	r3, [r7, #8]
 80757ca:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80757cc:	693b      	ldr	r3, [r7, #16]
 80757ce:	015a      	lsls	r2, r3, #5
 80757d0:	697b      	ldr	r3, [r7, #20]
 80757d2:	4413      	add	r3, r2
 80757d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80757d8:	691b      	ldr	r3, [r3, #16]
 80757da:	693a      	ldr	r2, [r7, #16]
 80757dc:	0151      	lsls	r1, r2, #5
 80757de:	697a      	ldr	r2, [r7, #20]
 80757e0:	440a      	add	r2, r1
 80757e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80757e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80757ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80757ec:	693b      	ldr	r3, [r7, #16]
 80757ee:	015a      	lsls	r2, r3, #5
 80757f0:	697b      	ldr	r3, [r7, #20]
 80757f2:	4413      	add	r3, r2
 80757f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80757f8:	691a      	ldr	r2, [r3, #16]
 80757fa:	68bb      	ldr	r3, [r7, #8]
 80757fc:	689b      	ldr	r3, [r3, #8]
 80757fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8075802:	6939      	ldr	r1, [r7, #16]
 8075804:	0148      	lsls	r0, r1, #5
 8075806:	6979      	ldr	r1, [r7, #20]
 8075808:	4401      	add	r1, r0
 807580a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 807580e:	4313      	orrs	r3, r2
 8075810:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8075812:	79fb      	ldrb	r3, [r7, #7]
 8075814:	2b01      	cmp	r3, #1
 8075816:	d10d      	bne.n	8075834 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8075818:	68bb      	ldr	r3, [r7, #8]
 807581a:	68db      	ldr	r3, [r3, #12]
 807581c:	2b00      	cmp	r3, #0
 807581e:	d009      	beq.n	8075834 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8075820:	68bb      	ldr	r3, [r7, #8]
 8075822:	68d9      	ldr	r1, [r3, #12]
 8075824:	693b      	ldr	r3, [r7, #16]
 8075826:	015a      	lsls	r2, r3, #5
 8075828:	697b      	ldr	r3, [r7, #20]
 807582a:	4413      	add	r3, r2
 807582c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075830:	460a      	mov	r2, r1
 8075832:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8075834:	693b      	ldr	r3, [r7, #16]
 8075836:	015a      	lsls	r2, r3, #5
 8075838:	697b      	ldr	r3, [r7, #20]
 807583a:	4413      	add	r3, r2
 807583c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075840:	681b      	ldr	r3, [r3, #0]
 8075842:	693a      	ldr	r2, [r7, #16]
 8075844:	0151      	lsls	r1, r2, #5
 8075846:	697a      	ldr	r2, [r7, #20]
 8075848:	440a      	add	r2, r1
 807584a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807584e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8075852:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8075854:	2300      	movs	r3, #0
}
 8075856:	4618      	mov	r0, r3
 8075858:	371c      	adds	r7, #28
 807585a:	46bd      	mov	sp, r7
 807585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075860:	4770      	bx	lr

08075862 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8075862:	b480      	push	{r7}
 8075864:	b089      	sub	sp, #36	; 0x24
 8075866:	af00      	add	r7, sp, #0
 8075868:	60f8      	str	r0, [r7, #12]
 807586a:	60b9      	str	r1, [r7, #8]
 807586c:	4611      	mov	r1, r2
 807586e:	461a      	mov	r2, r3
 8075870:	460b      	mov	r3, r1
 8075872:	71fb      	strb	r3, [r7, #7]
 8075874:	4613      	mov	r3, r2
 8075876:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075878:	68fb      	ldr	r3, [r7, #12]
 807587a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 807587c:	68bb      	ldr	r3, [r7, #8]
 807587e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8075880:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8075884:	2b00      	cmp	r3, #0
 8075886:	d11a      	bne.n	80758be <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8075888:	88bb      	ldrh	r3, [r7, #4]
 807588a:	3303      	adds	r3, #3
 807588c:	089b      	lsrs	r3, r3, #2
 807588e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8075890:	2300      	movs	r3, #0
 8075892:	61bb      	str	r3, [r7, #24]
 8075894:	e00f      	b.n	80758b6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8075896:	79fb      	ldrb	r3, [r7, #7]
 8075898:	031a      	lsls	r2, r3, #12
 807589a:	697b      	ldr	r3, [r7, #20]
 807589c:	4413      	add	r3, r2
 807589e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80758a2:	461a      	mov	r2, r3
 80758a4:	69fb      	ldr	r3, [r7, #28]
 80758a6:	681b      	ldr	r3, [r3, #0]
 80758a8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80758aa:	69fb      	ldr	r3, [r7, #28]
 80758ac:	3304      	adds	r3, #4
 80758ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80758b0:	69bb      	ldr	r3, [r7, #24]
 80758b2:	3301      	adds	r3, #1
 80758b4:	61bb      	str	r3, [r7, #24]
 80758b6:	69ba      	ldr	r2, [r7, #24]
 80758b8:	693b      	ldr	r3, [r7, #16]
 80758ba:	429a      	cmp	r2, r3
 80758bc:	d3eb      	bcc.n	8075896 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80758be:	2300      	movs	r3, #0
}
 80758c0:	4618      	mov	r0, r3
 80758c2:	3724      	adds	r7, #36	; 0x24
 80758c4:	46bd      	mov	sp, r7
 80758c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80758ca:	4770      	bx	lr

080758cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80758cc:	b480      	push	{r7}
 80758ce:	b089      	sub	sp, #36	; 0x24
 80758d0:	af00      	add	r7, sp, #0
 80758d2:	60f8      	str	r0, [r7, #12]
 80758d4:	60b9      	str	r1, [r7, #8]
 80758d6:	4613      	mov	r3, r2
 80758d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80758da:	68fb      	ldr	r3, [r7, #12]
 80758dc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80758de:	68bb      	ldr	r3, [r7, #8]
 80758e0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80758e2:	88fb      	ldrh	r3, [r7, #6]
 80758e4:	3303      	adds	r3, #3
 80758e6:	089b      	lsrs	r3, r3, #2
 80758e8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80758ea:	2300      	movs	r3, #0
 80758ec:	61bb      	str	r3, [r7, #24]
 80758ee:	e00b      	b.n	8075908 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80758f0:	697b      	ldr	r3, [r7, #20]
 80758f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80758f6:	681a      	ldr	r2, [r3, #0]
 80758f8:	69fb      	ldr	r3, [r7, #28]
 80758fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80758fc:	69fb      	ldr	r3, [r7, #28]
 80758fe:	3304      	adds	r3, #4
 8075900:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8075902:	69bb      	ldr	r3, [r7, #24]
 8075904:	3301      	adds	r3, #1
 8075906:	61bb      	str	r3, [r7, #24]
 8075908:	69ba      	ldr	r2, [r7, #24]
 807590a:	693b      	ldr	r3, [r7, #16]
 807590c:	429a      	cmp	r2, r3
 807590e:	d3ef      	bcc.n	80758f0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8075910:	69fb      	ldr	r3, [r7, #28]
}
 8075912:	4618      	mov	r0, r3
 8075914:	3724      	adds	r7, #36	; 0x24
 8075916:	46bd      	mov	sp, r7
 8075918:	f85d 7b04 	ldr.w	r7, [sp], #4
 807591c:	4770      	bx	lr

0807591e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 807591e:	b480      	push	{r7}
 8075920:	b085      	sub	sp, #20
 8075922:	af00      	add	r7, sp, #0
 8075924:	6078      	str	r0, [r7, #4]
 8075926:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075928:	687b      	ldr	r3, [r7, #4]
 807592a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 807592c:	683b      	ldr	r3, [r7, #0]
 807592e:	781b      	ldrb	r3, [r3, #0]
 8075930:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8075932:	683b      	ldr	r3, [r7, #0]
 8075934:	785b      	ldrb	r3, [r3, #1]
 8075936:	2b01      	cmp	r3, #1
 8075938:	d12c      	bne.n	8075994 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 807593a:	68bb      	ldr	r3, [r7, #8]
 807593c:	015a      	lsls	r2, r3, #5
 807593e:	68fb      	ldr	r3, [r7, #12]
 8075940:	4413      	add	r3, r2
 8075942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075946:	681b      	ldr	r3, [r3, #0]
 8075948:	2b00      	cmp	r3, #0
 807594a:	db12      	blt.n	8075972 <USB_EPSetStall+0x54>
 807594c:	68bb      	ldr	r3, [r7, #8]
 807594e:	2b00      	cmp	r3, #0
 8075950:	d00f      	beq.n	8075972 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8075952:	68bb      	ldr	r3, [r7, #8]
 8075954:	015a      	lsls	r2, r3, #5
 8075956:	68fb      	ldr	r3, [r7, #12]
 8075958:	4413      	add	r3, r2
 807595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807595e:	681b      	ldr	r3, [r3, #0]
 8075960:	68ba      	ldr	r2, [r7, #8]
 8075962:	0151      	lsls	r1, r2, #5
 8075964:	68fa      	ldr	r2, [r7, #12]
 8075966:	440a      	add	r2, r1
 8075968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807596c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8075970:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8075972:	68bb      	ldr	r3, [r7, #8]
 8075974:	015a      	lsls	r2, r3, #5
 8075976:	68fb      	ldr	r3, [r7, #12]
 8075978:	4413      	add	r3, r2
 807597a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807597e:	681b      	ldr	r3, [r3, #0]
 8075980:	68ba      	ldr	r2, [r7, #8]
 8075982:	0151      	lsls	r1, r2, #5
 8075984:	68fa      	ldr	r2, [r7, #12]
 8075986:	440a      	add	r2, r1
 8075988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807598c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8075990:	6013      	str	r3, [r2, #0]
 8075992:	e02b      	b.n	80759ec <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8075994:	68bb      	ldr	r3, [r7, #8]
 8075996:	015a      	lsls	r2, r3, #5
 8075998:	68fb      	ldr	r3, [r7, #12]
 807599a:	4413      	add	r3, r2
 807599c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80759a0:	681b      	ldr	r3, [r3, #0]
 80759a2:	2b00      	cmp	r3, #0
 80759a4:	db12      	blt.n	80759cc <USB_EPSetStall+0xae>
 80759a6:	68bb      	ldr	r3, [r7, #8]
 80759a8:	2b00      	cmp	r3, #0
 80759aa:	d00f      	beq.n	80759cc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80759ac:	68bb      	ldr	r3, [r7, #8]
 80759ae:	015a      	lsls	r2, r3, #5
 80759b0:	68fb      	ldr	r3, [r7, #12]
 80759b2:	4413      	add	r3, r2
 80759b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80759b8:	681b      	ldr	r3, [r3, #0]
 80759ba:	68ba      	ldr	r2, [r7, #8]
 80759bc:	0151      	lsls	r1, r2, #5
 80759be:	68fa      	ldr	r2, [r7, #12]
 80759c0:	440a      	add	r2, r1
 80759c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80759c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80759ca:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80759cc:	68bb      	ldr	r3, [r7, #8]
 80759ce:	015a      	lsls	r2, r3, #5
 80759d0:	68fb      	ldr	r3, [r7, #12]
 80759d2:	4413      	add	r3, r2
 80759d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80759d8:	681b      	ldr	r3, [r3, #0]
 80759da:	68ba      	ldr	r2, [r7, #8]
 80759dc:	0151      	lsls	r1, r2, #5
 80759de:	68fa      	ldr	r2, [r7, #12]
 80759e0:	440a      	add	r2, r1
 80759e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80759e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80759ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80759ec:	2300      	movs	r3, #0
}
 80759ee:	4618      	mov	r0, r3
 80759f0:	3714      	adds	r7, #20
 80759f2:	46bd      	mov	sp, r7
 80759f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80759f8:	4770      	bx	lr

080759fa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80759fa:	b480      	push	{r7}
 80759fc:	b085      	sub	sp, #20
 80759fe:	af00      	add	r7, sp, #0
 8075a00:	6078      	str	r0, [r7, #4]
 8075a02:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075a04:	687b      	ldr	r3, [r7, #4]
 8075a06:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8075a08:	683b      	ldr	r3, [r7, #0]
 8075a0a:	781b      	ldrb	r3, [r3, #0]
 8075a0c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8075a0e:	683b      	ldr	r3, [r7, #0]
 8075a10:	785b      	ldrb	r3, [r3, #1]
 8075a12:	2b01      	cmp	r3, #1
 8075a14:	d128      	bne.n	8075a68 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8075a16:	68bb      	ldr	r3, [r7, #8]
 8075a18:	015a      	lsls	r2, r3, #5
 8075a1a:	68fb      	ldr	r3, [r7, #12]
 8075a1c:	4413      	add	r3, r2
 8075a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075a22:	681b      	ldr	r3, [r3, #0]
 8075a24:	68ba      	ldr	r2, [r7, #8]
 8075a26:	0151      	lsls	r1, r2, #5
 8075a28:	68fa      	ldr	r2, [r7, #12]
 8075a2a:	440a      	add	r2, r1
 8075a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075a30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8075a34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8075a36:	683b      	ldr	r3, [r7, #0]
 8075a38:	78db      	ldrb	r3, [r3, #3]
 8075a3a:	2b03      	cmp	r3, #3
 8075a3c:	d003      	beq.n	8075a46 <USB_EPClearStall+0x4c>
 8075a3e:	683b      	ldr	r3, [r7, #0]
 8075a40:	78db      	ldrb	r3, [r3, #3]
 8075a42:	2b02      	cmp	r3, #2
 8075a44:	d138      	bne.n	8075ab8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8075a46:	68bb      	ldr	r3, [r7, #8]
 8075a48:	015a      	lsls	r2, r3, #5
 8075a4a:	68fb      	ldr	r3, [r7, #12]
 8075a4c:	4413      	add	r3, r2
 8075a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075a52:	681b      	ldr	r3, [r3, #0]
 8075a54:	68ba      	ldr	r2, [r7, #8]
 8075a56:	0151      	lsls	r1, r2, #5
 8075a58:	68fa      	ldr	r2, [r7, #12]
 8075a5a:	440a      	add	r2, r1
 8075a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8075a64:	6013      	str	r3, [r2, #0]
 8075a66:	e027      	b.n	8075ab8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8075a68:	68bb      	ldr	r3, [r7, #8]
 8075a6a:	015a      	lsls	r2, r3, #5
 8075a6c:	68fb      	ldr	r3, [r7, #12]
 8075a6e:	4413      	add	r3, r2
 8075a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075a74:	681b      	ldr	r3, [r3, #0]
 8075a76:	68ba      	ldr	r2, [r7, #8]
 8075a78:	0151      	lsls	r1, r2, #5
 8075a7a:	68fa      	ldr	r2, [r7, #12]
 8075a7c:	440a      	add	r2, r1
 8075a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075a82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8075a86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8075a88:	683b      	ldr	r3, [r7, #0]
 8075a8a:	78db      	ldrb	r3, [r3, #3]
 8075a8c:	2b03      	cmp	r3, #3
 8075a8e:	d003      	beq.n	8075a98 <USB_EPClearStall+0x9e>
 8075a90:	683b      	ldr	r3, [r7, #0]
 8075a92:	78db      	ldrb	r3, [r3, #3]
 8075a94:	2b02      	cmp	r3, #2
 8075a96:	d10f      	bne.n	8075ab8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8075a98:	68bb      	ldr	r3, [r7, #8]
 8075a9a:	015a      	lsls	r2, r3, #5
 8075a9c:	68fb      	ldr	r3, [r7, #12]
 8075a9e:	4413      	add	r3, r2
 8075aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075aa4:	681b      	ldr	r3, [r3, #0]
 8075aa6:	68ba      	ldr	r2, [r7, #8]
 8075aa8:	0151      	lsls	r1, r2, #5
 8075aaa:	68fa      	ldr	r2, [r7, #12]
 8075aac:	440a      	add	r2, r1
 8075aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8075ab6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8075ab8:	2300      	movs	r3, #0
}
 8075aba:	4618      	mov	r0, r3
 8075abc:	3714      	adds	r7, #20
 8075abe:	46bd      	mov	sp, r7
 8075ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075ac4:	4770      	bx	lr

08075ac6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8075ac6:	b480      	push	{r7}
 8075ac8:	b085      	sub	sp, #20
 8075aca:	af00      	add	r7, sp, #0
 8075acc:	6078      	str	r0, [r7, #4]
 8075ace:	460b      	mov	r3, r1
 8075ad0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075ad2:	687b      	ldr	r3, [r7, #4]
 8075ad4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8075ad6:	68fb      	ldr	r3, [r7, #12]
 8075ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075adc:	681b      	ldr	r3, [r3, #0]
 8075ade:	68fa      	ldr	r2, [r7, #12]
 8075ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8075ae4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8075ae8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8075aea:	68fb      	ldr	r3, [r7, #12]
 8075aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075af0:	681a      	ldr	r2, [r3, #0]
 8075af2:	78fb      	ldrb	r3, [r7, #3]
 8075af4:	011b      	lsls	r3, r3, #4
 8075af6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8075afa:	68f9      	ldr	r1, [r7, #12]
 8075afc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8075b00:	4313      	orrs	r3, r2
 8075b02:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8075b04:	2300      	movs	r3, #0
}
 8075b06:	4618      	mov	r0, r3
 8075b08:	3714      	adds	r7, #20
 8075b0a:	46bd      	mov	sp, r7
 8075b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075b10:	4770      	bx	lr

08075b12 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8075b12:	b480      	push	{r7}
 8075b14:	b085      	sub	sp, #20
 8075b16:	af00      	add	r7, sp, #0
 8075b18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075b1a:	687b      	ldr	r3, [r7, #4]
 8075b1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8075b1e:	68fb      	ldr	r3, [r7, #12]
 8075b20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8075b24:	681b      	ldr	r3, [r3, #0]
 8075b26:	68fa      	ldr	r2, [r7, #12]
 8075b28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8075b2c:	f023 0303 	bic.w	r3, r3, #3
 8075b30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8075b32:	68fb      	ldr	r3, [r7, #12]
 8075b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075b38:	685b      	ldr	r3, [r3, #4]
 8075b3a:	68fa      	ldr	r2, [r7, #12]
 8075b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8075b40:	f023 0302 	bic.w	r3, r3, #2
 8075b44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8075b46:	2300      	movs	r3, #0
}
 8075b48:	4618      	mov	r0, r3
 8075b4a:	3714      	adds	r7, #20
 8075b4c:	46bd      	mov	sp, r7
 8075b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075b52:	4770      	bx	lr

08075b54 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8075b54:	b480      	push	{r7}
 8075b56:	b085      	sub	sp, #20
 8075b58:	af00      	add	r7, sp, #0
 8075b5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075b5c:	687b      	ldr	r3, [r7, #4]
 8075b5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8075b60:	68fb      	ldr	r3, [r7, #12]
 8075b62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8075b66:	681b      	ldr	r3, [r3, #0]
 8075b68:	68fa      	ldr	r2, [r7, #12]
 8075b6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8075b6e:	f023 0303 	bic.w	r3, r3, #3
 8075b72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8075b74:	68fb      	ldr	r3, [r7, #12]
 8075b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075b7a:	685b      	ldr	r3, [r3, #4]
 8075b7c:	68fa      	ldr	r2, [r7, #12]
 8075b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8075b82:	f043 0302 	orr.w	r3, r3, #2
 8075b86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8075b88:	2300      	movs	r3, #0
}
 8075b8a:	4618      	mov	r0, r3
 8075b8c:	3714      	adds	r7, #20
 8075b8e:	46bd      	mov	sp, r7
 8075b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075b94:	4770      	bx	lr

08075b96 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8075b96:	b480      	push	{r7}
 8075b98:	b085      	sub	sp, #20
 8075b9a:	af00      	add	r7, sp, #0
 8075b9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8075b9e:	687b      	ldr	r3, [r7, #4]
 8075ba0:	695b      	ldr	r3, [r3, #20]
 8075ba2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8075ba4:	687b      	ldr	r3, [r7, #4]
 8075ba6:	699b      	ldr	r3, [r3, #24]
 8075ba8:	68fa      	ldr	r2, [r7, #12]
 8075baa:	4013      	ands	r3, r2
 8075bac:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8075bae:	68fb      	ldr	r3, [r7, #12]
}
 8075bb0:	4618      	mov	r0, r3
 8075bb2:	3714      	adds	r7, #20
 8075bb4:	46bd      	mov	sp, r7
 8075bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075bba:	4770      	bx	lr

08075bbc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8075bbc:	b480      	push	{r7}
 8075bbe:	b085      	sub	sp, #20
 8075bc0:	af00      	add	r7, sp, #0
 8075bc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075bc4:	687b      	ldr	r3, [r7, #4]
 8075bc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8075bc8:	68fb      	ldr	r3, [r7, #12]
 8075bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075bce:	699b      	ldr	r3, [r3, #24]
 8075bd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8075bd2:	68fb      	ldr	r3, [r7, #12]
 8075bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075bd8:	69db      	ldr	r3, [r3, #28]
 8075bda:	68ba      	ldr	r2, [r7, #8]
 8075bdc:	4013      	ands	r3, r2
 8075bde:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8075be0:	68bb      	ldr	r3, [r7, #8]
 8075be2:	0c1b      	lsrs	r3, r3, #16
}
 8075be4:	4618      	mov	r0, r3
 8075be6:	3714      	adds	r7, #20
 8075be8:	46bd      	mov	sp, r7
 8075bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075bee:	4770      	bx	lr

08075bf0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8075bf0:	b480      	push	{r7}
 8075bf2:	b085      	sub	sp, #20
 8075bf4:	af00      	add	r7, sp, #0
 8075bf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075bf8:	687b      	ldr	r3, [r7, #4]
 8075bfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8075bfc:	68fb      	ldr	r3, [r7, #12]
 8075bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075c02:	699b      	ldr	r3, [r3, #24]
 8075c04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8075c06:	68fb      	ldr	r3, [r7, #12]
 8075c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075c0c:	69db      	ldr	r3, [r3, #28]
 8075c0e:	68ba      	ldr	r2, [r7, #8]
 8075c10:	4013      	ands	r3, r2
 8075c12:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8075c14:	68bb      	ldr	r3, [r7, #8]
 8075c16:	b29b      	uxth	r3, r3
}
 8075c18:	4618      	mov	r0, r3
 8075c1a:	3714      	adds	r7, #20
 8075c1c:	46bd      	mov	sp, r7
 8075c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075c22:	4770      	bx	lr

08075c24 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8075c24:	b480      	push	{r7}
 8075c26:	b085      	sub	sp, #20
 8075c28:	af00      	add	r7, sp, #0
 8075c2a:	6078      	str	r0, [r7, #4]
 8075c2c:	460b      	mov	r3, r1
 8075c2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075c30:	687b      	ldr	r3, [r7, #4]
 8075c32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8075c34:	78fb      	ldrb	r3, [r7, #3]
 8075c36:	015a      	lsls	r2, r3, #5
 8075c38:	68fb      	ldr	r3, [r7, #12]
 8075c3a:	4413      	add	r3, r2
 8075c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075c40:	689b      	ldr	r3, [r3, #8]
 8075c42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8075c44:	68fb      	ldr	r3, [r7, #12]
 8075c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075c4a:	695b      	ldr	r3, [r3, #20]
 8075c4c:	68ba      	ldr	r2, [r7, #8]
 8075c4e:	4013      	ands	r3, r2
 8075c50:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8075c52:	68bb      	ldr	r3, [r7, #8]
}
 8075c54:	4618      	mov	r0, r3
 8075c56:	3714      	adds	r7, #20
 8075c58:	46bd      	mov	sp, r7
 8075c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075c5e:	4770      	bx	lr

08075c60 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8075c60:	b480      	push	{r7}
 8075c62:	b087      	sub	sp, #28
 8075c64:	af00      	add	r7, sp, #0
 8075c66:	6078      	str	r0, [r7, #4]
 8075c68:	460b      	mov	r3, r1
 8075c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075c6c:	687b      	ldr	r3, [r7, #4]
 8075c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8075c70:	697b      	ldr	r3, [r7, #20]
 8075c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075c76:	691b      	ldr	r3, [r3, #16]
 8075c78:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8075c7a:	697b      	ldr	r3, [r7, #20]
 8075c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8075c82:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8075c84:	78fb      	ldrb	r3, [r7, #3]
 8075c86:	f003 030f 	and.w	r3, r3, #15
 8075c8a:	68fa      	ldr	r2, [r7, #12]
 8075c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8075c90:	01db      	lsls	r3, r3, #7
 8075c92:	b2db      	uxtb	r3, r3
 8075c94:	693a      	ldr	r2, [r7, #16]
 8075c96:	4313      	orrs	r3, r2
 8075c98:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8075c9a:	78fb      	ldrb	r3, [r7, #3]
 8075c9c:	015a      	lsls	r2, r3, #5
 8075c9e:	697b      	ldr	r3, [r7, #20]
 8075ca0:	4413      	add	r3, r2
 8075ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075ca6:	689b      	ldr	r3, [r3, #8]
 8075ca8:	693a      	ldr	r2, [r7, #16]
 8075caa:	4013      	ands	r3, r2
 8075cac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8075cae:	68bb      	ldr	r3, [r7, #8]
}
 8075cb0:	4618      	mov	r0, r3
 8075cb2:	371c      	adds	r7, #28
 8075cb4:	46bd      	mov	sp, r7
 8075cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075cba:	4770      	bx	lr

08075cbc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8075cbc:	b480      	push	{r7}
 8075cbe:	b083      	sub	sp, #12
 8075cc0:	af00      	add	r7, sp, #0
 8075cc2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8075cc4:	687b      	ldr	r3, [r7, #4]
 8075cc6:	695b      	ldr	r3, [r3, #20]
 8075cc8:	f003 0301 	and.w	r3, r3, #1
}
 8075ccc:	4618      	mov	r0, r3
 8075cce:	370c      	adds	r7, #12
 8075cd0:	46bd      	mov	sp, r7
 8075cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075cd6:	4770      	bx	lr

08075cd8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8075cd8:	b480      	push	{r7}
 8075cda:	b085      	sub	sp, #20
 8075cdc:	af00      	add	r7, sp, #0
 8075cde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075ce0:	687b      	ldr	r3, [r7, #4]
 8075ce2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8075ce4:	68fb      	ldr	r3, [r7, #12]
 8075ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075cea:	681b      	ldr	r3, [r3, #0]
 8075cec:	68fa      	ldr	r2, [r7, #12]
 8075cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075cf2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8075cf6:	f023 0307 	bic.w	r3, r3, #7
 8075cfa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8075cfc:	68fb      	ldr	r3, [r7, #12]
 8075cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075d02:	685b      	ldr	r3, [r3, #4]
 8075d04:	68fa      	ldr	r2, [r7, #12]
 8075d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8075d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8075d0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8075d10:	2300      	movs	r3, #0
}
 8075d12:	4618      	mov	r0, r3
 8075d14:	3714      	adds	r7, #20
 8075d16:	46bd      	mov	sp, r7
 8075d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075d1c:	4770      	bx	lr
	...

08075d20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8075d20:	b480      	push	{r7}
 8075d22:	b087      	sub	sp, #28
 8075d24:	af00      	add	r7, sp, #0
 8075d26:	60f8      	str	r0, [r7, #12]
 8075d28:	460b      	mov	r3, r1
 8075d2a:	607a      	str	r2, [r7, #4]
 8075d2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075d2e:	68fb      	ldr	r3, [r7, #12]
 8075d30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8075d32:	68fb      	ldr	r3, [r7, #12]
 8075d34:	333c      	adds	r3, #60	; 0x3c
 8075d36:	3304      	adds	r3, #4
 8075d38:	681b      	ldr	r3, [r3, #0]
 8075d3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8075d3c:	693b      	ldr	r3, [r7, #16]
 8075d3e:	4a26      	ldr	r2, [pc, #152]	; (8075dd8 <USB_EP0_OutStart+0xb8>)
 8075d40:	4293      	cmp	r3, r2
 8075d42:	d90a      	bls.n	8075d5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8075d44:	697b      	ldr	r3, [r7, #20]
 8075d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075d4a:	681b      	ldr	r3, [r3, #0]
 8075d4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8075d50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8075d54:	d101      	bne.n	8075d5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8075d56:	2300      	movs	r3, #0
 8075d58:	e037      	b.n	8075dca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8075d5a:	697b      	ldr	r3, [r7, #20]
 8075d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075d60:	461a      	mov	r2, r3
 8075d62:	2300      	movs	r3, #0
 8075d64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8075d66:	697b      	ldr	r3, [r7, #20]
 8075d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075d6c:	691b      	ldr	r3, [r3, #16]
 8075d6e:	697a      	ldr	r2, [r7, #20]
 8075d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075d74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8075d78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8075d7a:	697b      	ldr	r3, [r7, #20]
 8075d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075d80:	691b      	ldr	r3, [r3, #16]
 8075d82:	697a      	ldr	r2, [r7, #20]
 8075d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075d88:	f043 0318 	orr.w	r3, r3, #24
 8075d8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8075d8e:	697b      	ldr	r3, [r7, #20]
 8075d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075d94:	691b      	ldr	r3, [r3, #16]
 8075d96:	697a      	ldr	r2, [r7, #20]
 8075d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075d9c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8075da0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8075da2:	7afb      	ldrb	r3, [r7, #11]
 8075da4:	2b01      	cmp	r3, #1
 8075da6:	d10f      	bne.n	8075dc8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8075da8:	697b      	ldr	r3, [r7, #20]
 8075daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075dae:	461a      	mov	r2, r3
 8075db0:	687b      	ldr	r3, [r7, #4]
 8075db2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8075db4:	697b      	ldr	r3, [r7, #20]
 8075db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075dba:	681b      	ldr	r3, [r3, #0]
 8075dbc:	697a      	ldr	r2, [r7, #20]
 8075dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075dc2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8075dc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8075dc8:	2300      	movs	r3, #0
}
 8075dca:	4618      	mov	r0, r3
 8075dcc:	371c      	adds	r7, #28
 8075dce:	46bd      	mov	sp, r7
 8075dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075dd4:	4770      	bx	lr
 8075dd6:	bf00      	nop
 8075dd8:	4f54300a 	.word	0x4f54300a

08075ddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8075ddc:	b480      	push	{r7}
 8075dde:	b085      	sub	sp, #20
 8075de0:	af00      	add	r7, sp, #0
 8075de2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8075de4:	2300      	movs	r3, #0
 8075de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8075de8:	68fb      	ldr	r3, [r7, #12]
 8075dea:	3301      	adds	r3, #1
 8075dec:	60fb      	str	r3, [r7, #12]
 8075dee:	68fb      	ldr	r3, [r7, #12]
 8075df0:	4a13      	ldr	r2, [pc, #76]	; (8075e40 <USB_CoreReset+0x64>)
 8075df2:	4293      	cmp	r3, r2
 8075df4:	d901      	bls.n	8075dfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8075df6:	2303      	movs	r3, #3
 8075df8:	e01b      	b.n	8075e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8075dfa:	687b      	ldr	r3, [r7, #4]
 8075dfc:	691b      	ldr	r3, [r3, #16]
 8075dfe:	2b00      	cmp	r3, #0
 8075e00:	daf2      	bge.n	8075de8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8075e02:	2300      	movs	r3, #0
 8075e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8075e06:	687b      	ldr	r3, [r7, #4]
 8075e08:	691b      	ldr	r3, [r3, #16]
 8075e0a:	f043 0201 	orr.w	r2, r3, #1
 8075e0e:	687b      	ldr	r3, [r7, #4]
 8075e10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8075e12:	68fb      	ldr	r3, [r7, #12]
 8075e14:	3301      	adds	r3, #1
 8075e16:	60fb      	str	r3, [r7, #12]
 8075e18:	68fb      	ldr	r3, [r7, #12]
 8075e1a:	4a09      	ldr	r2, [pc, #36]	; (8075e40 <USB_CoreReset+0x64>)
 8075e1c:	4293      	cmp	r3, r2
 8075e1e:	d901      	bls.n	8075e24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8075e20:	2303      	movs	r3, #3
 8075e22:	e006      	b.n	8075e32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8075e24:	687b      	ldr	r3, [r7, #4]
 8075e26:	691b      	ldr	r3, [r3, #16]
 8075e28:	f003 0301 	and.w	r3, r3, #1
 8075e2c:	2b01      	cmp	r3, #1
 8075e2e:	d0f0      	beq.n	8075e12 <USB_CoreReset+0x36>

  return HAL_OK;
 8075e30:	2300      	movs	r3, #0
}
 8075e32:	4618      	mov	r0, r3
 8075e34:	3714      	adds	r7, #20
 8075e36:	46bd      	mov	sp, r7
 8075e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075e3c:	4770      	bx	lr
 8075e3e:	bf00      	nop
 8075e40:	00030d40 	.word	0x00030d40

08075e44 <__NVIC_SystemReset>:
{
 8075e44:	b480      	push	{r7}
 8075e46:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8075e48:	f3bf 8f4f 	dsb	sy
}
 8075e4c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8075e4e:	4b06      	ldr	r3, [pc, #24]	; (8075e68 <__NVIC_SystemReset+0x24>)
 8075e50:	68db      	ldr	r3, [r3, #12]
 8075e52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8075e56:	4904      	ldr	r1, [pc, #16]	; (8075e68 <__NVIC_SystemReset+0x24>)
 8075e58:	4b04      	ldr	r3, [pc, #16]	; (8075e6c <__NVIC_SystemReset+0x28>)
 8075e5a:	4313      	orrs	r3, r2
 8075e5c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8075e5e:	f3bf 8f4f 	dsb	sy
}
 8075e62:	bf00      	nop
    __NOP();
 8075e64:	bf00      	nop
 8075e66:	e7fd      	b.n	8075e64 <__NVIC_SystemReset+0x20>
 8075e68:	e000ed00 	.word	0xe000ed00
 8075e6c:	05fa0004 	.word	0x05fa0004

08075e70 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8075e70:	b580      	push	{r7, lr}
 8075e72:	b084      	sub	sp, #16
 8075e74:	af00      	add	r7, sp, #0
 8075e76:	6078      	str	r0, [r7, #4]
 8075e78:	460b      	mov	r3, r1
 8075e7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8075e7c:	f240 401c 	movw	r0, #1052	; 0x41c
 8075e80:	f002 fc00 	bl	8078684 <USBD_static_malloc>
 8075e84:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8075e86:	68fb      	ldr	r3, [r7, #12]
 8075e88:	2b00      	cmp	r3, #0
 8075e8a:	d105      	bne.n	8075e98 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8075e8c:	687b      	ldr	r3, [r7, #4]
 8075e8e:	2200      	movs	r2, #0
 8075e90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8075e94:	2302      	movs	r3, #2
 8075e96:	e03f      	b.n	8075f18 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8075e98:	687b      	ldr	r3, [r7, #4]
 8075e9a:	68fa      	ldr	r2, [r7, #12]
 8075e9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 8075ea0:	68fb      	ldr	r3, [r7, #12]
 8075ea2:	2200      	movs	r2, #0
 8075ea4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8075ea8:	68fb      	ldr	r3, [r7, #12]
 8075eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8075eae:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 8075eb2:	68fb      	ldr	r3, [r7, #12]
 8075eb4:	2200      	movs	r2, #0
 8075eb6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8075eba:	68fb      	ldr	r3, [r7, #12]
 8075ebc:	2200      	movs	r2, #0
 8075ebe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8075ec2:	68fb      	ldr	r3, [r7, #12]
 8075ec4:	2200      	movs	r2, #0
 8075ec6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8075eca:	68fb      	ldr	r3, [r7, #12]
 8075ecc:	2202      	movs	r2, #2
 8075ece:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8075ed2:	68fb      	ldr	r3, [r7, #12]
 8075ed4:	2200      	movs	r2, #0
 8075ed6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8075eda:	68fb      	ldr	r3, [r7, #12]
 8075edc:	2200      	movs	r2, #0
 8075ede:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8075ee2:	68fb      	ldr	r3, [r7, #12]
 8075ee4:	2200      	movs	r2, #0
 8075ee6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8075eea:	68fb      	ldr	r3, [r7, #12]
 8075eec:	2200      	movs	r2, #0
 8075eee:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8075ef2:	68fb      	ldr	r3, [r7, #12]
 8075ef4:	2202      	movs	r2, #2
 8075ef6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 8075efa:	68fb      	ldr	r3, [r7, #12]
 8075efc:	2200      	movs	r2, #0
 8075efe:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8075f02:	687b      	ldr	r3, [r7, #4]
 8075f04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8075f08:	685b      	ldr	r3, [r3, #4]
 8075f0a:	4798      	blx	r3
 8075f0c:	4603      	mov	r3, r0
 8075f0e:	2b00      	cmp	r3, #0
 8075f10:	d001      	beq.n	8075f16 <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8075f12:	2303      	movs	r3, #3
 8075f14:	e000      	b.n	8075f18 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8075f16:	2300      	movs	r3, #0
}
 8075f18:	4618      	mov	r0, r3
 8075f1a:	3710      	adds	r7, #16
 8075f1c:	46bd      	mov	sp, r7
 8075f1e:	bd80      	pop	{r7, pc}

08075f20 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8075f20:	b580      	push	{r7, lr}
 8075f22:	b084      	sub	sp, #16
 8075f24:	af00      	add	r7, sp, #0
 8075f26:	6078      	str	r0, [r7, #4]
 8075f28:	460b      	mov	r3, r1
 8075f2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8075f2c:	687b      	ldr	r3, [r7, #4]
 8075f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8075f32:	2b00      	cmp	r3, #0
 8075f34:	d101      	bne.n	8075f3a <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8075f36:	2302      	movs	r3, #2
 8075f38:	e027      	b.n	8075f8a <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8075f3a:	687b      	ldr	r3, [r7, #4]
 8075f3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8075f40:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8075f42:	68fb      	ldr	r3, [r7, #12]
 8075f44:	2200      	movs	r2, #0
 8075f46:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8075f4a:	68fb      	ldr	r3, [r7, #12]
 8075f4c:	2200      	movs	r2, #0
 8075f4e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8075f52:	68fb      	ldr	r3, [r7, #12]
 8075f54:	2202      	movs	r2, #2
 8075f56:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8075f5a:	68fb      	ldr	r3, [r7, #12]
 8075f5c:	2200      	movs	r2, #0
 8075f5e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8075f62:	68fb      	ldr	r3, [r7, #12]
 8075f64:	2202      	movs	r2, #2
 8075f66:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8075f6a:	687b      	ldr	r3, [r7, #4]
 8075f6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8075f70:	689b      	ldr	r3, [r3, #8]
 8075f72:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8075f74:	687b      	ldr	r3, [r7, #4]
 8075f76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8075f7a:	4618      	mov	r0, r3
 8075f7c:	f002 fb90 	bl	80786a0 <USBD_static_free>
  pdev->pClassData = NULL;
 8075f80:	687b      	ldr	r3, [r7, #4]
 8075f82:	2200      	movs	r2, #0
 8075f84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8075f88:	2300      	movs	r3, #0
}
 8075f8a:	4618      	mov	r0, r3
 8075f8c:	3710      	adds	r7, #16
 8075f8e:	46bd      	mov	sp, r7
 8075f90:	bd80      	pop	{r7, pc}
	...

08075f94 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8075f94:	b580      	push	{r7, lr}
 8075f96:	b088      	sub	sp, #32
 8075f98:	af00      	add	r7, sp, #0
 8075f9a:	6078      	str	r0, [r7, #4]
 8075f9c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8075f9e:	687b      	ldr	r3, [r7, #4]
 8075fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8075fa4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8075fa6:	2300      	movs	r3, #0
 8075fa8:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8075faa:	2300      	movs	r3, #0
 8075fac:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8075fae:	2300      	movs	r3, #0
 8075fb0:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8075fb2:	2300      	movs	r3, #0
 8075fb4:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8075fb6:	693b      	ldr	r3, [r7, #16]
 8075fb8:	2b00      	cmp	r3, #0
 8075fba:	d101      	bne.n	8075fc0 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8075fbc:	2303      	movs	r3, #3
 8075fbe:	e0d5      	b.n	807616c <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8075fc0:	683b      	ldr	r3, [r7, #0]
 8075fc2:	781b      	ldrb	r3, [r3, #0]
 8075fc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8075fc8:	2b00      	cmp	r3, #0
 8075fca:	d03e      	beq.n	807604a <USBD_DFU_Setup+0xb6>
 8075fcc:	2b20      	cmp	r3, #32
 8075fce:	f040 80c5 	bne.w	807615c <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8075fd2:	683b      	ldr	r3, [r7, #0]
 8075fd4:	785b      	ldrb	r3, [r3, #1]
 8075fd6:	2b06      	cmp	r3, #6
 8075fd8:	d82f      	bhi.n	807603a <USBD_DFU_Setup+0xa6>
 8075fda:	a201      	add	r2, pc, #4	; (adr r2, 8075fe0 <USBD_DFU_Setup+0x4c>)
 8075fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8075fe0:	08076031 	.word	0x08076031
 8075fe4:	08075ffd 	.word	0x08075ffd
 8075fe8:	08076007 	.word	0x08076007
 8075fec:	08076011 	.word	0x08076011
 8075ff0:	08076019 	.word	0x08076019
 8075ff4:	08076021 	.word	0x08076021
 8075ff8:	08076029 	.word	0x08076029
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8075ffc:	6839      	ldr	r1, [r7, #0]
 8075ffe:	6878      	ldr	r0, [r7, #4]
 8076000:	f000 fa6c 	bl	80764dc <DFU_Download>
          break;
 8076004:	e020      	b.n	8076048 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8076006:	6839      	ldr	r1, [r7, #0]
 8076008:	6878      	ldr	r0, [r7, #4]
 807600a:	f000 fad3 	bl	80765b4 <DFU_Upload>
          break;
 807600e:	e01b      	b.n	8076048 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8076010:	6878      	ldr	r0, [r7, #4]
 8076012:	f000 fba9 	bl	8076768 <DFU_GetStatus>
          break;
 8076016:	e017      	b.n	8076048 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8076018:	6878      	ldr	r0, [r7, #4]
 807601a:	f000 fc5b 	bl	80768d4 <DFU_ClearStatus>
          break;
 807601e:	e013      	b.n	8076048 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8076020:	6878      	ldr	r0, [r7, #4]
 8076022:	f000 fcab 	bl	807697c <DFU_GetState>
          break;
 8076026:	e00f      	b.n	8076048 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8076028:	6878      	ldr	r0, [r7, #4]
 807602a:	f000 fcbf 	bl	80769ac <DFU_Abort>
          break;
 807602e:	e00b      	b.n	8076048 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8076030:	6839      	ldr	r1, [r7, #0]
 8076032:	6878      	ldr	r0, [r7, #4]
 8076034:	f000 f9ee 	bl	8076414 <DFU_Detach>
          break;
 8076038:	e006      	b.n	8076048 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 807603a:	6839      	ldr	r1, [r7, #0]
 807603c:	6878      	ldr	r0, [r7, #4]
 807603e:	f001 fdf9 	bl	8077c34 <USBD_CtlError>
          ret = USBD_FAIL;
 8076042:	2303      	movs	r3, #3
 8076044:	77fb      	strb	r3, [r7, #31]
          break;
 8076046:	bf00      	nop
      }
      break;
 8076048:	e08f      	b.n	807616a <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 807604a:	683b      	ldr	r3, [r7, #0]
 807604c:	785b      	ldrb	r3, [r3, #1]
 807604e:	2b0b      	cmp	r3, #11
 8076050:	d87b      	bhi.n	807614a <USBD_DFU_Setup+0x1b6>
 8076052:	a201      	add	r2, pc, #4	; (adr r2, 8076058 <USBD_DFU_Setup+0xc4>)
 8076054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8076058:	08076089 	.word	0x08076089
 807605c:	08076159 	.word	0x08076159
 8076060:	0807614b 	.word	0x0807614b
 8076064:	0807614b 	.word	0x0807614b
 8076068:	0807614b 	.word	0x0807614b
 807606c:	0807614b 	.word	0x0807614b
 8076070:	080760b3 	.word	0x080760b3
 8076074:	0807614b 	.word	0x0807614b
 8076078:	0807614b 	.word	0x0807614b
 807607c:	0807614b 	.word	0x0807614b
 8076080:	080760dd 	.word	0x080760dd
 8076084:	08076109 	.word	0x08076109
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8076088:	687b      	ldr	r3, [r7, #4]
 807608a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807608e:	b2db      	uxtb	r3, r3
 8076090:	2b03      	cmp	r3, #3
 8076092:	d107      	bne.n	80760a4 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8076094:	f107 030e 	add.w	r3, r7, #14
 8076098:	2202      	movs	r2, #2
 807609a:	4619      	mov	r1, r3
 807609c:	6878      	ldr	r0, [r7, #4]
 807609e:	f001 fe3a 	bl	8077d16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80760a2:	e05a      	b.n	807615a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80760a4:	6839      	ldr	r1, [r7, #0]
 80760a6:	6878      	ldr	r0, [r7, #4]
 80760a8:	f001 fdc4 	bl	8077c34 <USBD_CtlError>
            ret = USBD_FAIL;
 80760ac:	2303      	movs	r3, #3
 80760ae:	77fb      	strb	r3, [r7, #31]
          break;
 80760b0:	e053      	b.n	807615a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 80760b2:	683b      	ldr	r3, [r7, #0]
 80760b4:	885b      	ldrh	r3, [r3, #2]
 80760b6:	0a1b      	lsrs	r3, r3, #8
 80760b8:	b29b      	uxth	r3, r3
 80760ba:	2b21      	cmp	r3, #33	; 0x21
 80760bc:	d107      	bne.n	80760ce <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 80760be:	4b2d      	ldr	r3, [pc, #180]	; (8076174 <USBD_DFU_Setup+0x1e0>)
 80760c0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 80760c2:	683b      	ldr	r3, [r7, #0]
 80760c4:	88db      	ldrh	r3, [r3, #6]
 80760c6:	2b09      	cmp	r3, #9
 80760c8:	bf28      	it	cs
 80760ca:	2309      	movcs	r3, #9
 80760cc:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80760ce:	8afb      	ldrh	r3, [r7, #22]
 80760d0:	461a      	mov	r2, r3
 80760d2:	69b9      	ldr	r1, [r7, #24]
 80760d4:	6878      	ldr	r0, [r7, #4]
 80760d6:	f001 fe1e 	bl	8077d16 <USBD_CtlSendData>
          break;
 80760da:	e03e      	b.n	807615a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80760dc:	687b      	ldr	r3, [r7, #4]
 80760de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80760e2:	b2db      	uxtb	r3, r3
 80760e4:	2b03      	cmp	r3, #3
 80760e6:	d108      	bne.n	80760fa <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80760e8:	693b      	ldr	r3, [r7, #16]
 80760ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80760ee:	2201      	movs	r2, #1
 80760f0:	4619      	mov	r1, r3
 80760f2:	6878      	ldr	r0, [r7, #4]
 80760f4:	f001 fe0f 	bl	8077d16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80760f8:	e02f      	b.n	807615a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80760fa:	6839      	ldr	r1, [r7, #0]
 80760fc:	6878      	ldr	r0, [r7, #4]
 80760fe:	f001 fd99 	bl	8077c34 <USBD_CtlError>
            ret = USBD_FAIL;
 8076102:	2303      	movs	r3, #3
 8076104:	77fb      	strb	r3, [r7, #31]
          break;
 8076106:	e028      	b.n	807615a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8076108:	683b      	ldr	r3, [r7, #0]
 807610a:	885b      	ldrh	r3, [r3, #2]
 807610c:	b2db      	uxtb	r3, r3
 807610e:	2b00      	cmp	r3, #0
 8076110:	d114      	bne.n	807613c <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8076112:	687b      	ldr	r3, [r7, #4]
 8076114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076118:	b2db      	uxtb	r3, r3
 807611a:	2b03      	cmp	r3, #3
 807611c:	d107      	bne.n	807612e <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 807611e:	683b      	ldr	r3, [r7, #0]
 8076120:	885b      	ldrh	r3, [r3, #2]
 8076122:	b2db      	uxtb	r3, r3
 8076124:	461a      	mov	r2, r3
 8076126:	693b      	ldr	r3, [r7, #16]
 8076128:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 807612c:	e015      	b.n	807615a <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 807612e:	6839      	ldr	r1, [r7, #0]
 8076130:	6878      	ldr	r0, [r7, #4]
 8076132:	f001 fd7f 	bl	8077c34 <USBD_CtlError>
              ret = USBD_FAIL;
 8076136:	2303      	movs	r3, #3
 8076138:	77fb      	strb	r3, [r7, #31]
          break;
 807613a:	e00e      	b.n	807615a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 807613c:	6839      	ldr	r1, [r7, #0]
 807613e:	6878      	ldr	r0, [r7, #4]
 8076140:	f001 fd78 	bl	8077c34 <USBD_CtlError>
            ret = USBD_FAIL;
 8076144:	2303      	movs	r3, #3
 8076146:	77fb      	strb	r3, [r7, #31]
          break;
 8076148:	e007      	b.n	807615a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 807614a:	6839      	ldr	r1, [r7, #0]
 807614c:	6878      	ldr	r0, [r7, #4]
 807614e:	f001 fd71 	bl	8077c34 <USBD_CtlError>
          ret = USBD_FAIL;
 8076152:	2303      	movs	r3, #3
 8076154:	77fb      	strb	r3, [r7, #31]
          break;
 8076156:	e000      	b.n	807615a <USBD_DFU_Setup+0x1c6>
          break;
 8076158:	bf00      	nop
      }
      break;
 807615a:	e006      	b.n	807616a <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 807615c:	6839      	ldr	r1, [r7, #0]
 807615e:	6878      	ldr	r0, [r7, #4]
 8076160:	f001 fd68 	bl	8077c34 <USBD_CtlError>
      ret = USBD_FAIL;
 8076164:	2303      	movs	r3, #3
 8076166:	77fb      	strb	r3, [r7, #31]
      break;
 8076168:	bf00      	nop
  }

  return (uint8_t)ret;
 807616a:	7ffb      	ldrb	r3, [r7, #31]
}
 807616c:	4618      	mov	r0, r3
 807616e:	3720      	adds	r7, #32
 8076170:	46bd      	mov	sp, r7
 8076172:	bd80      	pop	{r7, pc}
 8076174:	2000005a 	.word	0x2000005a

08076178 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8076178:	b480      	push	{r7}
 807617a:	b083      	sub	sp, #12
 807617c:	af00      	add	r7, sp, #0
 807617e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8076180:	687b      	ldr	r3, [r7, #4]
 8076182:	221b      	movs	r2, #27
 8076184:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8076186:	4b03      	ldr	r3, [pc, #12]	; (8076194 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8076188:	4618      	mov	r0, r3
 807618a:	370c      	adds	r7, #12
 807618c:	46bd      	mov	sp, r7
 807618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8076192:	4770      	bx	lr
 8076194:	20000048 	.word	0x20000048

08076198 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8076198:	b480      	push	{r7}
 807619a:	b083      	sub	sp, #12
 807619c:	af00      	add	r7, sp, #0
 807619e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80761a0:	2300      	movs	r3, #0
}
 80761a2:	4618      	mov	r0, r3
 80761a4:	370c      	adds	r7, #12
 80761a6:	46bd      	mov	sp, r7
 80761a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80761ac:	4770      	bx	lr

080761ae <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80761ae:	b580      	push	{r7, lr}
 80761b0:	b088      	sub	sp, #32
 80761b2:	af00      	add	r7, sp, #0
 80761b4:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80761b6:	687b      	ldr	r3, [r7, #4]
 80761b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80761bc:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80761be:	687b      	ldr	r3, [r7, #4]
 80761c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80761c4:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 80761c6:	69fb      	ldr	r3, [r7, #28]
 80761c8:	2b00      	cmp	r3, #0
 80761ca:	d101      	bne.n	80761d0 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80761cc:	2303      	movs	r3, #3
 80761ce:	e0ce      	b.n	807636e <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80761d0:	69fb      	ldr	r3, [r7, #28]
 80761d2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80761d6:	2b04      	cmp	r3, #4
 80761d8:	f040 80bd 	bne.w	8076356 <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 80761dc:	69fb      	ldr	r3, [r7, #28]
 80761de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80761e2:	2b00      	cmp	r3, #0
 80761e4:	d17c      	bne.n	80762e0 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 80761e6:	69fb      	ldr	r3, [r7, #28]
 80761e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80761ec:	2b01      	cmp	r3, #1
 80761ee:	f000 8093 	beq.w	8076318 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 80761f2:	69fb      	ldr	r3, [r7, #28]
 80761f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80761f8:	2b05      	cmp	r3, #5
 80761fa:	d15e      	bne.n	80762ba <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80761fc:	69fb      	ldr	r3, [r7, #28]
 80761fe:	781b      	ldrb	r3, [r3, #0]
 8076200:	2b21      	cmp	r3, #33	; 0x21
 8076202:	d124      	bne.n	807624e <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8076204:	69fb      	ldr	r3, [r7, #28]
 8076206:	785b      	ldrb	r3, [r3, #1]
 8076208:	461a      	mov	r2, r3
 807620a:	69fb      	ldr	r3, [r7, #28]
 807620c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8076210:	69fb      	ldr	r3, [r7, #28]
 8076212:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8076216:	69fb      	ldr	r3, [r7, #28]
 8076218:	789b      	ldrb	r3, [r3, #2]
 807621a:	021b      	lsls	r3, r3, #8
 807621c:	441a      	add	r2, r3
 807621e:	69fb      	ldr	r3, [r7, #28]
 8076220:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8076224:	69fb      	ldr	r3, [r7, #28]
 8076226:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807622a:	69fb      	ldr	r3, [r7, #28]
 807622c:	78db      	ldrb	r3, [r3, #3]
 807622e:	041b      	lsls	r3, r3, #16
 8076230:	441a      	add	r2, r3
 8076232:	69fb      	ldr	r3, [r7, #28]
 8076234:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8076238:	69fb      	ldr	r3, [r7, #28]
 807623a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807623e:	69fb      	ldr	r3, [r7, #28]
 8076240:	791b      	ldrb	r3, [r3, #4]
 8076242:	061b      	lsls	r3, r3, #24
 8076244:	441a      	add	r2, r3
 8076246:	69fb      	ldr	r3, [r7, #28]
 8076248:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 807624c:	e064      	b.n	8076318 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 807624e:	69fb      	ldr	r3, [r7, #28]
 8076250:	781b      	ldrb	r3, [r3, #0]
 8076252:	2b41      	cmp	r3, #65	; 0x41
 8076254:	d12f      	bne.n	80762b6 <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8076256:	69fb      	ldr	r3, [r7, #28]
 8076258:	785b      	ldrb	r3, [r3, #1]
 807625a:	461a      	mov	r2, r3
 807625c:	69fb      	ldr	r3, [r7, #28]
 807625e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8076262:	69fb      	ldr	r3, [r7, #28]
 8076264:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8076268:	69fb      	ldr	r3, [r7, #28]
 807626a:	789b      	ldrb	r3, [r3, #2]
 807626c:	021b      	lsls	r3, r3, #8
 807626e:	441a      	add	r2, r3
 8076270:	69fb      	ldr	r3, [r7, #28]
 8076272:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8076276:	69fb      	ldr	r3, [r7, #28]
 8076278:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807627c:	69fb      	ldr	r3, [r7, #28]
 807627e:	78db      	ldrb	r3, [r3, #3]
 8076280:	041b      	lsls	r3, r3, #16
 8076282:	441a      	add	r2, r3
 8076284:	69fb      	ldr	r3, [r7, #28]
 8076286:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 807628a:	69fb      	ldr	r3, [r7, #28]
 807628c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8076290:	69fb      	ldr	r3, [r7, #28]
 8076292:	791b      	ldrb	r3, [r3, #4]
 8076294:	061b      	lsls	r3, r3, #24
 8076296:	441a      	add	r2, r3
 8076298:	69fb      	ldr	r3, [r7, #28]
 807629a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 807629e:	69bb      	ldr	r3, [r7, #24]
 80762a0:	68db      	ldr	r3, [r3, #12]
 80762a2:	69fa      	ldr	r2, [r7, #28]
 80762a4:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 80762a8:	4610      	mov	r0, r2
 80762aa:	4798      	blx	r3
 80762ac:	4603      	mov	r3, r0
 80762ae:	2b00      	cmp	r3, #0
 80762b0:	d032      	beq.n	8076318 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 80762b2:	2303      	movs	r3, #3
 80762b4:	e05b      	b.n	807636e <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 80762b6:	2303      	movs	r3, #3
 80762b8:	e059      	b.n	807636e <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 80762ba:	69fb      	ldr	r3, [r7, #28]
 80762bc:	2200      	movs	r2, #0
 80762be:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 80762c2:	69fb      	ldr	r3, [r7, #28]
 80762c4:	2200      	movs	r2, #0
 80762c6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 80762ca:	2300      	movs	r3, #0
 80762cc:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 80762ce:	2301      	movs	r3, #1
 80762d0:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 80762d2:	f107 030c 	add.w	r3, r7, #12
 80762d6:	4619      	mov	r1, r3
 80762d8:	6878      	ldr	r0, [r7, #4]
 80762da:	f001 fcab 	bl	8077c34 <USBD_CtlError>
 80762de:	e01b      	b.n	8076318 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80762e0:	69fb      	ldr	r3, [r7, #28]
 80762e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80762e6:	2b01      	cmp	r3, #1
 80762e8:	d916      	bls.n	8076318 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80762ea:	69fb      	ldr	r3, [r7, #28]
 80762ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80762f0:	3b02      	subs	r3, #2
 80762f2:	029a      	lsls	r2, r3, #10
 80762f4:	69fb      	ldr	r3, [r7, #28]
 80762f6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80762fa:	4413      	add	r3, r2
 80762fc:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80762fe:	69bb      	ldr	r3, [r7, #24]
 8076300:	691b      	ldr	r3, [r3, #16]
 8076302:	69f8      	ldr	r0, [r7, #28]
 8076304:	6979      	ldr	r1, [r7, #20]
 8076306:	69fa      	ldr	r2, [r7, #28]
 8076308:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 807630c:	4798      	blx	r3
 807630e:	4603      	mov	r3, r0
 8076310:	2b00      	cmp	r3, #0
 8076312:	d001      	beq.n	8076318 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8076314:	2303      	movs	r3, #3
 8076316:	e02a      	b.n	807636e <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8076318:	69fb      	ldr	r3, [r7, #28]
 807631a:	2200      	movs	r2, #0
 807631c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8076320:	69fb      	ldr	r3, [r7, #28]
 8076322:	2200      	movs	r2, #0
 8076324:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8076328:	69fb      	ldr	r3, [r7, #28]
 807632a:	2203      	movs	r2, #3
 807632c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8076330:	69fb      	ldr	r3, [r7, #28]
 8076332:	2200      	movs	r2, #0
 8076334:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8076338:	69fb      	ldr	r3, [r7, #28]
 807633a:	2200      	movs	r2, #0
 807633c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8076340:	69fb      	ldr	r3, [r7, #28]
 8076342:	2200      	movs	r2, #0
 8076344:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8076348:	69fb      	ldr	r3, [r7, #28]
 807634a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807634e:	69fb      	ldr	r3, [r7, #28]
 8076350:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8076354:	e00a      	b.n	807636c <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8076356:	69fb      	ldr	r3, [r7, #28]
 8076358:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807635c:	2b07      	cmp	r3, #7
 807635e:	d103      	bne.n	8076368 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8076360:	6878      	ldr	r0, [r7, #4]
 8076362:	f000 fb75 	bl	8076a50 <DFU_Leave>
 8076366:	e001      	b.n	807636c <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8076368:	2303      	movs	r3, #3
 807636a:	e000      	b.n	807636e <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 807636c:	2300      	movs	r3, #0
}
 807636e:	4618      	mov	r0, r3
 8076370:	3720      	adds	r7, #32
 8076372:	46bd      	mov	sp, r7
 8076374:	bd80      	pop	{r7, pc}

08076376 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8076376:	b480      	push	{r7}
 8076378:	b083      	sub	sp, #12
 807637a:	af00      	add	r7, sp, #0
 807637c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 807637e:	2300      	movs	r3, #0
}
 8076380:	4618      	mov	r0, r3
 8076382:	370c      	adds	r7, #12
 8076384:	46bd      	mov	sp, r7
 8076386:	f85d 7b04 	ldr.w	r7, [sp], #4
 807638a:	4770      	bx	lr

0807638c <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 807638c:	b480      	push	{r7}
 807638e:	b083      	sub	sp, #12
 8076390:	af00      	add	r7, sp, #0
 8076392:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8076394:	687b      	ldr	r3, [r7, #4]
 8076396:	220a      	movs	r2, #10
 8076398:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 807639a:	4b03      	ldr	r3, [pc, #12]	; (80763a8 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 807639c:	4618      	mov	r0, r3
 807639e:	370c      	adds	r7, #12
 80763a0:	46bd      	mov	sp, r7
 80763a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80763a6:	4770      	bx	lr
 80763a8:	20000064 	.word	0x20000064

080763ac <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80763ac:	b580      	push	{r7, lr}
 80763ae:	b086      	sub	sp, #24
 80763b0:	af00      	add	r7, sp, #0
 80763b2:	60f8      	str	r0, [r7, #12]
 80763b4:	460b      	mov	r3, r1
 80763b6:	607a      	str	r2, [r7, #4]
 80763b8:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80763ba:	68fb      	ldr	r3, [r7, #12]
 80763bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80763c0:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80763c2:	7afb      	ldrb	r3, [r7, #11]
 80763c4:	2b06      	cmp	r3, #6
 80763c6:	d808      	bhi.n	80763da <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80763c8:	697b      	ldr	r3, [r7, #20]
 80763ca:	681b      	ldr	r3, [r3, #0]
 80763cc:	687a      	ldr	r2, [r7, #4]
 80763ce:	4905      	ldr	r1, [pc, #20]	; (80763e4 <USBD_DFU_GetUsrStringDesc+0x38>)
 80763d0:	4618      	mov	r0, r3
 80763d2:	f001 fc40 	bl	8077c56 <USBD_GetString>
    return USBD_StrDesc;
 80763d6:	4b03      	ldr	r3, [pc, #12]	; (80763e4 <USBD_DFU_GetUsrStringDesc+0x38>)
 80763d8:	e000      	b.n	80763dc <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80763da:	2300      	movs	r3, #0
  }
}
 80763dc:	4618      	mov	r0, r3
 80763de:	3718      	adds	r7, #24
 80763e0:	46bd      	mov	sp, r7
 80763e2:	bd80      	pop	{r7, pc}
 80763e4:	200000f8 	.word	0x200000f8

080763e8 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80763e8:	b480      	push	{r7}
 80763ea:	b083      	sub	sp, #12
 80763ec:	af00      	add	r7, sp, #0
 80763ee:	6078      	str	r0, [r7, #4]
 80763f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80763f2:	683b      	ldr	r3, [r7, #0]
 80763f4:	2b00      	cmp	r3, #0
 80763f6:	d101      	bne.n	80763fc <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80763f8:	2303      	movs	r3, #3
 80763fa:	e004      	b.n	8076406 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80763fc:	687b      	ldr	r3, [r7, #4]
 80763fe:	683a      	ldr	r2, [r7, #0]
 8076400:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8076404:	2300      	movs	r3, #0
}
 8076406:	4618      	mov	r0, r3
 8076408:	370c      	adds	r7, #12
 807640a:	46bd      	mov	sp, r7
 807640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8076410:	4770      	bx	lr
	...

08076414 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8076414:	b580      	push	{r7, lr}
 8076416:	b084      	sub	sp, #16
 8076418:	af00      	add	r7, sp, #0
 807641a:	6078      	str	r0, [r7, #4]
 807641c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807641e:	687b      	ldr	r3, [r7, #4]
 8076420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8076424:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8076426:	68fb      	ldr	r3, [r7, #12]
 8076428:	2b00      	cmp	r3, #0
 807642a:	d051      	beq.n	80764d0 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807642c:	68fb      	ldr	r3, [r7, #12]
 807642e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8076432:	2b02      	cmp	r3, #2
 8076434:	d013      	beq.n	807645e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8076436:	68fb      	ldr	r3, [r7, #12]
 8076438:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807643c:	2b03      	cmp	r3, #3
 807643e:	d00e      	beq.n	807645e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8076440:	68fb      	ldr	r3, [r7, #12]
 8076442:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8076446:	2b05      	cmp	r3, #5
 8076448:	d009      	beq.n	807645e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807644a:	68fb      	ldr	r3, [r7, #12]
 807644c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8076450:	2b06      	cmp	r3, #6
 8076452:	d004      	beq.n	807645e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8076454:	68fb      	ldr	r3, [r7, #12]
 8076456:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807645a:	2b09      	cmp	r3, #9
 807645c:	d125      	bne.n	80764aa <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 807645e:	68fb      	ldr	r3, [r7, #12]
 8076460:	2202      	movs	r2, #2
 8076462:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8076466:	68fb      	ldr	r3, [r7, #12]
 8076468:	2200      	movs	r2, #0
 807646a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 807646e:	68fb      	ldr	r3, [r7, #12]
 8076470:	2200      	movs	r2, #0
 8076472:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8076476:	68fb      	ldr	r3, [r7, #12]
 8076478:	2200      	movs	r2, #0
 807647a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 807647e:	68fb      	ldr	r3, [r7, #12]
 8076480:	2200      	movs	r2, #0
 8076482:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8076486:	68fb      	ldr	r3, [r7, #12]
 8076488:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807648c:	68fb      	ldr	r3, [r7, #12]
 807648e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8076492:	68fb      	ldr	r3, [r7, #12]
 8076494:	2200      	movs	r2, #0
 8076496:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 807649a:	68fb      	ldr	r3, [r7, #12]
 807649c:	2200      	movs	r2, #0
 807649e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80764a2:	68fb      	ldr	r3, [r7, #12]
 80764a4:	2200      	movs	r2, #0
 80764a6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 80764aa:	4b0b      	ldr	r3, [pc, #44]	; (80764d8 <DFU_Detach+0xc4>)
 80764ac:	7d5b      	ldrb	r3, [r3, #21]
 80764ae:	f003 0310 	and.w	r3, r3, #16
 80764b2:	2b00      	cmp	r3, #0
 80764b4:	d006      	beq.n	80764c4 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 80764b6:	6878      	ldr	r0, [r7, #4]
 80764b8:	f000 fb7b 	bl	8076bb2 <USBD_Stop>
    (void)USBD_Start(pdev);
 80764bc:	6878      	ldr	r0, [r7, #4]
 80764be:	f000 fb6c 	bl	8076b9a <USBD_Start>
 80764c2:	e006      	b.n	80764d2 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 80764c4:	683b      	ldr	r3, [r7, #0]
 80764c6:	885b      	ldrh	r3, [r3, #2]
 80764c8:	4618      	mov	r0, r3
 80764ca:	f7fc fa09 	bl	80728e0 <HAL_Delay>
 80764ce:	e000      	b.n	80764d2 <DFU_Detach+0xbe>
    return;
 80764d0:	bf00      	nop
  }
}
 80764d2:	3710      	adds	r7, #16
 80764d4:	46bd      	mov	sp, r7
 80764d6:	bd80      	pop	{r7, pc}
 80764d8:	20000048 	.word	0x20000048

080764dc <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80764dc:	b580      	push	{r7, lr}
 80764de:	b084      	sub	sp, #16
 80764e0:	af00      	add	r7, sp, #0
 80764e2:	6078      	str	r0, [r7, #4]
 80764e4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80764e6:	687b      	ldr	r3, [r7, #4]
 80764e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80764ec:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80764ee:	68fb      	ldr	r3, [r7, #12]
 80764f0:	2b00      	cmp	r3, #0
 80764f2:	d05b      	beq.n	80765ac <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80764f4:	683b      	ldr	r3, [r7, #0]
 80764f6:	88db      	ldrh	r3, [r3, #6]
 80764f8:	2b00      	cmp	r3, #0
 80764fa:	d02d      	beq.n	8076558 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80764fc:	68fb      	ldr	r3, [r7, #12]
 80764fe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8076502:	2b02      	cmp	r3, #2
 8076504:	d004      	beq.n	8076510 <DFU_Download+0x34>
 8076506:	68fb      	ldr	r3, [r7, #12]
 8076508:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807650c:	2b05      	cmp	r3, #5
 807650e:	d11e      	bne.n	807654e <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8076510:	683b      	ldr	r3, [r7, #0]
 8076512:	885b      	ldrh	r3, [r3, #2]
 8076514:	461a      	mov	r2, r3
 8076516:	68fb      	ldr	r3, [r7, #12]
 8076518:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 807651c:	683b      	ldr	r3, [r7, #0]
 807651e:	88db      	ldrh	r3, [r3, #6]
 8076520:	461a      	mov	r2, r3
 8076522:	68fb      	ldr	r3, [r7, #12]
 8076524:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8076528:	68fb      	ldr	r3, [r7, #12]
 807652a:	2203      	movs	r2, #3
 807652c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8076530:	68fb      	ldr	r3, [r7, #12]
 8076532:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076536:	68fb      	ldr	r3, [r7, #12]
 8076538:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 807653c:	68f9      	ldr	r1, [r7, #12]
 807653e:	68fb      	ldr	r3, [r7, #12]
 8076540:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8076544:	461a      	mov	r2, r3
 8076546:	6878      	ldr	r0, [r7, #4]
 8076548:	f001 fc11 	bl	8077d6e <USBD_CtlPrepareRx>
 807654c:	e02f      	b.n	80765ae <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 807654e:	6839      	ldr	r1, [r7, #0]
 8076550:	6878      	ldr	r0, [r7, #4]
 8076552:	f001 fb6f 	bl	8077c34 <USBD_CtlError>
 8076556:	e02a      	b.n	80765ae <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8076558:	68fb      	ldr	r3, [r7, #12]
 807655a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807655e:	2b05      	cmp	r3, #5
 8076560:	d004      	beq.n	807656c <DFU_Download+0x90>
 8076562:	68fb      	ldr	r3, [r7, #12]
 8076564:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8076568:	2b02      	cmp	r3, #2
 807656a:	d11a      	bne.n	80765a2 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 807656c:	68fb      	ldr	r3, [r7, #12]
 807656e:	2201      	movs	r2, #1
 8076570:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8076574:	68fb      	ldr	r3, [r7, #12]
 8076576:	2206      	movs	r2, #6
 8076578:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 807657c:	68fb      	ldr	r3, [r7, #12]
 807657e:	2200      	movs	r2, #0
 8076580:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8076584:	68fb      	ldr	r3, [r7, #12]
 8076586:	2200      	movs	r2, #0
 8076588:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 807658c:	68fb      	ldr	r3, [r7, #12]
 807658e:	2200      	movs	r2, #0
 8076590:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8076594:	68fb      	ldr	r3, [r7, #12]
 8076596:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807659a:	68fb      	ldr	r3, [r7, #12]
 807659c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80765a0:	e005      	b.n	80765ae <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80765a2:	6839      	ldr	r1, [r7, #0]
 80765a4:	6878      	ldr	r0, [r7, #4]
 80765a6:	f001 fb45 	bl	8077c34 <USBD_CtlError>
 80765aa:	e000      	b.n	80765ae <DFU_Download+0xd2>
    return;
 80765ac:	bf00      	nop
    }
  }
}
 80765ae:	3710      	adds	r7, #16
 80765b0:	46bd      	mov	sp, r7
 80765b2:	bd80      	pop	{r7, pc}

080765b4 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80765b4:	b580      	push	{r7, lr}
 80765b6:	b086      	sub	sp, #24
 80765b8:	af00      	add	r7, sp, #0
 80765ba:	6078      	str	r0, [r7, #4]
 80765bc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80765be:	687b      	ldr	r3, [r7, #4]
 80765c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80765c4:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80765c6:	687b      	ldr	r3, [r7, #4]
 80765c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80765cc:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 80765ce:	697b      	ldr	r3, [r7, #20]
 80765d0:	2b00      	cmp	r3, #0
 80765d2:	f000 80c4 	beq.w	807675e <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80765d6:	683b      	ldr	r3, [r7, #0]
 80765d8:	88db      	ldrh	r3, [r3, #6]
 80765da:	2b00      	cmp	r3, #0
 80765dc:	f000 80a8 	beq.w	8076730 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80765e0:	697b      	ldr	r3, [r7, #20]
 80765e2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80765e6:	2b02      	cmp	r3, #2
 80765e8:	d005      	beq.n	80765f6 <DFU_Upload+0x42>
 80765ea:	697b      	ldr	r3, [r7, #20]
 80765ec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80765f0:	2b09      	cmp	r3, #9
 80765f2:	f040 8090 	bne.w	8076716 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80765f6:	683b      	ldr	r3, [r7, #0]
 80765f8:	885b      	ldrh	r3, [r3, #2]
 80765fa:	461a      	mov	r2, r3
 80765fc:	697b      	ldr	r3, [r7, #20]
 80765fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8076602:	683b      	ldr	r3, [r7, #0]
 8076604:	88db      	ldrh	r3, [r3, #6]
 8076606:	461a      	mov	r2, r3
 8076608:	697b      	ldr	r3, [r7, #20]
 807660a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 807660e:	697b      	ldr	r3, [r7, #20]
 8076610:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8076614:	2b00      	cmp	r3, #0
 8076616:	d12c      	bne.n	8076672 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8076618:	697b      	ldr	r3, [r7, #20]
 807661a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807661e:	2b03      	cmp	r3, #3
 8076620:	d901      	bls.n	8076626 <DFU_Upload+0x72>
 8076622:	2202      	movs	r2, #2
 8076624:	e000      	b.n	8076628 <DFU_Upload+0x74>
 8076626:	2209      	movs	r2, #9
 8076628:	697b      	ldr	r3, [r7, #20]
 807662a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 807662e:	697b      	ldr	r3, [r7, #20]
 8076630:	2200      	movs	r2, #0
 8076632:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8076636:	697b      	ldr	r3, [r7, #20]
 8076638:	2200      	movs	r2, #0
 807663a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807663e:	697b      	ldr	r3, [r7, #20]
 8076640:	2200      	movs	r2, #0
 8076642:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8076646:	697b      	ldr	r3, [r7, #20]
 8076648:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807664c:	697b      	ldr	r3, [r7, #20]
 807664e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8076652:	697b      	ldr	r3, [r7, #20]
 8076654:	2200      	movs	r2, #0
 8076656:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8076658:	697b      	ldr	r3, [r7, #20]
 807665a:	2221      	movs	r2, #33	; 0x21
 807665c:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 807665e:	697b      	ldr	r3, [r7, #20]
 8076660:	2241      	movs	r2, #65	; 0x41
 8076662:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8076664:	697b      	ldr	r3, [r7, #20]
 8076666:	2203      	movs	r2, #3
 8076668:	4619      	mov	r1, r3
 807666a:	6878      	ldr	r0, [r7, #4]
 807666c:	f001 fb53 	bl	8077d16 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8076670:	e076      	b.n	8076760 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8076672:	697b      	ldr	r3, [r7, #20]
 8076674:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8076678:	2b01      	cmp	r3, #1
 807667a:	d931      	bls.n	80766e0 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 807667c:	697b      	ldr	r3, [r7, #20]
 807667e:	2209      	movs	r2, #9
 8076680:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8076684:	697b      	ldr	r3, [r7, #20]
 8076686:	2200      	movs	r2, #0
 8076688:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807668c:	697b      	ldr	r3, [r7, #20]
 807668e:	2200      	movs	r2, #0
 8076690:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8076694:	697b      	ldr	r3, [r7, #20]
 8076696:	2200      	movs	r2, #0
 8076698:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807669c:	697b      	ldr	r3, [r7, #20]
 807669e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80766a2:	697b      	ldr	r3, [r7, #20]
 80766a4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80766a8:	697b      	ldr	r3, [r7, #20]
 80766aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80766ae:	3b02      	subs	r3, #2
 80766b0:	029a      	lsls	r2, r3, #10
 80766b2:	697b      	ldr	r3, [r7, #20]
 80766b4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80766b8:	4413      	add	r3, r2
 80766ba:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80766bc:	693b      	ldr	r3, [r7, #16]
 80766be:	695b      	ldr	r3, [r3, #20]
 80766c0:	68f8      	ldr	r0, [r7, #12]
 80766c2:	6979      	ldr	r1, [r7, #20]
 80766c4:	697a      	ldr	r2, [r7, #20]
 80766c6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80766ca:	4798      	blx	r3
 80766cc:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 80766ce:	697b      	ldr	r3, [r7, #20]
 80766d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80766d4:	461a      	mov	r2, r3
 80766d6:	68b9      	ldr	r1, [r7, #8]
 80766d8:	6878      	ldr	r0, [r7, #4]
 80766da:	f001 fb1c 	bl	8077d16 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80766de:	e03f      	b.n	8076760 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80766e0:	697b      	ldr	r3, [r7, #20]
 80766e2:	220f      	movs	r2, #15
 80766e4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80766e8:	697b      	ldr	r3, [r7, #20]
 80766ea:	2200      	movs	r2, #0
 80766ec:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80766f0:	697b      	ldr	r3, [r7, #20]
 80766f2:	2200      	movs	r2, #0
 80766f4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80766f8:	697b      	ldr	r3, [r7, #20]
 80766fa:	2200      	movs	r2, #0
 80766fc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8076700:	697b      	ldr	r3, [r7, #20]
 8076702:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076706:	697b      	ldr	r3, [r7, #20]
 8076708:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 807670c:	6839      	ldr	r1, [r7, #0]
 807670e:	6878      	ldr	r0, [r7, #4]
 8076710:	f001 fa90 	bl	8077c34 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8076714:	e024      	b.n	8076760 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8076716:	697b      	ldr	r3, [r7, #20]
 8076718:	2200      	movs	r2, #0
 807671a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 807671e:	697b      	ldr	r3, [r7, #20]
 8076720:	2200      	movs	r2, #0
 8076722:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8076726:	6839      	ldr	r1, [r7, #0]
 8076728:	6878      	ldr	r0, [r7, #4]
 807672a:	f001 fa83 	bl	8077c34 <USBD_CtlError>
 807672e:	e017      	b.n	8076760 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8076730:	697b      	ldr	r3, [r7, #20]
 8076732:	2202      	movs	r2, #2
 8076734:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8076738:	697b      	ldr	r3, [r7, #20]
 807673a:	2200      	movs	r2, #0
 807673c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8076740:	697b      	ldr	r3, [r7, #20]
 8076742:	2200      	movs	r2, #0
 8076744:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8076748:	697b      	ldr	r3, [r7, #20]
 807674a:	2200      	movs	r2, #0
 807674c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8076750:	697b      	ldr	r3, [r7, #20]
 8076752:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076756:	697b      	ldr	r3, [r7, #20]
 8076758:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 807675c:	e000      	b.n	8076760 <DFU_Upload+0x1ac>
    return;
 807675e:	bf00      	nop
  }
}
 8076760:	3718      	adds	r7, #24
 8076762:	46bd      	mov	sp, r7
 8076764:	bd80      	pop	{r7, pc}
	...

08076768 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8076768:	b580      	push	{r7, lr}
 807676a:	b084      	sub	sp, #16
 807676c:	af00      	add	r7, sp, #0
 807676e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8076770:	687b      	ldr	r3, [r7, #4]
 8076772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8076776:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8076778:	687b      	ldr	r3, [r7, #4]
 807677a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807677e:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8076780:	68fb      	ldr	r3, [r7, #12]
 8076782:	2b00      	cmp	r3, #0
 8076784:	f000 80a0 	beq.w	80768c8 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8076788:	68fb      	ldr	r3, [r7, #12]
 807678a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807678e:	2b03      	cmp	r3, #3
 8076790:	d002      	beq.n	8076798 <DFU_GetStatus+0x30>
 8076792:	2b06      	cmp	r3, #6
 8076794:	d051      	beq.n	807683a <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 8076796:	e08e      	b.n	80768b6 <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8076798:	68fb      	ldr	r3, [r7, #12]
 807679a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807679e:	2b00      	cmp	r3, #0
 80767a0:	d034      	beq.n	807680c <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80767a2:	68fb      	ldr	r3, [r7, #12]
 80767a4:	2204      	movs	r2, #4
 80767a6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80767aa:	68fb      	ldr	r3, [r7, #12]
 80767ac:	2200      	movs	r2, #0
 80767ae:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80767b2:	68fb      	ldr	r3, [r7, #12]
 80767b4:	2200      	movs	r2, #0
 80767b6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80767ba:	68fb      	ldr	r3, [r7, #12]
 80767bc:	2200      	movs	r2, #0
 80767be:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80767c2:	68fb      	ldr	r3, [r7, #12]
 80767c4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80767c8:	68fb      	ldr	r3, [r7, #12]
 80767ca:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80767ce:	68fb      	ldr	r3, [r7, #12]
 80767d0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80767d4:	2b00      	cmp	r3, #0
 80767d6:	d10e      	bne.n	80767f6 <DFU_GetStatus+0x8e>
 80767d8:	68fb      	ldr	r3, [r7, #12]
 80767da:	781b      	ldrb	r3, [r3, #0]
 80767dc:	2b41      	cmp	r3, #65	; 0x41
 80767de:	d10a      	bne.n	80767f6 <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80767e0:	68bb      	ldr	r3, [r7, #8]
 80767e2:	699b      	ldr	r3, [r3, #24]
 80767e4:	68fa      	ldr	r2, [r7, #12]
 80767e6:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80767ea:	68fa      	ldr	r2, [r7, #12]
 80767ec:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80767f0:	2100      	movs	r1, #0
 80767f2:	4798      	blx	r3
      break;
 80767f4:	e05f      	b.n	80768b6 <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80767f6:	68bb      	ldr	r3, [r7, #8]
 80767f8:	699b      	ldr	r3, [r3, #24]
 80767fa:	68fa      	ldr	r2, [r7, #12]
 80767fc:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8076800:	68fa      	ldr	r2, [r7, #12]
 8076802:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8076806:	2101      	movs	r1, #1
 8076808:	4798      	blx	r3
      break;
 807680a:	e054      	b.n	80768b6 <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 807680c:	68fb      	ldr	r3, [r7, #12]
 807680e:	2205      	movs	r2, #5
 8076810:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8076814:	68fb      	ldr	r3, [r7, #12]
 8076816:	2200      	movs	r2, #0
 8076818:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807681c:	68fb      	ldr	r3, [r7, #12]
 807681e:	2200      	movs	r2, #0
 8076820:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8076824:	68fb      	ldr	r3, [r7, #12]
 8076826:	2200      	movs	r2, #0
 8076828:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807682c:	68fb      	ldr	r3, [r7, #12]
 807682e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076832:	68fb      	ldr	r3, [r7, #12]
 8076834:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8076838:	e03d      	b.n	80768b6 <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 807683a:	68fb      	ldr	r3, [r7, #12]
 807683c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8076840:	2b01      	cmp	r3, #1
 8076842:	d116      	bne.n	8076872 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8076844:	68fb      	ldr	r3, [r7, #12]
 8076846:	2207      	movs	r2, #7
 8076848:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 807684c:	68fb      	ldr	r3, [r7, #12]
 807684e:	2201      	movs	r2, #1
 8076850:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8076854:	68fb      	ldr	r3, [r7, #12]
 8076856:	2200      	movs	r2, #0
 8076858:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807685c:	68fb      	ldr	r3, [r7, #12]
 807685e:	2200      	movs	r2, #0
 8076860:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8076864:	68fb      	ldr	r3, [r7, #12]
 8076866:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807686a:	68fb      	ldr	r3, [r7, #12]
 807686c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8076870:	e020      	b.n	80768b4 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8076872:	68fb      	ldr	r3, [r7, #12]
 8076874:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8076878:	2b00      	cmp	r3, #0
 807687a:	d11b      	bne.n	80768b4 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 807687c:	4b14      	ldr	r3, [pc, #80]	; (80768d0 <DFU_GetStatus+0x168>)
 807687e:	7d1b      	ldrb	r3, [r3, #20]
 8076880:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8076884:	2b00      	cmp	r3, #0
 8076886:	d015      	beq.n	80768b4 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8076888:	68fb      	ldr	r3, [r7, #12]
 807688a:	2202      	movs	r2, #2
 807688c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8076890:	68fb      	ldr	r3, [r7, #12]
 8076892:	2200      	movs	r2, #0
 8076894:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8076898:	68fb      	ldr	r3, [r7, #12]
 807689a:	2200      	movs	r2, #0
 807689c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 80768a0:	68fb      	ldr	r3, [r7, #12]
 80768a2:	2200      	movs	r2, #0
 80768a4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 80768a8:	68fb      	ldr	r3, [r7, #12]
 80768aa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80768ae:	68fb      	ldr	r3, [r7, #12]
 80768b0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 80768b4:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80768b6:	68fb      	ldr	r3, [r7, #12]
 80768b8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80768bc:	2206      	movs	r2, #6
 80768be:	4619      	mov	r1, r3
 80768c0:	6878      	ldr	r0, [r7, #4]
 80768c2:	f001 fa28 	bl	8077d16 <USBD_CtlSendData>
 80768c6:	e000      	b.n	80768ca <DFU_GetStatus+0x162>
    return;
 80768c8:	bf00      	nop
}
 80768ca:	3710      	adds	r7, #16
 80768cc:	46bd      	mov	sp, r7
 80768ce:	bd80      	pop	{r7, pc}
 80768d0:	20000048 	.word	0x20000048

080768d4 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80768d4:	b480      	push	{r7}
 80768d6:	b085      	sub	sp, #20
 80768d8:	af00      	add	r7, sp, #0
 80768da:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80768dc:	687b      	ldr	r3, [r7, #4]
 80768de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80768e2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80768e4:	68fb      	ldr	r3, [r7, #12]
 80768e6:	2b00      	cmp	r3, #0
 80768e8:	d042      	beq.n	8076970 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80768ea:	68fb      	ldr	r3, [r7, #12]
 80768ec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80768f0:	2b0a      	cmp	r3, #10
 80768f2:	d11e      	bne.n	8076932 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80768f4:	68fb      	ldr	r3, [r7, #12]
 80768f6:	2202      	movs	r2, #2
 80768f8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80768fc:	68fb      	ldr	r3, [r7, #12]
 80768fe:	2200      	movs	r2, #0
 8076900:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8076904:	68fb      	ldr	r3, [r7, #12]
 8076906:	2200      	movs	r2, #0
 8076908:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807690c:	68fb      	ldr	r3, [r7, #12]
 807690e:	2200      	movs	r2, #0
 8076910:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8076914:	68fb      	ldr	r3, [r7, #12]
 8076916:	2200      	movs	r2, #0
 8076918:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 807691c:	68fb      	ldr	r3, [r7, #12]
 807691e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076922:	68fb      	ldr	r3, [r7, #12]
 8076924:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8076928:	68fb      	ldr	r3, [r7, #12]
 807692a:	2200      	movs	r2, #0
 807692c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8076930:	e01f      	b.n	8076972 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8076932:	68fb      	ldr	r3, [r7, #12]
 8076934:	220a      	movs	r2, #10
 8076936:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 807693a:	68fb      	ldr	r3, [r7, #12]
 807693c:	220e      	movs	r2, #14
 807693e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8076942:	68fb      	ldr	r3, [r7, #12]
 8076944:	2200      	movs	r2, #0
 8076946:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807694a:	68fb      	ldr	r3, [r7, #12]
 807694c:	2200      	movs	r2, #0
 807694e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8076952:	68fb      	ldr	r3, [r7, #12]
 8076954:	2200      	movs	r2, #0
 8076956:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 807695a:	68fb      	ldr	r3, [r7, #12]
 807695c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076960:	68fb      	ldr	r3, [r7, #12]
 8076962:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8076966:	68fb      	ldr	r3, [r7, #12]
 8076968:	2200      	movs	r2, #0
 807696a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 807696e:	e000      	b.n	8076972 <DFU_ClearStatus+0x9e>
    return;
 8076970:	bf00      	nop
  }
}
 8076972:	3714      	adds	r7, #20
 8076974:	46bd      	mov	sp, r7
 8076976:	f85d 7b04 	ldr.w	r7, [sp], #4
 807697a:	4770      	bx	lr

0807697c <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 807697c:	b580      	push	{r7, lr}
 807697e:	b084      	sub	sp, #16
 8076980:	af00      	add	r7, sp, #0
 8076982:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8076984:	687b      	ldr	r3, [r7, #4]
 8076986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807698a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807698c:	68fb      	ldr	r3, [r7, #12]
 807698e:	2b00      	cmp	r3, #0
 8076990:	d008      	beq.n	80769a4 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8076992:	68fb      	ldr	r3, [r7, #12]
 8076994:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8076998:	2201      	movs	r2, #1
 807699a:	4619      	mov	r1, r3
 807699c:	6878      	ldr	r0, [r7, #4]
 807699e:	f001 f9ba 	bl	8077d16 <USBD_CtlSendData>
 80769a2:	e000      	b.n	80769a6 <DFU_GetState+0x2a>
    return;
 80769a4:	bf00      	nop
}
 80769a6:	3710      	adds	r7, #16
 80769a8:	46bd      	mov	sp, r7
 80769aa:	bd80      	pop	{r7, pc}

080769ac <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 80769ac:	b480      	push	{r7}
 80769ae:	b085      	sub	sp, #20
 80769b0:	af00      	add	r7, sp, #0
 80769b2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80769b4:	687b      	ldr	r3, [r7, #4]
 80769b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80769ba:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80769bc:	68fb      	ldr	r3, [r7, #12]
 80769be:	2b00      	cmp	r3, #0
 80769c0:	d03f      	beq.n	8076a42 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80769c2:	68fb      	ldr	r3, [r7, #12]
 80769c4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80769c8:	2b02      	cmp	r3, #2
 80769ca:	d013      	beq.n	80769f4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80769cc:	68fb      	ldr	r3, [r7, #12]
 80769ce:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80769d2:	2b03      	cmp	r3, #3
 80769d4:	d00e      	beq.n	80769f4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80769d6:	68fb      	ldr	r3, [r7, #12]
 80769d8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80769dc:	2b05      	cmp	r3, #5
 80769de:	d009      	beq.n	80769f4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80769e0:	68fb      	ldr	r3, [r7, #12]
 80769e2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80769e6:	2b06      	cmp	r3, #6
 80769e8:	d004      	beq.n	80769f4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80769ea:	68fb      	ldr	r3, [r7, #12]
 80769ec:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80769f0:	2b09      	cmp	r3, #9
 80769f2:	d127      	bne.n	8076a44 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80769f4:	68fb      	ldr	r3, [r7, #12]
 80769f6:	2202      	movs	r2, #2
 80769f8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80769fc:	68fb      	ldr	r3, [r7, #12]
 80769fe:	2200      	movs	r2, #0
 8076a00:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8076a04:	68fb      	ldr	r3, [r7, #12]
 8076a06:	2200      	movs	r2, #0
 8076a08:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8076a0c:	68fb      	ldr	r3, [r7, #12]
 8076a0e:	2200      	movs	r2, #0
 8076a10:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8076a14:	68fb      	ldr	r3, [r7, #12]
 8076a16:	2200      	movs	r2, #0
 8076a18:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8076a1c:	68fb      	ldr	r3, [r7, #12]
 8076a1e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076a22:	68fb      	ldr	r3, [r7, #12]
 8076a24:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8076a28:	68fb      	ldr	r3, [r7, #12]
 8076a2a:	2200      	movs	r2, #0
 8076a2c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8076a30:	68fb      	ldr	r3, [r7, #12]
 8076a32:	2200      	movs	r2, #0
 8076a34:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8076a38:	68fb      	ldr	r3, [r7, #12]
 8076a3a:	2200      	movs	r2, #0
 8076a3c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8076a40:	e000      	b.n	8076a44 <DFU_Abort+0x98>
    return;
 8076a42:	bf00      	nop
  }
}
 8076a44:	3714      	adds	r7, #20
 8076a46:	46bd      	mov	sp, r7
 8076a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8076a4c:	4770      	bx	lr
	...

08076a50 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8076a50:	b580      	push	{r7, lr}
 8076a52:	b084      	sub	sp, #16
 8076a54:	af00      	add	r7, sp, #0
 8076a56:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8076a58:	687b      	ldr	r3, [r7, #4]
 8076a5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8076a5e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8076a60:	68fb      	ldr	r3, [r7, #12]
 8076a62:	2b00      	cmp	r3, #0
 8076a64:	d03b      	beq.n	8076ade <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8076a66:	68fb      	ldr	r3, [r7, #12]
 8076a68:	2200      	movs	r2, #0
 8076a6a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8076a6e:	4b1e      	ldr	r3, [pc, #120]	; (8076ae8 <DFU_Leave+0x98>)
 8076a70:	7d1b      	ldrb	r3, [r3, #20]
 8076a72:	f003 0304 	and.w	r3, r3, #4
 8076a76:	2b00      	cmp	r3, #0
 8076a78:	d016      	beq.n	8076aa8 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8076a7a:	68fb      	ldr	r3, [r7, #12]
 8076a7c:	2206      	movs	r2, #6
 8076a7e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8076a82:	68fb      	ldr	r3, [r7, #12]
 8076a84:	2200      	movs	r2, #0
 8076a86:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8076a8a:	68fb      	ldr	r3, [r7, #12]
 8076a8c:	2200      	movs	r2, #0
 8076a8e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8076a92:	68fb      	ldr	r3, [r7, #12]
 8076a94:	2200      	movs	r2, #0
 8076a96:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8076a9a:	68fb      	ldr	r3, [r7, #12]
 8076a9c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076aa0:	68fb      	ldr	r3, [r7, #12]
 8076aa2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8076aa6:	e01b      	b.n	8076ae0 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8076aa8:	68fb      	ldr	r3, [r7, #12]
 8076aaa:	2208      	movs	r2, #8
 8076aac:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8076ab0:	68fb      	ldr	r3, [r7, #12]
 8076ab2:	2200      	movs	r2, #0
 8076ab4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8076ab8:	68fb      	ldr	r3, [r7, #12]
 8076aba:	2200      	movs	r2, #0
 8076abc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8076ac0:	68fb      	ldr	r3, [r7, #12]
 8076ac2:	2200      	movs	r2, #0
 8076ac4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8076ac8:	68fb      	ldr	r3, [r7, #12]
 8076aca:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076ace:	68fb      	ldr	r3, [r7, #12]
 8076ad0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8076ad4:	6878      	ldr	r0, [r7, #4]
 8076ad6:	f000 f86c 	bl	8076bb2 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 8076ada:	f7ff f9b3 	bl	8075e44 <__NVIC_SystemReset>
    return;
 8076ade:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8076ae0:	3710      	adds	r7, #16
 8076ae2:	46bd      	mov	sp, r7
 8076ae4:	bd80      	pop	{r7, pc}
 8076ae6:	bf00      	nop
 8076ae8:	20000048 	.word	0x20000048

08076aec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8076aec:	b580      	push	{r7, lr}
 8076aee:	b086      	sub	sp, #24
 8076af0:	af00      	add	r7, sp, #0
 8076af2:	60f8      	str	r0, [r7, #12]
 8076af4:	60b9      	str	r1, [r7, #8]
 8076af6:	4613      	mov	r3, r2
 8076af8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8076afa:	68fb      	ldr	r3, [r7, #12]
 8076afc:	2b00      	cmp	r3, #0
 8076afe:	d101      	bne.n	8076b04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8076b00:	2303      	movs	r3, #3
 8076b02:	e01f      	b.n	8076b44 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8076b04:	68fb      	ldr	r3, [r7, #12]
 8076b06:	2200      	movs	r2, #0
 8076b08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8076b0c:	68fb      	ldr	r3, [r7, #12]
 8076b0e:	2200      	movs	r2, #0
 8076b10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8076b14:	68fb      	ldr	r3, [r7, #12]
 8076b16:	2200      	movs	r2, #0
 8076b18:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8076b1c:	68bb      	ldr	r3, [r7, #8]
 8076b1e:	2b00      	cmp	r3, #0
 8076b20:	d003      	beq.n	8076b2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8076b22:	68fb      	ldr	r3, [r7, #12]
 8076b24:	68ba      	ldr	r2, [r7, #8]
 8076b26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8076b2a:	68fb      	ldr	r3, [r7, #12]
 8076b2c:	2201      	movs	r2, #1
 8076b2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8076b32:	68fb      	ldr	r3, [r7, #12]
 8076b34:	79fa      	ldrb	r2, [r7, #7]
 8076b36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8076b38:	68f8      	ldr	r0, [r7, #12]
 8076b3a:	f001 fc2f 	bl	807839c <USBD_LL_Init>
 8076b3e:	4603      	mov	r3, r0
 8076b40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8076b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8076b44:	4618      	mov	r0, r3
 8076b46:	3718      	adds	r7, #24
 8076b48:	46bd      	mov	sp, r7
 8076b4a:	bd80      	pop	{r7, pc}

08076b4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8076b4c:	b580      	push	{r7, lr}
 8076b4e:	b084      	sub	sp, #16
 8076b50:	af00      	add	r7, sp, #0
 8076b52:	6078      	str	r0, [r7, #4]
 8076b54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8076b56:	2300      	movs	r3, #0
 8076b58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8076b5a:	683b      	ldr	r3, [r7, #0]
 8076b5c:	2b00      	cmp	r3, #0
 8076b5e:	d101      	bne.n	8076b64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8076b60:	2303      	movs	r3, #3
 8076b62:	e016      	b.n	8076b92 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8076b64:	687b      	ldr	r3, [r7, #4]
 8076b66:	683a      	ldr	r2, [r7, #0]
 8076b68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8076b6c:	687b      	ldr	r3, [r7, #4]
 8076b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8076b74:	2b00      	cmp	r3, #0
 8076b76:	d00b      	beq.n	8076b90 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8076b78:	687b      	ldr	r3, [r7, #4]
 8076b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8076b80:	f107 020e 	add.w	r2, r7, #14
 8076b84:	4610      	mov	r0, r2
 8076b86:	4798      	blx	r3
 8076b88:	4602      	mov	r2, r0
 8076b8a:	687b      	ldr	r3, [r7, #4]
 8076b8c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8076b90:	2300      	movs	r3, #0
}
 8076b92:	4618      	mov	r0, r3
 8076b94:	3710      	adds	r7, #16
 8076b96:	46bd      	mov	sp, r7
 8076b98:	bd80      	pop	{r7, pc}

08076b9a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8076b9a:	b580      	push	{r7, lr}
 8076b9c:	b082      	sub	sp, #8
 8076b9e:	af00      	add	r7, sp, #0
 8076ba0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8076ba2:	6878      	ldr	r0, [r7, #4]
 8076ba4:	f001 fc46 	bl	8078434 <USBD_LL_Start>
 8076ba8:	4603      	mov	r3, r0
}
 8076baa:	4618      	mov	r0, r3
 8076bac:	3708      	adds	r7, #8
 8076bae:	46bd      	mov	sp, r7
 8076bb0:	bd80      	pop	{r7, pc}

08076bb2 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8076bb2:	b580      	push	{r7, lr}
 8076bb4:	b082      	sub	sp, #8
 8076bb6:	af00      	add	r7, sp, #0
 8076bb8:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8076bba:	6878      	ldr	r0, [r7, #4]
 8076bbc:	f001 fc55 	bl	807846a <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8076bc0:	687b      	ldr	r3, [r7, #4]
 8076bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076bc6:	2b00      	cmp	r3, #0
 8076bc8:	d009      	beq.n	8076bde <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8076bca:	687b      	ldr	r3, [r7, #4]
 8076bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076bd0:	685b      	ldr	r3, [r3, #4]
 8076bd2:	687a      	ldr	r2, [r7, #4]
 8076bd4:	6852      	ldr	r2, [r2, #4]
 8076bd6:	b2d2      	uxtb	r2, r2
 8076bd8:	4611      	mov	r1, r2
 8076bda:	6878      	ldr	r0, [r7, #4]
 8076bdc:	4798      	blx	r3
  }

  return USBD_OK;
 8076bde:	2300      	movs	r3, #0
}
 8076be0:	4618      	mov	r0, r3
 8076be2:	3708      	adds	r7, #8
 8076be4:	46bd      	mov	sp, r7
 8076be6:	bd80      	pop	{r7, pc}

08076be8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8076be8:	b480      	push	{r7}
 8076bea:	b083      	sub	sp, #12
 8076bec:	af00      	add	r7, sp, #0
 8076bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8076bf0:	2300      	movs	r3, #0
}
 8076bf2:	4618      	mov	r0, r3
 8076bf4:	370c      	adds	r7, #12
 8076bf6:	46bd      	mov	sp, r7
 8076bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8076bfc:	4770      	bx	lr

08076bfe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8076bfe:	b580      	push	{r7, lr}
 8076c00:	b084      	sub	sp, #16
 8076c02:	af00      	add	r7, sp, #0
 8076c04:	6078      	str	r0, [r7, #4]
 8076c06:	460b      	mov	r3, r1
 8076c08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8076c0a:	2303      	movs	r3, #3
 8076c0c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8076c0e:	687b      	ldr	r3, [r7, #4]
 8076c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076c14:	2b00      	cmp	r3, #0
 8076c16:	d009      	beq.n	8076c2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8076c18:	687b      	ldr	r3, [r7, #4]
 8076c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076c1e:	681b      	ldr	r3, [r3, #0]
 8076c20:	78fa      	ldrb	r2, [r7, #3]
 8076c22:	4611      	mov	r1, r2
 8076c24:	6878      	ldr	r0, [r7, #4]
 8076c26:	4798      	blx	r3
 8076c28:	4603      	mov	r3, r0
 8076c2a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8076c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8076c2e:	4618      	mov	r0, r3
 8076c30:	3710      	adds	r7, #16
 8076c32:	46bd      	mov	sp, r7
 8076c34:	bd80      	pop	{r7, pc}

08076c36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8076c36:	b580      	push	{r7, lr}
 8076c38:	b082      	sub	sp, #8
 8076c3a:	af00      	add	r7, sp, #0
 8076c3c:	6078      	str	r0, [r7, #4]
 8076c3e:	460b      	mov	r3, r1
 8076c40:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8076c42:	687b      	ldr	r3, [r7, #4]
 8076c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076c48:	2b00      	cmp	r3, #0
 8076c4a:	d007      	beq.n	8076c5c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8076c4c:	687b      	ldr	r3, [r7, #4]
 8076c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076c52:	685b      	ldr	r3, [r3, #4]
 8076c54:	78fa      	ldrb	r2, [r7, #3]
 8076c56:	4611      	mov	r1, r2
 8076c58:	6878      	ldr	r0, [r7, #4]
 8076c5a:	4798      	blx	r3
  }

  return USBD_OK;
 8076c5c:	2300      	movs	r3, #0
}
 8076c5e:	4618      	mov	r0, r3
 8076c60:	3708      	adds	r7, #8
 8076c62:	46bd      	mov	sp, r7
 8076c64:	bd80      	pop	{r7, pc}

08076c66 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8076c66:	b580      	push	{r7, lr}
 8076c68:	b084      	sub	sp, #16
 8076c6a:	af00      	add	r7, sp, #0
 8076c6c:	6078      	str	r0, [r7, #4]
 8076c6e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8076c70:	687b      	ldr	r3, [r7, #4]
 8076c72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8076c76:	6839      	ldr	r1, [r7, #0]
 8076c78:	4618      	mov	r0, r3
 8076c7a:	f000 ffa1 	bl	8077bc0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8076c7e:	687b      	ldr	r3, [r7, #4]
 8076c80:	2201      	movs	r2, #1
 8076c82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8076c86:	687b      	ldr	r3, [r7, #4]
 8076c88:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8076c8c:	461a      	mov	r2, r3
 8076c8e:	687b      	ldr	r3, [r7, #4]
 8076c90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8076c94:	687b      	ldr	r3, [r7, #4]
 8076c96:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8076c9a:	f003 031f 	and.w	r3, r3, #31
 8076c9e:	2b02      	cmp	r3, #2
 8076ca0:	d01a      	beq.n	8076cd8 <USBD_LL_SetupStage+0x72>
 8076ca2:	2b02      	cmp	r3, #2
 8076ca4:	d822      	bhi.n	8076cec <USBD_LL_SetupStage+0x86>
 8076ca6:	2b00      	cmp	r3, #0
 8076ca8:	d002      	beq.n	8076cb0 <USBD_LL_SetupStage+0x4a>
 8076caa:	2b01      	cmp	r3, #1
 8076cac:	d00a      	beq.n	8076cc4 <USBD_LL_SetupStage+0x5e>
 8076cae:	e01d      	b.n	8076cec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8076cb0:	687b      	ldr	r3, [r7, #4]
 8076cb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8076cb6:	4619      	mov	r1, r3
 8076cb8:	6878      	ldr	r0, [r7, #4]
 8076cba:	f000 fa61 	bl	8077180 <USBD_StdDevReq>
 8076cbe:	4603      	mov	r3, r0
 8076cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8076cc2:	e020      	b.n	8076d06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8076cc4:	687b      	ldr	r3, [r7, #4]
 8076cc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8076cca:	4619      	mov	r1, r3
 8076ccc:	6878      	ldr	r0, [r7, #4]
 8076cce:	f000 fac5 	bl	807725c <USBD_StdItfReq>
 8076cd2:	4603      	mov	r3, r0
 8076cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8076cd6:	e016      	b.n	8076d06 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8076cd8:	687b      	ldr	r3, [r7, #4]
 8076cda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8076cde:	4619      	mov	r1, r3
 8076ce0:	6878      	ldr	r0, [r7, #4]
 8076ce2:	f000 fb04 	bl	80772ee <USBD_StdEPReq>
 8076ce6:	4603      	mov	r3, r0
 8076ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8076cea:	e00c      	b.n	8076d06 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8076cec:	687b      	ldr	r3, [r7, #4]
 8076cee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8076cf2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8076cf6:	b2db      	uxtb	r3, r3
 8076cf8:	4619      	mov	r1, r3
 8076cfa:	6878      	ldr	r0, [r7, #4]
 8076cfc:	f001 fbf6 	bl	80784ec <USBD_LL_StallEP>
 8076d00:	4603      	mov	r3, r0
 8076d02:	73fb      	strb	r3, [r7, #15]
      break;
 8076d04:	bf00      	nop
  }

  return ret;
 8076d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8076d08:	4618      	mov	r0, r3
 8076d0a:	3710      	adds	r7, #16
 8076d0c:	46bd      	mov	sp, r7
 8076d0e:	bd80      	pop	{r7, pc}

08076d10 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8076d10:	b580      	push	{r7, lr}
 8076d12:	b086      	sub	sp, #24
 8076d14:	af00      	add	r7, sp, #0
 8076d16:	60f8      	str	r0, [r7, #12]
 8076d18:	460b      	mov	r3, r1
 8076d1a:	607a      	str	r2, [r7, #4]
 8076d1c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8076d1e:	7afb      	ldrb	r3, [r7, #11]
 8076d20:	2b00      	cmp	r3, #0
 8076d22:	d138      	bne.n	8076d96 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8076d24:	68fb      	ldr	r3, [r7, #12]
 8076d26:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8076d2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8076d2c:	68fb      	ldr	r3, [r7, #12]
 8076d2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8076d32:	2b03      	cmp	r3, #3
 8076d34:	d14a      	bne.n	8076dcc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8076d36:	693b      	ldr	r3, [r7, #16]
 8076d38:	689a      	ldr	r2, [r3, #8]
 8076d3a:	693b      	ldr	r3, [r7, #16]
 8076d3c:	68db      	ldr	r3, [r3, #12]
 8076d3e:	429a      	cmp	r2, r3
 8076d40:	d913      	bls.n	8076d6a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8076d42:	693b      	ldr	r3, [r7, #16]
 8076d44:	689a      	ldr	r2, [r3, #8]
 8076d46:	693b      	ldr	r3, [r7, #16]
 8076d48:	68db      	ldr	r3, [r3, #12]
 8076d4a:	1ad2      	subs	r2, r2, r3
 8076d4c:	693b      	ldr	r3, [r7, #16]
 8076d4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8076d50:	693b      	ldr	r3, [r7, #16]
 8076d52:	68da      	ldr	r2, [r3, #12]
 8076d54:	693b      	ldr	r3, [r7, #16]
 8076d56:	689b      	ldr	r3, [r3, #8]
 8076d58:	4293      	cmp	r3, r2
 8076d5a:	bf28      	it	cs
 8076d5c:	4613      	movcs	r3, r2
 8076d5e:	461a      	mov	r2, r3
 8076d60:	6879      	ldr	r1, [r7, #4]
 8076d62:	68f8      	ldr	r0, [r7, #12]
 8076d64:	f001 f820 	bl	8077da8 <USBD_CtlContinueRx>
 8076d68:	e030      	b.n	8076dcc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8076d6a:	68fb      	ldr	r3, [r7, #12]
 8076d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076d70:	b2db      	uxtb	r3, r3
 8076d72:	2b03      	cmp	r3, #3
 8076d74:	d10b      	bne.n	8076d8e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8076d76:	68fb      	ldr	r3, [r7, #12]
 8076d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076d7c:	691b      	ldr	r3, [r3, #16]
 8076d7e:	2b00      	cmp	r3, #0
 8076d80:	d005      	beq.n	8076d8e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8076d82:	68fb      	ldr	r3, [r7, #12]
 8076d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076d88:	691b      	ldr	r3, [r3, #16]
 8076d8a:	68f8      	ldr	r0, [r7, #12]
 8076d8c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8076d8e:	68f8      	ldr	r0, [r7, #12]
 8076d90:	f001 f81b 	bl	8077dca <USBD_CtlSendStatus>
 8076d94:	e01a      	b.n	8076dcc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8076d96:	68fb      	ldr	r3, [r7, #12]
 8076d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076d9c:	b2db      	uxtb	r3, r3
 8076d9e:	2b03      	cmp	r3, #3
 8076da0:	d114      	bne.n	8076dcc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8076da2:	68fb      	ldr	r3, [r7, #12]
 8076da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076da8:	699b      	ldr	r3, [r3, #24]
 8076daa:	2b00      	cmp	r3, #0
 8076dac:	d00e      	beq.n	8076dcc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8076dae:	68fb      	ldr	r3, [r7, #12]
 8076db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076db4:	699b      	ldr	r3, [r3, #24]
 8076db6:	7afa      	ldrb	r2, [r7, #11]
 8076db8:	4611      	mov	r1, r2
 8076dba:	68f8      	ldr	r0, [r7, #12]
 8076dbc:	4798      	blx	r3
 8076dbe:	4603      	mov	r3, r0
 8076dc0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8076dc2:	7dfb      	ldrb	r3, [r7, #23]
 8076dc4:	2b00      	cmp	r3, #0
 8076dc6:	d001      	beq.n	8076dcc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8076dc8:	7dfb      	ldrb	r3, [r7, #23]
 8076dca:	e000      	b.n	8076dce <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8076dcc:	2300      	movs	r3, #0
}
 8076dce:	4618      	mov	r0, r3
 8076dd0:	3718      	adds	r7, #24
 8076dd2:	46bd      	mov	sp, r7
 8076dd4:	bd80      	pop	{r7, pc}

08076dd6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8076dd6:	b580      	push	{r7, lr}
 8076dd8:	b086      	sub	sp, #24
 8076dda:	af00      	add	r7, sp, #0
 8076ddc:	60f8      	str	r0, [r7, #12]
 8076dde:	460b      	mov	r3, r1
 8076de0:	607a      	str	r2, [r7, #4]
 8076de2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8076de4:	7afb      	ldrb	r3, [r7, #11]
 8076de6:	2b00      	cmp	r3, #0
 8076de8:	d16b      	bne.n	8076ec2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8076dea:	68fb      	ldr	r3, [r7, #12]
 8076dec:	3314      	adds	r3, #20
 8076dee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8076df0:	68fb      	ldr	r3, [r7, #12]
 8076df2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8076df6:	2b02      	cmp	r3, #2
 8076df8:	d156      	bne.n	8076ea8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8076dfa:	693b      	ldr	r3, [r7, #16]
 8076dfc:	689a      	ldr	r2, [r3, #8]
 8076dfe:	693b      	ldr	r3, [r7, #16]
 8076e00:	68db      	ldr	r3, [r3, #12]
 8076e02:	429a      	cmp	r2, r3
 8076e04:	d914      	bls.n	8076e30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8076e06:	693b      	ldr	r3, [r7, #16]
 8076e08:	689a      	ldr	r2, [r3, #8]
 8076e0a:	693b      	ldr	r3, [r7, #16]
 8076e0c:	68db      	ldr	r3, [r3, #12]
 8076e0e:	1ad2      	subs	r2, r2, r3
 8076e10:	693b      	ldr	r3, [r7, #16]
 8076e12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8076e14:	693b      	ldr	r3, [r7, #16]
 8076e16:	689b      	ldr	r3, [r3, #8]
 8076e18:	461a      	mov	r2, r3
 8076e1a:	6879      	ldr	r1, [r7, #4]
 8076e1c:	68f8      	ldr	r0, [r7, #12]
 8076e1e:	f000 ff95 	bl	8077d4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8076e22:	2300      	movs	r3, #0
 8076e24:	2200      	movs	r2, #0
 8076e26:	2100      	movs	r1, #0
 8076e28:	68f8      	ldr	r0, [r7, #12]
 8076e2a:	f001 fc09 	bl	8078640 <USBD_LL_PrepareReceive>
 8076e2e:	e03b      	b.n	8076ea8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8076e30:	693b      	ldr	r3, [r7, #16]
 8076e32:	68da      	ldr	r2, [r3, #12]
 8076e34:	693b      	ldr	r3, [r7, #16]
 8076e36:	689b      	ldr	r3, [r3, #8]
 8076e38:	429a      	cmp	r2, r3
 8076e3a:	d11c      	bne.n	8076e76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8076e3c:	693b      	ldr	r3, [r7, #16]
 8076e3e:	685a      	ldr	r2, [r3, #4]
 8076e40:	693b      	ldr	r3, [r7, #16]
 8076e42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8076e44:	429a      	cmp	r2, r3
 8076e46:	d316      	bcc.n	8076e76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8076e48:	693b      	ldr	r3, [r7, #16]
 8076e4a:	685a      	ldr	r2, [r3, #4]
 8076e4c:	68fb      	ldr	r3, [r7, #12]
 8076e4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8076e52:	429a      	cmp	r2, r3
 8076e54:	d20f      	bcs.n	8076e76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8076e56:	2200      	movs	r2, #0
 8076e58:	2100      	movs	r1, #0
 8076e5a:	68f8      	ldr	r0, [r7, #12]
 8076e5c:	f000 ff76 	bl	8077d4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8076e60:	68fb      	ldr	r3, [r7, #12]
 8076e62:	2200      	movs	r2, #0
 8076e64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8076e68:	2300      	movs	r3, #0
 8076e6a:	2200      	movs	r2, #0
 8076e6c:	2100      	movs	r1, #0
 8076e6e:	68f8      	ldr	r0, [r7, #12]
 8076e70:	f001 fbe6 	bl	8078640 <USBD_LL_PrepareReceive>
 8076e74:	e018      	b.n	8076ea8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8076e76:	68fb      	ldr	r3, [r7, #12]
 8076e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076e7c:	b2db      	uxtb	r3, r3
 8076e7e:	2b03      	cmp	r3, #3
 8076e80:	d10b      	bne.n	8076e9a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8076e82:	68fb      	ldr	r3, [r7, #12]
 8076e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076e88:	68db      	ldr	r3, [r3, #12]
 8076e8a:	2b00      	cmp	r3, #0
 8076e8c:	d005      	beq.n	8076e9a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8076e8e:	68fb      	ldr	r3, [r7, #12]
 8076e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076e94:	68db      	ldr	r3, [r3, #12]
 8076e96:	68f8      	ldr	r0, [r7, #12]
 8076e98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8076e9a:	2180      	movs	r1, #128	; 0x80
 8076e9c:	68f8      	ldr	r0, [r7, #12]
 8076e9e:	f001 fb25 	bl	80784ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8076ea2:	68f8      	ldr	r0, [r7, #12]
 8076ea4:	f000 ffa4 	bl	8077df0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8076ea8:	68fb      	ldr	r3, [r7, #12]
 8076eaa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8076eae:	2b01      	cmp	r3, #1
 8076eb0:	d122      	bne.n	8076ef8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8076eb2:	68f8      	ldr	r0, [r7, #12]
 8076eb4:	f7ff fe98 	bl	8076be8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8076eb8:	68fb      	ldr	r3, [r7, #12]
 8076eba:	2200      	movs	r2, #0
 8076ebc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8076ec0:	e01a      	b.n	8076ef8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8076ec2:	68fb      	ldr	r3, [r7, #12]
 8076ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076ec8:	b2db      	uxtb	r3, r3
 8076eca:	2b03      	cmp	r3, #3
 8076ecc:	d114      	bne.n	8076ef8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8076ece:	68fb      	ldr	r3, [r7, #12]
 8076ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076ed4:	695b      	ldr	r3, [r3, #20]
 8076ed6:	2b00      	cmp	r3, #0
 8076ed8:	d00e      	beq.n	8076ef8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8076eda:	68fb      	ldr	r3, [r7, #12]
 8076edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076ee0:	695b      	ldr	r3, [r3, #20]
 8076ee2:	7afa      	ldrb	r2, [r7, #11]
 8076ee4:	4611      	mov	r1, r2
 8076ee6:	68f8      	ldr	r0, [r7, #12]
 8076ee8:	4798      	blx	r3
 8076eea:	4603      	mov	r3, r0
 8076eec:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8076eee:	7dfb      	ldrb	r3, [r7, #23]
 8076ef0:	2b00      	cmp	r3, #0
 8076ef2:	d001      	beq.n	8076ef8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8076ef4:	7dfb      	ldrb	r3, [r7, #23]
 8076ef6:	e000      	b.n	8076efa <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8076ef8:	2300      	movs	r3, #0
}
 8076efa:	4618      	mov	r0, r3
 8076efc:	3718      	adds	r7, #24
 8076efe:	46bd      	mov	sp, r7
 8076f00:	bd80      	pop	{r7, pc}

08076f02 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8076f02:	b580      	push	{r7, lr}
 8076f04:	b082      	sub	sp, #8
 8076f06:	af00      	add	r7, sp, #0
 8076f08:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8076f0a:	687b      	ldr	r3, [r7, #4]
 8076f0c:	2201      	movs	r2, #1
 8076f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8076f12:	687b      	ldr	r3, [r7, #4]
 8076f14:	2200      	movs	r2, #0
 8076f16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8076f1a:	687b      	ldr	r3, [r7, #4]
 8076f1c:	2200      	movs	r2, #0
 8076f1e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8076f20:	687b      	ldr	r3, [r7, #4]
 8076f22:	2200      	movs	r2, #0
 8076f24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8076f28:	687b      	ldr	r3, [r7, #4]
 8076f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076f2e:	2b00      	cmp	r3, #0
 8076f30:	d101      	bne.n	8076f36 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8076f32:	2303      	movs	r3, #3
 8076f34:	e02f      	b.n	8076f96 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8076f36:	687b      	ldr	r3, [r7, #4]
 8076f38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8076f3c:	2b00      	cmp	r3, #0
 8076f3e:	d00f      	beq.n	8076f60 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8076f40:	687b      	ldr	r3, [r7, #4]
 8076f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076f46:	685b      	ldr	r3, [r3, #4]
 8076f48:	2b00      	cmp	r3, #0
 8076f4a:	d009      	beq.n	8076f60 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8076f4c:	687b      	ldr	r3, [r7, #4]
 8076f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076f52:	685b      	ldr	r3, [r3, #4]
 8076f54:	687a      	ldr	r2, [r7, #4]
 8076f56:	6852      	ldr	r2, [r2, #4]
 8076f58:	b2d2      	uxtb	r2, r2
 8076f5a:	4611      	mov	r1, r2
 8076f5c:	6878      	ldr	r0, [r7, #4]
 8076f5e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8076f60:	2340      	movs	r3, #64	; 0x40
 8076f62:	2200      	movs	r2, #0
 8076f64:	2100      	movs	r1, #0
 8076f66:	6878      	ldr	r0, [r7, #4]
 8076f68:	f001 fa9a 	bl	80784a0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8076f6c:	687b      	ldr	r3, [r7, #4]
 8076f6e:	2201      	movs	r2, #1
 8076f70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8076f74:	687b      	ldr	r3, [r7, #4]
 8076f76:	2240      	movs	r2, #64	; 0x40
 8076f78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8076f7c:	2340      	movs	r3, #64	; 0x40
 8076f7e:	2200      	movs	r2, #0
 8076f80:	2180      	movs	r1, #128	; 0x80
 8076f82:	6878      	ldr	r0, [r7, #4]
 8076f84:	f001 fa8c 	bl	80784a0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8076f88:	687b      	ldr	r3, [r7, #4]
 8076f8a:	2201      	movs	r2, #1
 8076f8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8076f8e:	687b      	ldr	r3, [r7, #4]
 8076f90:	2240      	movs	r2, #64	; 0x40
 8076f92:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8076f94:	2300      	movs	r3, #0
}
 8076f96:	4618      	mov	r0, r3
 8076f98:	3708      	adds	r7, #8
 8076f9a:	46bd      	mov	sp, r7
 8076f9c:	bd80      	pop	{r7, pc}

08076f9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8076f9e:	b480      	push	{r7}
 8076fa0:	b083      	sub	sp, #12
 8076fa2:	af00      	add	r7, sp, #0
 8076fa4:	6078      	str	r0, [r7, #4]
 8076fa6:	460b      	mov	r3, r1
 8076fa8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8076faa:	687b      	ldr	r3, [r7, #4]
 8076fac:	78fa      	ldrb	r2, [r7, #3]
 8076fae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8076fb0:	2300      	movs	r3, #0
}
 8076fb2:	4618      	mov	r0, r3
 8076fb4:	370c      	adds	r7, #12
 8076fb6:	46bd      	mov	sp, r7
 8076fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8076fbc:	4770      	bx	lr

08076fbe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8076fbe:	b480      	push	{r7}
 8076fc0:	b083      	sub	sp, #12
 8076fc2:	af00      	add	r7, sp, #0
 8076fc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8076fc6:	687b      	ldr	r3, [r7, #4]
 8076fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076fcc:	b2da      	uxtb	r2, r3
 8076fce:	687b      	ldr	r3, [r7, #4]
 8076fd0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8076fd4:	687b      	ldr	r3, [r7, #4]
 8076fd6:	2204      	movs	r2, #4
 8076fd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8076fdc:	2300      	movs	r3, #0
}
 8076fde:	4618      	mov	r0, r3
 8076fe0:	370c      	adds	r7, #12
 8076fe2:	46bd      	mov	sp, r7
 8076fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8076fe8:	4770      	bx	lr

08076fea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8076fea:	b480      	push	{r7}
 8076fec:	b083      	sub	sp, #12
 8076fee:	af00      	add	r7, sp, #0
 8076ff0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8076ff2:	687b      	ldr	r3, [r7, #4]
 8076ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076ff8:	b2db      	uxtb	r3, r3
 8076ffa:	2b04      	cmp	r3, #4
 8076ffc:	d106      	bne.n	807700c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8076ffe:	687b      	ldr	r3, [r7, #4]
 8077000:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8077004:	b2da      	uxtb	r2, r3
 8077006:	687b      	ldr	r3, [r7, #4]
 8077008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 807700c:	2300      	movs	r3, #0
}
 807700e:	4618      	mov	r0, r3
 8077010:	370c      	adds	r7, #12
 8077012:	46bd      	mov	sp, r7
 8077014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8077018:	4770      	bx	lr

0807701a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 807701a:	b580      	push	{r7, lr}
 807701c:	b082      	sub	sp, #8
 807701e:	af00      	add	r7, sp, #0
 8077020:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8077022:	687b      	ldr	r3, [r7, #4]
 8077024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8077028:	2b00      	cmp	r3, #0
 807702a:	d101      	bne.n	8077030 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 807702c:	2303      	movs	r3, #3
 807702e:	e012      	b.n	8077056 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8077030:	687b      	ldr	r3, [r7, #4]
 8077032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8077036:	b2db      	uxtb	r3, r3
 8077038:	2b03      	cmp	r3, #3
 807703a:	d10b      	bne.n	8077054 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 807703c:	687b      	ldr	r3, [r7, #4]
 807703e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8077042:	69db      	ldr	r3, [r3, #28]
 8077044:	2b00      	cmp	r3, #0
 8077046:	d005      	beq.n	8077054 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8077048:	687b      	ldr	r3, [r7, #4]
 807704a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807704e:	69db      	ldr	r3, [r3, #28]
 8077050:	6878      	ldr	r0, [r7, #4]
 8077052:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8077054:	2300      	movs	r3, #0
}
 8077056:	4618      	mov	r0, r3
 8077058:	3708      	adds	r7, #8
 807705a:	46bd      	mov	sp, r7
 807705c:	bd80      	pop	{r7, pc}

0807705e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 807705e:	b580      	push	{r7, lr}
 8077060:	b082      	sub	sp, #8
 8077062:	af00      	add	r7, sp, #0
 8077064:	6078      	str	r0, [r7, #4]
 8077066:	460b      	mov	r3, r1
 8077068:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 807706a:	687b      	ldr	r3, [r7, #4]
 807706c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8077070:	2b00      	cmp	r3, #0
 8077072:	d101      	bne.n	8077078 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8077074:	2303      	movs	r3, #3
 8077076:	e014      	b.n	80770a2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8077078:	687b      	ldr	r3, [r7, #4]
 807707a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807707e:	b2db      	uxtb	r3, r3
 8077080:	2b03      	cmp	r3, #3
 8077082:	d10d      	bne.n	80770a0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8077084:	687b      	ldr	r3, [r7, #4]
 8077086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807708a:	6a1b      	ldr	r3, [r3, #32]
 807708c:	2b00      	cmp	r3, #0
 807708e:	d007      	beq.n	80770a0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8077090:	687b      	ldr	r3, [r7, #4]
 8077092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8077096:	6a1b      	ldr	r3, [r3, #32]
 8077098:	78fa      	ldrb	r2, [r7, #3]
 807709a:	4611      	mov	r1, r2
 807709c:	6878      	ldr	r0, [r7, #4]
 807709e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80770a0:	2300      	movs	r3, #0
}
 80770a2:	4618      	mov	r0, r3
 80770a4:	3708      	adds	r7, #8
 80770a6:	46bd      	mov	sp, r7
 80770a8:	bd80      	pop	{r7, pc}

080770aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80770aa:	b580      	push	{r7, lr}
 80770ac:	b082      	sub	sp, #8
 80770ae:	af00      	add	r7, sp, #0
 80770b0:	6078      	str	r0, [r7, #4]
 80770b2:	460b      	mov	r3, r1
 80770b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80770b6:	687b      	ldr	r3, [r7, #4]
 80770b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80770bc:	2b00      	cmp	r3, #0
 80770be:	d101      	bne.n	80770c4 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80770c0:	2303      	movs	r3, #3
 80770c2:	e014      	b.n	80770ee <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80770c4:	687b      	ldr	r3, [r7, #4]
 80770c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80770ca:	b2db      	uxtb	r3, r3
 80770cc:	2b03      	cmp	r3, #3
 80770ce:	d10d      	bne.n	80770ec <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80770d0:	687b      	ldr	r3, [r7, #4]
 80770d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80770d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80770d8:	2b00      	cmp	r3, #0
 80770da:	d007      	beq.n	80770ec <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80770dc:	687b      	ldr	r3, [r7, #4]
 80770de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80770e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80770e4:	78fa      	ldrb	r2, [r7, #3]
 80770e6:	4611      	mov	r1, r2
 80770e8:	6878      	ldr	r0, [r7, #4]
 80770ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80770ec:	2300      	movs	r3, #0
}
 80770ee:	4618      	mov	r0, r3
 80770f0:	3708      	adds	r7, #8
 80770f2:	46bd      	mov	sp, r7
 80770f4:	bd80      	pop	{r7, pc}

080770f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80770f6:	b480      	push	{r7}
 80770f8:	b083      	sub	sp, #12
 80770fa:	af00      	add	r7, sp, #0
 80770fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80770fe:	2300      	movs	r3, #0
}
 8077100:	4618      	mov	r0, r3
 8077102:	370c      	adds	r7, #12
 8077104:	46bd      	mov	sp, r7
 8077106:	f85d 7b04 	ldr.w	r7, [sp], #4
 807710a:	4770      	bx	lr

0807710c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 807710c:	b580      	push	{r7, lr}
 807710e:	b082      	sub	sp, #8
 8077110:	af00      	add	r7, sp, #0
 8077112:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8077114:	687b      	ldr	r3, [r7, #4]
 8077116:	2201      	movs	r2, #1
 8077118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 807711c:	687b      	ldr	r3, [r7, #4]
 807711e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8077122:	2b00      	cmp	r3, #0
 8077124:	d009      	beq.n	807713a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8077126:	687b      	ldr	r3, [r7, #4]
 8077128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807712c:	685b      	ldr	r3, [r3, #4]
 807712e:	687a      	ldr	r2, [r7, #4]
 8077130:	6852      	ldr	r2, [r2, #4]
 8077132:	b2d2      	uxtb	r2, r2
 8077134:	4611      	mov	r1, r2
 8077136:	6878      	ldr	r0, [r7, #4]
 8077138:	4798      	blx	r3
  }

  return USBD_OK;
 807713a:	2300      	movs	r3, #0
}
 807713c:	4618      	mov	r0, r3
 807713e:	3708      	adds	r7, #8
 8077140:	46bd      	mov	sp, r7
 8077142:	bd80      	pop	{r7, pc}

08077144 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8077144:	b480      	push	{r7}
 8077146:	b087      	sub	sp, #28
 8077148:	af00      	add	r7, sp, #0
 807714a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 807714c:	687b      	ldr	r3, [r7, #4]
 807714e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8077150:	697b      	ldr	r3, [r7, #20]
 8077152:	781b      	ldrb	r3, [r3, #0]
 8077154:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8077156:	697b      	ldr	r3, [r7, #20]
 8077158:	3301      	adds	r3, #1
 807715a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 807715c:	697b      	ldr	r3, [r7, #20]
 807715e:	781b      	ldrb	r3, [r3, #0]
 8077160:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8077162:	8a3b      	ldrh	r3, [r7, #16]
 8077164:	021b      	lsls	r3, r3, #8
 8077166:	b21a      	sxth	r2, r3
 8077168:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 807716c:	4313      	orrs	r3, r2
 807716e:	b21b      	sxth	r3, r3
 8077170:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8077172:	89fb      	ldrh	r3, [r7, #14]
}
 8077174:	4618      	mov	r0, r3
 8077176:	371c      	adds	r7, #28
 8077178:	46bd      	mov	sp, r7
 807717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807717e:	4770      	bx	lr

08077180 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077180:	b580      	push	{r7, lr}
 8077182:	b084      	sub	sp, #16
 8077184:	af00      	add	r7, sp, #0
 8077186:	6078      	str	r0, [r7, #4]
 8077188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 807718a:	2300      	movs	r3, #0
 807718c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807718e:	683b      	ldr	r3, [r7, #0]
 8077190:	781b      	ldrb	r3, [r3, #0]
 8077192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8077196:	2b40      	cmp	r3, #64	; 0x40
 8077198:	d005      	beq.n	80771a6 <USBD_StdDevReq+0x26>
 807719a:	2b40      	cmp	r3, #64	; 0x40
 807719c:	d853      	bhi.n	8077246 <USBD_StdDevReq+0xc6>
 807719e:	2b00      	cmp	r3, #0
 80771a0:	d00b      	beq.n	80771ba <USBD_StdDevReq+0x3a>
 80771a2:	2b20      	cmp	r3, #32
 80771a4:	d14f      	bne.n	8077246 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80771a6:	687b      	ldr	r3, [r7, #4]
 80771a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80771ac:	689b      	ldr	r3, [r3, #8]
 80771ae:	6839      	ldr	r1, [r7, #0]
 80771b0:	6878      	ldr	r0, [r7, #4]
 80771b2:	4798      	blx	r3
 80771b4:	4603      	mov	r3, r0
 80771b6:	73fb      	strb	r3, [r7, #15]
      break;
 80771b8:	e04a      	b.n	8077250 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80771ba:	683b      	ldr	r3, [r7, #0]
 80771bc:	785b      	ldrb	r3, [r3, #1]
 80771be:	2b09      	cmp	r3, #9
 80771c0:	d83b      	bhi.n	807723a <USBD_StdDevReq+0xba>
 80771c2:	a201      	add	r2, pc, #4	; (adr r2, 80771c8 <USBD_StdDevReq+0x48>)
 80771c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80771c8:	0807721d 	.word	0x0807721d
 80771cc:	08077231 	.word	0x08077231
 80771d0:	0807723b 	.word	0x0807723b
 80771d4:	08077227 	.word	0x08077227
 80771d8:	0807723b 	.word	0x0807723b
 80771dc:	080771fb 	.word	0x080771fb
 80771e0:	080771f1 	.word	0x080771f1
 80771e4:	0807723b 	.word	0x0807723b
 80771e8:	08077213 	.word	0x08077213
 80771ec:	08077205 	.word	0x08077205
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80771f0:	6839      	ldr	r1, [r7, #0]
 80771f2:	6878      	ldr	r0, [r7, #4]
 80771f4:	f000 f9de 	bl	80775b4 <USBD_GetDescriptor>
          break;
 80771f8:	e024      	b.n	8077244 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80771fa:	6839      	ldr	r1, [r7, #0]
 80771fc:	6878      	ldr	r0, [r7, #4]
 80771fe:	f000 fb55 	bl	80778ac <USBD_SetAddress>
          break;
 8077202:	e01f      	b.n	8077244 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8077204:	6839      	ldr	r1, [r7, #0]
 8077206:	6878      	ldr	r0, [r7, #4]
 8077208:	f000 fb94 	bl	8077934 <USBD_SetConfig>
 807720c:	4603      	mov	r3, r0
 807720e:	73fb      	strb	r3, [r7, #15]
          break;
 8077210:	e018      	b.n	8077244 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8077212:	6839      	ldr	r1, [r7, #0]
 8077214:	6878      	ldr	r0, [r7, #4]
 8077216:	f000 fc33 	bl	8077a80 <USBD_GetConfig>
          break;
 807721a:	e013      	b.n	8077244 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 807721c:	6839      	ldr	r1, [r7, #0]
 807721e:	6878      	ldr	r0, [r7, #4]
 8077220:	f000 fc64 	bl	8077aec <USBD_GetStatus>
          break;
 8077224:	e00e      	b.n	8077244 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8077226:	6839      	ldr	r1, [r7, #0]
 8077228:	6878      	ldr	r0, [r7, #4]
 807722a:	f000 fc93 	bl	8077b54 <USBD_SetFeature>
          break;
 807722e:	e009      	b.n	8077244 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8077230:	6839      	ldr	r1, [r7, #0]
 8077232:	6878      	ldr	r0, [r7, #4]
 8077234:	f000 fca2 	bl	8077b7c <USBD_ClrFeature>
          break;
 8077238:	e004      	b.n	8077244 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 807723a:	6839      	ldr	r1, [r7, #0]
 807723c:	6878      	ldr	r0, [r7, #4]
 807723e:	f000 fcf9 	bl	8077c34 <USBD_CtlError>
          break;
 8077242:	bf00      	nop
      }
      break;
 8077244:	e004      	b.n	8077250 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8077246:	6839      	ldr	r1, [r7, #0]
 8077248:	6878      	ldr	r0, [r7, #4]
 807724a:	f000 fcf3 	bl	8077c34 <USBD_CtlError>
      break;
 807724e:	bf00      	nop
  }

  return ret;
 8077250:	7bfb      	ldrb	r3, [r7, #15]
}
 8077252:	4618      	mov	r0, r3
 8077254:	3710      	adds	r7, #16
 8077256:	46bd      	mov	sp, r7
 8077258:	bd80      	pop	{r7, pc}
 807725a:	bf00      	nop

0807725c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807725c:	b580      	push	{r7, lr}
 807725e:	b084      	sub	sp, #16
 8077260:	af00      	add	r7, sp, #0
 8077262:	6078      	str	r0, [r7, #4]
 8077264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8077266:	2300      	movs	r3, #0
 8077268:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807726a:	683b      	ldr	r3, [r7, #0]
 807726c:	781b      	ldrb	r3, [r3, #0]
 807726e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8077272:	2b40      	cmp	r3, #64	; 0x40
 8077274:	d005      	beq.n	8077282 <USBD_StdItfReq+0x26>
 8077276:	2b40      	cmp	r3, #64	; 0x40
 8077278:	d82f      	bhi.n	80772da <USBD_StdItfReq+0x7e>
 807727a:	2b00      	cmp	r3, #0
 807727c:	d001      	beq.n	8077282 <USBD_StdItfReq+0x26>
 807727e:	2b20      	cmp	r3, #32
 8077280:	d12b      	bne.n	80772da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8077282:	687b      	ldr	r3, [r7, #4]
 8077284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8077288:	b2db      	uxtb	r3, r3
 807728a:	3b01      	subs	r3, #1
 807728c:	2b02      	cmp	r3, #2
 807728e:	d81d      	bhi.n	80772cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8077290:	683b      	ldr	r3, [r7, #0]
 8077292:	889b      	ldrh	r3, [r3, #4]
 8077294:	b2db      	uxtb	r3, r3
 8077296:	2b01      	cmp	r3, #1
 8077298:	d813      	bhi.n	80772c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807729a:	687b      	ldr	r3, [r7, #4]
 807729c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80772a0:	689b      	ldr	r3, [r3, #8]
 80772a2:	6839      	ldr	r1, [r7, #0]
 80772a4:	6878      	ldr	r0, [r7, #4]
 80772a6:	4798      	blx	r3
 80772a8:	4603      	mov	r3, r0
 80772aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80772ac:	683b      	ldr	r3, [r7, #0]
 80772ae:	88db      	ldrh	r3, [r3, #6]
 80772b0:	2b00      	cmp	r3, #0
 80772b2:	d110      	bne.n	80772d6 <USBD_StdItfReq+0x7a>
 80772b4:	7bfb      	ldrb	r3, [r7, #15]
 80772b6:	2b00      	cmp	r3, #0
 80772b8:	d10d      	bne.n	80772d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80772ba:	6878      	ldr	r0, [r7, #4]
 80772bc:	f000 fd85 	bl	8077dca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80772c0:	e009      	b.n	80772d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80772c2:	6839      	ldr	r1, [r7, #0]
 80772c4:	6878      	ldr	r0, [r7, #4]
 80772c6:	f000 fcb5 	bl	8077c34 <USBD_CtlError>
          break;
 80772ca:	e004      	b.n	80772d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80772cc:	6839      	ldr	r1, [r7, #0]
 80772ce:	6878      	ldr	r0, [r7, #4]
 80772d0:	f000 fcb0 	bl	8077c34 <USBD_CtlError>
          break;
 80772d4:	e000      	b.n	80772d8 <USBD_StdItfReq+0x7c>
          break;
 80772d6:	bf00      	nop
      }
      break;
 80772d8:	e004      	b.n	80772e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80772da:	6839      	ldr	r1, [r7, #0]
 80772dc:	6878      	ldr	r0, [r7, #4]
 80772de:	f000 fca9 	bl	8077c34 <USBD_CtlError>
      break;
 80772e2:	bf00      	nop
  }

  return ret;
 80772e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80772e6:	4618      	mov	r0, r3
 80772e8:	3710      	adds	r7, #16
 80772ea:	46bd      	mov	sp, r7
 80772ec:	bd80      	pop	{r7, pc}

080772ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80772ee:	b580      	push	{r7, lr}
 80772f0:	b084      	sub	sp, #16
 80772f2:	af00      	add	r7, sp, #0
 80772f4:	6078      	str	r0, [r7, #4]
 80772f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80772f8:	2300      	movs	r3, #0
 80772fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80772fc:	683b      	ldr	r3, [r7, #0]
 80772fe:	889b      	ldrh	r3, [r3, #4]
 8077300:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8077302:	683b      	ldr	r3, [r7, #0]
 8077304:	781b      	ldrb	r3, [r3, #0]
 8077306:	f003 0360 	and.w	r3, r3, #96	; 0x60
 807730a:	2b40      	cmp	r3, #64	; 0x40
 807730c:	d007      	beq.n	807731e <USBD_StdEPReq+0x30>
 807730e:	2b40      	cmp	r3, #64	; 0x40
 8077310:	f200 8145 	bhi.w	807759e <USBD_StdEPReq+0x2b0>
 8077314:	2b00      	cmp	r3, #0
 8077316:	d00c      	beq.n	8077332 <USBD_StdEPReq+0x44>
 8077318:	2b20      	cmp	r3, #32
 807731a:	f040 8140 	bne.w	807759e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807731e:	687b      	ldr	r3, [r7, #4]
 8077320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8077324:	689b      	ldr	r3, [r3, #8]
 8077326:	6839      	ldr	r1, [r7, #0]
 8077328:	6878      	ldr	r0, [r7, #4]
 807732a:	4798      	blx	r3
 807732c:	4603      	mov	r3, r0
 807732e:	73fb      	strb	r3, [r7, #15]
      break;
 8077330:	e13a      	b.n	80775a8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8077332:	683b      	ldr	r3, [r7, #0]
 8077334:	785b      	ldrb	r3, [r3, #1]
 8077336:	2b03      	cmp	r3, #3
 8077338:	d007      	beq.n	807734a <USBD_StdEPReq+0x5c>
 807733a:	2b03      	cmp	r3, #3
 807733c:	f300 8129 	bgt.w	8077592 <USBD_StdEPReq+0x2a4>
 8077340:	2b00      	cmp	r3, #0
 8077342:	d07f      	beq.n	8077444 <USBD_StdEPReq+0x156>
 8077344:	2b01      	cmp	r3, #1
 8077346:	d03c      	beq.n	80773c2 <USBD_StdEPReq+0xd4>
 8077348:	e123      	b.n	8077592 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 807734a:	687b      	ldr	r3, [r7, #4]
 807734c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8077350:	b2db      	uxtb	r3, r3
 8077352:	2b02      	cmp	r3, #2
 8077354:	d002      	beq.n	807735c <USBD_StdEPReq+0x6e>
 8077356:	2b03      	cmp	r3, #3
 8077358:	d016      	beq.n	8077388 <USBD_StdEPReq+0x9a>
 807735a:	e02c      	b.n	80773b6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 807735c:	7bbb      	ldrb	r3, [r7, #14]
 807735e:	2b00      	cmp	r3, #0
 8077360:	d00d      	beq.n	807737e <USBD_StdEPReq+0x90>
 8077362:	7bbb      	ldrb	r3, [r7, #14]
 8077364:	2b80      	cmp	r3, #128	; 0x80
 8077366:	d00a      	beq.n	807737e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8077368:	7bbb      	ldrb	r3, [r7, #14]
 807736a:	4619      	mov	r1, r3
 807736c:	6878      	ldr	r0, [r7, #4]
 807736e:	f001 f8bd 	bl	80784ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8077372:	2180      	movs	r1, #128	; 0x80
 8077374:	6878      	ldr	r0, [r7, #4]
 8077376:	f001 f8b9 	bl	80784ec <USBD_LL_StallEP>
 807737a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 807737c:	e020      	b.n	80773c0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 807737e:	6839      	ldr	r1, [r7, #0]
 8077380:	6878      	ldr	r0, [r7, #4]
 8077382:	f000 fc57 	bl	8077c34 <USBD_CtlError>
              break;
 8077386:	e01b      	b.n	80773c0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8077388:	683b      	ldr	r3, [r7, #0]
 807738a:	885b      	ldrh	r3, [r3, #2]
 807738c:	2b00      	cmp	r3, #0
 807738e:	d10e      	bne.n	80773ae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8077390:	7bbb      	ldrb	r3, [r7, #14]
 8077392:	2b00      	cmp	r3, #0
 8077394:	d00b      	beq.n	80773ae <USBD_StdEPReq+0xc0>
 8077396:	7bbb      	ldrb	r3, [r7, #14]
 8077398:	2b80      	cmp	r3, #128	; 0x80
 807739a:	d008      	beq.n	80773ae <USBD_StdEPReq+0xc0>
 807739c:	683b      	ldr	r3, [r7, #0]
 807739e:	88db      	ldrh	r3, [r3, #6]
 80773a0:	2b00      	cmp	r3, #0
 80773a2:	d104      	bne.n	80773ae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80773a4:	7bbb      	ldrb	r3, [r7, #14]
 80773a6:	4619      	mov	r1, r3
 80773a8:	6878      	ldr	r0, [r7, #4]
 80773aa:	f001 f89f 	bl	80784ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80773ae:	6878      	ldr	r0, [r7, #4]
 80773b0:	f000 fd0b 	bl	8077dca <USBD_CtlSendStatus>

              break;
 80773b4:	e004      	b.n	80773c0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80773b6:	6839      	ldr	r1, [r7, #0]
 80773b8:	6878      	ldr	r0, [r7, #4]
 80773ba:	f000 fc3b 	bl	8077c34 <USBD_CtlError>
              break;
 80773be:	bf00      	nop
          }
          break;
 80773c0:	e0ec      	b.n	807759c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80773c2:	687b      	ldr	r3, [r7, #4]
 80773c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80773c8:	b2db      	uxtb	r3, r3
 80773ca:	2b02      	cmp	r3, #2
 80773cc:	d002      	beq.n	80773d4 <USBD_StdEPReq+0xe6>
 80773ce:	2b03      	cmp	r3, #3
 80773d0:	d016      	beq.n	8077400 <USBD_StdEPReq+0x112>
 80773d2:	e030      	b.n	8077436 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80773d4:	7bbb      	ldrb	r3, [r7, #14]
 80773d6:	2b00      	cmp	r3, #0
 80773d8:	d00d      	beq.n	80773f6 <USBD_StdEPReq+0x108>
 80773da:	7bbb      	ldrb	r3, [r7, #14]
 80773dc:	2b80      	cmp	r3, #128	; 0x80
 80773de:	d00a      	beq.n	80773f6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80773e0:	7bbb      	ldrb	r3, [r7, #14]
 80773e2:	4619      	mov	r1, r3
 80773e4:	6878      	ldr	r0, [r7, #4]
 80773e6:	f001 f881 	bl	80784ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80773ea:	2180      	movs	r1, #128	; 0x80
 80773ec:	6878      	ldr	r0, [r7, #4]
 80773ee:	f001 f87d 	bl	80784ec <USBD_LL_StallEP>
 80773f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80773f4:	e025      	b.n	8077442 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80773f6:	6839      	ldr	r1, [r7, #0]
 80773f8:	6878      	ldr	r0, [r7, #4]
 80773fa:	f000 fc1b 	bl	8077c34 <USBD_CtlError>
              break;
 80773fe:	e020      	b.n	8077442 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8077400:	683b      	ldr	r3, [r7, #0]
 8077402:	885b      	ldrh	r3, [r3, #2]
 8077404:	2b00      	cmp	r3, #0
 8077406:	d11b      	bne.n	8077440 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8077408:	7bbb      	ldrb	r3, [r7, #14]
 807740a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 807740e:	2b00      	cmp	r3, #0
 8077410:	d004      	beq.n	807741c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8077412:	7bbb      	ldrb	r3, [r7, #14]
 8077414:	4619      	mov	r1, r3
 8077416:	6878      	ldr	r0, [r7, #4]
 8077418:	f001 f887 	bl	807852a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 807741c:	6878      	ldr	r0, [r7, #4]
 807741e:	f000 fcd4 	bl	8077dca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8077422:	687b      	ldr	r3, [r7, #4]
 8077424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8077428:	689b      	ldr	r3, [r3, #8]
 807742a:	6839      	ldr	r1, [r7, #0]
 807742c:	6878      	ldr	r0, [r7, #4]
 807742e:	4798      	blx	r3
 8077430:	4603      	mov	r3, r0
 8077432:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8077434:	e004      	b.n	8077440 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8077436:	6839      	ldr	r1, [r7, #0]
 8077438:	6878      	ldr	r0, [r7, #4]
 807743a:	f000 fbfb 	bl	8077c34 <USBD_CtlError>
              break;
 807743e:	e000      	b.n	8077442 <USBD_StdEPReq+0x154>
              break;
 8077440:	bf00      	nop
          }
          break;
 8077442:	e0ab      	b.n	807759c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8077444:	687b      	ldr	r3, [r7, #4]
 8077446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807744a:	b2db      	uxtb	r3, r3
 807744c:	2b02      	cmp	r3, #2
 807744e:	d002      	beq.n	8077456 <USBD_StdEPReq+0x168>
 8077450:	2b03      	cmp	r3, #3
 8077452:	d032      	beq.n	80774ba <USBD_StdEPReq+0x1cc>
 8077454:	e097      	b.n	8077586 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8077456:	7bbb      	ldrb	r3, [r7, #14]
 8077458:	2b00      	cmp	r3, #0
 807745a:	d007      	beq.n	807746c <USBD_StdEPReq+0x17e>
 807745c:	7bbb      	ldrb	r3, [r7, #14]
 807745e:	2b80      	cmp	r3, #128	; 0x80
 8077460:	d004      	beq.n	807746c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8077462:	6839      	ldr	r1, [r7, #0]
 8077464:	6878      	ldr	r0, [r7, #4]
 8077466:	f000 fbe5 	bl	8077c34 <USBD_CtlError>
                break;
 807746a:	e091      	b.n	8077590 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807746c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8077470:	2b00      	cmp	r3, #0
 8077472:	da0b      	bge.n	807748c <USBD_StdEPReq+0x19e>
 8077474:	7bbb      	ldrb	r3, [r7, #14]
 8077476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 807747a:	4613      	mov	r3, r2
 807747c:	009b      	lsls	r3, r3, #2
 807747e:	4413      	add	r3, r2
 8077480:	009b      	lsls	r3, r3, #2
 8077482:	3310      	adds	r3, #16
 8077484:	687a      	ldr	r2, [r7, #4]
 8077486:	4413      	add	r3, r2
 8077488:	3304      	adds	r3, #4
 807748a:	e00b      	b.n	80774a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 807748c:	7bbb      	ldrb	r3, [r7, #14]
 807748e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8077492:	4613      	mov	r3, r2
 8077494:	009b      	lsls	r3, r3, #2
 8077496:	4413      	add	r3, r2
 8077498:	009b      	lsls	r3, r3, #2
 807749a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 807749e:	687a      	ldr	r2, [r7, #4]
 80774a0:	4413      	add	r3, r2
 80774a2:	3304      	adds	r3, #4
 80774a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80774a6:	68bb      	ldr	r3, [r7, #8]
 80774a8:	2200      	movs	r2, #0
 80774aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80774ac:	68bb      	ldr	r3, [r7, #8]
 80774ae:	2202      	movs	r2, #2
 80774b0:	4619      	mov	r1, r3
 80774b2:	6878      	ldr	r0, [r7, #4]
 80774b4:	f000 fc2f 	bl	8077d16 <USBD_CtlSendData>
              break;
 80774b8:	e06a      	b.n	8077590 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80774ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80774be:	2b00      	cmp	r3, #0
 80774c0:	da11      	bge.n	80774e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80774c2:	7bbb      	ldrb	r3, [r7, #14]
 80774c4:	f003 020f 	and.w	r2, r3, #15
 80774c8:	6879      	ldr	r1, [r7, #4]
 80774ca:	4613      	mov	r3, r2
 80774cc:	009b      	lsls	r3, r3, #2
 80774ce:	4413      	add	r3, r2
 80774d0:	009b      	lsls	r3, r3, #2
 80774d2:	440b      	add	r3, r1
 80774d4:	3324      	adds	r3, #36	; 0x24
 80774d6:	881b      	ldrh	r3, [r3, #0]
 80774d8:	2b00      	cmp	r3, #0
 80774da:	d117      	bne.n	807750c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80774dc:	6839      	ldr	r1, [r7, #0]
 80774de:	6878      	ldr	r0, [r7, #4]
 80774e0:	f000 fba8 	bl	8077c34 <USBD_CtlError>
                  break;
 80774e4:	e054      	b.n	8077590 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80774e6:	7bbb      	ldrb	r3, [r7, #14]
 80774e8:	f003 020f 	and.w	r2, r3, #15
 80774ec:	6879      	ldr	r1, [r7, #4]
 80774ee:	4613      	mov	r3, r2
 80774f0:	009b      	lsls	r3, r3, #2
 80774f2:	4413      	add	r3, r2
 80774f4:	009b      	lsls	r3, r3, #2
 80774f6:	440b      	add	r3, r1
 80774f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80774fc:	881b      	ldrh	r3, [r3, #0]
 80774fe:	2b00      	cmp	r3, #0
 8077500:	d104      	bne.n	807750c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8077502:	6839      	ldr	r1, [r7, #0]
 8077504:	6878      	ldr	r0, [r7, #4]
 8077506:	f000 fb95 	bl	8077c34 <USBD_CtlError>
                  break;
 807750a:	e041      	b.n	8077590 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807750c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8077510:	2b00      	cmp	r3, #0
 8077512:	da0b      	bge.n	807752c <USBD_StdEPReq+0x23e>
 8077514:	7bbb      	ldrb	r3, [r7, #14]
 8077516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 807751a:	4613      	mov	r3, r2
 807751c:	009b      	lsls	r3, r3, #2
 807751e:	4413      	add	r3, r2
 8077520:	009b      	lsls	r3, r3, #2
 8077522:	3310      	adds	r3, #16
 8077524:	687a      	ldr	r2, [r7, #4]
 8077526:	4413      	add	r3, r2
 8077528:	3304      	adds	r3, #4
 807752a:	e00b      	b.n	8077544 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 807752c:	7bbb      	ldrb	r3, [r7, #14]
 807752e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8077532:	4613      	mov	r3, r2
 8077534:	009b      	lsls	r3, r3, #2
 8077536:	4413      	add	r3, r2
 8077538:	009b      	lsls	r3, r3, #2
 807753a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 807753e:	687a      	ldr	r2, [r7, #4]
 8077540:	4413      	add	r3, r2
 8077542:	3304      	adds	r3, #4
 8077544:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8077546:	7bbb      	ldrb	r3, [r7, #14]
 8077548:	2b00      	cmp	r3, #0
 807754a:	d002      	beq.n	8077552 <USBD_StdEPReq+0x264>
 807754c:	7bbb      	ldrb	r3, [r7, #14]
 807754e:	2b80      	cmp	r3, #128	; 0x80
 8077550:	d103      	bne.n	807755a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8077552:	68bb      	ldr	r3, [r7, #8]
 8077554:	2200      	movs	r2, #0
 8077556:	601a      	str	r2, [r3, #0]
 8077558:	e00e      	b.n	8077578 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 807755a:	7bbb      	ldrb	r3, [r7, #14]
 807755c:	4619      	mov	r1, r3
 807755e:	6878      	ldr	r0, [r7, #4]
 8077560:	f001 f802 	bl	8078568 <USBD_LL_IsStallEP>
 8077564:	4603      	mov	r3, r0
 8077566:	2b00      	cmp	r3, #0
 8077568:	d003      	beq.n	8077572 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 807756a:	68bb      	ldr	r3, [r7, #8]
 807756c:	2201      	movs	r2, #1
 807756e:	601a      	str	r2, [r3, #0]
 8077570:	e002      	b.n	8077578 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8077572:	68bb      	ldr	r3, [r7, #8]
 8077574:	2200      	movs	r2, #0
 8077576:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8077578:	68bb      	ldr	r3, [r7, #8]
 807757a:	2202      	movs	r2, #2
 807757c:	4619      	mov	r1, r3
 807757e:	6878      	ldr	r0, [r7, #4]
 8077580:	f000 fbc9 	bl	8077d16 <USBD_CtlSendData>
              break;
 8077584:	e004      	b.n	8077590 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8077586:	6839      	ldr	r1, [r7, #0]
 8077588:	6878      	ldr	r0, [r7, #4]
 807758a:	f000 fb53 	bl	8077c34 <USBD_CtlError>
              break;
 807758e:	bf00      	nop
          }
          break;
 8077590:	e004      	b.n	807759c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8077592:	6839      	ldr	r1, [r7, #0]
 8077594:	6878      	ldr	r0, [r7, #4]
 8077596:	f000 fb4d 	bl	8077c34 <USBD_CtlError>
          break;
 807759a:	bf00      	nop
      }
      break;
 807759c:	e004      	b.n	80775a8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 807759e:	6839      	ldr	r1, [r7, #0]
 80775a0:	6878      	ldr	r0, [r7, #4]
 80775a2:	f000 fb47 	bl	8077c34 <USBD_CtlError>
      break;
 80775a6:	bf00      	nop
  }

  return ret;
 80775a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80775aa:	4618      	mov	r0, r3
 80775ac:	3710      	adds	r7, #16
 80775ae:	46bd      	mov	sp, r7
 80775b0:	bd80      	pop	{r7, pc}
	...

080775b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80775b4:	b580      	push	{r7, lr}
 80775b6:	b084      	sub	sp, #16
 80775b8:	af00      	add	r7, sp, #0
 80775ba:	6078      	str	r0, [r7, #4]
 80775bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80775be:	2300      	movs	r3, #0
 80775c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80775c2:	2300      	movs	r3, #0
 80775c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80775c6:	2300      	movs	r3, #0
 80775c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80775ca:	683b      	ldr	r3, [r7, #0]
 80775cc:	885b      	ldrh	r3, [r3, #2]
 80775ce:	0a1b      	lsrs	r3, r3, #8
 80775d0:	b29b      	uxth	r3, r3
 80775d2:	3b01      	subs	r3, #1
 80775d4:	2b06      	cmp	r3, #6
 80775d6:	f200 813b 	bhi.w	8077850 <USBD_GetDescriptor+0x29c>
 80775da:	a201      	add	r2, pc, #4	; (adr r2, 80775e0 <USBD_GetDescriptor+0x2c>)
 80775dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80775e0:	080775fd 	.word	0x080775fd
 80775e4:	08077615 	.word	0x08077615
 80775e8:	08077655 	.word	0x08077655
 80775ec:	08077851 	.word	0x08077851
 80775f0:	08077851 	.word	0x08077851
 80775f4:	080777f1 	.word	0x080777f1
 80775f8:	0807781d 	.word	0x0807781d
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80775fc:	687b      	ldr	r3, [r7, #4]
 80775fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8077602:	681b      	ldr	r3, [r3, #0]
 8077604:	687a      	ldr	r2, [r7, #4]
 8077606:	7c12      	ldrb	r2, [r2, #16]
 8077608:	f107 0108 	add.w	r1, r7, #8
 807760c:	4610      	mov	r0, r2
 807760e:	4798      	blx	r3
 8077610:	60f8      	str	r0, [r7, #12]
      break;
 8077612:	e125      	b.n	8077860 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8077614:	687b      	ldr	r3, [r7, #4]
 8077616:	7c1b      	ldrb	r3, [r3, #16]
 8077618:	2b00      	cmp	r3, #0
 807761a:	d10d      	bne.n	8077638 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 807761c:	687b      	ldr	r3, [r7, #4]
 807761e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8077622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8077624:	f107 0208 	add.w	r2, r7, #8
 8077628:	4610      	mov	r0, r2
 807762a:	4798      	blx	r3
 807762c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 807762e:	68fb      	ldr	r3, [r7, #12]
 8077630:	3301      	adds	r3, #1
 8077632:	2202      	movs	r2, #2
 8077634:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8077636:	e113      	b.n	8077860 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8077638:	687b      	ldr	r3, [r7, #4]
 807763a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807763e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8077640:	f107 0208 	add.w	r2, r7, #8
 8077644:	4610      	mov	r0, r2
 8077646:	4798      	blx	r3
 8077648:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 807764a:	68fb      	ldr	r3, [r7, #12]
 807764c:	3301      	adds	r3, #1
 807764e:	2202      	movs	r2, #2
 8077650:	701a      	strb	r2, [r3, #0]
      break;
 8077652:	e105      	b.n	8077860 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8077654:	683b      	ldr	r3, [r7, #0]
 8077656:	885b      	ldrh	r3, [r3, #2]
 8077658:	b2db      	uxtb	r3, r3
 807765a:	2b05      	cmp	r3, #5
 807765c:	f200 80ac 	bhi.w	80777b8 <USBD_GetDescriptor+0x204>
 8077660:	a201      	add	r2, pc, #4	; (adr r2, 8077668 <USBD_GetDescriptor+0xb4>)
 8077662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8077666:	bf00      	nop
 8077668:	08077681 	.word	0x08077681
 807766c:	080776b5 	.word	0x080776b5
 8077670:	080776e9 	.word	0x080776e9
 8077674:	0807771d 	.word	0x0807771d
 8077678:	08077751 	.word	0x08077751
 807767c:	08077785 	.word	0x08077785
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8077680:	687b      	ldr	r3, [r7, #4]
 8077682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8077686:	685b      	ldr	r3, [r3, #4]
 8077688:	2b00      	cmp	r3, #0
 807768a:	d00b      	beq.n	80776a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 807768c:	687b      	ldr	r3, [r7, #4]
 807768e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8077692:	685b      	ldr	r3, [r3, #4]
 8077694:	687a      	ldr	r2, [r7, #4]
 8077696:	7c12      	ldrb	r2, [r2, #16]
 8077698:	f107 0108 	add.w	r1, r7, #8
 807769c:	4610      	mov	r0, r2
 807769e:	4798      	blx	r3
 80776a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80776a2:	e0a4      	b.n	80777ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80776a4:	6839      	ldr	r1, [r7, #0]
 80776a6:	6878      	ldr	r0, [r7, #4]
 80776a8:	f000 fac4 	bl	8077c34 <USBD_CtlError>
            err++;
 80776ac:	7afb      	ldrb	r3, [r7, #11]
 80776ae:	3301      	adds	r3, #1
 80776b0:	72fb      	strb	r3, [r7, #11]
          break;
 80776b2:	e09c      	b.n	80777ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80776b4:	687b      	ldr	r3, [r7, #4]
 80776b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80776ba:	689b      	ldr	r3, [r3, #8]
 80776bc:	2b00      	cmp	r3, #0
 80776be:	d00b      	beq.n	80776d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80776c0:	687b      	ldr	r3, [r7, #4]
 80776c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80776c6:	689b      	ldr	r3, [r3, #8]
 80776c8:	687a      	ldr	r2, [r7, #4]
 80776ca:	7c12      	ldrb	r2, [r2, #16]
 80776cc:	f107 0108 	add.w	r1, r7, #8
 80776d0:	4610      	mov	r0, r2
 80776d2:	4798      	blx	r3
 80776d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80776d6:	e08a      	b.n	80777ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80776d8:	6839      	ldr	r1, [r7, #0]
 80776da:	6878      	ldr	r0, [r7, #4]
 80776dc:	f000 faaa 	bl	8077c34 <USBD_CtlError>
            err++;
 80776e0:	7afb      	ldrb	r3, [r7, #11]
 80776e2:	3301      	adds	r3, #1
 80776e4:	72fb      	strb	r3, [r7, #11]
          break;
 80776e6:	e082      	b.n	80777ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80776e8:	687b      	ldr	r3, [r7, #4]
 80776ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80776ee:	68db      	ldr	r3, [r3, #12]
 80776f0:	2b00      	cmp	r3, #0
 80776f2:	d00b      	beq.n	807770c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80776f4:	687b      	ldr	r3, [r7, #4]
 80776f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80776fa:	68db      	ldr	r3, [r3, #12]
 80776fc:	687a      	ldr	r2, [r7, #4]
 80776fe:	7c12      	ldrb	r2, [r2, #16]
 8077700:	f107 0108 	add.w	r1, r7, #8
 8077704:	4610      	mov	r0, r2
 8077706:	4798      	blx	r3
 8077708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807770a:	e070      	b.n	80777ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 807770c:	6839      	ldr	r1, [r7, #0]
 807770e:	6878      	ldr	r0, [r7, #4]
 8077710:	f000 fa90 	bl	8077c34 <USBD_CtlError>
            err++;
 8077714:	7afb      	ldrb	r3, [r7, #11]
 8077716:	3301      	adds	r3, #1
 8077718:	72fb      	strb	r3, [r7, #11]
          break;
 807771a:	e068      	b.n	80777ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 807771c:	687b      	ldr	r3, [r7, #4]
 807771e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8077722:	691b      	ldr	r3, [r3, #16]
 8077724:	2b00      	cmp	r3, #0
 8077726:	d00b      	beq.n	8077740 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8077728:	687b      	ldr	r3, [r7, #4]
 807772a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807772e:	691b      	ldr	r3, [r3, #16]
 8077730:	687a      	ldr	r2, [r7, #4]
 8077732:	7c12      	ldrb	r2, [r2, #16]
 8077734:	f107 0108 	add.w	r1, r7, #8
 8077738:	4610      	mov	r0, r2
 807773a:	4798      	blx	r3
 807773c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807773e:	e056      	b.n	80777ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8077740:	6839      	ldr	r1, [r7, #0]
 8077742:	6878      	ldr	r0, [r7, #4]
 8077744:	f000 fa76 	bl	8077c34 <USBD_CtlError>
            err++;
 8077748:	7afb      	ldrb	r3, [r7, #11]
 807774a:	3301      	adds	r3, #1
 807774c:	72fb      	strb	r3, [r7, #11]
          break;
 807774e:	e04e      	b.n	80777ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8077750:	687b      	ldr	r3, [r7, #4]
 8077752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8077756:	695b      	ldr	r3, [r3, #20]
 8077758:	2b00      	cmp	r3, #0
 807775a:	d00b      	beq.n	8077774 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 807775c:	687b      	ldr	r3, [r7, #4]
 807775e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8077762:	695b      	ldr	r3, [r3, #20]
 8077764:	687a      	ldr	r2, [r7, #4]
 8077766:	7c12      	ldrb	r2, [r2, #16]
 8077768:	f107 0108 	add.w	r1, r7, #8
 807776c:	4610      	mov	r0, r2
 807776e:	4798      	blx	r3
 8077770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8077772:	e03c      	b.n	80777ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8077774:	6839      	ldr	r1, [r7, #0]
 8077776:	6878      	ldr	r0, [r7, #4]
 8077778:	f000 fa5c 	bl	8077c34 <USBD_CtlError>
            err++;
 807777c:	7afb      	ldrb	r3, [r7, #11]
 807777e:	3301      	adds	r3, #1
 8077780:	72fb      	strb	r3, [r7, #11]
          break;
 8077782:	e034      	b.n	80777ee <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8077784:	687b      	ldr	r3, [r7, #4]
 8077786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807778a:	699b      	ldr	r3, [r3, #24]
 807778c:	2b00      	cmp	r3, #0
 807778e:	d00b      	beq.n	80777a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8077790:	687b      	ldr	r3, [r7, #4]
 8077792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8077796:	699b      	ldr	r3, [r3, #24]
 8077798:	687a      	ldr	r2, [r7, #4]
 807779a:	7c12      	ldrb	r2, [r2, #16]
 807779c:	f107 0108 	add.w	r1, r7, #8
 80777a0:	4610      	mov	r0, r2
 80777a2:	4798      	blx	r3
 80777a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80777a6:	e022      	b.n	80777ee <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80777a8:	6839      	ldr	r1, [r7, #0]
 80777aa:	6878      	ldr	r0, [r7, #4]
 80777ac:	f000 fa42 	bl	8077c34 <USBD_CtlError>
            err++;
 80777b0:	7afb      	ldrb	r3, [r7, #11]
 80777b2:	3301      	adds	r3, #1
 80777b4:	72fb      	strb	r3, [r7, #11]
          break;
 80777b6:	e01a      	b.n	80777ee <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 80777b8:	687b      	ldr	r3, [r7, #4]
 80777ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80777be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80777c0:	2b00      	cmp	r3, #0
 80777c2:	d00c      	beq.n	80777de <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80777c4:	687b      	ldr	r3, [r7, #4]
 80777c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80777ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80777cc:	683a      	ldr	r2, [r7, #0]
 80777ce:	8852      	ldrh	r2, [r2, #2]
 80777d0:	b2d1      	uxtb	r1, r2
 80777d2:	f107 0208 	add.w	r2, r7, #8
 80777d6:	6878      	ldr	r0, [r7, #4]
 80777d8:	4798      	blx	r3
 80777da:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 80777dc:	e006      	b.n	80777ec <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 80777de:	6839      	ldr	r1, [r7, #0]
 80777e0:	6878      	ldr	r0, [r7, #4]
 80777e2:	f000 fa27 	bl	8077c34 <USBD_CtlError>
            err++;
 80777e6:	7afb      	ldrb	r3, [r7, #11]
 80777e8:	3301      	adds	r3, #1
 80777ea:	72fb      	strb	r3, [r7, #11]
          break;
 80777ec:	bf00      	nop
      }
      break;
 80777ee:	e037      	b.n	8077860 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80777f0:	687b      	ldr	r3, [r7, #4]
 80777f2:	7c1b      	ldrb	r3, [r3, #16]
 80777f4:	2b00      	cmp	r3, #0
 80777f6:	d109      	bne.n	807780c <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80777f8:	687b      	ldr	r3, [r7, #4]
 80777fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80777fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8077800:	f107 0208 	add.w	r2, r7, #8
 8077804:	4610      	mov	r0, r2
 8077806:	4798      	blx	r3
 8077808:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 807780a:	e029      	b.n	8077860 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 807780c:	6839      	ldr	r1, [r7, #0]
 807780e:	6878      	ldr	r0, [r7, #4]
 8077810:	f000 fa10 	bl	8077c34 <USBD_CtlError>
        err++;
 8077814:	7afb      	ldrb	r3, [r7, #11]
 8077816:	3301      	adds	r3, #1
 8077818:	72fb      	strb	r3, [r7, #11]
      break;
 807781a:	e021      	b.n	8077860 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 807781c:	687b      	ldr	r3, [r7, #4]
 807781e:	7c1b      	ldrb	r3, [r3, #16]
 8077820:	2b00      	cmp	r3, #0
 8077822:	d10d      	bne.n	8077840 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8077824:	687b      	ldr	r3, [r7, #4]
 8077826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807782a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807782c:	f107 0208 	add.w	r2, r7, #8
 8077830:	4610      	mov	r0, r2
 8077832:	4798      	blx	r3
 8077834:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8077836:	68fb      	ldr	r3, [r7, #12]
 8077838:	3301      	adds	r3, #1
 807783a:	2207      	movs	r2, #7
 807783c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 807783e:	e00f      	b.n	8077860 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8077840:	6839      	ldr	r1, [r7, #0]
 8077842:	6878      	ldr	r0, [r7, #4]
 8077844:	f000 f9f6 	bl	8077c34 <USBD_CtlError>
        err++;
 8077848:	7afb      	ldrb	r3, [r7, #11]
 807784a:	3301      	adds	r3, #1
 807784c:	72fb      	strb	r3, [r7, #11]
      break;
 807784e:	e007      	b.n	8077860 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8077850:	6839      	ldr	r1, [r7, #0]
 8077852:	6878      	ldr	r0, [r7, #4]
 8077854:	f000 f9ee 	bl	8077c34 <USBD_CtlError>
      err++;
 8077858:	7afb      	ldrb	r3, [r7, #11]
 807785a:	3301      	adds	r3, #1
 807785c:	72fb      	strb	r3, [r7, #11]
      break;
 807785e:	bf00      	nop
  }

  if (err != 0U)
 8077860:	7afb      	ldrb	r3, [r7, #11]
 8077862:	2b00      	cmp	r3, #0
 8077864:	d11e      	bne.n	80778a4 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8077866:	683b      	ldr	r3, [r7, #0]
 8077868:	88db      	ldrh	r3, [r3, #6]
 807786a:	2b00      	cmp	r3, #0
 807786c:	d016      	beq.n	807789c <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 807786e:	893b      	ldrh	r3, [r7, #8]
 8077870:	2b00      	cmp	r3, #0
 8077872:	d00e      	beq.n	8077892 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8077874:	683b      	ldr	r3, [r7, #0]
 8077876:	88da      	ldrh	r2, [r3, #6]
 8077878:	893b      	ldrh	r3, [r7, #8]
 807787a:	4293      	cmp	r3, r2
 807787c:	bf28      	it	cs
 807787e:	4613      	movcs	r3, r2
 8077880:	b29b      	uxth	r3, r3
 8077882:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8077884:	893b      	ldrh	r3, [r7, #8]
 8077886:	461a      	mov	r2, r3
 8077888:	68f9      	ldr	r1, [r7, #12]
 807788a:	6878      	ldr	r0, [r7, #4]
 807788c:	f000 fa43 	bl	8077d16 <USBD_CtlSendData>
 8077890:	e009      	b.n	80778a6 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8077892:	6839      	ldr	r1, [r7, #0]
 8077894:	6878      	ldr	r0, [r7, #4]
 8077896:	f000 f9cd 	bl	8077c34 <USBD_CtlError>
 807789a:	e004      	b.n	80778a6 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 807789c:	6878      	ldr	r0, [r7, #4]
 807789e:	f000 fa94 	bl	8077dca <USBD_CtlSendStatus>
 80778a2:	e000      	b.n	80778a6 <USBD_GetDescriptor+0x2f2>
    return;
 80778a4:	bf00      	nop
  }
}
 80778a6:	3710      	adds	r7, #16
 80778a8:	46bd      	mov	sp, r7
 80778aa:	bd80      	pop	{r7, pc}

080778ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80778ac:	b580      	push	{r7, lr}
 80778ae:	b084      	sub	sp, #16
 80778b0:	af00      	add	r7, sp, #0
 80778b2:	6078      	str	r0, [r7, #4]
 80778b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80778b6:	683b      	ldr	r3, [r7, #0]
 80778b8:	889b      	ldrh	r3, [r3, #4]
 80778ba:	2b00      	cmp	r3, #0
 80778bc:	d131      	bne.n	8077922 <USBD_SetAddress+0x76>
 80778be:	683b      	ldr	r3, [r7, #0]
 80778c0:	88db      	ldrh	r3, [r3, #6]
 80778c2:	2b00      	cmp	r3, #0
 80778c4:	d12d      	bne.n	8077922 <USBD_SetAddress+0x76>
 80778c6:	683b      	ldr	r3, [r7, #0]
 80778c8:	885b      	ldrh	r3, [r3, #2]
 80778ca:	2b7f      	cmp	r3, #127	; 0x7f
 80778cc:	d829      	bhi.n	8077922 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80778ce:	683b      	ldr	r3, [r7, #0]
 80778d0:	885b      	ldrh	r3, [r3, #2]
 80778d2:	b2db      	uxtb	r3, r3
 80778d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80778d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80778da:	687b      	ldr	r3, [r7, #4]
 80778dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80778e0:	b2db      	uxtb	r3, r3
 80778e2:	2b03      	cmp	r3, #3
 80778e4:	d104      	bne.n	80778f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80778e6:	6839      	ldr	r1, [r7, #0]
 80778e8:	6878      	ldr	r0, [r7, #4]
 80778ea:	f000 f9a3 	bl	8077c34 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80778ee:	e01d      	b.n	807792c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80778f0:	687b      	ldr	r3, [r7, #4]
 80778f2:	7bfa      	ldrb	r2, [r7, #15]
 80778f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80778f8:	7bfb      	ldrb	r3, [r7, #15]
 80778fa:	4619      	mov	r1, r3
 80778fc:	6878      	ldr	r0, [r7, #4]
 80778fe:	f000 fe5f 	bl	80785c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8077902:	6878      	ldr	r0, [r7, #4]
 8077904:	f000 fa61 	bl	8077dca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8077908:	7bfb      	ldrb	r3, [r7, #15]
 807790a:	2b00      	cmp	r3, #0
 807790c:	d004      	beq.n	8077918 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 807790e:	687b      	ldr	r3, [r7, #4]
 8077910:	2202      	movs	r2, #2
 8077912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8077916:	e009      	b.n	807792c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8077918:	687b      	ldr	r3, [r7, #4]
 807791a:	2201      	movs	r2, #1
 807791c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8077920:	e004      	b.n	807792c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8077922:	6839      	ldr	r1, [r7, #0]
 8077924:	6878      	ldr	r0, [r7, #4]
 8077926:	f000 f985 	bl	8077c34 <USBD_CtlError>
  }
}
 807792a:	bf00      	nop
 807792c:	bf00      	nop
 807792e:	3710      	adds	r7, #16
 8077930:	46bd      	mov	sp, r7
 8077932:	bd80      	pop	{r7, pc}

08077934 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077934:	b580      	push	{r7, lr}
 8077936:	b084      	sub	sp, #16
 8077938:	af00      	add	r7, sp, #0
 807793a:	6078      	str	r0, [r7, #4]
 807793c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 807793e:	2300      	movs	r3, #0
 8077940:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8077942:	683b      	ldr	r3, [r7, #0]
 8077944:	885b      	ldrh	r3, [r3, #2]
 8077946:	b2da      	uxtb	r2, r3
 8077948:	4b4c      	ldr	r3, [pc, #304]	; (8077a7c <USBD_SetConfig+0x148>)
 807794a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 807794c:	4b4b      	ldr	r3, [pc, #300]	; (8077a7c <USBD_SetConfig+0x148>)
 807794e:	781b      	ldrb	r3, [r3, #0]
 8077950:	2b01      	cmp	r3, #1
 8077952:	d905      	bls.n	8077960 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8077954:	6839      	ldr	r1, [r7, #0]
 8077956:	6878      	ldr	r0, [r7, #4]
 8077958:	f000 f96c 	bl	8077c34 <USBD_CtlError>
    return USBD_FAIL;
 807795c:	2303      	movs	r3, #3
 807795e:	e088      	b.n	8077a72 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8077960:	687b      	ldr	r3, [r7, #4]
 8077962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8077966:	b2db      	uxtb	r3, r3
 8077968:	2b02      	cmp	r3, #2
 807796a:	d002      	beq.n	8077972 <USBD_SetConfig+0x3e>
 807796c:	2b03      	cmp	r3, #3
 807796e:	d025      	beq.n	80779bc <USBD_SetConfig+0x88>
 8077970:	e071      	b.n	8077a56 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8077972:	4b42      	ldr	r3, [pc, #264]	; (8077a7c <USBD_SetConfig+0x148>)
 8077974:	781b      	ldrb	r3, [r3, #0]
 8077976:	2b00      	cmp	r3, #0
 8077978:	d01c      	beq.n	80779b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 807797a:	4b40      	ldr	r3, [pc, #256]	; (8077a7c <USBD_SetConfig+0x148>)
 807797c:	781b      	ldrb	r3, [r3, #0]
 807797e:	461a      	mov	r2, r3
 8077980:	687b      	ldr	r3, [r7, #4]
 8077982:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8077984:	4b3d      	ldr	r3, [pc, #244]	; (8077a7c <USBD_SetConfig+0x148>)
 8077986:	781b      	ldrb	r3, [r3, #0]
 8077988:	4619      	mov	r1, r3
 807798a:	6878      	ldr	r0, [r7, #4]
 807798c:	f7ff f937 	bl	8076bfe <USBD_SetClassConfig>
 8077990:	4603      	mov	r3, r0
 8077992:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8077994:	7bfb      	ldrb	r3, [r7, #15]
 8077996:	2b00      	cmp	r3, #0
 8077998:	d004      	beq.n	80779a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 807799a:	6839      	ldr	r1, [r7, #0]
 807799c:	6878      	ldr	r0, [r7, #4]
 807799e:	f000 f949 	bl	8077c34 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80779a2:	e065      	b.n	8077a70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80779a4:	6878      	ldr	r0, [r7, #4]
 80779a6:	f000 fa10 	bl	8077dca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80779aa:	687b      	ldr	r3, [r7, #4]
 80779ac:	2203      	movs	r2, #3
 80779ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80779b2:	e05d      	b.n	8077a70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80779b4:	6878      	ldr	r0, [r7, #4]
 80779b6:	f000 fa08 	bl	8077dca <USBD_CtlSendStatus>
      break;
 80779ba:	e059      	b.n	8077a70 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80779bc:	4b2f      	ldr	r3, [pc, #188]	; (8077a7c <USBD_SetConfig+0x148>)
 80779be:	781b      	ldrb	r3, [r3, #0]
 80779c0:	2b00      	cmp	r3, #0
 80779c2:	d112      	bne.n	80779ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80779c4:	687b      	ldr	r3, [r7, #4]
 80779c6:	2202      	movs	r2, #2
 80779c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80779cc:	4b2b      	ldr	r3, [pc, #172]	; (8077a7c <USBD_SetConfig+0x148>)
 80779ce:	781b      	ldrb	r3, [r3, #0]
 80779d0:	461a      	mov	r2, r3
 80779d2:	687b      	ldr	r3, [r7, #4]
 80779d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80779d6:	4b29      	ldr	r3, [pc, #164]	; (8077a7c <USBD_SetConfig+0x148>)
 80779d8:	781b      	ldrb	r3, [r3, #0]
 80779da:	4619      	mov	r1, r3
 80779dc:	6878      	ldr	r0, [r7, #4]
 80779de:	f7ff f92a 	bl	8076c36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80779e2:	6878      	ldr	r0, [r7, #4]
 80779e4:	f000 f9f1 	bl	8077dca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80779e8:	e042      	b.n	8077a70 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80779ea:	4b24      	ldr	r3, [pc, #144]	; (8077a7c <USBD_SetConfig+0x148>)
 80779ec:	781b      	ldrb	r3, [r3, #0]
 80779ee:	461a      	mov	r2, r3
 80779f0:	687b      	ldr	r3, [r7, #4]
 80779f2:	685b      	ldr	r3, [r3, #4]
 80779f4:	429a      	cmp	r2, r3
 80779f6:	d02a      	beq.n	8077a4e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80779f8:	687b      	ldr	r3, [r7, #4]
 80779fa:	685b      	ldr	r3, [r3, #4]
 80779fc:	b2db      	uxtb	r3, r3
 80779fe:	4619      	mov	r1, r3
 8077a00:	6878      	ldr	r0, [r7, #4]
 8077a02:	f7ff f918 	bl	8076c36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8077a06:	4b1d      	ldr	r3, [pc, #116]	; (8077a7c <USBD_SetConfig+0x148>)
 8077a08:	781b      	ldrb	r3, [r3, #0]
 8077a0a:	461a      	mov	r2, r3
 8077a0c:	687b      	ldr	r3, [r7, #4]
 8077a0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8077a10:	4b1a      	ldr	r3, [pc, #104]	; (8077a7c <USBD_SetConfig+0x148>)
 8077a12:	781b      	ldrb	r3, [r3, #0]
 8077a14:	4619      	mov	r1, r3
 8077a16:	6878      	ldr	r0, [r7, #4]
 8077a18:	f7ff f8f1 	bl	8076bfe <USBD_SetClassConfig>
 8077a1c:	4603      	mov	r3, r0
 8077a1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8077a20:	7bfb      	ldrb	r3, [r7, #15]
 8077a22:	2b00      	cmp	r3, #0
 8077a24:	d00f      	beq.n	8077a46 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8077a26:	6839      	ldr	r1, [r7, #0]
 8077a28:	6878      	ldr	r0, [r7, #4]
 8077a2a:	f000 f903 	bl	8077c34 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8077a2e:	687b      	ldr	r3, [r7, #4]
 8077a30:	685b      	ldr	r3, [r3, #4]
 8077a32:	b2db      	uxtb	r3, r3
 8077a34:	4619      	mov	r1, r3
 8077a36:	6878      	ldr	r0, [r7, #4]
 8077a38:	f7ff f8fd 	bl	8076c36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8077a3c:	687b      	ldr	r3, [r7, #4]
 8077a3e:	2202      	movs	r2, #2
 8077a40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8077a44:	e014      	b.n	8077a70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8077a46:	6878      	ldr	r0, [r7, #4]
 8077a48:	f000 f9bf 	bl	8077dca <USBD_CtlSendStatus>
      break;
 8077a4c:	e010      	b.n	8077a70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8077a4e:	6878      	ldr	r0, [r7, #4]
 8077a50:	f000 f9bb 	bl	8077dca <USBD_CtlSendStatus>
      break;
 8077a54:	e00c      	b.n	8077a70 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8077a56:	6839      	ldr	r1, [r7, #0]
 8077a58:	6878      	ldr	r0, [r7, #4]
 8077a5a:	f000 f8eb 	bl	8077c34 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8077a5e:	4b07      	ldr	r3, [pc, #28]	; (8077a7c <USBD_SetConfig+0x148>)
 8077a60:	781b      	ldrb	r3, [r3, #0]
 8077a62:	4619      	mov	r1, r3
 8077a64:	6878      	ldr	r0, [r7, #4]
 8077a66:	f7ff f8e6 	bl	8076c36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8077a6a:	2303      	movs	r3, #3
 8077a6c:	73fb      	strb	r3, [r7, #15]
      break;
 8077a6e:	bf00      	nop
  }

  return ret;
 8077a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8077a72:	4618      	mov	r0, r3
 8077a74:	3710      	adds	r7, #16
 8077a76:	46bd      	mov	sp, r7
 8077a78:	bd80      	pop	{r7, pc}
 8077a7a:	bf00      	nop
 8077a7c:	200001f7 	.word	0x200001f7

08077a80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077a80:	b580      	push	{r7, lr}
 8077a82:	b082      	sub	sp, #8
 8077a84:	af00      	add	r7, sp, #0
 8077a86:	6078      	str	r0, [r7, #4]
 8077a88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8077a8a:	683b      	ldr	r3, [r7, #0]
 8077a8c:	88db      	ldrh	r3, [r3, #6]
 8077a8e:	2b01      	cmp	r3, #1
 8077a90:	d004      	beq.n	8077a9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8077a92:	6839      	ldr	r1, [r7, #0]
 8077a94:	6878      	ldr	r0, [r7, #4]
 8077a96:	f000 f8cd 	bl	8077c34 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8077a9a:	e023      	b.n	8077ae4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8077a9c:	687b      	ldr	r3, [r7, #4]
 8077a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8077aa2:	b2db      	uxtb	r3, r3
 8077aa4:	2b02      	cmp	r3, #2
 8077aa6:	dc02      	bgt.n	8077aae <USBD_GetConfig+0x2e>
 8077aa8:	2b00      	cmp	r3, #0
 8077aaa:	dc03      	bgt.n	8077ab4 <USBD_GetConfig+0x34>
 8077aac:	e015      	b.n	8077ada <USBD_GetConfig+0x5a>
 8077aae:	2b03      	cmp	r3, #3
 8077ab0:	d00b      	beq.n	8077aca <USBD_GetConfig+0x4a>
 8077ab2:	e012      	b.n	8077ada <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8077ab4:	687b      	ldr	r3, [r7, #4]
 8077ab6:	2200      	movs	r2, #0
 8077ab8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8077aba:	687b      	ldr	r3, [r7, #4]
 8077abc:	3308      	adds	r3, #8
 8077abe:	2201      	movs	r2, #1
 8077ac0:	4619      	mov	r1, r3
 8077ac2:	6878      	ldr	r0, [r7, #4]
 8077ac4:	f000 f927 	bl	8077d16 <USBD_CtlSendData>
        break;
 8077ac8:	e00c      	b.n	8077ae4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8077aca:	687b      	ldr	r3, [r7, #4]
 8077acc:	3304      	adds	r3, #4
 8077ace:	2201      	movs	r2, #1
 8077ad0:	4619      	mov	r1, r3
 8077ad2:	6878      	ldr	r0, [r7, #4]
 8077ad4:	f000 f91f 	bl	8077d16 <USBD_CtlSendData>
        break;
 8077ad8:	e004      	b.n	8077ae4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8077ada:	6839      	ldr	r1, [r7, #0]
 8077adc:	6878      	ldr	r0, [r7, #4]
 8077ade:	f000 f8a9 	bl	8077c34 <USBD_CtlError>
        break;
 8077ae2:	bf00      	nop
}
 8077ae4:	bf00      	nop
 8077ae6:	3708      	adds	r7, #8
 8077ae8:	46bd      	mov	sp, r7
 8077aea:	bd80      	pop	{r7, pc}

08077aec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077aec:	b580      	push	{r7, lr}
 8077aee:	b082      	sub	sp, #8
 8077af0:	af00      	add	r7, sp, #0
 8077af2:	6078      	str	r0, [r7, #4]
 8077af4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8077af6:	687b      	ldr	r3, [r7, #4]
 8077af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8077afc:	b2db      	uxtb	r3, r3
 8077afe:	3b01      	subs	r3, #1
 8077b00:	2b02      	cmp	r3, #2
 8077b02:	d81e      	bhi.n	8077b42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8077b04:	683b      	ldr	r3, [r7, #0]
 8077b06:	88db      	ldrh	r3, [r3, #6]
 8077b08:	2b02      	cmp	r3, #2
 8077b0a:	d004      	beq.n	8077b16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8077b0c:	6839      	ldr	r1, [r7, #0]
 8077b0e:	6878      	ldr	r0, [r7, #4]
 8077b10:	f000 f890 	bl	8077c34 <USBD_CtlError>
        break;
 8077b14:	e01a      	b.n	8077b4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8077b16:	687b      	ldr	r3, [r7, #4]
 8077b18:	2201      	movs	r2, #1
 8077b1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8077b1c:	687b      	ldr	r3, [r7, #4]
 8077b1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8077b22:	2b00      	cmp	r3, #0
 8077b24:	d005      	beq.n	8077b32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8077b26:	687b      	ldr	r3, [r7, #4]
 8077b28:	68db      	ldr	r3, [r3, #12]
 8077b2a:	f043 0202 	orr.w	r2, r3, #2
 8077b2e:	687b      	ldr	r3, [r7, #4]
 8077b30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8077b32:	687b      	ldr	r3, [r7, #4]
 8077b34:	330c      	adds	r3, #12
 8077b36:	2202      	movs	r2, #2
 8077b38:	4619      	mov	r1, r3
 8077b3a:	6878      	ldr	r0, [r7, #4]
 8077b3c:	f000 f8eb 	bl	8077d16 <USBD_CtlSendData>
      break;
 8077b40:	e004      	b.n	8077b4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8077b42:	6839      	ldr	r1, [r7, #0]
 8077b44:	6878      	ldr	r0, [r7, #4]
 8077b46:	f000 f875 	bl	8077c34 <USBD_CtlError>
      break;
 8077b4a:	bf00      	nop
  }
}
 8077b4c:	bf00      	nop
 8077b4e:	3708      	adds	r7, #8
 8077b50:	46bd      	mov	sp, r7
 8077b52:	bd80      	pop	{r7, pc}

08077b54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077b54:	b580      	push	{r7, lr}
 8077b56:	b082      	sub	sp, #8
 8077b58:	af00      	add	r7, sp, #0
 8077b5a:	6078      	str	r0, [r7, #4]
 8077b5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8077b5e:	683b      	ldr	r3, [r7, #0]
 8077b60:	885b      	ldrh	r3, [r3, #2]
 8077b62:	2b01      	cmp	r3, #1
 8077b64:	d106      	bne.n	8077b74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8077b66:	687b      	ldr	r3, [r7, #4]
 8077b68:	2201      	movs	r2, #1
 8077b6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8077b6e:	6878      	ldr	r0, [r7, #4]
 8077b70:	f000 f92b 	bl	8077dca <USBD_CtlSendStatus>
  }
}
 8077b74:	bf00      	nop
 8077b76:	3708      	adds	r7, #8
 8077b78:	46bd      	mov	sp, r7
 8077b7a:	bd80      	pop	{r7, pc}

08077b7c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077b7c:	b580      	push	{r7, lr}
 8077b7e:	b082      	sub	sp, #8
 8077b80:	af00      	add	r7, sp, #0
 8077b82:	6078      	str	r0, [r7, #4]
 8077b84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8077b86:	687b      	ldr	r3, [r7, #4]
 8077b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8077b8c:	b2db      	uxtb	r3, r3
 8077b8e:	3b01      	subs	r3, #1
 8077b90:	2b02      	cmp	r3, #2
 8077b92:	d80b      	bhi.n	8077bac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8077b94:	683b      	ldr	r3, [r7, #0]
 8077b96:	885b      	ldrh	r3, [r3, #2]
 8077b98:	2b01      	cmp	r3, #1
 8077b9a:	d10c      	bne.n	8077bb6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8077b9c:	687b      	ldr	r3, [r7, #4]
 8077b9e:	2200      	movs	r2, #0
 8077ba0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8077ba4:	6878      	ldr	r0, [r7, #4]
 8077ba6:	f000 f910 	bl	8077dca <USBD_CtlSendStatus>
      }
      break;
 8077baa:	e004      	b.n	8077bb6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8077bac:	6839      	ldr	r1, [r7, #0]
 8077bae:	6878      	ldr	r0, [r7, #4]
 8077bb0:	f000 f840 	bl	8077c34 <USBD_CtlError>
      break;
 8077bb4:	e000      	b.n	8077bb8 <USBD_ClrFeature+0x3c>
      break;
 8077bb6:	bf00      	nop
  }
}
 8077bb8:	bf00      	nop
 8077bba:	3708      	adds	r7, #8
 8077bbc:	46bd      	mov	sp, r7
 8077bbe:	bd80      	pop	{r7, pc}

08077bc0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8077bc0:	b580      	push	{r7, lr}
 8077bc2:	b084      	sub	sp, #16
 8077bc4:	af00      	add	r7, sp, #0
 8077bc6:	6078      	str	r0, [r7, #4]
 8077bc8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8077bca:	683b      	ldr	r3, [r7, #0]
 8077bcc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8077bce:	68fb      	ldr	r3, [r7, #12]
 8077bd0:	781a      	ldrb	r2, [r3, #0]
 8077bd2:	687b      	ldr	r3, [r7, #4]
 8077bd4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8077bd6:	68fb      	ldr	r3, [r7, #12]
 8077bd8:	3301      	adds	r3, #1
 8077bda:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8077bdc:	68fb      	ldr	r3, [r7, #12]
 8077bde:	781a      	ldrb	r2, [r3, #0]
 8077be0:	687b      	ldr	r3, [r7, #4]
 8077be2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8077be4:	68fb      	ldr	r3, [r7, #12]
 8077be6:	3301      	adds	r3, #1
 8077be8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8077bea:	68f8      	ldr	r0, [r7, #12]
 8077bec:	f7ff faaa 	bl	8077144 <SWAPBYTE>
 8077bf0:	4603      	mov	r3, r0
 8077bf2:	461a      	mov	r2, r3
 8077bf4:	687b      	ldr	r3, [r7, #4]
 8077bf6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8077bf8:	68fb      	ldr	r3, [r7, #12]
 8077bfa:	3301      	adds	r3, #1
 8077bfc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8077bfe:	68fb      	ldr	r3, [r7, #12]
 8077c00:	3301      	adds	r3, #1
 8077c02:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8077c04:	68f8      	ldr	r0, [r7, #12]
 8077c06:	f7ff fa9d 	bl	8077144 <SWAPBYTE>
 8077c0a:	4603      	mov	r3, r0
 8077c0c:	461a      	mov	r2, r3
 8077c0e:	687b      	ldr	r3, [r7, #4]
 8077c10:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8077c12:	68fb      	ldr	r3, [r7, #12]
 8077c14:	3301      	adds	r3, #1
 8077c16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8077c18:	68fb      	ldr	r3, [r7, #12]
 8077c1a:	3301      	adds	r3, #1
 8077c1c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8077c1e:	68f8      	ldr	r0, [r7, #12]
 8077c20:	f7ff fa90 	bl	8077144 <SWAPBYTE>
 8077c24:	4603      	mov	r3, r0
 8077c26:	461a      	mov	r2, r3
 8077c28:	687b      	ldr	r3, [r7, #4]
 8077c2a:	80da      	strh	r2, [r3, #6]
}
 8077c2c:	bf00      	nop
 8077c2e:	3710      	adds	r7, #16
 8077c30:	46bd      	mov	sp, r7
 8077c32:	bd80      	pop	{r7, pc}

08077c34 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077c34:	b580      	push	{r7, lr}
 8077c36:	b082      	sub	sp, #8
 8077c38:	af00      	add	r7, sp, #0
 8077c3a:	6078      	str	r0, [r7, #4]
 8077c3c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8077c3e:	2180      	movs	r1, #128	; 0x80
 8077c40:	6878      	ldr	r0, [r7, #4]
 8077c42:	f000 fc53 	bl	80784ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8077c46:	2100      	movs	r1, #0
 8077c48:	6878      	ldr	r0, [r7, #4]
 8077c4a:	f000 fc4f 	bl	80784ec <USBD_LL_StallEP>
}
 8077c4e:	bf00      	nop
 8077c50:	3708      	adds	r7, #8
 8077c52:	46bd      	mov	sp, r7
 8077c54:	bd80      	pop	{r7, pc}

08077c56 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8077c56:	b580      	push	{r7, lr}
 8077c58:	b086      	sub	sp, #24
 8077c5a:	af00      	add	r7, sp, #0
 8077c5c:	60f8      	str	r0, [r7, #12]
 8077c5e:	60b9      	str	r1, [r7, #8]
 8077c60:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8077c62:	2300      	movs	r3, #0
 8077c64:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8077c66:	68fb      	ldr	r3, [r7, #12]
 8077c68:	2b00      	cmp	r3, #0
 8077c6a:	d036      	beq.n	8077cda <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8077c6c:	68fb      	ldr	r3, [r7, #12]
 8077c6e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8077c70:	6938      	ldr	r0, [r7, #16]
 8077c72:	f000 f836 	bl	8077ce2 <USBD_GetLen>
 8077c76:	4603      	mov	r3, r0
 8077c78:	3301      	adds	r3, #1
 8077c7a:	b29b      	uxth	r3, r3
 8077c7c:	005b      	lsls	r3, r3, #1
 8077c7e:	b29a      	uxth	r2, r3
 8077c80:	687b      	ldr	r3, [r7, #4]
 8077c82:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8077c84:	7dfb      	ldrb	r3, [r7, #23]
 8077c86:	68ba      	ldr	r2, [r7, #8]
 8077c88:	4413      	add	r3, r2
 8077c8a:	687a      	ldr	r2, [r7, #4]
 8077c8c:	7812      	ldrb	r2, [r2, #0]
 8077c8e:	701a      	strb	r2, [r3, #0]
  idx++;
 8077c90:	7dfb      	ldrb	r3, [r7, #23]
 8077c92:	3301      	adds	r3, #1
 8077c94:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8077c96:	7dfb      	ldrb	r3, [r7, #23]
 8077c98:	68ba      	ldr	r2, [r7, #8]
 8077c9a:	4413      	add	r3, r2
 8077c9c:	2203      	movs	r2, #3
 8077c9e:	701a      	strb	r2, [r3, #0]
  idx++;
 8077ca0:	7dfb      	ldrb	r3, [r7, #23]
 8077ca2:	3301      	adds	r3, #1
 8077ca4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8077ca6:	e013      	b.n	8077cd0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8077ca8:	7dfb      	ldrb	r3, [r7, #23]
 8077caa:	68ba      	ldr	r2, [r7, #8]
 8077cac:	4413      	add	r3, r2
 8077cae:	693a      	ldr	r2, [r7, #16]
 8077cb0:	7812      	ldrb	r2, [r2, #0]
 8077cb2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8077cb4:	693b      	ldr	r3, [r7, #16]
 8077cb6:	3301      	adds	r3, #1
 8077cb8:	613b      	str	r3, [r7, #16]
    idx++;
 8077cba:	7dfb      	ldrb	r3, [r7, #23]
 8077cbc:	3301      	adds	r3, #1
 8077cbe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8077cc0:	7dfb      	ldrb	r3, [r7, #23]
 8077cc2:	68ba      	ldr	r2, [r7, #8]
 8077cc4:	4413      	add	r3, r2
 8077cc6:	2200      	movs	r2, #0
 8077cc8:	701a      	strb	r2, [r3, #0]
    idx++;
 8077cca:	7dfb      	ldrb	r3, [r7, #23]
 8077ccc:	3301      	adds	r3, #1
 8077cce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8077cd0:	693b      	ldr	r3, [r7, #16]
 8077cd2:	781b      	ldrb	r3, [r3, #0]
 8077cd4:	2b00      	cmp	r3, #0
 8077cd6:	d1e7      	bne.n	8077ca8 <USBD_GetString+0x52>
 8077cd8:	e000      	b.n	8077cdc <USBD_GetString+0x86>
    return;
 8077cda:	bf00      	nop
  }
}
 8077cdc:	3718      	adds	r7, #24
 8077cde:	46bd      	mov	sp, r7
 8077ce0:	bd80      	pop	{r7, pc}

08077ce2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8077ce2:	b480      	push	{r7}
 8077ce4:	b085      	sub	sp, #20
 8077ce6:	af00      	add	r7, sp, #0
 8077ce8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8077cea:	2300      	movs	r3, #0
 8077cec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8077cee:	687b      	ldr	r3, [r7, #4]
 8077cf0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8077cf2:	e005      	b.n	8077d00 <USBD_GetLen+0x1e>
  {
    len++;
 8077cf4:	7bfb      	ldrb	r3, [r7, #15]
 8077cf6:	3301      	adds	r3, #1
 8077cf8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8077cfa:	68bb      	ldr	r3, [r7, #8]
 8077cfc:	3301      	adds	r3, #1
 8077cfe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8077d00:	68bb      	ldr	r3, [r7, #8]
 8077d02:	781b      	ldrb	r3, [r3, #0]
 8077d04:	2b00      	cmp	r3, #0
 8077d06:	d1f5      	bne.n	8077cf4 <USBD_GetLen+0x12>
  }

  return len;
 8077d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8077d0a:	4618      	mov	r0, r3
 8077d0c:	3714      	adds	r7, #20
 8077d0e:	46bd      	mov	sp, r7
 8077d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8077d14:	4770      	bx	lr

08077d16 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8077d16:	b580      	push	{r7, lr}
 8077d18:	b084      	sub	sp, #16
 8077d1a:	af00      	add	r7, sp, #0
 8077d1c:	60f8      	str	r0, [r7, #12]
 8077d1e:	60b9      	str	r1, [r7, #8]
 8077d20:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8077d22:	68fb      	ldr	r3, [r7, #12]
 8077d24:	2202      	movs	r2, #2
 8077d26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8077d2a:	68fb      	ldr	r3, [r7, #12]
 8077d2c:	687a      	ldr	r2, [r7, #4]
 8077d2e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8077d30:	68fb      	ldr	r3, [r7, #12]
 8077d32:	687a      	ldr	r2, [r7, #4]
 8077d34:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8077d36:	687b      	ldr	r3, [r7, #4]
 8077d38:	68ba      	ldr	r2, [r7, #8]
 8077d3a:	2100      	movs	r1, #0
 8077d3c:	68f8      	ldr	r0, [r7, #12]
 8077d3e:	f000 fc5e 	bl	80785fe <USBD_LL_Transmit>

  return USBD_OK;
 8077d42:	2300      	movs	r3, #0
}
 8077d44:	4618      	mov	r0, r3
 8077d46:	3710      	adds	r7, #16
 8077d48:	46bd      	mov	sp, r7
 8077d4a:	bd80      	pop	{r7, pc}

08077d4c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8077d4c:	b580      	push	{r7, lr}
 8077d4e:	b084      	sub	sp, #16
 8077d50:	af00      	add	r7, sp, #0
 8077d52:	60f8      	str	r0, [r7, #12]
 8077d54:	60b9      	str	r1, [r7, #8]
 8077d56:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8077d58:	687b      	ldr	r3, [r7, #4]
 8077d5a:	68ba      	ldr	r2, [r7, #8]
 8077d5c:	2100      	movs	r1, #0
 8077d5e:	68f8      	ldr	r0, [r7, #12]
 8077d60:	f000 fc4d 	bl	80785fe <USBD_LL_Transmit>

  return USBD_OK;
 8077d64:	2300      	movs	r3, #0
}
 8077d66:	4618      	mov	r0, r3
 8077d68:	3710      	adds	r7, #16
 8077d6a:	46bd      	mov	sp, r7
 8077d6c:	bd80      	pop	{r7, pc}

08077d6e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8077d6e:	b580      	push	{r7, lr}
 8077d70:	b084      	sub	sp, #16
 8077d72:	af00      	add	r7, sp, #0
 8077d74:	60f8      	str	r0, [r7, #12]
 8077d76:	60b9      	str	r1, [r7, #8]
 8077d78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8077d7a:	68fb      	ldr	r3, [r7, #12]
 8077d7c:	2203      	movs	r2, #3
 8077d7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8077d82:	68fb      	ldr	r3, [r7, #12]
 8077d84:	687a      	ldr	r2, [r7, #4]
 8077d86:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8077d8a:	68fb      	ldr	r3, [r7, #12]
 8077d8c:	687a      	ldr	r2, [r7, #4]
 8077d8e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8077d92:	687b      	ldr	r3, [r7, #4]
 8077d94:	68ba      	ldr	r2, [r7, #8]
 8077d96:	2100      	movs	r1, #0
 8077d98:	68f8      	ldr	r0, [r7, #12]
 8077d9a:	f000 fc51 	bl	8078640 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8077d9e:	2300      	movs	r3, #0
}
 8077da0:	4618      	mov	r0, r3
 8077da2:	3710      	adds	r7, #16
 8077da4:	46bd      	mov	sp, r7
 8077da6:	bd80      	pop	{r7, pc}

08077da8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8077da8:	b580      	push	{r7, lr}
 8077daa:	b084      	sub	sp, #16
 8077dac:	af00      	add	r7, sp, #0
 8077dae:	60f8      	str	r0, [r7, #12]
 8077db0:	60b9      	str	r1, [r7, #8]
 8077db2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8077db4:	687b      	ldr	r3, [r7, #4]
 8077db6:	68ba      	ldr	r2, [r7, #8]
 8077db8:	2100      	movs	r1, #0
 8077dba:	68f8      	ldr	r0, [r7, #12]
 8077dbc:	f000 fc40 	bl	8078640 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8077dc0:	2300      	movs	r3, #0
}
 8077dc2:	4618      	mov	r0, r3
 8077dc4:	3710      	adds	r7, #16
 8077dc6:	46bd      	mov	sp, r7
 8077dc8:	bd80      	pop	{r7, pc}

08077dca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8077dca:	b580      	push	{r7, lr}
 8077dcc:	b082      	sub	sp, #8
 8077dce:	af00      	add	r7, sp, #0
 8077dd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8077dd2:	687b      	ldr	r3, [r7, #4]
 8077dd4:	2204      	movs	r2, #4
 8077dd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8077dda:	2300      	movs	r3, #0
 8077ddc:	2200      	movs	r2, #0
 8077dde:	2100      	movs	r1, #0
 8077de0:	6878      	ldr	r0, [r7, #4]
 8077de2:	f000 fc0c 	bl	80785fe <USBD_LL_Transmit>

  return USBD_OK;
 8077de6:	2300      	movs	r3, #0
}
 8077de8:	4618      	mov	r0, r3
 8077dea:	3708      	adds	r7, #8
 8077dec:	46bd      	mov	sp, r7
 8077dee:	bd80      	pop	{r7, pc}

08077df0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8077df0:	b580      	push	{r7, lr}
 8077df2:	b082      	sub	sp, #8
 8077df4:	af00      	add	r7, sp, #0
 8077df6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8077df8:	687b      	ldr	r3, [r7, #4]
 8077dfa:	2205      	movs	r2, #5
 8077dfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8077e00:	2300      	movs	r3, #0
 8077e02:	2200      	movs	r2, #0
 8077e04:	2100      	movs	r1, #0
 8077e06:	6878      	ldr	r0, [r7, #4]
 8077e08:	f000 fc1a 	bl	8078640 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8077e0c:	2300      	movs	r3, #0
}
 8077e0e:	4618      	mov	r0, r3
 8077e10:	3708      	adds	r7, #8
 8077e12:	46bd      	mov	sp, r7
 8077e14:	bd80      	pop	{r7, pc}
	...

08077e18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8077e18:	b580      	push	{r7, lr}
 8077e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8077e1c:	2200      	movs	r2, #0
 8077e1e:	4912      	ldr	r1, [pc, #72]	; (8077e68 <MX_USB_DEVICE_Init+0x50>)
 8077e20:	4812      	ldr	r0, [pc, #72]	; (8077e6c <MX_USB_DEVICE_Init+0x54>)
 8077e22:	f7fe fe63 	bl	8076aec <USBD_Init>
 8077e26:	4603      	mov	r3, r0
 8077e28:	2b00      	cmp	r3, #0
 8077e2a:	d001      	beq.n	8077e30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8077e2c:	f7fa fc48 	bl	80726c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8077e30:	490f      	ldr	r1, [pc, #60]	; (8077e70 <MX_USB_DEVICE_Init+0x58>)
 8077e32:	480e      	ldr	r0, [pc, #56]	; (8077e6c <MX_USB_DEVICE_Init+0x54>)
 8077e34:	f7fe fe8a 	bl	8076b4c <USBD_RegisterClass>
 8077e38:	4603      	mov	r3, r0
 8077e3a:	2b00      	cmp	r3, #0
 8077e3c:	d001      	beq.n	8077e42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8077e3e:	f7fa fc3f 	bl	80726c0 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8077e42:	490c      	ldr	r1, [pc, #48]	; (8077e74 <MX_USB_DEVICE_Init+0x5c>)
 8077e44:	4809      	ldr	r0, [pc, #36]	; (8077e6c <MX_USB_DEVICE_Init+0x54>)
 8077e46:	f7fe facf 	bl	80763e8 <USBD_DFU_RegisterMedia>
 8077e4a:	4603      	mov	r3, r0
 8077e4c:	2b00      	cmp	r3, #0
 8077e4e:	d001      	beq.n	8077e54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8077e50:	f7fa fc36 	bl	80726c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8077e54:	4805      	ldr	r0, [pc, #20]	; (8077e6c <MX_USB_DEVICE_Init+0x54>)
 8077e56:	f7fe fea0 	bl	8076b9a <USBD_Start>
 8077e5a:	4603      	mov	r3, r0
 8077e5c:	2b00      	cmp	r3, #0
 8077e5e:	d001      	beq.n	8077e64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8077e60:	f7fa fc2e 	bl	80726c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8077e64:	bf00      	nop
 8077e66:	bd80      	pop	{r7, pc}
 8077e68:	20000070 	.word	0x20000070
 8077e6c:	2000061c 	.word	0x2000061c
 8077e70:	2000000c 	.word	0x2000000c
 8077e74:	200000c0 	.word	0x200000c0

08077e78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077e78:	b480      	push	{r7}
 8077e7a:	b083      	sub	sp, #12
 8077e7c:	af00      	add	r7, sp, #0
 8077e7e:	4603      	mov	r3, r0
 8077e80:	6039      	str	r1, [r7, #0]
 8077e82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8077e84:	683b      	ldr	r3, [r7, #0]
 8077e86:	2212      	movs	r2, #18
 8077e88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8077e8a:	4b03      	ldr	r3, [pc, #12]	; (8077e98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8077e8c:	4618      	mov	r0, r3
 8077e8e:	370c      	adds	r7, #12
 8077e90:	46bd      	mov	sp, r7
 8077e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8077e96:	4770      	bx	lr
 8077e98:	2000008c 	.word	0x2000008c

08077e9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077e9c:	b480      	push	{r7}
 8077e9e:	b083      	sub	sp, #12
 8077ea0:	af00      	add	r7, sp, #0
 8077ea2:	4603      	mov	r3, r0
 8077ea4:	6039      	str	r1, [r7, #0]
 8077ea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8077ea8:	683b      	ldr	r3, [r7, #0]
 8077eaa:	2204      	movs	r2, #4
 8077eac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8077eae:	4b03      	ldr	r3, [pc, #12]	; (8077ebc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8077eb0:	4618      	mov	r0, r3
 8077eb2:	370c      	adds	r7, #12
 8077eb4:	46bd      	mov	sp, r7
 8077eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8077eba:	4770      	bx	lr
 8077ebc:	200000a0 	.word	0x200000a0

08077ec0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077ec0:	b580      	push	{r7, lr}
 8077ec2:	b082      	sub	sp, #8
 8077ec4:	af00      	add	r7, sp, #0
 8077ec6:	4603      	mov	r3, r0
 8077ec8:	6039      	str	r1, [r7, #0]
 8077eca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8077ecc:	79fb      	ldrb	r3, [r7, #7]
 8077ece:	2b00      	cmp	r3, #0
 8077ed0:	d105      	bne.n	8077ede <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8077ed2:	683a      	ldr	r2, [r7, #0]
 8077ed4:	4907      	ldr	r1, [pc, #28]	; (8077ef4 <USBD_FS_ProductStrDescriptor+0x34>)
 8077ed6:	4808      	ldr	r0, [pc, #32]	; (8077ef8 <USBD_FS_ProductStrDescriptor+0x38>)
 8077ed8:	f7ff febd 	bl	8077c56 <USBD_GetString>
 8077edc:	e004      	b.n	8077ee8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8077ede:	683a      	ldr	r2, [r7, #0]
 8077ee0:	4904      	ldr	r1, [pc, #16]	; (8077ef4 <USBD_FS_ProductStrDescriptor+0x34>)
 8077ee2:	4805      	ldr	r0, [pc, #20]	; (8077ef8 <USBD_FS_ProductStrDescriptor+0x38>)
 8077ee4:	f7ff feb7 	bl	8077c56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8077ee8:	4b02      	ldr	r3, [pc, #8]	; (8077ef4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8077eea:	4618      	mov	r0, r3
 8077eec:	3708      	adds	r7, #8
 8077eee:	46bd      	mov	sp, r7
 8077ef0:	bd80      	pop	{r7, pc}
 8077ef2:	bf00      	nop
 8077ef4:	200008ec 	.word	0x200008ec
 8077ef8:	0807877c 	.word	0x0807877c

08077efc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077efc:	b580      	push	{r7, lr}
 8077efe:	b082      	sub	sp, #8
 8077f00:	af00      	add	r7, sp, #0
 8077f02:	4603      	mov	r3, r0
 8077f04:	6039      	str	r1, [r7, #0]
 8077f06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8077f08:	683a      	ldr	r2, [r7, #0]
 8077f0a:	4904      	ldr	r1, [pc, #16]	; (8077f1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8077f0c:	4804      	ldr	r0, [pc, #16]	; (8077f20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8077f0e:	f7ff fea2 	bl	8077c56 <USBD_GetString>
  return USBD_StrDesc;
 8077f12:	4b02      	ldr	r3, [pc, #8]	; (8077f1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8077f14:	4618      	mov	r0, r3
 8077f16:	3708      	adds	r7, #8
 8077f18:	46bd      	mov	sp, r7
 8077f1a:	bd80      	pop	{r7, pc}
 8077f1c:	200008ec 	.word	0x200008ec
 8077f20:	080787a0 	.word	0x080787a0

08077f24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077f24:	b580      	push	{r7, lr}
 8077f26:	b082      	sub	sp, #8
 8077f28:	af00      	add	r7, sp, #0
 8077f2a:	4603      	mov	r3, r0
 8077f2c:	6039      	str	r1, [r7, #0]
 8077f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8077f30:	683b      	ldr	r3, [r7, #0]
 8077f32:	221a      	movs	r2, #26
 8077f34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8077f36:	f000 f843 	bl	8077fc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8077f3a:	4b02      	ldr	r3, [pc, #8]	; (8077f44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8077f3c:	4618      	mov	r0, r3
 8077f3e:	3708      	adds	r7, #8
 8077f40:	46bd      	mov	sp, r7
 8077f42:	bd80      	pop	{r7, pc}
 8077f44:	200000a4 	.word	0x200000a4

08077f48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077f48:	b580      	push	{r7, lr}
 8077f4a:	b082      	sub	sp, #8
 8077f4c:	af00      	add	r7, sp, #0
 8077f4e:	4603      	mov	r3, r0
 8077f50:	6039      	str	r1, [r7, #0]
 8077f52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8077f54:	79fb      	ldrb	r3, [r7, #7]
 8077f56:	2b00      	cmp	r3, #0
 8077f58:	d105      	bne.n	8077f66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8077f5a:	683a      	ldr	r2, [r7, #0]
 8077f5c:	4907      	ldr	r1, [pc, #28]	; (8077f7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8077f5e:	4808      	ldr	r0, [pc, #32]	; (8077f80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8077f60:	f7ff fe79 	bl	8077c56 <USBD_GetString>
 8077f64:	e004      	b.n	8077f70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8077f66:	683a      	ldr	r2, [r7, #0]
 8077f68:	4904      	ldr	r1, [pc, #16]	; (8077f7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8077f6a:	4805      	ldr	r0, [pc, #20]	; (8077f80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8077f6c:	f7ff fe73 	bl	8077c56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8077f70:	4b02      	ldr	r3, [pc, #8]	; (8077f7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8077f72:	4618      	mov	r0, r3
 8077f74:	3708      	adds	r7, #8
 8077f76:	46bd      	mov	sp, r7
 8077f78:	bd80      	pop	{r7, pc}
 8077f7a:	bf00      	nop
 8077f7c:	200008ec 	.word	0x200008ec
 8077f80:	080787a8 	.word	0x080787a8

08077f84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077f84:	b580      	push	{r7, lr}
 8077f86:	b082      	sub	sp, #8
 8077f88:	af00      	add	r7, sp, #0
 8077f8a:	4603      	mov	r3, r0
 8077f8c:	6039      	str	r1, [r7, #0]
 8077f8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8077f90:	79fb      	ldrb	r3, [r7, #7]
 8077f92:	2b00      	cmp	r3, #0
 8077f94:	d105      	bne.n	8077fa2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8077f96:	683a      	ldr	r2, [r7, #0]
 8077f98:	4907      	ldr	r1, [pc, #28]	; (8077fb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8077f9a:	4808      	ldr	r0, [pc, #32]	; (8077fbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8077f9c:	f7ff fe5b 	bl	8077c56 <USBD_GetString>
 8077fa0:	e004      	b.n	8077fac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8077fa2:	683a      	ldr	r2, [r7, #0]
 8077fa4:	4904      	ldr	r1, [pc, #16]	; (8077fb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8077fa6:	4805      	ldr	r0, [pc, #20]	; (8077fbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8077fa8:	f7ff fe55 	bl	8077c56 <USBD_GetString>
  }
  return USBD_StrDesc;
 8077fac:	4b02      	ldr	r3, [pc, #8]	; (8077fb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8077fae:	4618      	mov	r0, r3
 8077fb0:	3708      	adds	r7, #8
 8077fb2:	46bd      	mov	sp, r7
 8077fb4:	bd80      	pop	{r7, pc}
 8077fb6:	bf00      	nop
 8077fb8:	200008ec 	.word	0x200008ec
 8077fbc:	080787b4 	.word	0x080787b4

08077fc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8077fc0:	b580      	push	{r7, lr}
 8077fc2:	b084      	sub	sp, #16
 8077fc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8077fc6:	4b0f      	ldr	r3, [pc, #60]	; (8078004 <Get_SerialNum+0x44>)
 8077fc8:	681b      	ldr	r3, [r3, #0]
 8077fca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8077fcc:	4b0e      	ldr	r3, [pc, #56]	; (8078008 <Get_SerialNum+0x48>)
 8077fce:	681b      	ldr	r3, [r3, #0]
 8077fd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8077fd2:	4b0e      	ldr	r3, [pc, #56]	; (807800c <Get_SerialNum+0x4c>)
 8077fd4:	681b      	ldr	r3, [r3, #0]
 8077fd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8077fd8:	68fa      	ldr	r2, [r7, #12]
 8077fda:	687b      	ldr	r3, [r7, #4]
 8077fdc:	4413      	add	r3, r2
 8077fde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8077fe0:	68fb      	ldr	r3, [r7, #12]
 8077fe2:	2b00      	cmp	r3, #0
 8077fe4:	d009      	beq.n	8077ffa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8077fe6:	2208      	movs	r2, #8
 8077fe8:	4909      	ldr	r1, [pc, #36]	; (8078010 <Get_SerialNum+0x50>)
 8077fea:	68f8      	ldr	r0, [r7, #12]
 8077fec:	f000 f814 	bl	8078018 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8077ff0:	2204      	movs	r2, #4
 8077ff2:	4908      	ldr	r1, [pc, #32]	; (8078014 <Get_SerialNum+0x54>)
 8077ff4:	68b8      	ldr	r0, [r7, #8]
 8077ff6:	f000 f80f 	bl	8078018 <IntToUnicode>
  }
}
 8077ffa:	bf00      	nop
 8077ffc:	3710      	adds	r7, #16
 8077ffe:	46bd      	mov	sp, r7
 8078000:	bd80      	pop	{r7, pc}
 8078002:	bf00      	nop
 8078004:	1fff7a10 	.word	0x1fff7a10
 8078008:	1fff7a14 	.word	0x1fff7a14
 807800c:	1fff7a18 	.word	0x1fff7a18
 8078010:	200000a6 	.word	0x200000a6
 8078014:	200000b6 	.word	0x200000b6

08078018 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8078018:	b480      	push	{r7}
 807801a:	b087      	sub	sp, #28
 807801c:	af00      	add	r7, sp, #0
 807801e:	60f8      	str	r0, [r7, #12]
 8078020:	60b9      	str	r1, [r7, #8]
 8078022:	4613      	mov	r3, r2
 8078024:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8078026:	2300      	movs	r3, #0
 8078028:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 807802a:	2300      	movs	r3, #0
 807802c:	75fb      	strb	r3, [r7, #23]
 807802e:	e027      	b.n	8078080 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8078030:	68fb      	ldr	r3, [r7, #12]
 8078032:	0f1b      	lsrs	r3, r3, #28
 8078034:	2b09      	cmp	r3, #9
 8078036:	d80b      	bhi.n	8078050 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8078038:	68fb      	ldr	r3, [r7, #12]
 807803a:	0f1b      	lsrs	r3, r3, #28
 807803c:	b2da      	uxtb	r2, r3
 807803e:	7dfb      	ldrb	r3, [r7, #23]
 8078040:	005b      	lsls	r3, r3, #1
 8078042:	4619      	mov	r1, r3
 8078044:	68bb      	ldr	r3, [r7, #8]
 8078046:	440b      	add	r3, r1
 8078048:	3230      	adds	r2, #48	; 0x30
 807804a:	b2d2      	uxtb	r2, r2
 807804c:	701a      	strb	r2, [r3, #0]
 807804e:	e00a      	b.n	8078066 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8078050:	68fb      	ldr	r3, [r7, #12]
 8078052:	0f1b      	lsrs	r3, r3, #28
 8078054:	b2da      	uxtb	r2, r3
 8078056:	7dfb      	ldrb	r3, [r7, #23]
 8078058:	005b      	lsls	r3, r3, #1
 807805a:	4619      	mov	r1, r3
 807805c:	68bb      	ldr	r3, [r7, #8]
 807805e:	440b      	add	r3, r1
 8078060:	3237      	adds	r2, #55	; 0x37
 8078062:	b2d2      	uxtb	r2, r2
 8078064:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8078066:	68fb      	ldr	r3, [r7, #12]
 8078068:	011b      	lsls	r3, r3, #4
 807806a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 807806c:	7dfb      	ldrb	r3, [r7, #23]
 807806e:	005b      	lsls	r3, r3, #1
 8078070:	3301      	adds	r3, #1
 8078072:	68ba      	ldr	r2, [r7, #8]
 8078074:	4413      	add	r3, r2
 8078076:	2200      	movs	r2, #0
 8078078:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 807807a:	7dfb      	ldrb	r3, [r7, #23]
 807807c:	3301      	adds	r3, #1
 807807e:	75fb      	strb	r3, [r7, #23]
 8078080:	7dfa      	ldrb	r2, [r7, #23]
 8078082:	79fb      	ldrb	r3, [r7, #7]
 8078084:	429a      	cmp	r2, r3
 8078086:	d3d3      	bcc.n	8078030 <IntToUnicode+0x18>
  }
}
 8078088:	bf00      	nop
 807808a:	bf00      	nop
 807808c:	371c      	adds	r7, #28
 807808e:	46bd      	mov	sp, r7
 8078090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078094:	4770      	bx	lr

08078096 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8078096:	b480      	push	{r7}
 8078098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 807809a:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 807809c:	4618      	mov	r0, r3
 807809e:	46bd      	mov	sp, r7
 80780a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80780a4:	4770      	bx	lr

080780a6 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 80780a6:	b480      	push	{r7}
 80780a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 80780aa:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80780ac:	4618      	mov	r0, r3
 80780ae:	46bd      	mov	sp, r7
 80780b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80780b4:	4770      	bx	lr

080780b6 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 80780b6:	b480      	push	{r7}
 80780b8:	b083      	sub	sp, #12
 80780ba:	af00      	add	r7, sp, #0
 80780bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 80780be:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80780c0:	4618      	mov	r0, r3
 80780c2:	370c      	adds	r7, #12
 80780c4:	46bd      	mov	sp, r7
 80780c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80780ca:	4770      	bx	lr

080780cc <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80780cc:	b480      	push	{r7}
 80780ce:	b085      	sub	sp, #20
 80780d0:	af00      	add	r7, sp, #0
 80780d2:	60f8      	str	r0, [r7, #12]
 80780d4:	60b9      	str	r1, [r7, #8]
 80780d6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 80780d8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80780da:	4618      	mov	r0, r3
 80780dc:	3714      	adds	r7, #20
 80780de:	46bd      	mov	sp, r7
 80780e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80780e4:	4770      	bx	lr

080780e6 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80780e6:	b480      	push	{r7}
 80780e8:	b085      	sub	sp, #20
 80780ea:	af00      	add	r7, sp, #0
 80780ec:	60f8      	str	r0, [r7, #12]
 80780ee:	60b9      	str	r1, [r7, #8]
 80780f0:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 80780f2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80780f4:	4618      	mov	r0, r3
 80780f6:	3714      	adds	r7, #20
 80780f8:	46bd      	mov	sp, r7
 80780fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80780fe:	4770      	bx	lr

08078100 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8078100:	b480      	push	{r7}
 8078102:	b085      	sub	sp, #20
 8078104:	af00      	add	r7, sp, #0
 8078106:	60f8      	str	r0, [r7, #12]
 8078108:	460b      	mov	r3, r1
 807810a:	607a      	str	r2, [r7, #4]
 807810c:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 807810e:	7afb      	ldrb	r3, [r7, #11]
 8078110:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8078112:	bf00      	nop
  }
  return (USBD_OK);
 8078114:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8078116:	4618      	mov	r0, r3
 8078118:	3714      	adds	r7, #20
 807811a:	46bd      	mov	sp, r7
 807811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078120:	4770      	bx	lr
	...

08078124 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8078124:	b580      	push	{r7, lr}
 8078126:	b08a      	sub	sp, #40	; 0x28
 8078128:	af00      	add	r7, sp, #0
 807812a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 807812c:	f107 0314 	add.w	r3, r7, #20
 8078130:	2200      	movs	r2, #0
 8078132:	601a      	str	r2, [r3, #0]
 8078134:	605a      	str	r2, [r3, #4]
 8078136:	609a      	str	r2, [r3, #8]
 8078138:	60da      	str	r2, [r3, #12]
 807813a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 807813c:	687b      	ldr	r3, [r7, #4]
 807813e:	681b      	ldr	r3, [r3, #0]
 8078140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8078144:	d13a      	bne.n	80781bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8078146:	2300      	movs	r3, #0
 8078148:	613b      	str	r3, [r7, #16]
 807814a:	4b1e      	ldr	r3, [pc, #120]	; (80781c4 <HAL_PCD_MspInit+0xa0>)
 807814c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807814e:	4a1d      	ldr	r2, [pc, #116]	; (80781c4 <HAL_PCD_MspInit+0xa0>)
 8078150:	f043 0301 	orr.w	r3, r3, #1
 8078154:	6313      	str	r3, [r2, #48]	; 0x30
 8078156:	4b1b      	ldr	r3, [pc, #108]	; (80781c4 <HAL_PCD_MspInit+0xa0>)
 8078158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807815a:	f003 0301 	and.w	r3, r3, #1
 807815e:	613b      	str	r3, [r7, #16]
 8078160:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8078162:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8078166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8078168:	2302      	movs	r3, #2
 807816a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 807816c:	2300      	movs	r3, #0
 807816e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8078170:	2303      	movs	r3, #3
 8078172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8078174:	230a      	movs	r3, #10
 8078176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8078178:	f107 0314 	add.w	r3, r7, #20
 807817c:	4619      	mov	r1, r3
 807817e:	4812      	ldr	r0, [pc, #72]	; (80781c8 <HAL_PCD_MspInit+0xa4>)
 8078180:	f7fa fce4 	bl	8072b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8078184:	4b0f      	ldr	r3, [pc, #60]	; (80781c4 <HAL_PCD_MspInit+0xa0>)
 8078186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8078188:	4a0e      	ldr	r2, [pc, #56]	; (80781c4 <HAL_PCD_MspInit+0xa0>)
 807818a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 807818e:	6353      	str	r3, [r2, #52]	; 0x34
 8078190:	2300      	movs	r3, #0
 8078192:	60fb      	str	r3, [r7, #12]
 8078194:	4b0b      	ldr	r3, [pc, #44]	; (80781c4 <HAL_PCD_MspInit+0xa0>)
 8078196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8078198:	4a0a      	ldr	r2, [pc, #40]	; (80781c4 <HAL_PCD_MspInit+0xa0>)
 807819a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 807819e:	6453      	str	r3, [r2, #68]	; 0x44
 80781a0:	4b08      	ldr	r3, [pc, #32]	; (80781c4 <HAL_PCD_MspInit+0xa0>)
 80781a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80781a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80781a8:	60fb      	str	r3, [r7, #12]
 80781aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80781ac:	2200      	movs	r2, #0
 80781ae:	2100      	movs	r1, #0
 80781b0:	2043      	movs	r0, #67	; 0x43
 80781b2:	f7fa fc94 	bl	8072ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80781b6:	2043      	movs	r0, #67	; 0x43
 80781b8:	f7fa fcad 	bl	8072b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80781bc:	bf00      	nop
 80781be:	3728      	adds	r7, #40	; 0x28
 80781c0:	46bd      	mov	sp, r7
 80781c2:	bd80      	pop	{r7, pc}
 80781c4:	40023800 	.word	0x40023800
 80781c8:	40020000 	.word	0x40020000

080781cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80781cc:	b580      	push	{r7, lr}
 80781ce:	b082      	sub	sp, #8
 80781d0:	af00      	add	r7, sp, #0
 80781d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80781d4:	687b      	ldr	r3, [r7, #4]
 80781d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80781da:	687b      	ldr	r3, [r7, #4]
 80781dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80781e0:	4619      	mov	r1, r3
 80781e2:	4610      	mov	r0, r2
 80781e4:	f7fe fd3f 	bl	8076c66 <USBD_LL_SetupStage>
}
 80781e8:	bf00      	nop
 80781ea:	3708      	adds	r7, #8
 80781ec:	46bd      	mov	sp, r7
 80781ee:	bd80      	pop	{r7, pc}

080781f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80781f0:	b580      	push	{r7, lr}
 80781f2:	b082      	sub	sp, #8
 80781f4:	af00      	add	r7, sp, #0
 80781f6:	6078      	str	r0, [r7, #4]
 80781f8:	460b      	mov	r3, r1
 80781fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80781fc:	687b      	ldr	r3, [r7, #4]
 80781fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8078202:	78fa      	ldrb	r2, [r7, #3]
 8078204:	6879      	ldr	r1, [r7, #4]
 8078206:	4613      	mov	r3, r2
 8078208:	00db      	lsls	r3, r3, #3
 807820a:	1a9b      	subs	r3, r3, r2
 807820c:	009b      	lsls	r3, r3, #2
 807820e:	440b      	add	r3, r1
 8078210:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8078214:	681a      	ldr	r2, [r3, #0]
 8078216:	78fb      	ldrb	r3, [r7, #3]
 8078218:	4619      	mov	r1, r3
 807821a:	f7fe fd79 	bl	8076d10 <USBD_LL_DataOutStage>
}
 807821e:	bf00      	nop
 8078220:	3708      	adds	r7, #8
 8078222:	46bd      	mov	sp, r7
 8078224:	bd80      	pop	{r7, pc}

08078226 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8078226:	b580      	push	{r7, lr}
 8078228:	b082      	sub	sp, #8
 807822a:	af00      	add	r7, sp, #0
 807822c:	6078      	str	r0, [r7, #4]
 807822e:	460b      	mov	r3, r1
 8078230:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8078232:	687b      	ldr	r3, [r7, #4]
 8078234:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8078238:	78fa      	ldrb	r2, [r7, #3]
 807823a:	6879      	ldr	r1, [r7, #4]
 807823c:	4613      	mov	r3, r2
 807823e:	00db      	lsls	r3, r3, #3
 8078240:	1a9b      	subs	r3, r3, r2
 8078242:	009b      	lsls	r3, r3, #2
 8078244:	440b      	add	r3, r1
 8078246:	3348      	adds	r3, #72	; 0x48
 8078248:	681a      	ldr	r2, [r3, #0]
 807824a:	78fb      	ldrb	r3, [r7, #3]
 807824c:	4619      	mov	r1, r3
 807824e:	f7fe fdc2 	bl	8076dd6 <USBD_LL_DataInStage>
}
 8078252:	bf00      	nop
 8078254:	3708      	adds	r7, #8
 8078256:	46bd      	mov	sp, r7
 8078258:	bd80      	pop	{r7, pc}

0807825a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807825a:	b580      	push	{r7, lr}
 807825c:	b082      	sub	sp, #8
 807825e:	af00      	add	r7, sp, #0
 8078260:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8078262:	687b      	ldr	r3, [r7, #4]
 8078264:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8078268:	4618      	mov	r0, r3
 807826a:	f7fe fed6 	bl	807701a <USBD_LL_SOF>
}
 807826e:	bf00      	nop
 8078270:	3708      	adds	r7, #8
 8078272:	46bd      	mov	sp, r7
 8078274:	bd80      	pop	{r7, pc}

08078276 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8078276:	b580      	push	{r7, lr}
 8078278:	b084      	sub	sp, #16
 807827a:	af00      	add	r7, sp, #0
 807827c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 807827e:	2301      	movs	r3, #1
 8078280:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8078282:	687b      	ldr	r3, [r7, #4]
 8078284:	68db      	ldr	r3, [r3, #12]
 8078286:	2b02      	cmp	r3, #2
 8078288:	d001      	beq.n	807828e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 807828a:	f7fa fa19 	bl	80726c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 807828e:	687b      	ldr	r3, [r7, #4]
 8078290:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8078294:	7bfa      	ldrb	r2, [r7, #15]
 8078296:	4611      	mov	r1, r2
 8078298:	4618      	mov	r0, r3
 807829a:	f7fe fe80 	bl	8076f9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 807829e:	687b      	ldr	r3, [r7, #4]
 80782a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80782a4:	4618      	mov	r0, r3
 80782a6:	f7fe fe2c 	bl	8076f02 <USBD_LL_Reset>
}
 80782aa:	bf00      	nop
 80782ac:	3710      	adds	r7, #16
 80782ae:	46bd      	mov	sp, r7
 80782b0:	bd80      	pop	{r7, pc}
	...

080782b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80782b4:	b580      	push	{r7, lr}
 80782b6:	b082      	sub	sp, #8
 80782b8:	af00      	add	r7, sp, #0
 80782ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80782bc:	687b      	ldr	r3, [r7, #4]
 80782be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80782c2:	4618      	mov	r0, r3
 80782c4:	f7fe fe7b 	bl	8076fbe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80782c8:	687b      	ldr	r3, [r7, #4]
 80782ca:	681b      	ldr	r3, [r3, #0]
 80782cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80782d0:	681b      	ldr	r3, [r3, #0]
 80782d2:	687a      	ldr	r2, [r7, #4]
 80782d4:	6812      	ldr	r2, [r2, #0]
 80782d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80782da:	f043 0301 	orr.w	r3, r3, #1
 80782de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80782e0:	687b      	ldr	r3, [r7, #4]
 80782e2:	6a1b      	ldr	r3, [r3, #32]
 80782e4:	2b00      	cmp	r3, #0
 80782e6:	d005      	beq.n	80782f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80782e8:	4b04      	ldr	r3, [pc, #16]	; (80782fc <HAL_PCD_SuspendCallback+0x48>)
 80782ea:	691b      	ldr	r3, [r3, #16]
 80782ec:	4a03      	ldr	r2, [pc, #12]	; (80782fc <HAL_PCD_SuspendCallback+0x48>)
 80782ee:	f043 0306 	orr.w	r3, r3, #6
 80782f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80782f4:	bf00      	nop
 80782f6:	3708      	adds	r7, #8
 80782f8:	46bd      	mov	sp, r7
 80782fa:	bd80      	pop	{r7, pc}
 80782fc:	e000ed00 	.word	0xe000ed00

08078300 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8078300:	b580      	push	{r7, lr}
 8078302:	b082      	sub	sp, #8
 8078304:	af00      	add	r7, sp, #0
 8078306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8078308:	687b      	ldr	r3, [r7, #4]
 807830a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807830e:	4618      	mov	r0, r3
 8078310:	f7fe fe6b 	bl	8076fea <USBD_LL_Resume>
}
 8078314:	bf00      	nop
 8078316:	3708      	adds	r7, #8
 8078318:	46bd      	mov	sp, r7
 807831a:	bd80      	pop	{r7, pc}

0807831c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807831c:	b580      	push	{r7, lr}
 807831e:	b082      	sub	sp, #8
 8078320:	af00      	add	r7, sp, #0
 8078322:	6078      	str	r0, [r7, #4]
 8078324:	460b      	mov	r3, r1
 8078326:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8078328:	687b      	ldr	r3, [r7, #4]
 807832a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807832e:	78fa      	ldrb	r2, [r7, #3]
 8078330:	4611      	mov	r1, r2
 8078332:	4618      	mov	r0, r3
 8078334:	f7fe feb9 	bl	80770aa <USBD_LL_IsoOUTIncomplete>
}
 8078338:	bf00      	nop
 807833a:	3708      	adds	r7, #8
 807833c:	46bd      	mov	sp, r7
 807833e:	bd80      	pop	{r7, pc}

08078340 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8078340:	b580      	push	{r7, lr}
 8078342:	b082      	sub	sp, #8
 8078344:	af00      	add	r7, sp, #0
 8078346:	6078      	str	r0, [r7, #4]
 8078348:	460b      	mov	r3, r1
 807834a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 807834c:	687b      	ldr	r3, [r7, #4]
 807834e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8078352:	78fa      	ldrb	r2, [r7, #3]
 8078354:	4611      	mov	r1, r2
 8078356:	4618      	mov	r0, r3
 8078358:	f7fe fe81 	bl	807705e <USBD_LL_IsoINIncomplete>
}
 807835c:	bf00      	nop
 807835e:	3708      	adds	r7, #8
 8078360:	46bd      	mov	sp, r7
 8078362:	bd80      	pop	{r7, pc}

08078364 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8078364:	b580      	push	{r7, lr}
 8078366:	b082      	sub	sp, #8
 8078368:	af00      	add	r7, sp, #0
 807836a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 807836c:	687b      	ldr	r3, [r7, #4]
 807836e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8078372:	4618      	mov	r0, r3
 8078374:	f7fe febf 	bl	80770f6 <USBD_LL_DevConnected>
}
 8078378:	bf00      	nop
 807837a:	3708      	adds	r7, #8
 807837c:	46bd      	mov	sp, r7
 807837e:	bd80      	pop	{r7, pc}

08078380 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8078380:	b580      	push	{r7, lr}
 8078382:	b082      	sub	sp, #8
 8078384:	af00      	add	r7, sp, #0
 8078386:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8078388:	687b      	ldr	r3, [r7, #4]
 807838a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807838e:	4618      	mov	r0, r3
 8078390:	f7fe febc 	bl	807710c <USBD_LL_DevDisconnected>
}
 8078394:	bf00      	nop
 8078396:	3708      	adds	r7, #8
 8078398:	46bd      	mov	sp, r7
 807839a:	bd80      	pop	{r7, pc}

0807839c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 807839c:	b580      	push	{r7, lr}
 807839e:	b082      	sub	sp, #8
 80783a0:	af00      	add	r7, sp, #0
 80783a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80783a4:	687b      	ldr	r3, [r7, #4]
 80783a6:	781b      	ldrb	r3, [r3, #0]
 80783a8:	2b00      	cmp	r3, #0
 80783aa:	d13c      	bne.n	8078426 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80783ac:	4a20      	ldr	r2, [pc, #128]	; (8078430 <USBD_LL_Init+0x94>)
 80783ae:	687b      	ldr	r3, [r7, #4]
 80783b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80783b4:	687b      	ldr	r3, [r7, #4]
 80783b6:	4a1e      	ldr	r2, [pc, #120]	; (8078430 <USBD_LL_Init+0x94>)
 80783b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80783bc:	4b1c      	ldr	r3, [pc, #112]	; (8078430 <USBD_LL_Init+0x94>)
 80783be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80783c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80783c4:	4b1a      	ldr	r3, [pc, #104]	; (8078430 <USBD_LL_Init+0x94>)
 80783c6:	2204      	movs	r2, #4
 80783c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80783ca:	4b19      	ldr	r3, [pc, #100]	; (8078430 <USBD_LL_Init+0x94>)
 80783cc:	2202      	movs	r2, #2
 80783ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80783d0:	4b17      	ldr	r3, [pc, #92]	; (8078430 <USBD_LL_Init+0x94>)
 80783d2:	2200      	movs	r2, #0
 80783d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80783d6:	4b16      	ldr	r3, [pc, #88]	; (8078430 <USBD_LL_Init+0x94>)
 80783d8:	2202      	movs	r2, #2
 80783da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80783dc:	4b14      	ldr	r3, [pc, #80]	; (8078430 <USBD_LL_Init+0x94>)
 80783de:	2201      	movs	r2, #1
 80783e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80783e2:	4b13      	ldr	r3, [pc, #76]	; (8078430 <USBD_LL_Init+0x94>)
 80783e4:	2200      	movs	r2, #0
 80783e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80783e8:	4b11      	ldr	r3, [pc, #68]	; (8078430 <USBD_LL_Init+0x94>)
 80783ea:	2200      	movs	r2, #0
 80783ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80783ee:	4b10      	ldr	r3, [pc, #64]	; (8078430 <USBD_LL_Init+0x94>)
 80783f0:	2200      	movs	r2, #0
 80783f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80783f4:	4b0e      	ldr	r3, [pc, #56]	; (8078430 <USBD_LL_Init+0x94>)
 80783f6:	2200      	movs	r2, #0
 80783f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80783fa:	480d      	ldr	r0, [pc, #52]	; (8078430 <USBD_LL_Init+0x94>)
 80783fc:	f7fa fd5d 	bl	8072eba <HAL_PCD_Init>
 8078400:	4603      	mov	r3, r0
 8078402:	2b00      	cmp	r3, #0
 8078404:	d001      	beq.n	807840a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8078406:	f7fa f95b 	bl	80726c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 807840a:	2180      	movs	r1, #128	; 0x80
 807840c:	4808      	ldr	r0, [pc, #32]	; (8078430 <USBD_LL_Init+0x94>)
 807840e:	f7fb fe92 	bl	8074136 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8078412:	2240      	movs	r2, #64	; 0x40
 8078414:	2100      	movs	r1, #0
 8078416:	4806      	ldr	r0, [pc, #24]	; (8078430 <USBD_LL_Init+0x94>)
 8078418:	f7fb fe46 	bl	80740a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 807841c:	2280      	movs	r2, #128	; 0x80
 807841e:	2101      	movs	r1, #1
 8078420:	4803      	ldr	r0, [pc, #12]	; (8078430 <USBD_LL_Init+0x94>)
 8078422:	f7fb fe41 	bl	80740a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8078426:	2300      	movs	r3, #0
}
 8078428:	4618      	mov	r0, r3
 807842a:	3708      	adds	r7, #8
 807842c:	46bd      	mov	sp, r7
 807842e:	bd80      	pop	{r7, pc}
 8078430:	20000aec 	.word	0x20000aec

08078434 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8078434:	b580      	push	{r7, lr}
 8078436:	b084      	sub	sp, #16
 8078438:	af00      	add	r7, sp, #0
 807843a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807843c:	2300      	movs	r3, #0
 807843e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8078440:	2300      	movs	r3, #0
 8078442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8078444:	687b      	ldr	r3, [r7, #4]
 8078446:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807844a:	4618      	mov	r0, r3
 807844c:	f7fa fe52 	bl	80730f4 <HAL_PCD_Start>
 8078450:	4603      	mov	r3, r0
 8078452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8078454:	7bfb      	ldrb	r3, [r7, #15]
 8078456:	4618      	mov	r0, r3
 8078458:	f000 f92c 	bl	80786b4 <USBD_Get_USB_Status>
 807845c:	4603      	mov	r3, r0
 807845e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8078460:	7bbb      	ldrb	r3, [r7, #14]
}
 8078462:	4618      	mov	r0, r3
 8078464:	3710      	adds	r7, #16
 8078466:	46bd      	mov	sp, r7
 8078468:	bd80      	pop	{r7, pc}

0807846a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 807846a:	b580      	push	{r7, lr}
 807846c:	b084      	sub	sp, #16
 807846e:	af00      	add	r7, sp, #0
 8078470:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8078472:	2300      	movs	r3, #0
 8078474:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8078476:	2300      	movs	r3, #0
 8078478:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 807847a:	687b      	ldr	r3, [r7, #4]
 807847c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8078480:	4618      	mov	r0, r3
 8078482:	f7fa fe6a 	bl	807315a <HAL_PCD_Stop>
 8078486:	4603      	mov	r3, r0
 8078488:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807848a:	7bfb      	ldrb	r3, [r7, #15]
 807848c:	4618      	mov	r0, r3
 807848e:	f000 f911 	bl	80786b4 <USBD_Get_USB_Status>
 8078492:	4603      	mov	r3, r0
 8078494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8078496:	7bbb      	ldrb	r3, [r7, #14]
}
 8078498:	4618      	mov	r0, r3
 807849a:	3710      	adds	r7, #16
 807849c:	46bd      	mov	sp, r7
 807849e:	bd80      	pop	{r7, pc}

080784a0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80784a0:	b580      	push	{r7, lr}
 80784a2:	b084      	sub	sp, #16
 80784a4:	af00      	add	r7, sp, #0
 80784a6:	6078      	str	r0, [r7, #4]
 80784a8:	4608      	mov	r0, r1
 80784aa:	4611      	mov	r1, r2
 80784ac:	461a      	mov	r2, r3
 80784ae:	4603      	mov	r3, r0
 80784b0:	70fb      	strb	r3, [r7, #3]
 80784b2:	460b      	mov	r3, r1
 80784b4:	70bb      	strb	r3, [r7, #2]
 80784b6:	4613      	mov	r3, r2
 80784b8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80784ba:	2300      	movs	r3, #0
 80784bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80784be:	2300      	movs	r3, #0
 80784c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80784c2:	687b      	ldr	r3, [r7, #4]
 80784c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80784c8:	78bb      	ldrb	r3, [r7, #2]
 80784ca:	883a      	ldrh	r2, [r7, #0]
 80784cc:	78f9      	ldrb	r1, [r7, #3]
 80784ce:	f7fb fa54 	bl	807397a <HAL_PCD_EP_Open>
 80784d2:	4603      	mov	r3, r0
 80784d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80784d6:	7bfb      	ldrb	r3, [r7, #15]
 80784d8:	4618      	mov	r0, r3
 80784da:	f000 f8eb 	bl	80786b4 <USBD_Get_USB_Status>
 80784de:	4603      	mov	r3, r0
 80784e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80784e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80784e4:	4618      	mov	r0, r3
 80784e6:	3710      	adds	r7, #16
 80784e8:	46bd      	mov	sp, r7
 80784ea:	bd80      	pop	{r7, pc}

080784ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80784ec:	b580      	push	{r7, lr}
 80784ee:	b084      	sub	sp, #16
 80784f0:	af00      	add	r7, sp, #0
 80784f2:	6078      	str	r0, [r7, #4]
 80784f4:	460b      	mov	r3, r1
 80784f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80784f8:	2300      	movs	r3, #0
 80784fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80784fc:	2300      	movs	r3, #0
 80784fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8078500:	687b      	ldr	r3, [r7, #4]
 8078502:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8078506:	78fa      	ldrb	r2, [r7, #3]
 8078508:	4611      	mov	r1, r2
 807850a:	4618      	mov	r0, r3
 807850c:	f7fb fb32 	bl	8073b74 <HAL_PCD_EP_SetStall>
 8078510:	4603      	mov	r3, r0
 8078512:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8078514:	7bfb      	ldrb	r3, [r7, #15]
 8078516:	4618      	mov	r0, r3
 8078518:	f000 f8cc 	bl	80786b4 <USBD_Get_USB_Status>
 807851c:	4603      	mov	r3, r0
 807851e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8078520:	7bbb      	ldrb	r3, [r7, #14]
}
 8078522:	4618      	mov	r0, r3
 8078524:	3710      	adds	r7, #16
 8078526:	46bd      	mov	sp, r7
 8078528:	bd80      	pop	{r7, pc}

0807852a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 807852a:	b580      	push	{r7, lr}
 807852c:	b084      	sub	sp, #16
 807852e:	af00      	add	r7, sp, #0
 8078530:	6078      	str	r0, [r7, #4]
 8078532:	460b      	mov	r3, r1
 8078534:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8078536:	2300      	movs	r3, #0
 8078538:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807853a:	2300      	movs	r3, #0
 807853c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 807853e:	687b      	ldr	r3, [r7, #4]
 8078540:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8078544:	78fa      	ldrb	r2, [r7, #3]
 8078546:	4611      	mov	r1, r2
 8078548:	4618      	mov	r0, r3
 807854a:	f7fb fb77 	bl	8073c3c <HAL_PCD_EP_ClrStall>
 807854e:	4603      	mov	r3, r0
 8078550:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8078552:	7bfb      	ldrb	r3, [r7, #15]
 8078554:	4618      	mov	r0, r3
 8078556:	f000 f8ad 	bl	80786b4 <USBD_Get_USB_Status>
 807855a:	4603      	mov	r3, r0
 807855c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807855e:	7bbb      	ldrb	r3, [r7, #14]
}
 8078560:	4618      	mov	r0, r3
 8078562:	3710      	adds	r7, #16
 8078564:	46bd      	mov	sp, r7
 8078566:	bd80      	pop	{r7, pc}

08078568 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8078568:	b480      	push	{r7}
 807856a:	b085      	sub	sp, #20
 807856c:	af00      	add	r7, sp, #0
 807856e:	6078      	str	r0, [r7, #4]
 8078570:	460b      	mov	r3, r1
 8078572:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8078574:	687b      	ldr	r3, [r7, #4]
 8078576:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807857a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 807857c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8078580:	2b00      	cmp	r3, #0
 8078582:	da0b      	bge.n	807859c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8078584:	78fb      	ldrb	r3, [r7, #3]
 8078586:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 807858a:	68f9      	ldr	r1, [r7, #12]
 807858c:	4613      	mov	r3, r2
 807858e:	00db      	lsls	r3, r3, #3
 8078590:	1a9b      	subs	r3, r3, r2
 8078592:	009b      	lsls	r3, r3, #2
 8078594:	440b      	add	r3, r1
 8078596:	333e      	adds	r3, #62	; 0x3e
 8078598:	781b      	ldrb	r3, [r3, #0]
 807859a:	e00b      	b.n	80785b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 807859c:	78fb      	ldrb	r3, [r7, #3]
 807859e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80785a2:	68f9      	ldr	r1, [r7, #12]
 80785a4:	4613      	mov	r3, r2
 80785a6:	00db      	lsls	r3, r3, #3
 80785a8:	1a9b      	subs	r3, r3, r2
 80785aa:	009b      	lsls	r3, r3, #2
 80785ac:	440b      	add	r3, r1
 80785ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80785b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80785b4:	4618      	mov	r0, r3
 80785b6:	3714      	adds	r7, #20
 80785b8:	46bd      	mov	sp, r7
 80785ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80785be:	4770      	bx	lr

080785c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80785c0:	b580      	push	{r7, lr}
 80785c2:	b084      	sub	sp, #16
 80785c4:	af00      	add	r7, sp, #0
 80785c6:	6078      	str	r0, [r7, #4]
 80785c8:	460b      	mov	r3, r1
 80785ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80785cc:	2300      	movs	r3, #0
 80785ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80785d0:	2300      	movs	r3, #0
 80785d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80785d4:	687b      	ldr	r3, [r7, #4]
 80785d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80785da:	78fa      	ldrb	r2, [r7, #3]
 80785dc:	4611      	mov	r1, r2
 80785de:	4618      	mov	r0, r3
 80785e0:	f7fb f9a6 	bl	8073930 <HAL_PCD_SetAddress>
 80785e4:	4603      	mov	r3, r0
 80785e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80785e8:	7bfb      	ldrb	r3, [r7, #15]
 80785ea:	4618      	mov	r0, r3
 80785ec:	f000 f862 	bl	80786b4 <USBD_Get_USB_Status>
 80785f0:	4603      	mov	r3, r0
 80785f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80785f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80785f6:	4618      	mov	r0, r3
 80785f8:	3710      	adds	r7, #16
 80785fa:	46bd      	mov	sp, r7
 80785fc:	bd80      	pop	{r7, pc}

080785fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80785fe:	b580      	push	{r7, lr}
 8078600:	b086      	sub	sp, #24
 8078602:	af00      	add	r7, sp, #0
 8078604:	60f8      	str	r0, [r7, #12]
 8078606:	607a      	str	r2, [r7, #4]
 8078608:	603b      	str	r3, [r7, #0]
 807860a:	460b      	mov	r3, r1
 807860c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807860e:	2300      	movs	r3, #0
 8078610:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8078612:	2300      	movs	r3, #0
 8078614:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8078616:	68fb      	ldr	r3, [r7, #12]
 8078618:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 807861c:	7af9      	ldrb	r1, [r7, #11]
 807861e:	683b      	ldr	r3, [r7, #0]
 8078620:	687a      	ldr	r2, [r7, #4]
 8078622:	f7fb fa5d 	bl	8073ae0 <HAL_PCD_EP_Transmit>
 8078626:	4603      	mov	r3, r0
 8078628:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807862a:	7dfb      	ldrb	r3, [r7, #23]
 807862c:	4618      	mov	r0, r3
 807862e:	f000 f841 	bl	80786b4 <USBD_Get_USB_Status>
 8078632:	4603      	mov	r3, r0
 8078634:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8078636:	7dbb      	ldrb	r3, [r7, #22]
}
 8078638:	4618      	mov	r0, r3
 807863a:	3718      	adds	r7, #24
 807863c:	46bd      	mov	sp, r7
 807863e:	bd80      	pop	{r7, pc}

08078640 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8078640:	b580      	push	{r7, lr}
 8078642:	b086      	sub	sp, #24
 8078644:	af00      	add	r7, sp, #0
 8078646:	60f8      	str	r0, [r7, #12]
 8078648:	607a      	str	r2, [r7, #4]
 807864a:	603b      	str	r3, [r7, #0]
 807864c:	460b      	mov	r3, r1
 807864e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8078650:	2300      	movs	r3, #0
 8078652:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8078654:	2300      	movs	r3, #0
 8078656:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8078658:	68fb      	ldr	r3, [r7, #12]
 807865a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 807865e:	7af9      	ldrb	r1, [r7, #11]
 8078660:	683b      	ldr	r3, [r7, #0]
 8078662:	687a      	ldr	r2, [r7, #4]
 8078664:	f7fb f9f1 	bl	8073a4a <HAL_PCD_EP_Receive>
 8078668:	4603      	mov	r3, r0
 807866a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807866c:	7dfb      	ldrb	r3, [r7, #23]
 807866e:	4618      	mov	r0, r3
 8078670:	f000 f820 	bl	80786b4 <USBD_Get_USB_Status>
 8078674:	4603      	mov	r3, r0
 8078676:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8078678:	7dbb      	ldrb	r3, [r7, #22]
}
 807867a:	4618      	mov	r0, r3
 807867c:	3718      	adds	r7, #24
 807867e:	46bd      	mov	sp, r7
 8078680:	bd80      	pop	{r7, pc}
	...

08078684 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8078684:	b480      	push	{r7}
 8078686:	b083      	sub	sp, #12
 8078688:	af00      	add	r7, sp, #0
 807868a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 807868c:	4b03      	ldr	r3, [pc, #12]	; (807869c <USBD_static_malloc+0x18>)
}
 807868e:	4618      	mov	r0, r3
 8078690:	370c      	adds	r7, #12
 8078692:	46bd      	mov	sp, r7
 8078694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078698:	4770      	bx	lr
 807869a:	bf00      	nop
 807869c:	200001f8 	.word	0x200001f8

080786a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80786a0:	b480      	push	{r7}
 80786a2:	b083      	sub	sp, #12
 80786a4:	af00      	add	r7, sp, #0
 80786a6:	6078      	str	r0, [r7, #4]

}
 80786a8:	bf00      	nop
 80786aa:	370c      	adds	r7, #12
 80786ac:	46bd      	mov	sp, r7
 80786ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80786b2:	4770      	bx	lr

080786b4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80786b4:	b480      	push	{r7}
 80786b6:	b085      	sub	sp, #20
 80786b8:	af00      	add	r7, sp, #0
 80786ba:	4603      	mov	r3, r0
 80786bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80786be:	2300      	movs	r3, #0
 80786c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80786c2:	79fb      	ldrb	r3, [r7, #7]
 80786c4:	2b03      	cmp	r3, #3
 80786c6:	d817      	bhi.n	80786f8 <USBD_Get_USB_Status+0x44>
 80786c8:	a201      	add	r2, pc, #4	; (adr r2, 80786d0 <USBD_Get_USB_Status+0x1c>)
 80786ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80786ce:	bf00      	nop
 80786d0:	080786e1 	.word	0x080786e1
 80786d4:	080786e7 	.word	0x080786e7
 80786d8:	080786ed 	.word	0x080786ed
 80786dc:	080786f3 	.word	0x080786f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80786e0:	2300      	movs	r3, #0
 80786e2:	73fb      	strb	r3, [r7, #15]
    break;
 80786e4:	e00b      	b.n	80786fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80786e6:	2303      	movs	r3, #3
 80786e8:	73fb      	strb	r3, [r7, #15]
    break;
 80786ea:	e008      	b.n	80786fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80786ec:	2301      	movs	r3, #1
 80786ee:	73fb      	strb	r3, [r7, #15]
    break;
 80786f0:	e005      	b.n	80786fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80786f2:	2303      	movs	r3, #3
 80786f4:	73fb      	strb	r3, [r7, #15]
    break;
 80786f6:	e002      	b.n	80786fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80786f8:	2303      	movs	r3, #3
 80786fa:	73fb      	strb	r3, [r7, #15]
    break;
 80786fc:	bf00      	nop
  }
  return usb_status;
 80786fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8078700:	4618      	mov	r0, r3
 8078702:	3714      	adds	r7, #20
 8078704:	46bd      	mov	sp, r7
 8078706:	f85d 7b04 	ldr.w	r7, [sp], #4
 807870a:	4770      	bx	lr

0807870c <__libc_init_array>:
 807870c:	b570      	push	{r4, r5, r6, lr}
 807870e:	4d0d      	ldr	r5, [pc, #52]	; (8078744 <__libc_init_array+0x38>)
 8078710:	4c0d      	ldr	r4, [pc, #52]	; (8078748 <__libc_init_array+0x3c>)
 8078712:	1b64      	subs	r4, r4, r5
 8078714:	10a4      	asrs	r4, r4, #2
 8078716:	2600      	movs	r6, #0
 8078718:	42a6      	cmp	r6, r4
 807871a:	d109      	bne.n	8078730 <__libc_init_array+0x24>
 807871c:	4d0b      	ldr	r5, [pc, #44]	; (807874c <__libc_init_array+0x40>)
 807871e:	4c0c      	ldr	r4, [pc, #48]	; (8078750 <__libc_init_array+0x44>)
 8078720:	f000 f820 	bl	8078764 <_init>
 8078724:	1b64      	subs	r4, r4, r5
 8078726:	10a4      	asrs	r4, r4, #2
 8078728:	2600      	movs	r6, #0
 807872a:	42a6      	cmp	r6, r4
 807872c:	d105      	bne.n	807873a <__libc_init_array+0x2e>
 807872e:	bd70      	pop	{r4, r5, r6, pc}
 8078730:	f855 3b04 	ldr.w	r3, [r5], #4
 8078734:	4798      	blx	r3
 8078736:	3601      	adds	r6, #1
 8078738:	e7ee      	b.n	8078718 <__libc_init_array+0xc>
 807873a:	f855 3b04 	ldr.w	r3, [r5], #4
 807873e:	4798      	blx	r3
 8078740:	3601      	adds	r6, #1
 8078742:	e7f2      	b.n	807872a <__libc_init_array+0x1e>
 8078744:	0807883c 	.word	0x0807883c
 8078748:	0807883c 	.word	0x0807883c
 807874c:	0807883c 	.word	0x0807883c
 8078750:	08078840 	.word	0x08078840

08078754 <memset>:
 8078754:	4402      	add	r2, r0
 8078756:	4603      	mov	r3, r0
 8078758:	4293      	cmp	r3, r2
 807875a:	d100      	bne.n	807875e <memset+0xa>
 807875c:	4770      	bx	lr
 807875e:	f803 1b01 	strb.w	r1, [r3], #1
 8078762:	e7f9      	b.n	8078758 <memset+0x4>

08078764 <_init>:
 8078764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8078766:	bf00      	nop
 8078768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 807876a:	bc08      	pop	{r3}
 807876c:	469e      	mov	lr, r3
 807876e:	4770      	bx	lr

08078770 <_fini>:
 8078770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8078772:	bf00      	nop
 8078774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8078776:	bc08      	pop	{r3}
 8078778:	469e      	mov	lr, r3
 807877a:	4770      	bx	lr
