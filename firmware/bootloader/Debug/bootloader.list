
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08072000  08072000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c4  08072198  08072198  00002198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0807865c  0807865c  0000865c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08078714  08078714  000100dc  2**0
                  CONTENTS
  4 .ARM          00000008  08078714  08078714  00008714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0807871c  0807871c  000100dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0807871c  0807871c  0000871c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08078720  08078720  00008720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08078724  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e18  200000dc  08078800  000100dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ef4  08078800  00010ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000100dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012105  00000000  00000000  0001010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc3  00000000  00000000  00022211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00024ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  000259f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018154  00000000  00000000  000263e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e818  00000000  00000000  0003e534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c56  00000000  00000000  0004cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d39a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bec  00000000  00000000  000d39f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08072198 <__do_global_dtors_aux>:
 8072198:	b510      	push	{r4, lr}
 807219a:	4c05      	ldr	r4, [pc, #20]	; (80721b0 <__do_global_dtors_aux+0x18>)
 807219c:	7823      	ldrb	r3, [r4, #0]
 807219e:	b933      	cbnz	r3, 80721ae <__do_global_dtors_aux+0x16>
 80721a0:	4b04      	ldr	r3, [pc, #16]	; (80721b4 <__do_global_dtors_aux+0x1c>)
 80721a2:	b113      	cbz	r3, 80721aa <__do_global_dtors_aux+0x12>
 80721a4:	4804      	ldr	r0, [pc, #16]	; (80721b8 <__do_global_dtors_aux+0x20>)
 80721a6:	f3af 8000 	nop.w
 80721aa:	2301      	movs	r3, #1
 80721ac:	7023      	strb	r3, [r4, #0]
 80721ae:	bd10      	pop	{r4, pc}
 80721b0:	200000dc 	.word	0x200000dc
 80721b4:	00000000 	.word	0x00000000
 80721b8:	08078644 	.word	0x08078644

080721bc <frame_dummy>:
 80721bc:	b508      	push	{r3, lr}
 80721be:	4b03      	ldr	r3, [pc, #12]	; (80721cc <frame_dummy+0x10>)
 80721c0:	b11b      	cbz	r3, 80721ca <frame_dummy+0xe>
 80721c2:	4903      	ldr	r1, [pc, #12]	; (80721d0 <frame_dummy+0x14>)
 80721c4:	4803      	ldr	r0, [pc, #12]	; (80721d4 <frame_dummy+0x18>)
 80721c6:	f3af 8000 	nop.w
 80721ca:	bd08      	pop	{r3, pc}
 80721cc:	00000000 	.word	0x00000000
 80721d0:	200000e0 	.word	0x200000e0
 80721d4:	08078644 	.word	0x08078644

080721d8 <__aeabi_uldivmod>:
 80721d8:	b953      	cbnz	r3, 80721f0 <__aeabi_uldivmod+0x18>
 80721da:	b94a      	cbnz	r2, 80721f0 <__aeabi_uldivmod+0x18>
 80721dc:	2900      	cmp	r1, #0
 80721de:	bf08      	it	eq
 80721e0:	2800      	cmpeq	r0, #0
 80721e2:	bf1c      	itt	ne
 80721e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80721e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80721ec:	f000 b96e 	b.w	80724cc <__aeabi_idiv0>
 80721f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80721f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80721f8:	f000 f806 	bl	8072208 <__udivmoddi4>
 80721fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8072200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8072204:	b004      	add	sp, #16
 8072206:	4770      	bx	lr

08072208 <__udivmoddi4>:
 8072208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 807220c:	9d08      	ldr	r5, [sp, #32]
 807220e:	4604      	mov	r4, r0
 8072210:	468c      	mov	ip, r1
 8072212:	2b00      	cmp	r3, #0
 8072214:	f040 8083 	bne.w	807231e <__udivmoddi4+0x116>
 8072218:	428a      	cmp	r2, r1
 807221a:	4617      	mov	r7, r2
 807221c:	d947      	bls.n	80722ae <__udivmoddi4+0xa6>
 807221e:	fab2 f282 	clz	r2, r2
 8072222:	b142      	cbz	r2, 8072236 <__udivmoddi4+0x2e>
 8072224:	f1c2 0020 	rsb	r0, r2, #32
 8072228:	fa24 f000 	lsr.w	r0, r4, r0
 807222c:	4091      	lsls	r1, r2
 807222e:	4097      	lsls	r7, r2
 8072230:	ea40 0c01 	orr.w	ip, r0, r1
 8072234:	4094      	lsls	r4, r2
 8072236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 807223a:	0c23      	lsrs	r3, r4, #16
 807223c:	fbbc f6f8 	udiv	r6, ip, r8
 8072240:	fa1f fe87 	uxth.w	lr, r7
 8072244:	fb08 c116 	mls	r1, r8, r6, ip
 8072248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 807224c:	fb06 f10e 	mul.w	r1, r6, lr
 8072250:	4299      	cmp	r1, r3
 8072252:	d909      	bls.n	8072268 <__udivmoddi4+0x60>
 8072254:	18fb      	adds	r3, r7, r3
 8072256:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 807225a:	f080 8119 	bcs.w	8072490 <__udivmoddi4+0x288>
 807225e:	4299      	cmp	r1, r3
 8072260:	f240 8116 	bls.w	8072490 <__udivmoddi4+0x288>
 8072264:	3e02      	subs	r6, #2
 8072266:	443b      	add	r3, r7
 8072268:	1a5b      	subs	r3, r3, r1
 807226a:	b2a4      	uxth	r4, r4
 807226c:	fbb3 f0f8 	udiv	r0, r3, r8
 8072270:	fb08 3310 	mls	r3, r8, r0, r3
 8072274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8072278:	fb00 fe0e 	mul.w	lr, r0, lr
 807227c:	45a6      	cmp	lr, r4
 807227e:	d909      	bls.n	8072294 <__udivmoddi4+0x8c>
 8072280:	193c      	adds	r4, r7, r4
 8072282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8072286:	f080 8105 	bcs.w	8072494 <__udivmoddi4+0x28c>
 807228a:	45a6      	cmp	lr, r4
 807228c:	f240 8102 	bls.w	8072494 <__udivmoddi4+0x28c>
 8072290:	3802      	subs	r0, #2
 8072292:	443c      	add	r4, r7
 8072294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8072298:	eba4 040e 	sub.w	r4, r4, lr
 807229c:	2600      	movs	r6, #0
 807229e:	b11d      	cbz	r5, 80722a8 <__udivmoddi4+0xa0>
 80722a0:	40d4      	lsrs	r4, r2
 80722a2:	2300      	movs	r3, #0
 80722a4:	e9c5 4300 	strd	r4, r3, [r5]
 80722a8:	4631      	mov	r1, r6
 80722aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80722ae:	b902      	cbnz	r2, 80722b2 <__udivmoddi4+0xaa>
 80722b0:	deff      	udf	#255	; 0xff
 80722b2:	fab2 f282 	clz	r2, r2
 80722b6:	2a00      	cmp	r2, #0
 80722b8:	d150      	bne.n	807235c <__udivmoddi4+0x154>
 80722ba:	1bcb      	subs	r3, r1, r7
 80722bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80722c0:	fa1f f887 	uxth.w	r8, r7
 80722c4:	2601      	movs	r6, #1
 80722c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80722ca:	0c21      	lsrs	r1, r4, #16
 80722cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80722d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80722d4:	fb08 f30c 	mul.w	r3, r8, ip
 80722d8:	428b      	cmp	r3, r1
 80722da:	d907      	bls.n	80722ec <__udivmoddi4+0xe4>
 80722dc:	1879      	adds	r1, r7, r1
 80722de:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80722e2:	d202      	bcs.n	80722ea <__udivmoddi4+0xe2>
 80722e4:	428b      	cmp	r3, r1
 80722e6:	f200 80e9 	bhi.w	80724bc <__udivmoddi4+0x2b4>
 80722ea:	4684      	mov	ip, r0
 80722ec:	1ac9      	subs	r1, r1, r3
 80722ee:	b2a3      	uxth	r3, r4
 80722f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80722f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80722f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80722fc:	fb08 f800 	mul.w	r8, r8, r0
 8072300:	45a0      	cmp	r8, r4
 8072302:	d907      	bls.n	8072314 <__udivmoddi4+0x10c>
 8072304:	193c      	adds	r4, r7, r4
 8072306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 807230a:	d202      	bcs.n	8072312 <__udivmoddi4+0x10a>
 807230c:	45a0      	cmp	r8, r4
 807230e:	f200 80d9 	bhi.w	80724c4 <__udivmoddi4+0x2bc>
 8072312:	4618      	mov	r0, r3
 8072314:	eba4 0408 	sub.w	r4, r4, r8
 8072318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 807231c:	e7bf      	b.n	807229e <__udivmoddi4+0x96>
 807231e:	428b      	cmp	r3, r1
 8072320:	d909      	bls.n	8072336 <__udivmoddi4+0x12e>
 8072322:	2d00      	cmp	r5, #0
 8072324:	f000 80b1 	beq.w	807248a <__udivmoddi4+0x282>
 8072328:	2600      	movs	r6, #0
 807232a:	e9c5 0100 	strd	r0, r1, [r5]
 807232e:	4630      	mov	r0, r6
 8072330:	4631      	mov	r1, r6
 8072332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8072336:	fab3 f683 	clz	r6, r3
 807233a:	2e00      	cmp	r6, #0
 807233c:	d14a      	bne.n	80723d4 <__udivmoddi4+0x1cc>
 807233e:	428b      	cmp	r3, r1
 8072340:	d302      	bcc.n	8072348 <__udivmoddi4+0x140>
 8072342:	4282      	cmp	r2, r0
 8072344:	f200 80b8 	bhi.w	80724b8 <__udivmoddi4+0x2b0>
 8072348:	1a84      	subs	r4, r0, r2
 807234a:	eb61 0103 	sbc.w	r1, r1, r3
 807234e:	2001      	movs	r0, #1
 8072350:	468c      	mov	ip, r1
 8072352:	2d00      	cmp	r5, #0
 8072354:	d0a8      	beq.n	80722a8 <__udivmoddi4+0xa0>
 8072356:	e9c5 4c00 	strd	r4, ip, [r5]
 807235a:	e7a5      	b.n	80722a8 <__udivmoddi4+0xa0>
 807235c:	f1c2 0320 	rsb	r3, r2, #32
 8072360:	fa20 f603 	lsr.w	r6, r0, r3
 8072364:	4097      	lsls	r7, r2
 8072366:	fa01 f002 	lsl.w	r0, r1, r2
 807236a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 807236e:	40d9      	lsrs	r1, r3
 8072370:	4330      	orrs	r0, r6
 8072372:	0c03      	lsrs	r3, r0, #16
 8072374:	fbb1 f6fe 	udiv	r6, r1, lr
 8072378:	fa1f f887 	uxth.w	r8, r7
 807237c:	fb0e 1116 	mls	r1, lr, r6, r1
 8072380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8072384:	fb06 f108 	mul.w	r1, r6, r8
 8072388:	4299      	cmp	r1, r3
 807238a:	fa04 f402 	lsl.w	r4, r4, r2
 807238e:	d909      	bls.n	80723a4 <__udivmoddi4+0x19c>
 8072390:	18fb      	adds	r3, r7, r3
 8072392:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8072396:	f080 808d 	bcs.w	80724b4 <__udivmoddi4+0x2ac>
 807239a:	4299      	cmp	r1, r3
 807239c:	f240 808a 	bls.w	80724b4 <__udivmoddi4+0x2ac>
 80723a0:	3e02      	subs	r6, #2
 80723a2:	443b      	add	r3, r7
 80723a4:	1a5b      	subs	r3, r3, r1
 80723a6:	b281      	uxth	r1, r0
 80723a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80723ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80723b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80723b4:	fb00 f308 	mul.w	r3, r0, r8
 80723b8:	428b      	cmp	r3, r1
 80723ba:	d907      	bls.n	80723cc <__udivmoddi4+0x1c4>
 80723bc:	1879      	adds	r1, r7, r1
 80723be:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80723c2:	d273      	bcs.n	80724ac <__udivmoddi4+0x2a4>
 80723c4:	428b      	cmp	r3, r1
 80723c6:	d971      	bls.n	80724ac <__udivmoddi4+0x2a4>
 80723c8:	3802      	subs	r0, #2
 80723ca:	4439      	add	r1, r7
 80723cc:	1acb      	subs	r3, r1, r3
 80723ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80723d2:	e778      	b.n	80722c6 <__udivmoddi4+0xbe>
 80723d4:	f1c6 0c20 	rsb	ip, r6, #32
 80723d8:	fa03 f406 	lsl.w	r4, r3, r6
 80723dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80723e0:	431c      	orrs	r4, r3
 80723e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80723e6:	fa01 f306 	lsl.w	r3, r1, r6
 80723ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80723ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80723f2:	431f      	orrs	r7, r3
 80723f4:	0c3b      	lsrs	r3, r7, #16
 80723f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80723fa:	fa1f f884 	uxth.w	r8, r4
 80723fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8072402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8072406:	fb09 fa08 	mul.w	sl, r9, r8
 807240a:	458a      	cmp	sl, r1
 807240c:	fa02 f206 	lsl.w	r2, r2, r6
 8072410:	fa00 f306 	lsl.w	r3, r0, r6
 8072414:	d908      	bls.n	8072428 <__udivmoddi4+0x220>
 8072416:	1861      	adds	r1, r4, r1
 8072418:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 807241c:	d248      	bcs.n	80724b0 <__udivmoddi4+0x2a8>
 807241e:	458a      	cmp	sl, r1
 8072420:	d946      	bls.n	80724b0 <__udivmoddi4+0x2a8>
 8072422:	f1a9 0902 	sub.w	r9, r9, #2
 8072426:	4421      	add	r1, r4
 8072428:	eba1 010a 	sub.w	r1, r1, sl
 807242c:	b2bf      	uxth	r7, r7
 807242e:	fbb1 f0fe 	udiv	r0, r1, lr
 8072432:	fb0e 1110 	mls	r1, lr, r0, r1
 8072436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 807243a:	fb00 f808 	mul.w	r8, r0, r8
 807243e:	45b8      	cmp	r8, r7
 8072440:	d907      	bls.n	8072452 <__udivmoddi4+0x24a>
 8072442:	19e7      	adds	r7, r4, r7
 8072444:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8072448:	d22e      	bcs.n	80724a8 <__udivmoddi4+0x2a0>
 807244a:	45b8      	cmp	r8, r7
 807244c:	d92c      	bls.n	80724a8 <__udivmoddi4+0x2a0>
 807244e:	3802      	subs	r0, #2
 8072450:	4427      	add	r7, r4
 8072452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8072456:	eba7 0708 	sub.w	r7, r7, r8
 807245a:	fba0 8902 	umull	r8, r9, r0, r2
 807245e:	454f      	cmp	r7, r9
 8072460:	46c6      	mov	lr, r8
 8072462:	4649      	mov	r1, r9
 8072464:	d31a      	bcc.n	807249c <__udivmoddi4+0x294>
 8072466:	d017      	beq.n	8072498 <__udivmoddi4+0x290>
 8072468:	b15d      	cbz	r5, 8072482 <__udivmoddi4+0x27a>
 807246a:	ebb3 020e 	subs.w	r2, r3, lr
 807246e:	eb67 0701 	sbc.w	r7, r7, r1
 8072472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8072476:	40f2      	lsrs	r2, r6
 8072478:	ea4c 0202 	orr.w	r2, ip, r2
 807247c:	40f7      	lsrs	r7, r6
 807247e:	e9c5 2700 	strd	r2, r7, [r5]
 8072482:	2600      	movs	r6, #0
 8072484:	4631      	mov	r1, r6
 8072486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 807248a:	462e      	mov	r6, r5
 807248c:	4628      	mov	r0, r5
 807248e:	e70b      	b.n	80722a8 <__udivmoddi4+0xa0>
 8072490:	4606      	mov	r6, r0
 8072492:	e6e9      	b.n	8072268 <__udivmoddi4+0x60>
 8072494:	4618      	mov	r0, r3
 8072496:	e6fd      	b.n	8072294 <__udivmoddi4+0x8c>
 8072498:	4543      	cmp	r3, r8
 807249a:	d2e5      	bcs.n	8072468 <__udivmoddi4+0x260>
 807249c:	ebb8 0e02 	subs.w	lr, r8, r2
 80724a0:	eb69 0104 	sbc.w	r1, r9, r4
 80724a4:	3801      	subs	r0, #1
 80724a6:	e7df      	b.n	8072468 <__udivmoddi4+0x260>
 80724a8:	4608      	mov	r0, r1
 80724aa:	e7d2      	b.n	8072452 <__udivmoddi4+0x24a>
 80724ac:	4660      	mov	r0, ip
 80724ae:	e78d      	b.n	80723cc <__udivmoddi4+0x1c4>
 80724b0:	4681      	mov	r9, r0
 80724b2:	e7b9      	b.n	8072428 <__udivmoddi4+0x220>
 80724b4:	4666      	mov	r6, ip
 80724b6:	e775      	b.n	80723a4 <__udivmoddi4+0x19c>
 80724b8:	4630      	mov	r0, r6
 80724ba:	e74a      	b.n	8072352 <__udivmoddi4+0x14a>
 80724bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80724c0:	4439      	add	r1, r7
 80724c2:	e713      	b.n	80722ec <__udivmoddi4+0xe4>
 80724c4:	3802      	subs	r0, #2
 80724c6:	443c      	add	r4, r7
 80724c8:	e724      	b.n	8072314 <__udivmoddi4+0x10c>
 80724ca:	bf00      	nop

080724cc <__aeabi_idiv0>:
 80724cc:	4770      	bx	lr
 80724ce:	bf00      	nop

080724d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80724d0:	b580      	push	{r7, lr}
 80724d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80724d4:	f000 f936 	bl	8072744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80724d8:	f000 f806 	bl	80724e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80724dc:	f000 f86c 	bl	80725b8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80724e0:	f005 fc0a 	bl	8077cf8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80724e4:	e7fe      	b.n	80724e4 <main+0x14>
	...

080724e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80724e8:	b580      	push	{r7, lr}
 80724ea:	b094      	sub	sp, #80	; 0x50
 80724ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80724ee:	f107 0320 	add.w	r3, r7, #32
 80724f2:	2230      	movs	r2, #48	; 0x30
 80724f4:	2100      	movs	r1, #0
 80724f6:	4618      	mov	r0, r3
 80724f8:	f006 f89c 	bl	8078634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80724fc:	f107 030c 	add.w	r3, r7, #12
 8072500:	2200      	movs	r2, #0
 8072502:	601a      	str	r2, [r3, #0]
 8072504:	605a      	str	r2, [r3, #4]
 8072506:	609a      	str	r2, [r3, #8]
 8072508:	60da      	str	r2, [r3, #12]
 807250a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 807250c:	2300      	movs	r3, #0
 807250e:	60bb      	str	r3, [r7, #8]
 8072510:	4b27      	ldr	r3, [pc, #156]	; (80725b0 <SystemClock_Config+0xc8>)
 8072512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8072514:	4a26      	ldr	r2, [pc, #152]	; (80725b0 <SystemClock_Config+0xc8>)
 8072516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807251a:	6413      	str	r3, [r2, #64]	; 0x40
 807251c:	4b24      	ldr	r3, [pc, #144]	; (80725b0 <SystemClock_Config+0xc8>)
 807251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8072520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8072524:	60bb      	str	r3, [r7, #8]
 8072526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8072528:	2300      	movs	r3, #0
 807252a:	607b      	str	r3, [r7, #4]
 807252c:	4b21      	ldr	r3, [pc, #132]	; (80725b4 <SystemClock_Config+0xcc>)
 807252e:	681b      	ldr	r3, [r3, #0]
 8072530:	4a20      	ldr	r2, [pc, #128]	; (80725b4 <SystemClock_Config+0xcc>)
 8072532:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8072536:	6013      	str	r3, [r2, #0]
 8072538:	4b1e      	ldr	r3, [pc, #120]	; (80725b4 <SystemClock_Config+0xcc>)
 807253a:	681b      	ldr	r3, [r3, #0]
 807253c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8072540:	607b      	str	r3, [r7, #4]
 8072542:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8072544:	2301      	movs	r3, #1
 8072546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8072548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 807254c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 807254e:	2302      	movs	r3, #2
 8072550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8072552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8072556:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8072558:	2319      	movs	r3, #25
 807255a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 807255c:	23c0      	movs	r3, #192	; 0xc0
 807255e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8072560:	2302      	movs	r3, #2
 8072562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8072564:	2304      	movs	r3, #4
 8072566:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8072568:	f107 0320 	add.w	r3, r7, #32
 807256c:	4618      	mov	r0, r3
 807256e:	f001 fd6f 	bl	8074050 <HAL_RCC_OscConfig>
 8072572:	4603      	mov	r3, r0
 8072574:	2b00      	cmp	r3, #0
 8072576:	d001      	beq.n	807257c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8072578:	f000 f846 	bl	8072608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 807257c:	230f      	movs	r3, #15
 807257e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8072580:	2302      	movs	r3, #2
 8072582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8072584:	2300      	movs	r3, #0
 8072586:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8072588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 807258c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 807258e:	2300      	movs	r3, #0
 8072590:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8072592:	f107 030c 	add.w	r3, r7, #12
 8072596:	2103      	movs	r1, #3
 8072598:	4618      	mov	r0, r3
 807259a:	f001 ffd1 	bl	8074540 <HAL_RCC_ClockConfig>
 807259e:	4603      	mov	r3, r0
 80725a0:	2b00      	cmp	r3, #0
 80725a2:	d001      	beq.n	80725a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80725a4:	f000 f830 	bl	8072608 <Error_Handler>
  }
}
 80725a8:	bf00      	nop
 80725aa:	3750      	adds	r7, #80	; 0x50
 80725ac:	46bd      	mov	sp, r7
 80725ae:	bd80      	pop	{r7, pc}
 80725b0:	40023800 	.word	0x40023800
 80725b4:	40007000 	.word	0x40007000

080725b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80725b8:	b480      	push	{r7}
 80725ba:	b083      	sub	sp, #12
 80725bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80725be:	2300      	movs	r3, #0
 80725c0:	607b      	str	r3, [r7, #4]
 80725c2:	4b10      	ldr	r3, [pc, #64]	; (8072604 <MX_GPIO_Init+0x4c>)
 80725c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80725c6:	4a0f      	ldr	r2, [pc, #60]	; (8072604 <MX_GPIO_Init+0x4c>)
 80725c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80725cc:	6313      	str	r3, [r2, #48]	; 0x30
 80725ce:	4b0d      	ldr	r3, [pc, #52]	; (8072604 <MX_GPIO_Init+0x4c>)
 80725d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80725d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80725d6:	607b      	str	r3, [r7, #4]
 80725d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80725da:	2300      	movs	r3, #0
 80725dc:	603b      	str	r3, [r7, #0]
 80725de:	4b09      	ldr	r3, [pc, #36]	; (8072604 <MX_GPIO_Init+0x4c>)
 80725e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80725e2:	4a08      	ldr	r2, [pc, #32]	; (8072604 <MX_GPIO_Init+0x4c>)
 80725e4:	f043 0301 	orr.w	r3, r3, #1
 80725e8:	6313      	str	r3, [r2, #48]	; 0x30
 80725ea:	4b06      	ldr	r3, [pc, #24]	; (8072604 <MX_GPIO_Init+0x4c>)
 80725ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80725ee:	f003 0301 	and.w	r3, r3, #1
 80725f2:	603b      	str	r3, [r7, #0]
 80725f4:	683b      	ldr	r3, [r7, #0]

}
 80725f6:	bf00      	nop
 80725f8:	370c      	adds	r7, #12
 80725fa:	46bd      	mov	sp, r7
 80725fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072600:	4770      	bx	lr
 8072602:	bf00      	nop
 8072604:	40023800 	.word	0x40023800

08072608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8072608:	b480      	push	{r7}
 807260a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 807260c:	b672      	cpsid	i
}
 807260e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8072610:	e7fe      	b.n	8072610 <Error_Handler+0x8>
	...

08072614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8072614:	b480      	push	{r7}
 8072616:	b083      	sub	sp, #12
 8072618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 807261a:	2300      	movs	r3, #0
 807261c:	607b      	str	r3, [r7, #4]
 807261e:	4b10      	ldr	r3, [pc, #64]	; (8072660 <HAL_MspInit+0x4c>)
 8072620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8072622:	4a0f      	ldr	r2, [pc, #60]	; (8072660 <HAL_MspInit+0x4c>)
 8072624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8072628:	6453      	str	r3, [r2, #68]	; 0x44
 807262a:	4b0d      	ldr	r3, [pc, #52]	; (8072660 <HAL_MspInit+0x4c>)
 807262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 807262e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8072632:	607b      	str	r3, [r7, #4]
 8072634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8072636:	2300      	movs	r3, #0
 8072638:	603b      	str	r3, [r7, #0]
 807263a:	4b09      	ldr	r3, [pc, #36]	; (8072660 <HAL_MspInit+0x4c>)
 807263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807263e:	4a08      	ldr	r2, [pc, #32]	; (8072660 <HAL_MspInit+0x4c>)
 8072640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8072644:	6413      	str	r3, [r2, #64]	; 0x40
 8072646:	4b06      	ldr	r3, [pc, #24]	; (8072660 <HAL_MspInit+0x4c>)
 8072648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 807264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 807264e:	603b      	str	r3, [r7, #0]
 8072650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8072652:	bf00      	nop
 8072654:	370c      	adds	r7, #12
 8072656:	46bd      	mov	sp, r7
 8072658:	f85d 7b04 	ldr.w	r7, [sp], #4
 807265c:	4770      	bx	lr
 807265e:	bf00      	nop
 8072660:	40023800 	.word	0x40023800

08072664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8072664:	b480      	push	{r7}
 8072666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8072668:	e7fe      	b.n	8072668 <NMI_Handler+0x4>

0807266a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 807266a:	b480      	push	{r7}
 807266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 807266e:	e7fe      	b.n	807266e <HardFault_Handler+0x4>

08072670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8072670:	b480      	push	{r7}
 8072672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8072674:	e7fe      	b.n	8072674 <MemManage_Handler+0x4>

08072676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8072676:	b480      	push	{r7}
 8072678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 807267a:	e7fe      	b.n	807267a <BusFault_Handler+0x4>

0807267c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 807267c:	b480      	push	{r7}
 807267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8072680:	e7fe      	b.n	8072680 <UsageFault_Handler+0x4>

08072682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8072682:	b480      	push	{r7}
 8072684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8072686:	bf00      	nop
 8072688:	46bd      	mov	sp, r7
 807268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807268e:	4770      	bx	lr

08072690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8072690:	b480      	push	{r7}
 8072692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8072694:	bf00      	nop
 8072696:	46bd      	mov	sp, r7
 8072698:	f85d 7b04 	ldr.w	r7, [sp], #4
 807269c:	4770      	bx	lr

0807269e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 807269e:	b480      	push	{r7}
 80726a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80726a2:	bf00      	nop
 80726a4:	46bd      	mov	sp, r7
 80726a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80726aa:	4770      	bx	lr

080726ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80726ac:	b580      	push	{r7, lr}
 80726ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80726b0:	f000 f89a 	bl	80727e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80726b4:	bf00      	nop
 80726b6:	bd80      	pop	{r7, pc}

080726b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80726b8:	b580      	push	{r7, lr}
 80726ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80726bc:	4802      	ldr	r0, [pc, #8]	; (80726c8 <OTG_FS_IRQHandler+0x10>)
 80726be:	f000 fcf6 	bl	80730ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80726c2:	bf00      	nop
 80726c4:	bd80      	pop	{r7, pc}
 80726c6:	bf00      	nop
 80726c8:	20000aec 	.word	0x20000aec

080726cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80726cc:	b480      	push	{r7}
 80726ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80726d0:	4b06      	ldr	r3, [pc, #24]	; (80726ec <SystemInit+0x20>)
 80726d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80726d6:	4a05      	ldr	r2, [pc, #20]	; (80726ec <SystemInit+0x20>)
 80726d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80726dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80726e0:	bf00      	nop
 80726e2:	46bd      	mov	sp, r7
 80726e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80726e8:	4770      	bx	lr
 80726ea:	bf00      	nop
 80726ec:	e000ed00 	.word	0xe000ed00

080726f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80726f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8072728 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80726f4:	480d      	ldr	r0, [pc, #52]	; (807272c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80726f6:	490e      	ldr	r1, [pc, #56]	; (8072730 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80726f8:	4a0e      	ldr	r2, [pc, #56]	; (8072734 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80726fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80726fc:	e002      	b.n	8072704 <LoopCopyDataInit>

080726fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80726fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8072700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8072702:	3304      	adds	r3, #4

08072704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8072704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8072706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8072708:	d3f9      	bcc.n	80726fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 807270a:	4a0b      	ldr	r2, [pc, #44]	; (8072738 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 807270c:	4c0b      	ldr	r4, [pc, #44]	; (807273c <LoopFillZerobss+0x26>)
  movs r3, #0
 807270e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8072710:	e001      	b.n	8072716 <LoopFillZerobss>

08072712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8072712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8072714:	3204      	adds	r2, #4

08072716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8072716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8072718:	d3fb      	bcc.n	8072712 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 807271a:	f7ff ffd7 	bl	80726cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 807271e:	f005 ff65 	bl	80785ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8072722:	f7ff fed5 	bl	80724d0 <main>
  bx  lr    
 8072726:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8072728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 807272c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8072730:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8072734:	08078724 	.word	0x08078724
  ldr r2, =_sbss
 8072738:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 807273c:	20000ef4 	.word	0x20000ef4

08072740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8072740:	e7fe      	b.n	8072740 <ADC_IRQHandler>
	...

08072744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8072744:	b580      	push	{r7, lr}
 8072746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8072748:	4b0e      	ldr	r3, [pc, #56]	; (8072784 <HAL_Init+0x40>)
 807274a:	681b      	ldr	r3, [r3, #0]
 807274c:	4a0d      	ldr	r2, [pc, #52]	; (8072784 <HAL_Init+0x40>)
 807274e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8072752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8072754:	4b0b      	ldr	r3, [pc, #44]	; (8072784 <HAL_Init+0x40>)
 8072756:	681b      	ldr	r3, [r3, #0]
 8072758:	4a0a      	ldr	r2, [pc, #40]	; (8072784 <HAL_Init+0x40>)
 807275a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 807275e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8072760:	4b08      	ldr	r3, [pc, #32]	; (8072784 <HAL_Init+0x40>)
 8072762:	681b      	ldr	r3, [r3, #0]
 8072764:	4a07      	ldr	r2, [pc, #28]	; (8072784 <HAL_Init+0x40>)
 8072766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 807276a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 807276c:	2003      	movs	r0, #3
 807276e:	f000 f94f 	bl	8072a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8072772:	2000      	movs	r0, #0
 8072774:	f000 f808 	bl	8072788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8072778:	f7ff ff4c 	bl	8072614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 807277c:	2300      	movs	r3, #0
}
 807277e:	4618      	mov	r0, r3
 8072780:	bd80      	pop	{r7, pc}
 8072782:	bf00      	nop
 8072784:	40023c00 	.word	0x40023c00

08072788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8072788:	b580      	push	{r7, lr}
 807278a:	b082      	sub	sp, #8
 807278c:	af00      	add	r7, sp, #0
 807278e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8072790:	4b12      	ldr	r3, [pc, #72]	; (80727dc <HAL_InitTick+0x54>)
 8072792:	681a      	ldr	r2, [r3, #0]
 8072794:	4b12      	ldr	r3, [pc, #72]	; (80727e0 <HAL_InitTick+0x58>)
 8072796:	781b      	ldrb	r3, [r3, #0]
 8072798:	4619      	mov	r1, r3
 807279a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 807279e:	fbb3 f3f1 	udiv	r3, r3, r1
 80727a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80727a6:	4618      	mov	r0, r3
 80727a8:	f000 f967 	bl	8072a7a <HAL_SYSTICK_Config>
 80727ac:	4603      	mov	r3, r0
 80727ae:	2b00      	cmp	r3, #0
 80727b0:	d001      	beq.n	80727b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80727b2:	2301      	movs	r3, #1
 80727b4:	e00e      	b.n	80727d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80727b6:	687b      	ldr	r3, [r7, #4]
 80727b8:	2b0f      	cmp	r3, #15
 80727ba:	d80a      	bhi.n	80727d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80727bc:	2200      	movs	r2, #0
 80727be:	6879      	ldr	r1, [r7, #4]
 80727c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80727c4:	f000 f92f 	bl	8072a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80727c8:	4a06      	ldr	r2, [pc, #24]	; (80727e4 <HAL_InitTick+0x5c>)
 80727ca:	687b      	ldr	r3, [r7, #4]
 80727cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80727ce:	2300      	movs	r3, #0
 80727d0:	e000      	b.n	80727d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80727d2:	2301      	movs	r3, #1
}
 80727d4:	4618      	mov	r0, r3
 80727d6:	3708      	adds	r7, #8
 80727d8:	46bd      	mov	sp, r7
 80727da:	bd80      	pop	{r7, pc}
 80727dc:	20000000 	.word	0x20000000
 80727e0:	20000008 	.word	0x20000008
 80727e4:	20000004 	.word	0x20000004

080727e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80727e8:	b480      	push	{r7}
 80727ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80727ec:	4b06      	ldr	r3, [pc, #24]	; (8072808 <HAL_IncTick+0x20>)
 80727ee:	781b      	ldrb	r3, [r3, #0]
 80727f0:	461a      	mov	r2, r3
 80727f2:	4b06      	ldr	r3, [pc, #24]	; (807280c <HAL_IncTick+0x24>)
 80727f4:	681b      	ldr	r3, [r3, #0]
 80727f6:	4413      	add	r3, r2
 80727f8:	4a04      	ldr	r2, [pc, #16]	; (807280c <HAL_IncTick+0x24>)
 80727fa:	6013      	str	r3, [r2, #0]
}
 80727fc:	bf00      	nop
 80727fe:	46bd      	mov	sp, r7
 8072800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072804:	4770      	bx	lr
 8072806:	bf00      	nop
 8072808:	20000008 	.word	0x20000008
 807280c:	20000618 	.word	0x20000618

08072810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8072810:	b480      	push	{r7}
 8072812:	af00      	add	r7, sp, #0
  return uwTick;
 8072814:	4b03      	ldr	r3, [pc, #12]	; (8072824 <HAL_GetTick+0x14>)
 8072816:	681b      	ldr	r3, [r3, #0]
}
 8072818:	4618      	mov	r0, r3
 807281a:	46bd      	mov	sp, r7
 807281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072820:	4770      	bx	lr
 8072822:	bf00      	nop
 8072824:	20000618 	.word	0x20000618

08072828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8072828:	b580      	push	{r7, lr}
 807282a:	b084      	sub	sp, #16
 807282c:	af00      	add	r7, sp, #0
 807282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8072830:	f7ff ffee 	bl	8072810 <HAL_GetTick>
 8072834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8072836:	687b      	ldr	r3, [r7, #4]
 8072838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 807283a:	68fb      	ldr	r3, [r7, #12]
 807283c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8072840:	d005      	beq.n	807284e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8072842:	4b0a      	ldr	r3, [pc, #40]	; (807286c <HAL_Delay+0x44>)
 8072844:	781b      	ldrb	r3, [r3, #0]
 8072846:	461a      	mov	r2, r3
 8072848:	68fb      	ldr	r3, [r7, #12]
 807284a:	4413      	add	r3, r2
 807284c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 807284e:	bf00      	nop
 8072850:	f7ff ffde 	bl	8072810 <HAL_GetTick>
 8072854:	4602      	mov	r2, r0
 8072856:	68bb      	ldr	r3, [r7, #8]
 8072858:	1ad3      	subs	r3, r2, r3
 807285a:	68fa      	ldr	r2, [r7, #12]
 807285c:	429a      	cmp	r2, r3
 807285e:	d8f7      	bhi.n	8072850 <HAL_Delay+0x28>
  {
  }
}
 8072860:	bf00      	nop
 8072862:	bf00      	nop
 8072864:	3710      	adds	r7, #16
 8072866:	46bd      	mov	sp, r7
 8072868:	bd80      	pop	{r7, pc}
 807286a:	bf00      	nop
 807286c:	20000008 	.word	0x20000008

08072870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8072870:	b480      	push	{r7}
 8072872:	b085      	sub	sp, #20
 8072874:	af00      	add	r7, sp, #0
 8072876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8072878:	687b      	ldr	r3, [r7, #4]
 807287a:	f003 0307 	and.w	r3, r3, #7
 807287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8072880:	4b0c      	ldr	r3, [pc, #48]	; (80728b4 <__NVIC_SetPriorityGrouping+0x44>)
 8072882:	68db      	ldr	r3, [r3, #12]
 8072884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8072886:	68ba      	ldr	r2, [r7, #8]
 8072888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 807288c:	4013      	ands	r3, r2
 807288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8072890:	68fb      	ldr	r3, [r7, #12]
 8072892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8072894:	68bb      	ldr	r3, [r7, #8]
 8072896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8072898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 807289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80728a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80728a2:	4a04      	ldr	r2, [pc, #16]	; (80728b4 <__NVIC_SetPriorityGrouping+0x44>)
 80728a4:	68bb      	ldr	r3, [r7, #8]
 80728a6:	60d3      	str	r3, [r2, #12]
}
 80728a8:	bf00      	nop
 80728aa:	3714      	adds	r7, #20
 80728ac:	46bd      	mov	sp, r7
 80728ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80728b2:	4770      	bx	lr
 80728b4:	e000ed00 	.word	0xe000ed00

080728b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80728b8:	b480      	push	{r7}
 80728ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80728bc:	4b04      	ldr	r3, [pc, #16]	; (80728d0 <__NVIC_GetPriorityGrouping+0x18>)
 80728be:	68db      	ldr	r3, [r3, #12]
 80728c0:	0a1b      	lsrs	r3, r3, #8
 80728c2:	f003 0307 	and.w	r3, r3, #7
}
 80728c6:	4618      	mov	r0, r3
 80728c8:	46bd      	mov	sp, r7
 80728ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80728ce:	4770      	bx	lr
 80728d0:	e000ed00 	.word	0xe000ed00

080728d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80728d4:	b480      	push	{r7}
 80728d6:	b083      	sub	sp, #12
 80728d8:	af00      	add	r7, sp, #0
 80728da:	4603      	mov	r3, r0
 80728dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80728de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80728e2:	2b00      	cmp	r3, #0
 80728e4:	db0b      	blt.n	80728fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80728e6:	79fb      	ldrb	r3, [r7, #7]
 80728e8:	f003 021f 	and.w	r2, r3, #31
 80728ec:	4907      	ldr	r1, [pc, #28]	; (807290c <__NVIC_EnableIRQ+0x38>)
 80728ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80728f2:	095b      	lsrs	r3, r3, #5
 80728f4:	2001      	movs	r0, #1
 80728f6:	fa00 f202 	lsl.w	r2, r0, r2
 80728fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80728fe:	bf00      	nop
 8072900:	370c      	adds	r7, #12
 8072902:	46bd      	mov	sp, r7
 8072904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072908:	4770      	bx	lr
 807290a:	bf00      	nop
 807290c:	e000e100 	.word	0xe000e100

08072910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8072910:	b480      	push	{r7}
 8072912:	b083      	sub	sp, #12
 8072914:	af00      	add	r7, sp, #0
 8072916:	4603      	mov	r3, r0
 8072918:	6039      	str	r1, [r7, #0]
 807291a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 807291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8072920:	2b00      	cmp	r3, #0
 8072922:	db0a      	blt.n	807293a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8072924:	683b      	ldr	r3, [r7, #0]
 8072926:	b2da      	uxtb	r2, r3
 8072928:	490c      	ldr	r1, [pc, #48]	; (807295c <__NVIC_SetPriority+0x4c>)
 807292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 807292e:	0112      	lsls	r2, r2, #4
 8072930:	b2d2      	uxtb	r2, r2
 8072932:	440b      	add	r3, r1
 8072934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8072938:	e00a      	b.n	8072950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 807293a:	683b      	ldr	r3, [r7, #0]
 807293c:	b2da      	uxtb	r2, r3
 807293e:	4908      	ldr	r1, [pc, #32]	; (8072960 <__NVIC_SetPriority+0x50>)
 8072940:	79fb      	ldrb	r3, [r7, #7]
 8072942:	f003 030f 	and.w	r3, r3, #15
 8072946:	3b04      	subs	r3, #4
 8072948:	0112      	lsls	r2, r2, #4
 807294a:	b2d2      	uxtb	r2, r2
 807294c:	440b      	add	r3, r1
 807294e:	761a      	strb	r2, [r3, #24]
}
 8072950:	bf00      	nop
 8072952:	370c      	adds	r7, #12
 8072954:	46bd      	mov	sp, r7
 8072956:	f85d 7b04 	ldr.w	r7, [sp], #4
 807295a:	4770      	bx	lr
 807295c:	e000e100 	.word	0xe000e100
 8072960:	e000ed00 	.word	0xe000ed00

08072964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8072964:	b480      	push	{r7}
 8072966:	b089      	sub	sp, #36	; 0x24
 8072968:	af00      	add	r7, sp, #0
 807296a:	60f8      	str	r0, [r7, #12]
 807296c:	60b9      	str	r1, [r7, #8]
 807296e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8072970:	68fb      	ldr	r3, [r7, #12]
 8072972:	f003 0307 	and.w	r3, r3, #7
 8072976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8072978:	69fb      	ldr	r3, [r7, #28]
 807297a:	f1c3 0307 	rsb	r3, r3, #7
 807297e:	2b04      	cmp	r3, #4
 8072980:	bf28      	it	cs
 8072982:	2304      	movcs	r3, #4
 8072984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8072986:	69fb      	ldr	r3, [r7, #28]
 8072988:	3304      	adds	r3, #4
 807298a:	2b06      	cmp	r3, #6
 807298c:	d902      	bls.n	8072994 <NVIC_EncodePriority+0x30>
 807298e:	69fb      	ldr	r3, [r7, #28]
 8072990:	3b03      	subs	r3, #3
 8072992:	e000      	b.n	8072996 <NVIC_EncodePriority+0x32>
 8072994:	2300      	movs	r3, #0
 8072996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8072998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 807299c:	69bb      	ldr	r3, [r7, #24]
 807299e:	fa02 f303 	lsl.w	r3, r2, r3
 80729a2:	43da      	mvns	r2, r3
 80729a4:	68bb      	ldr	r3, [r7, #8]
 80729a6:	401a      	ands	r2, r3
 80729a8:	697b      	ldr	r3, [r7, #20]
 80729aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80729ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80729b0:	697b      	ldr	r3, [r7, #20]
 80729b2:	fa01 f303 	lsl.w	r3, r1, r3
 80729b6:	43d9      	mvns	r1, r3
 80729b8:	687b      	ldr	r3, [r7, #4]
 80729ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80729bc:	4313      	orrs	r3, r2
         );
}
 80729be:	4618      	mov	r0, r3
 80729c0:	3724      	adds	r7, #36	; 0x24
 80729c2:	46bd      	mov	sp, r7
 80729c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80729c8:	4770      	bx	lr
	...

080729cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80729cc:	b580      	push	{r7, lr}
 80729ce:	b082      	sub	sp, #8
 80729d0:	af00      	add	r7, sp, #0
 80729d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80729d4:	687b      	ldr	r3, [r7, #4]
 80729d6:	3b01      	subs	r3, #1
 80729d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80729dc:	d301      	bcc.n	80729e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80729de:	2301      	movs	r3, #1
 80729e0:	e00f      	b.n	8072a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80729e2:	4a0a      	ldr	r2, [pc, #40]	; (8072a0c <SysTick_Config+0x40>)
 80729e4:	687b      	ldr	r3, [r7, #4]
 80729e6:	3b01      	subs	r3, #1
 80729e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80729ea:	210f      	movs	r1, #15
 80729ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80729f0:	f7ff ff8e 	bl	8072910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80729f4:	4b05      	ldr	r3, [pc, #20]	; (8072a0c <SysTick_Config+0x40>)
 80729f6:	2200      	movs	r2, #0
 80729f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80729fa:	4b04      	ldr	r3, [pc, #16]	; (8072a0c <SysTick_Config+0x40>)
 80729fc:	2207      	movs	r2, #7
 80729fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8072a00:	2300      	movs	r3, #0
}
 8072a02:	4618      	mov	r0, r3
 8072a04:	3708      	adds	r7, #8
 8072a06:	46bd      	mov	sp, r7
 8072a08:	bd80      	pop	{r7, pc}
 8072a0a:	bf00      	nop
 8072a0c:	e000e010 	.word	0xe000e010

08072a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8072a10:	b580      	push	{r7, lr}
 8072a12:	b082      	sub	sp, #8
 8072a14:	af00      	add	r7, sp, #0
 8072a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8072a18:	6878      	ldr	r0, [r7, #4]
 8072a1a:	f7ff ff29 	bl	8072870 <__NVIC_SetPriorityGrouping>
}
 8072a1e:	bf00      	nop
 8072a20:	3708      	adds	r7, #8
 8072a22:	46bd      	mov	sp, r7
 8072a24:	bd80      	pop	{r7, pc}

08072a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8072a26:	b580      	push	{r7, lr}
 8072a28:	b086      	sub	sp, #24
 8072a2a:	af00      	add	r7, sp, #0
 8072a2c:	4603      	mov	r3, r0
 8072a2e:	60b9      	str	r1, [r7, #8]
 8072a30:	607a      	str	r2, [r7, #4]
 8072a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8072a34:	2300      	movs	r3, #0
 8072a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8072a38:	f7ff ff3e 	bl	80728b8 <__NVIC_GetPriorityGrouping>
 8072a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8072a3e:	687a      	ldr	r2, [r7, #4]
 8072a40:	68b9      	ldr	r1, [r7, #8]
 8072a42:	6978      	ldr	r0, [r7, #20]
 8072a44:	f7ff ff8e 	bl	8072964 <NVIC_EncodePriority>
 8072a48:	4602      	mov	r2, r0
 8072a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8072a4e:	4611      	mov	r1, r2
 8072a50:	4618      	mov	r0, r3
 8072a52:	f7ff ff5d 	bl	8072910 <__NVIC_SetPriority>
}
 8072a56:	bf00      	nop
 8072a58:	3718      	adds	r7, #24
 8072a5a:	46bd      	mov	sp, r7
 8072a5c:	bd80      	pop	{r7, pc}

08072a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8072a5e:	b580      	push	{r7, lr}
 8072a60:	b082      	sub	sp, #8
 8072a62:	af00      	add	r7, sp, #0
 8072a64:	4603      	mov	r3, r0
 8072a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8072a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8072a6c:	4618      	mov	r0, r3
 8072a6e:	f7ff ff31 	bl	80728d4 <__NVIC_EnableIRQ>
}
 8072a72:	bf00      	nop
 8072a74:	3708      	adds	r7, #8
 8072a76:	46bd      	mov	sp, r7
 8072a78:	bd80      	pop	{r7, pc}

08072a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8072a7a:	b580      	push	{r7, lr}
 8072a7c:	b082      	sub	sp, #8
 8072a7e:	af00      	add	r7, sp, #0
 8072a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8072a82:	6878      	ldr	r0, [r7, #4]
 8072a84:	f7ff ffa2 	bl	80729cc <SysTick_Config>
 8072a88:	4603      	mov	r3, r0
}
 8072a8a:	4618      	mov	r0, r3
 8072a8c:	3708      	adds	r7, #8
 8072a8e:	46bd      	mov	sp, r7
 8072a90:	bd80      	pop	{r7, pc}
	...

08072a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8072a94:	b480      	push	{r7}
 8072a96:	b089      	sub	sp, #36	; 0x24
 8072a98:	af00      	add	r7, sp, #0
 8072a9a:	6078      	str	r0, [r7, #4]
 8072a9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8072a9e:	2300      	movs	r3, #0
 8072aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8072aa2:	2300      	movs	r3, #0
 8072aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8072aa6:	2300      	movs	r3, #0
 8072aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8072aaa:	2300      	movs	r3, #0
 8072aac:	61fb      	str	r3, [r7, #28]
 8072aae:	e159      	b.n	8072d64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8072ab0:	2201      	movs	r2, #1
 8072ab2:	69fb      	ldr	r3, [r7, #28]
 8072ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8072ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8072aba:	683b      	ldr	r3, [r7, #0]
 8072abc:	681b      	ldr	r3, [r3, #0]
 8072abe:	697a      	ldr	r2, [r7, #20]
 8072ac0:	4013      	ands	r3, r2
 8072ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8072ac4:	693a      	ldr	r2, [r7, #16]
 8072ac6:	697b      	ldr	r3, [r7, #20]
 8072ac8:	429a      	cmp	r2, r3
 8072aca:	f040 8148 	bne.w	8072d5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8072ace:	683b      	ldr	r3, [r7, #0]
 8072ad0:	685b      	ldr	r3, [r3, #4]
 8072ad2:	f003 0303 	and.w	r3, r3, #3
 8072ad6:	2b01      	cmp	r3, #1
 8072ad8:	d005      	beq.n	8072ae6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8072ada:	683b      	ldr	r3, [r7, #0]
 8072adc:	685b      	ldr	r3, [r3, #4]
 8072ade:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8072ae2:	2b02      	cmp	r3, #2
 8072ae4:	d130      	bne.n	8072b48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8072ae6:	687b      	ldr	r3, [r7, #4]
 8072ae8:	689b      	ldr	r3, [r3, #8]
 8072aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8072aec:	69fb      	ldr	r3, [r7, #28]
 8072aee:	005b      	lsls	r3, r3, #1
 8072af0:	2203      	movs	r2, #3
 8072af2:	fa02 f303 	lsl.w	r3, r2, r3
 8072af6:	43db      	mvns	r3, r3
 8072af8:	69ba      	ldr	r2, [r7, #24]
 8072afa:	4013      	ands	r3, r2
 8072afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8072afe:	683b      	ldr	r3, [r7, #0]
 8072b00:	68da      	ldr	r2, [r3, #12]
 8072b02:	69fb      	ldr	r3, [r7, #28]
 8072b04:	005b      	lsls	r3, r3, #1
 8072b06:	fa02 f303 	lsl.w	r3, r2, r3
 8072b0a:	69ba      	ldr	r2, [r7, #24]
 8072b0c:	4313      	orrs	r3, r2
 8072b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8072b10:	687b      	ldr	r3, [r7, #4]
 8072b12:	69ba      	ldr	r2, [r7, #24]
 8072b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8072b16:	687b      	ldr	r3, [r7, #4]
 8072b18:	685b      	ldr	r3, [r3, #4]
 8072b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8072b1c:	2201      	movs	r2, #1
 8072b1e:	69fb      	ldr	r3, [r7, #28]
 8072b20:	fa02 f303 	lsl.w	r3, r2, r3
 8072b24:	43db      	mvns	r3, r3
 8072b26:	69ba      	ldr	r2, [r7, #24]
 8072b28:	4013      	ands	r3, r2
 8072b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8072b2c:	683b      	ldr	r3, [r7, #0]
 8072b2e:	685b      	ldr	r3, [r3, #4]
 8072b30:	091b      	lsrs	r3, r3, #4
 8072b32:	f003 0201 	and.w	r2, r3, #1
 8072b36:	69fb      	ldr	r3, [r7, #28]
 8072b38:	fa02 f303 	lsl.w	r3, r2, r3
 8072b3c:	69ba      	ldr	r2, [r7, #24]
 8072b3e:	4313      	orrs	r3, r2
 8072b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8072b42:	687b      	ldr	r3, [r7, #4]
 8072b44:	69ba      	ldr	r2, [r7, #24]
 8072b46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8072b48:	683b      	ldr	r3, [r7, #0]
 8072b4a:	685b      	ldr	r3, [r3, #4]
 8072b4c:	f003 0303 	and.w	r3, r3, #3
 8072b50:	2b03      	cmp	r3, #3
 8072b52:	d017      	beq.n	8072b84 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8072b54:	687b      	ldr	r3, [r7, #4]
 8072b56:	68db      	ldr	r3, [r3, #12]
 8072b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8072b5a:	69fb      	ldr	r3, [r7, #28]
 8072b5c:	005b      	lsls	r3, r3, #1
 8072b5e:	2203      	movs	r2, #3
 8072b60:	fa02 f303 	lsl.w	r3, r2, r3
 8072b64:	43db      	mvns	r3, r3
 8072b66:	69ba      	ldr	r2, [r7, #24]
 8072b68:	4013      	ands	r3, r2
 8072b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8072b6c:	683b      	ldr	r3, [r7, #0]
 8072b6e:	689a      	ldr	r2, [r3, #8]
 8072b70:	69fb      	ldr	r3, [r7, #28]
 8072b72:	005b      	lsls	r3, r3, #1
 8072b74:	fa02 f303 	lsl.w	r3, r2, r3
 8072b78:	69ba      	ldr	r2, [r7, #24]
 8072b7a:	4313      	orrs	r3, r2
 8072b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8072b7e:	687b      	ldr	r3, [r7, #4]
 8072b80:	69ba      	ldr	r2, [r7, #24]
 8072b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8072b84:	683b      	ldr	r3, [r7, #0]
 8072b86:	685b      	ldr	r3, [r3, #4]
 8072b88:	f003 0303 	and.w	r3, r3, #3
 8072b8c:	2b02      	cmp	r3, #2
 8072b8e:	d123      	bne.n	8072bd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8072b90:	69fb      	ldr	r3, [r7, #28]
 8072b92:	08da      	lsrs	r2, r3, #3
 8072b94:	687b      	ldr	r3, [r7, #4]
 8072b96:	3208      	adds	r2, #8
 8072b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8072b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8072b9e:	69fb      	ldr	r3, [r7, #28]
 8072ba0:	f003 0307 	and.w	r3, r3, #7
 8072ba4:	009b      	lsls	r3, r3, #2
 8072ba6:	220f      	movs	r2, #15
 8072ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8072bac:	43db      	mvns	r3, r3
 8072bae:	69ba      	ldr	r2, [r7, #24]
 8072bb0:	4013      	ands	r3, r2
 8072bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8072bb4:	683b      	ldr	r3, [r7, #0]
 8072bb6:	691a      	ldr	r2, [r3, #16]
 8072bb8:	69fb      	ldr	r3, [r7, #28]
 8072bba:	f003 0307 	and.w	r3, r3, #7
 8072bbe:	009b      	lsls	r3, r3, #2
 8072bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8072bc4:	69ba      	ldr	r2, [r7, #24]
 8072bc6:	4313      	orrs	r3, r2
 8072bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8072bca:	69fb      	ldr	r3, [r7, #28]
 8072bcc:	08da      	lsrs	r2, r3, #3
 8072bce:	687b      	ldr	r3, [r7, #4]
 8072bd0:	3208      	adds	r2, #8
 8072bd2:	69b9      	ldr	r1, [r7, #24]
 8072bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8072bd8:	687b      	ldr	r3, [r7, #4]
 8072bda:	681b      	ldr	r3, [r3, #0]
 8072bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8072bde:	69fb      	ldr	r3, [r7, #28]
 8072be0:	005b      	lsls	r3, r3, #1
 8072be2:	2203      	movs	r2, #3
 8072be4:	fa02 f303 	lsl.w	r3, r2, r3
 8072be8:	43db      	mvns	r3, r3
 8072bea:	69ba      	ldr	r2, [r7, #24]
 8072bec:	4013      	ands	r3, r2
 8072bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8072bf0:	683b      	ldr	r3, [r7, #0]
 8072bf2:	685b      	ldr	r3, [r3, #4]
 8072bf4:	f003 0203 	and.w	r2, r3, #3
 8072bf8:	69fb      	ldr	r3, [r7, #28]
 8072bfa:	005b      	lsls	r3, r3, #1
 8072bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8072c00:	69ba      	ldr	r2, [r7, #24]
 8072c02:	4313      	orrs	r3, r2
 8072c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8072c06:	687b      	ldr	r3, [r7, #4]
 8072c08:	69ba      	ldr	r2, [r7, #24]
 8072c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8072c0c:	683b      	ldr	r3, [r7, #0]
 8072c0e:	685b      	ldr	r3, [r3, #4]
 8072c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8072c14:	2b00      	cmp	r3, #0
 8072c16:	f000 80a2 	beq.w	8072d5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8072c1a:	2300      	movs	r3, #0
 8072c1c:	60fb      	str	r3, [r7, #12]
 8072c1e:	4b57      	ldr	r3, [pc, #348]	; (8072d7c <HAL_GPIO_Init+0x2e8>)
 8072c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8072c22:	4a56      	ldr	r2, [pc, #344]	; (8072d7c <HAL_GPIO_Init+0x2e8>)
 8072c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8072c28:	6453      	str	r3, [r2, #68]	; 0x44
 8072c2a:	4b54      	ldr	r3, [pc, #336]	; (8072d7c <HAL_GPIO_Init+0x2e8>)
 8072c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8072c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8072c32:	60fb      	str	r3, [r7, #12]
 8072c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8072c36:	4a52      	ldr	r2, [pc, #328]	; (8072d80 <HAL_GPIO_Init+0x2ec>)
 8072c38:	69fb      	ldr	r3, [r7, #28]
 8072c3a:	089b      	lsrs	r3, r3, #2
 8072c3c:	3302      	adds	r3, #2
 8072c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8072c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8072c44:	69fb      	ldr	r3, [r7, #28]
 8072c46:	f003 0303 	and.w	r3, r3, #3
 8072c4a:	009b      	lsls	r3, r3, #2
 8072c4c:	220f      	movs	r2, #15
 8072c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8072c52:	43db      	mvns	r3, r3
 8072c54:	69ba      	ldr	r2, [r7, #24]
 8072c56:	4013      	ands	r3, r2
 8072c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8072c5a:	687b      	ldr	r3, [r7, #4]
 8072c5c:	4a49      	ldr	r2, [pc, #292]	; (8072d84 <HAL_GPIO_Init+0x2f0>)
 8072c5e:	4293      	cmp	r3, r2
 8072c60:	d019      	beq.n	8072c96 <HAL_GPIO_Init+0x202>
 8072c62:	687b      	ldr	r3, [r7, #4]
 8072c64:	4a48      	ldr	r2, [pc, #288]	; (8072d88 <HAL_GPIO_Init+0x2f4>)
 8072c66:	4293      	cmp	r3, r2
 8072c68:	d013      	beq.n	8072c92 <HAL_GPIO_Init+0x1fe>
 8072c6a:	687b      	ldr	r3, [r7, #4]
 8072c6c:	4a47      	ldr	r2, [pc, #284]	; (8072d8c <HAL_GPIO_Init+0x2f8>)
 8072c6e:	4293      	cmp	r3, r2
 8072c70:	d00d      	beq.n	8072c8e <HAL_GPIO_Init+0x1fa>
 8072c72:	687b      	ldr	r3, [r7, #4]
 8072c74:	4a46      	ldr	r2, [pc, #280]	; (8072d90 <HAL_GPIO_Init+0x2fc>)
 8072c76:	4293      	cmp	r3, r2
 8072c78:	d007      	beq.n	8072c8a <HAL_GPIO_Init+0x1f6>
 8072c7a:	687b      	ldr	r3, [r7, #4]
 8072c7c:	4a45      	ldr	r2, [pc, #276]	; (8072d94 <HAL_GPIO_Init+0x300>)
 8072c7e:	4293      	cmp	r3, r2
 8072c80:	d101      	bne.n	8072c86 <HAL_GPIO_Init+0x1f2>
 8072c82:	2304      	movs	r3, #4
 8072c84:	e008      	b.n	8072c98 <HAL_GPIO_Init+0x204>
 8072c86:	2307      	movs	r3, #7
 8072c88:	e006      	b.n	8072c98 <HAL_GPIO_Init+0x204>
 8072c8a:	2303      	movs	r3, #3
 8072c8c:	e004      	b.n	8072c98 <HAL_GPIO_Init+0x204>
 8072c8e:	2302      	movs	r3, #2
 8072c90:	e002      	b.n	8072c98 <HAL_GPIO_Init+0x204>
 8072c92:	2301      	movs	r3, #1
 8072c94:	e000      	b.n	8072c98 <HAL_GPIO_Init+0x204>
 8072c96:	2300      	movs	r3, #0
 8072c98:	69fa      	ldr	r2, [r7, #28]
 8072c9a:	f002 0203 	and.w	r2, r2, #3
 8072c9e:	0092      	lsls	r2, r2, #2
 8072ca0:	4093      	lsls	r3, r2
 8072ca2:	69ba      	ldr	r2, [r7, #24]
 8072ca4:	4313      	orrs	r3, r2
 8072ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8072ca8:	4935      	ldr	r1, [pc, #212]	; (8072d80 <HAL_GPIO_Init+0x2ec>)
 8072caa:	69fb      	ldr	r3, [r7, #28]
 8072cac:	089b      	lsrs	r3, r3, #2
 8072cae:	3302      	adds	r3, #2
 8072cb0:	69ba      	ldr	r2, [r7, #24]
 8072cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8072cb6:	4b38      	ldr	r3, [pc, #224]	; (8072d98 <HAL_GPIO_Init+0x304>)
 8072cb8:	681b      	ldr	r3, [r3, #0]
 8072cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8072cbc:	693b      	ldr	r3, [r7, #16]
 8072cbe:	43db      	mvns	r3, r3
 8072cc0:	69ba      	ldr	r2, [r7, #24]
 8072cc2:	4013      	ands	r3, r2
 8072cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8072cc6:	683b      	ldr	r3, [r7, #0]
 8072cc8:	685b      	ldr	r3, [r3, #4]
 8072cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8072cce:	2b00      	cmp	r3, #0
 8072cd0:	d003      	beq.n	8072cda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8072cd2:	69ba      	ldr	r2, [r7, #24]
 8072cd4:	693b      	ldr	r3, [r7, #16]
 8072cd6:	4313      	orrs	r3, r2
 8072cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8072cda:	4a2f      	ldr	r2, [pc, #188]	; (8072d98 <HAL_GPIO_Init+0x304>)
 8072cdc:	69bb      	ldr	r3, [r7, #24]
 8072cde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8072ce0:	4b2d      	ldr	r3, [pc, #180]	; (8072d98 <HAL_GPIO_Init+0x304>)
 8072ce2:	685b      	ldr	r3, [r3, #4]
 8072ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8072ce6:	693b      	ldr	r3, [r7, #16]
 8072ce8:	43db      	mvns	r3, r3
 8072cea:	69ba      	ldr	r2, [r7, #24]
 8072cec:	4013      	ands	r3, r2
 8072cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8072cf0:	683b      	ldr	r3, [r7, #0]
 8072cf2:	685b      	ldr	r3, [r3, #4]
 8072cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8072cf8:	2b00      	cmp	r3, #0
 8072cfa:	d003      	beq.n	8072d04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8072cfc:	69ba      	ldr	r2, [r7, #24]
 8072cfe:	693b      	ldr	r3, [r7, #16]
 8072d00:	4313      	orrs	r3, r2
 8072d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8072d04:	4a24      	ldr	r2, [pc, #144]	; (8072d98 <HAL_GPIO_Init+0x304>)
 8072d06:	69bb      	ldr	r3, [r7, #24]
 8072d08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8072d0a:	4b23      	ldr	r3, [pc, #140]	; (8072d98 <HAL_GPIO_Init+0x304>)
 8072d0c:	689b      	ldr	r3, [r3, #8]
 8072d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8072d10:	693b      	ldr	r3, [r7, #16]
 8072d12:	43db      	mvns	r3, r3
 8072d14:	69ba      	ldr	r2, [r7, #24]
 8072d16:	4013      	ands	r3, r2
 8072d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8072d1a:	683b      	ldr	r3, [r7, #0]
 8072d1c:	685b      	ldr	r3, [r3, #4]
 8072d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8072d22:	2b00      	cmp	r3, #0
 8072d24:	d003      	beq.n	8072d2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8072d26:	69ba      	ldr	r2, [r7, #24]
 8072d28:	693b      	ldr	r3, [r7, #16]
 8072d2a:	4313      	orrs	r3, r2
 8072d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8072d2e:	4a1a      	ldr	r2, [pc, #104]	; (8072d98 <HAL_GPIO_Init+0x304>)
 8072d30:	69bb      	ldr	r3, [r7, #24]
 8072d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8072d34:	4b18      	ldr	r3, [pc, #96]	; (8072d98 <HAL_GPIO_Init+0x304>)
 8072d36:	68db      	ldr	r3, [r3, #12]
 8072d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8072d3a:	693b      	ldr	r3, [r7, #16]
 8072d3c:	43db      	mvns	r3, r3
 8072d3e:	69ba      	ldr	r2, [r7, #24]
 8072d40:	4013      	ands	r3, r2
 8072d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8072d44:	683b      	ldr	r3, [r7, #0]
 8072d46:	685b      	ldr	r3, [r3, #4]
 8072d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8072d4c:	2b00      	cmp	r3, #0
 8072d4e:	d003      	beq.n	8072d58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8072d50:	69ba      	ldr	r2, [r7, #24]
 8072d52:	693b      	ldr	r3, [r7, #16]
 8072d54:	4313      	orrs	r3, r2
 8072d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8072d58:	4a0f      	ldr	r2, [pc, #60]	; (8072d98 <HAL_GPIO_Init+0x304>)
 8072d5a:	69bb      	ldr	r3, [r7, #24]
 8072d5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8072d5e:	69fb      	ldr	r3, [r7, #28]
 8072d60:	3301      	adds	r3, #1
 8072d62:	61fb      	str	r3, [r7, #28]
 8072d64:	69fb      	ldr	r3, [r7, #28]
 8072d66:	2b0f      	cmp	r3, #15
 8072d68:	f67f aea2 	bls.w	8072ab0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8072d6c:	bf00      	nop
 8072d6e:	bf00      	nop
 8072d70:	3724      	adds	r7, #36	; 0x24
 8072d72:	46bd      	mov	sp, r7
 8072d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8072d78:	4770      	bx	lr
 8072d7a:	bf00      	nop
 8072d7c:	40023800 	.word	0x40023800
 8072d80:	40013800 	.word	0x40013800
 8072d84:	40020000 	.word	0x40020000
 8072d88:	40020400 	.word	0x40020400
 8072d8c:	40020800 	.word	0x40020800
 8072d90:	40020c00 	.word	0x40020c00
 8072d94:	40021000 	.word	0x40021000
 8072d98:	40013c00 	.word	0x40013c00

08072d9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8072d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8072d9e:	b08f      	sub	sp, #60	; 0x3c
 8072da0:	af0a      	add	r7, sp, #40	; 0x28
 8072da2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8072da4:	687b      	ldr	r3, [r7, #4]
 8072da6:	2b00      	cmp	r3, #0
 8072da8:	d101      	bne.n	8072dae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8072daa:	2301      	movs	r3, #1
 8072dac:	e10f      	b.n	8072fce <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8072dae:	687b      	ldr	r3, [r7, #4]
 8072db0:	681b      	ldr	r3, [r3, #0]
 8072db2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8072db4:	687b      	ldr	r3, [r7, #4]
 8072db6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8072dba:	b2db      	uxtb	r3, r3
 8072dbc:	2b00      	cmp	r3, #0
 8072dbe:	d106      	bne.n	8072dce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8072dc0:	687b      	ldr	r3, [r7, #4]
 8072dc2:	2200      	movs	r2, #0
 8072dc4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8072dc8:	6878      	ldr	r0, [r7, #4]
 8072dca:	f005 f91b 	bl	8078004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8072dce:	687b      	ldr	r3, [r7, #4]
 8072dd0:	2203      	movs	r2, #3
 8072dd2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8072dd6:	68bb      	ldr	r3, [r7, #8]
 8072dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8072dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8072dde:	2b00      	cmp	r3, #0
 8072de0:	d102      	bne.n	8072de8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8072de2:	687b      	ldr	r3, [r7, #4]
 8072de4:	2200      	movs	r2, #0
 8072de6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8072de8:	687b      	ldr	r3, [r7, #4]
 8072dea:	681b      	ldr	r3, [r3, #0]
 8072dec:	4618      	mov	r0, r3
 8072dee:	f001 fe64 	bl	8074aba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8072df2:	687b      	ldr	r3, [r7, #4]
 8072df4:	681b      	ldr	r3, [r3, #0]
 8072df6:	603b      	str	r3, [r7, #0]
 8072df8:	687e      	ldr	r6, [r7, #4]
 8072dfa:	466d      	mov	r5, sp
 8072dfc:	f106 0410 	add.w	r4, r6, #16
 8072e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8072e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8072e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8072e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8072e08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8072e0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8072e10:	1d33      	adds	r3, r6, #4
 8072e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8072e14:	6838      	ldr	r0, [r7, #0]
 8072e16:	f001 fd3b 	bl	8074890 <USB_CoreInit>
 8072e1a:	4603      	mov	r3, r0
 8072e1c:	2b00      	cmp	r3, #0
 8072e1e:	d005      	beq.n	8072e2c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8072e20:	687b      	ldr	r3, [r7, #4]
 8072e22:	2202      	movs	r2, #2
 8072e24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8072e28:	2301      	movs	r3, #1
 8072e2a:	e0d0      	b.n	8072fce <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8072e2c:	687b      	ldr	r3, [r7, #4]
 8072e2e:	681b      	ldr	r3, [r3, #0]
 8072e30:	2100      	movs	r1, #0
 8072e32:	4618      	mov	r0, r3
 8072e34:	f001 fe52 	bl	8074adc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8072e38:	2300      	movs	r3, #0
 8072e3a:	73fb      	strb	r3, [r7, #15]
 8072e3c:	e04a      	b.n	8072ed4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8072e3e:	7bfa      	ldrb	r2, [r7, #15]
 8072e40:	6879      	ldr	r1, [r7, #4]
 8072e42:	4613      	mov	r3, r2
 8072e44:	00db      	lsls	r3, r3, #3
 8072e46:	1a9b      	subs	r3, r3, r2
 8072e48:	009b      	lsls	r3, r3, #2
 8072e4a:	440b      	add	r3, r1
 8072e4c:	333d      	adds	r3, #61	; 0x3d
 8072e4e:	2201      	movs	r2, #1
 8072e50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8072e52:	7bfa      	ldrb	r2, [r7, #15]
 8072e54:	6879      	ldr	r1, [r7, #4]
 8072e56:	4613      	mov	r3, r2
 8072e58:	00db      	lsls	r3, r3, #3
 8072e5a:	1a9b      	subs	r3, r3, r2
 8072e5c:	009b      	lsls	r3, r3, #2
 8072e5e:	440b      	add	r3, r1
 8072e60:	333c      	adds	r3, #60	; 0x3c
 8072e62:	7bfa      	ldrb	r2, [r7, #15]
 8072e64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8072e66:	7bfa      	ldrb	r2, [r7, #15]
 8072e68:	7bfb      	ldrb	r3, [r7, #15]
 8072e6a:	b298      	uxth	r0, r3
 8072e6c:	6879      	ldr	r1, [r7, #4]
 8072e6e:	4613      	mov	r3, r2
 8072e70:	00db      	lsls	r3, r3, #3
 8072e72:	1a9b      	subs	r3, r3, r2
 8072e74:	009b      	lsls	r3, r3, #2
 8072e76:	440b      	add	r3, r1
 8072e78:	3342      	adds	r3, #66	; 0x42
 8072e7a:	4602      	mov	r2, r0
 8072e7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8072e7e:	7bfa      	ldrb	r2, [r7, #15]
 8072e80:	6879      	ldr	r1, [r7, #4]
 8072e82:	4613      	mov	r3, r2
 8072e84:	00db      	lsls	r3, r3, #3
 8072e86:	1a9b      	subs	r3, r3, r2
 8072e88:	009b      	lsls	r3, r3, #2
 8072e8a:	440b      	add	r3, r1
 8072e8c:	333f      	adds	r3, #63	; 0x3f
 8072e8e:	2200      	movs	r2, #0
 8072e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8072e92:	7bfa      	ldrb	r2, [r7, #15]
 8072e94:	6879      	ldr	r1, [r7, #4]
 8072e96:	4613      	mov	r3, r2
 8072e98:	00db      	lsls	r3, r3, #3
 8072e9a:	1a9b      	subs	r3, r3, r2
 8072e9c:	009b      	lsls	r3, r3, #2
 8072e9e:	440b      	add	r3, r1
 8072ea0:	3344      	adds	r3, #68	; 0x44
 8072ea2:	2200      	movs	r2, #0
 8072ea4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8072ea6:	7bfa      	ldrb	r2, [r7, #15]
 8072ea8:	6879      	ldr	r1, [r7, #4]
 8072eaa:	4613      	mov	r3, r2
 8072eac:	00db      	lsls	r3, r3, #3
 8072eae:	1a9b      	subs	r3, r3, r2
 8072eb0:	009b      	lsls	r3, r3, #2
 8072eb2:	440b      	add	r3, r1
 8072eb4:	3348      	adds	r3, #72	; 0x48
 8072eb6:	2200      	movs	r2, #0
 8072eb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8072eba:	7bfa      	ldrb	r2, [r7, #15]
 8072ebc:	6879      	ldr	r1, [r7, #4]
 8072ebe:	4613      	mov	r3, r2
 8072ec0:	00db      	lsls	r3, r3, #3
 8072ec2:	1a9b      	subs	r3, r3, r2
 8072ec4:	009b      	lsls	r3, r3, #2
 8072ec6:	440b      	add	r3, r1
 8072ec8:	3350      	adds	r3, #80	; 0x50
 8072eca:	2200      	movs	r2, #0
 8072ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8072ece:	7bfb      	ldrb	r3, [r7, #15]
 8072ed0:	3301      	adds	r3, #1
 8072ed2:	73fb      	strb	r3, [r7, #15]
 8072ed4:	7bfa      	ldrb	r2, [r7, #15]
 8072ed6:	687b      	ldr	r3, [r7, #4]
 8072ed8:	685b      	ldr	r3, [r3, #4]
 8072eda:	429a      	cmp	r2, r3
 8072edc:	d3af      	bcc.n	8072e3e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8072ede:	2300      	movs	r3, #0
 8072ee0:	73fb      	strb	r3, [r7, #15]
 8072ee2:	e044      	b.n	8072f6e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8072ee4:	7bfa      	ldrb	r2, [r7, #15]
 8072ee6:	6879      	ldr	r1, [r7, #4]
 8072ee8:	4613      	mov	r3, r2
 8072eea:	00db      	lsls	r3, r3, #3
 8072eec:	1a9b      	subs	r3, r3, r2
 8072eee:	009b      	lsls	r3, r3, #2
 8072ef0:	440b      	add	r3, r1
 8072ef2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8072ef6:	2200      	movs	r2, #0
 8072ef8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8072efa:	7bfa      	ldrb	r2, [r7, #15]
 8072efc:	6879      	ldr	r1, [r7, #4]
 8072efe:	4613      	mov	r3, r2
 8072f00:	00db      	lsls	r3, r3, #3
 8072f02:	1a9b      	subs	r3, r3, r2
 8072f04:	009b      	lsls	r3, r3, #2
 8072f06:	440b      	add	r3, r1
 8072f08:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8072f0c:	7bfa      	ldrb	r2, [r7, #15]
 8072f0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8072f10:	7bfa      	ldrb	r2, [r7, #15]
 8072f12:	6879      	ldr	r1, [r7, #4]
 8072f14:	4613      	mov	r3, r2
 8072f16:	00db      	lsls	r3, r3, #3
 8072f18:	1a9b      	subs	r3, r3, r2
 8072f1a:	009b      	lsls	r3, r3, #2
 8072f1c:	440b      	add	r3, r1
 8072f1e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8072f22:	2200      	movs	r2, #0
 8072f24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8072f26:	7bfa      	ldrb	r2, [r7, #15]
 8072f28:	6879      	ldr	r1, [r7, #4]
 8072f2a:	4613      	mov	r3, r2
 8072f2c:	00db      	lsls	r3, r3, #3
 8072f2e:	1a9b      	subs	r3, r3, r2
 8072f30:	009b      	lsls	r3, r3, #2
 8072f32:	440b      	add	r3, r1
 8072f34:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8072f38:	2200      	movs	r2, #0
 8072f3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8072f3c:	7bfa      	ldrb	r2, [r7, #15]
 8072f3e:	6879      	ldr	r1, [r7, #4]
 8072f40:	4613      	mov	r3, r2
 8072f42:	00db      	lsls	r3, r3, #3
 8072f44:	1a9b      	subs	r3, r3, r2
 8072f46:	009b      	lsls	r3, r3, #2
 8072f48:	440b      	add	r3, r1
 8072f4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8072f4e:	2200      	movs	r2, #0
 8072f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8072f52:	7bfa      	ldrb	r2, [r7, #15]
 8072f54:	6879      	ldr	r1, [r7, #4]
 8072f56:	4613      	mov	r3, r2
 8072f58:	00db      	lsls	r3, r3, #3
 8072f5a:	1a9b      	subs	r3, r3, r2
 8072f5c:	009b      	lsls	r3, r3, #2
 8072f5e:	440b      	add	r3, r1
 8072f60:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8072f64:	2200      	movs	r2, #0
 8072f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8072f68:	7bfb      	ldrb	r3, [r7, #15]
 8072f6a:	3301      	adds	r3, #1
 8072f6c:	73fb      	strb	r3, [r7, #15]
 8072f6e:	7bfa      	ldrb	r2, [r7, #15]
 8072f70:	687b      	ldr	r3, [r7, #4]
 8072f72:	685b      	ldr	r3, [r3, #4]
 8072f74:	429a      	cmp	r2, r3
 8072f76:	d3b5      	bcc.n	8072ee4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8072f78:	687b      	ldr	r3, [r7, #4]
 8072f7a:	681b      	ldr	r3, [r3, #0]
 8072f7c:	603b      	str	r3, [r7, #0]
 8072f7e:	687e      	ldr	r6, [r7, #4]
 8072f80:	466d      	mov	r5, sp
 8072f82:	f106 0410 	add.w	r4, r6, #16
 8072f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8072f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8072f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8072f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8072f8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8072f92:	e885 0003 	stmia.w	r5, {r0, r1}
 8072f96:	1d33      	adds	r3, r6, #4
 8072f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8072f9a:	6838      	ldr	r0, [r7, #0]
 8072f9c:	f001 fdc8 	bl	8074b30 <USB_DevInit>
 8072fa0:	4603      	mov	r3, r0
 8072fa2:	2b00      	cmp	r3, #0
 8072fa4:	d005      	beq.n	8072fb2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8072fa6:	687b      	ldr	r3, [r7, #4]
 8072fa8:	2202      	movs	r2, #2
 8072faa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8072fae:	2301      	movs	r3, #1
 8072fb0:	e00d      	b.n	8072fce <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8072fb2:	687b      	ldr	r3, [r7, #4]
 8072fb4:	2200      	movs	r2, #0
 8072fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8072fba:	687b      	ldr	r3, [r7, #4]
 8072fbc:	2201      	movs	r2, #1
 8072fbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8072fc2:	687b      	ldr	r3, [r7, #4]
 8072fc4:	681b      	ldr	r3, [r3, #0]
 8072fc6:	4618      	mov	r0, r3
 8072fc8:	f002 fd34 	bl	8075a34 <USB_DevDisconnect>

  return HAL_OK;
 8072fcc:	2300      	movs	r3, #0
}
 8072fce:	4618      	mov	r0, r3
 8072fd0:	3714      	adds	r7, #20
 8072fd2:	46bd      	mov	sp, r7
 8072fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08072fd6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8072fd6:	b580      	push	{r7, lr}
 8072fd8:	b084      	sub	sp, #16
 8072fda:	af00      	add	r7, sp, #0
 8072fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8072fde:	687b      	ldr	r3, [r7, #4]
 8072fe0:	681b      	ldr	r3, [r3, #0]
 8072fe2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8072fe4:	687b      	ldr	r3, [r7, #4]
 8072fe6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8072fea:	2b01      	cmp	r3, #1
 8072fec:	d101      	bne.n	8072ff2 <HAL_PCD_Start+0x1c>
 8072fee:	2302      	movs	r3, #2
 8072ff0:	e020      	b.n	8073034 <HAL_PCD_Start+0x5e>
 8072ff2:	687b      	ldr	r3, [r7, #4]
 8072ff4:	2201      	movs	r2, #1
 8072ff6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8072ffa:	687b      	ldr	r3, [r7, #4]
 8072ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8072ffe:	2b01      	cmp	r3, #1
 8073000:	d109      	bne.n	8073016 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8073002:	687b      	ldr	r3, [r7, #4]
 8073004:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8073006:	2b01      	cmp	r3, #1
 8073008:	d005      	beq.n	8073016 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 807300a:	68fb      	ldr	r3, [r7, #12]
 807300c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807300e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8073012:	68fb      	ldr	r3, [r7, #12]
 8073014:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8073016:	687b      	ldr	r3, [r7, #4]
 8073018:	681b      	ldr	r3, [r3, #0]
 807301a:	4618      	mov	r0, r3
 807301c:	f001 fd3c 	bl	8074a98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8073020:	687b      	ldr	r3, [r7, #4]
 8073022:	681b      	ldr	r3, [r3, #0]
 8073024:	4618      	mov	r0, r3
 8073026:	f002 fce4 	bl	80759f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 807302a:	687b      	ldr	r3, [r7, #4]
 807302c:	2200      	movs	r2, #0
 807302e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8073032:	2300      	movs	r3, #0
}
 8073034:	4618      	mov	r0, r3
 8073036:	3710      	adds	r7, #16
 8073038:	46bd      	mov	sp, r7
 807303a:	bd80      	pop	{r7, pc}

0807303c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 807303c:	b580      	push	{r7, lr}
 807303e:	b084      	sub	sp, #16
 8073040:	af00      	add	r7, sp, #0
 8073042:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8073044:	687b      	ldr	r3, [r7, #4]
 8073046:	681b      	ldr	r3, [r3, #0]
 8073048:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 807304a:	687b      	ldr	r3, [r7, #4]
 807304c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8073050:	2b01      	cmp	r3, #1
 8073052:	d101      	bne.n	8073058 <HAL_PCD_Stop+0x1c>
 8073054:	2302      	movs	r3, #2
 8073056:	e026      	b.n	80730a6 <HAL_PCD_Stop+0x6a>
 8073058:	687b      	ldr	r3, [r7, #4]
 807305a:	2201      	movs	r2, #1
 807305c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8073060:	687b      	ldr	r3, [r7, #4]
 8073062:	681b      	ldr	r3, [r3, #0]
 8073064:	4618      	mov	r0, r3
 8073066:	f001 fd28 	bl	8074aba <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 807306a:	687b      	ldr	r3, [r7, #4]
 807306c:	681b      	ldr	r3, [r3, #0]
 807306e:	4618      	mov	r0, r3
 8073070:	f002 fce0 	bl	8075a34 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8073074:	687b      	ldr	r3, [r7, #4]
 8073076:	681b      	ldr	r3, [r3, #0]
 8073078:	2110      	movs	r1, #16
 807307a:	4618      	mov	r0, r3
 807307c:	f001 febc 	bl	8074df8 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8073080:	687b      	ldr	r3, [r7, #4]
 8073082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8073084:	2b01      	cmp	r3, #1
 8073086:	d109      	bne.n	807309c <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8073088:	687b      	ldr	r3, [r7, #4]
 807308a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 807308c:	2b01      	cmp	r3, #1
 807308e:	d005      	beq.n	807309c <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8073090:	68fb      	ldr	r3, [r7, #12]
 8073092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8073094:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8073098:	68fb      	ldr	r3, [r7, #12]
 807309a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  __HAL_UNLOCK(hpcd);
 807309c:	687b      	ldr	r3, [r7, #4]
 807309e:	2200      	movs	r2, #0
 80730a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80730a4:	2300      	movs	r3, #0
}
 80730a6:	4618      	mov	r0, r3
 80730a8:	3710      	adds	r7, #16
 80730aa:	46bd      	mov	sp, r7
 80730ac:	bd80      	pop	{r7, pc}

080730ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80730ae:	b590      	push	{r4, r7, lr}
 80730b0:	b08d      	sub	sp, #52	; 0x34
 80730b2:	af00      	add	r7, sp, #0
 80730b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80730b6:	687b      	ldr	r3, [r7, #4]
 80730b8:	681b      	ldr	r3, [r3, #0]
 80730ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80730bc:	6a3b      	ldr	r3, [r7, #32]
 80730be:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80730c0:	687b      	ldr	r3, [r7, #4]
 80730c2:	681b      	ldr	r3, [r3, #0]
 80730c4:	4618      	mov	r0, r3
 80730c6:	f002 fd69 	bl	8075b9c <USB_GetMode>
 80730ca:	4603      	mov	r3, r0
 80730cc:	2b00      	cmp	r3, #0
 80730ce:	f040 839d 	bne.w	807380c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80730d2:	687b      	ldr	r3, [r7, #4]
 80730d4:	681b      	ldr	r3, [r3, #0]
 80730d6:	4618      	mov	r0, r3
 80730d8:	f002 fccd 	bl	8075a76 <USB_ReadInterrupts>
 80730dc:	4603      	mov	r3, r0
 80730de:	2b00      	cmp	r3, #0
 80730e0:	f000 8393 	beq.w	807380a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80730e4:	687b      	ldr	r3, [r7, #4]
 80730e6:	681b      	ldr	r3, [r3, #0]
 80730e8:	4618      	mov	r0, r3
 80730ea:	f002 fcc4 	bl	8075a76 <USB_ReadInterrupts>
 80730ee:	4603      	mov	r3, r0
 80730f0:	f003 0302 	and.w	r3, r3, #2
 80730f4:	2b02      	cmp	r3, #2
 80730f6:	d107      	bne.n	8073108 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80730f8:	687b      	ldr	r3, [r7, #4]
 80730fa:	681b      	ldr	r3, [r3, #0]
 80730fc:	695a      	ldr	r2, [r3, #20]
 80730fe:	687b      	ldr	r3, [r7, #4]
 8073100:	681b      	ldr	r3, [r3, #0]
 8073102:	f002 0202 	and.w	r2, r2, #2
 8073106:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8073108:	687b      	ldr	r3, [r7, #4]
 807310a:	681b      	ldr	r3, [r3, #0]
 807310c:	4618      	mov	r0, r3
 807310e:	f002 fcb2 	bl	8075a76 <USB_ReadInterrupts>
 8073112:	4603      	mov	r3, r0
 8073114:	f003 0310 	and.w	r3, r3, #16
 8073118:	2b10      	cmp	r3, #16
 807311a:	d161      	bne.n	80731e0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 807311c:	687b      	ldr	r3, [r7, #4]
 807311e:	681b      	ldr	r3, [r3, #0]
 8073120:	699a      	ldr	r2, [r3, #24]
 8073122:	687b      	ldr	r3, [r7, #4]
 8073124:	681b      	ldr	r3, [r3, #0]
 8073126:	f022 0210 	bic.w	r2, r2, #16
 807312a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 807312c:	6a3b      	ldr	r3, [r7, #32]
 807312e:	6a1b      	ldr	r3, [r3, #32]
 8073130:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8073132:	69bb      	ldr	r3, [r7, #24]
 8073134:	f003 020f 	and.w	r2, r3, #15
 8073138:	4613      	mov	r3, r2
 807313a:	00db      	lsls	r3, r3, #3
 807313c:	1a9b      	subs	r3, r3, r2
 807313e:	009b      	lsls	r3, r3, #2
 8073140:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8073144:	687a      	ldr	r2, [r7, #4]
 8073146:	4413      	add	r3, r2
 8073148:	3304      	adds	r3, #4
 807314a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 807314c:	69bb      	ldr	r3, [r7, #24]
 807314e:	0c5b      	lsrs	r3, r3, #17
 8073150:	f003 030f 	and.w	r3, r3, #15
 8073154:	2b02      	cmp	r3, #2
 8073156:	d124      	bne.n	80731a2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8073158:	69ba      	ldr	r2, [r7, #24]
 807315a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 807315e:	4013      	ands	r3, r2
 8073160:	2b00      	cmp	r3, #0
 8073162:	d035      	beq.n	80731d0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8073164:	697b      	ldr	r3, [r7, #20]
 8073166:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8073168:	69bb      	ldr	r3, [r7, #24]
 807316a:	091b      	lsrs	r3, r3, #4
 807316c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 807316e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8073172:	b29b      	uxth	r3, r3
 8073174:	461a      	mov	r2, r3
 8073176:	6a38      	ldr	r0, [r7, #32]
 8073178:	f002 fb18 	bl	80757ac <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 807317c:	697b      	ldr	r3, [r7, #20]
 807317e:	68da      	ldr	r2, [r3, #12]
 8073180:	69bb      	ldr	r3, [r7, #24]
 8073182:	091b      	lsrs	r3, r3, #4
 8073184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8073188:	441a      	add	r2, r3
 807318a:	697b      	ldr	r3, [r7, #20]
 807318c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 807318e:	697b      	ldr	r3, [r7, #20]
 8073190:	699a      	ldr	r2, [r3, #24]
 8073192:	69bb      	ldr	r3, [r7, #24]
 8073194:	091b      	lsrs	r3, r3, #4
 8073196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 807319a:	441a      	add	r2, r3
 807319c:	697b      	ldr	r3, [r7, #20]
 807319e:	619a      	str	r2, [r3, #24]
 80731a0:	e016      	b.n	80731d0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80731a2:	69bb      	ldr	r3, [r7, #24]
 80731a4:	0c5b      	lsrs	r3, r3, #17
 80731a6:	f003 030f 	and.w	r3, r3, #15
 80731aa:	2b06      	cmp	r3, #6
 80731ac:	d110      	bne.n	80731d0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80731ae:	687b      	ldr	r3, [r7, #4]
 80731b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80731b4:	2208      	movs	r2, #8
 80731b6:	4619      	mov	r1, r3
 80731b8:	6a38      	ldr	r0, [r7, #32]
 80731ba:	f002 faf7 	bl	80757ac <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80731be:	697b      	ldr	r3, [r7, #20]
 80731c0:	699a      	ldr	r2, [r3, #24]
 80731c2:	69bb      	ldr	r3, [r7, #24]
 80731c4:	091b      	lsrs	r3, r3, #4
 80731c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80731ca:	441a      	add	r2, r3
 80731cc:	697b      	ldr	r3, [r7, #20]
 80731ce:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80731d0:	687b      	ldr	r3, [r7, #4]
 80731d2:	681b      	ldr	r3, [r3, #0]
 80731d4:	699a      	ldr	r2, [r3, #24]
 80731d6:	687b      	ldr	r3, [r7, #4]
 80731d8:	681b      	ldr	r3, [r3, #0]
 80731da:	f042 0210 	orr.w	r2, r2, #16
 80731de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80731e0:	687b      	ldr	r3, [r7, #4]
 80731e2:	681b      	ldr	r3, [r3, #0]
 80731e4:	4618      	mov	r0, r3
 80731e6:	f002 fc46 	bl	8075a76 <USB_ReadInterrupts>
 80731ea:	4603      	mov	r3, r0
 80731ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80731f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80731f4:	d16e      	bne.n	80732d4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80731f6:	2300      	movs	r3, #0
 80731f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80731fa:	687b      	ldr	r3, [r7, #4]
 80731fc:	681b      	ldr	r3, [r3, #0]
 80731fe:	4618      	mov	r0, r3
 8073200:	f002 fc4c 	bl	8075a9c <USB_ReadDevAllOutEpInterrupt>
 8073204:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8073206:	e062      	b.n	80732ce <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8073208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 807320a:	f003 0301 	and.w	r3, r3, #1
 807320e:	2b00      	cmp	r3, #0
 8073210:	d057      	beq.n	80732c2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8073212:	687b      	ldr	r3, [r7, #4]
 8073214:	681b      	ldr	r3, [r3, #0]
 8073216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8073218:	b2d2      	uxtb	r2, r2
 807321a:	4611      	mov	r1, r2
 807321c:	4618      	mov	r0, r3
 807321e:	f002 fc71 	bl	8075b04 <USB_ReadDevOutEPInterrupt>
 8073222:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8073224:	693b      	ldr	r3, [r7, #16]
 8073226:	f003 0301 	and.w	r3, r3, #1
 807322a:	2b00      	cmp	r3, #0
 807322c:	d00c      	beq.n	8073248 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 807322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073230:	015a      	lsls	r2, r3, #5
 8073232:	69fb      	ldr	r3, [r7, #28]
 8073234:	4413      	add	r3, r2
 8073236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807323a:	461a      	mov	r2, r3
 807323c:	2301      	movs	r3, #1
 807323e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8073240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8073242:	6878      	ldr	r0, [r7, #4]
 8073244:	f000 fd4e 	bl	8073ce4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8073248:	693b      	ldr	r3, [r7, #16]
 807324a:	f003 0308 	and.w	r3, r3, #8
 807324e:	2b00      	cmp	r3, #0
 8073250:	d00c      	beq.n	807326c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8073252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073254:	015a      	lsls	r2, r3, #5
 8073256:	69fb      	ldr	r3, [r7, #28]
 8073258:	4413      	add	r3, r2
 807325a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807325e:	461a      	mov	r2, r3
 8073260:	2308      	movs	r3, #8
 8073262:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8073264:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8073266:	6878      	ldr	r0, [r7, #4]
 8073268:	f000 fe48 	bl	8073efc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 807326c:	693b      	ldr	r3, [r7, #16]
 807326e:	f003 0310 	and.w	r3, r3, #16
 8073272:	2b00      	cmp	r3, #0
 8073274:	d008      	beq.n	8073288 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8073276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073278:	015a      	lsls	r2, r3, #5
 807327a:	69fb      	ldr	r3, [r7, #28]
 807327c:	4413      	add	r3, r2
 807327e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073282:	461a      	mov	r2, r3
 8073284:	2310      	movs	r3, #16
 8073286:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8073288:	693b      	ldr	r3, [r7, #16]
 807328a:	f003 0320 	and.w	r3, r3, #32
 807328e:	2b00      	cmp	r3, #0
 8073290:	d008      	beq.n	80732a4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8073292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073294:	015a      	lsls	r2, r3, #5
 8073296:	69fb      	ldr	r3, [r7, #28]
 8073298:	4413      	add	r3, r2
 807329a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807329e:	461a      	mov	r2, r3
 80732a0:	2320      	movs	r3, #32
 80732a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80732a4:	693b      	ldr	r3, [r7, #16]
 80732a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80732aa:	2b00      	cmp	r3, #0
 80732ac:	d009      	beq.n	80732c2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80732ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80732b0:	015a      	lsls	r2, r3, #5
 80732b2:	69fb      	ldr	r3, [r7, #28]
 80732b4:	4413      	add	r3, r2
 80732b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80732ba:	461a      	mov	r2, r3
 80732bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80732c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80732c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80732c4:	3301      	adds	r3, #1
 80732c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80732c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80732ca:	085b      	lsrs	r3, r3, #1
 80732cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80732ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80732d0:	2b00      	cmp	r3, #0
 80732d2:	d199      	bne.n	8073208 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80732d4:	687b      	ldr	r3, [r7, #4]
 80732d6:	681b      	ldr	r3, [r3, #0]
 80732d8:	4618      	mov	r0, r3
 80732da:	f002 fbcc 	bl	8075a76 <USB_ReadInterrupts>
 80732de:	4603      	mov	r3, r0
 80732e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80732e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80732e8:	f040 80c0 	bne.w	807346c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80732ec:	687b      	ldr	r3, [r7, #4]
 80732ee:	681b      	ldr	r3, [r3, #0]
 80732f0:	4618      	mov	r0, r3
 80732f2:	f002 fbed 	bl	8075ad0 <USB_ReadDevAllInEpInterrupt>
 80732f6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80732f8:	2300      	movs	r3, #0
 80732fa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80732fc:	e0b2      	b.n	8073464 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80732fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8073300:	f003 0301 	and.w	r3, r3, #1
 8073304:	2b00      	cmp	r3, #0
 8073306:	f000 80a7 	beq.w	8073458 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 807330a:	687b      	ldr	r3, [r7, #4]
 807330c:	681b      	ldr	r3, [r3, #0]
 807330e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8073310:	b2d2      	uxtb	r2, r2
 8073312:	4611      	mov	r1, r2
 8073314:	4618      	mov	r0, r3
 8073316:	f002 fc13 	bl	8075b40 <USB_ReadDevInEPInterrupt>
 807331a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 807331c:	693b      	ldr	r3, [r7, #16]
 807331e:	f003 0301 	and.w	r3, r3, #1
 8073322:	2b00      	cmp	r3, #0
 8073324:	d057      	beq.n	80733d6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8073326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073328:	f003 030f 	and.w	r3, r3, #15
 807332c:	2201      	movs	r2, #1
 807332e:	fa02 f303 	lsl.w	r3, r2, r3
 8073332:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8073334:	69fb      	ldr	r3, [r7, #28]
 8073336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807333a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 807333c:	68fb      	ldr	r3, [r7, #12]
 807333e:	43db      	mvns	r3, r3
 8073340:	69f9      	ldr	r1, [r7, #28]
 8073342:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8073346:	4013      	ands	r3, r2
 8073348:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 807334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807334c:	015a      	lsls	r2, r3, #5
 807334e:	69fb      	ldr	r3, [r7, #28]
 8073350:	4413      	add	r3, r2
 8073352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8073356:	461a      	mov	r2, r3
 8073358:	2301      	movs	r3, #1
 807335a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 807335c:	687b      	ldr	r3, [r7, #4]
 807335e:	691b      	ldr	r3, [r3, #16]
 8073360:	2b01      	cmp	r3, #1
 8073362:	d132      	bne.n	80733ca <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8073364:	6879      	ldr	r1, [r7, #4]
 8073366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8073368:	4613      	mov	r3, r2
 807336a:	00db      	lsls	r3, r3, #3
 807336c:	1a9b      	subs	r3, r3, r2
 807336e:	009b      	lsls	r3, r3, #2
 8073370:	440b      	add	r3, r1
 8073372:	3348      	adds	r3, #72	; 0x48
 8073374:	6819      	ldr	r1, [r3, #0]
 8073376:	6878      	ldr	r0, [r7, #4]
 8073378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 807337a:	4613      	mov	r3, r2
 807337c:	00db      	lsls	r3, r3, #3
 807337e:	1a9b      	subs	r3, r3, r2
 8073380:	009b      	lsls	r3, r3, #2
 8073382:	4403      	add	r3, r0
 8073384:	3344      	adds	r3, #68	; 0x44
 8073386:	681b      	ldr	r3, [r3, #0]
 8073388:	4419      	add	r1, r3
 807338a:	6878      	ldr	r0, [r7, #4]
 807338c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 807338e:	4613      	mov	r3, r2
 8073390:	00db      	lsls	r3, r3, #3
 8073392:	1a9b      	subs	r3, r3, r2
 8073394:	009b      	lsls	r3, r3, #2
 8073396:	4403      	add	r3, r0
 8073398:	3348      	adds	r3, #72	; 0x48
 807339a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 807339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807339e:	2b00      	cmp	r3, #0
 80733a0:	d113      	bne.n	80733ca <HAL_PCD_IRQHandler+0x31c>
 80733a2:	6879      	ldr	r1, [r7, #4]
 80733a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80733a6:	4613      	mov	r3, r2
 80733a8:	00db      	lsls	r3, r3, #3
 80733aa:	1a9b      	subs	r3, r3, r2
 80733ac:	009b      	lsls	r3, r3, #2
 80733ae:	440b      	add	r3, r1
 80733b0:	3350      	adds	r3, #80	; 0x50
 80733b2:	681b      	ldr	r3, [r3, #0]
 80733b4:	2b00      	cmp	r3, #0
 80733b6:	d108      	bne.n	80733ca <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80733b8:	687b      	ldr	r3, [r7, #4]
 80733ba:	6818      	ldr	r0, [r3, #0]
 80733bc:	687b      	ldr	r3, [r7, #4]
 80733be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80733c2:	461a      	mov	r2, r3
 80733c4:	2101      	movs	r1, #1
 80733c6:	f002 fc1b 	bl	8075c00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80733ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80733cc:	b2db      	uxtb	r3, r3
 80733ce:	4619      	mov	r1, r3
 80733d0:	6878      	ldr	r0, [r7, #4]
 80733d2:	f004 fe98 	bl	8078106 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80733d6:	693b      	ldr	r3, [r7, #16]
 80733d8:	f003 0308 	and.w	r3, r3, #8
 80733dc:	2b00      	cmp	r3, #0
 80733de:	d008      	beq.n	80733f2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80733e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80733e2:	015a      	lsls	r2, r3, #5
 80733e4:	69fb      	ldr	r3, [r7, #28]
 80733e6:	4413      	add	r3, r2
 80733e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80733ec:	461a      	mov	r2, r3
 80733ee:	2308      	movs	r3, #8
 80733f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80733f2:	693b      	ldr	r3, [r7, #16]
 80733f4:	f003 0310 	and.w	r3, r3, #16
 80733f8:	2b00      	cmp	r3, #0
 80733fa:	d008      	beq.n	807340e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80733fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80733fe:	015a      	lsls	r2, r3, #5
 8073400:	69fb      	ldr	r3, [r7, #28]
 8073402:	4413      	add	r3, r2
 8073404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8073408:	461a      	mov	r2, r3
 807340a:	2310      	movs	r3, #16
 807340c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 807340e:	693b      	ldr	r3, [r7, #16]
 8073410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8073414:	2b00      	cmp	r3, #0
 8073416:	d008      	beq.n	807342a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8073418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807341a:	015a      	lsls	r2, r3, #5
 807341c:	69fb      	ldr	r3, [r7, #28]
 807341e:	4413      	add	r3, r2
 8073420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8073424:	461a      	mov	r2, r3
 8073426:	2340      	movs	r3, #64	; 0x40
 8073428:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 807342a:	693b      	ldr	r3, [r7, #16]
 807342c:	f003 0302 	and.w	r3, r3, #2
 8073430:	2b00      	cmp	r3, #0
 8073432:	d008      	beq.n	8073446 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8073434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073436:	015a      	lsls	r2, r3, #5
 8073438:	69fb      	ldr	r3, [r7, #28]
 807343a:	4413      	add	r3, r2
 807343c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8073440:	461a      	mov	r2, r3
 8073442:	2302      	movs	r3, #2
 8073444:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8073446:	693b      	ldr	r3, [r7, #16]
 8073448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 807344c:	2b00      	cmp	r3, #0
 807344e:	d003      	beq.n	8073458 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8073450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8073452:	6878      	ldr	r0, [r7, #4]
 8073454:	f000 fbb9 	bl	8073bca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8073458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 807345a:	3301      	adds	r3, #1
 807345c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 807345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8073460:	085b      	lsrs	r3, r3, #1
 8073462:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8073464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8073466:	2b00      	cmp	r3, #0
 8073468:	f47f af49 	bne.w	80732fe <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 807346c:	687b      	ldr	r3, [r7, #4]
 807346e:	681b      	ldr	r3, [r3, #0]
 8073470:	4618      	mov	r0, r3
 8073472:	f002 fb00 	bl	8075a76 <USB_ReadInterrupts>
 8073476:	4603      	mov	r3, r0
 8073478:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 807347c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8073480:	d122      	bne.n	80734c8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8073482:	69fb      	ldr	r3, [r7, #28]
 8073484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073488:	685b      	ldr	r3, [r3, #4]
 807348a:	69fa      	ldr	r2, [r7, #28]
 807348c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8073490:	f023 0301 	bic.w	r3, r3, #1
 8073494:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8073496:	687b      	ldr	r3, [r7, #4]
 8073498:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 807349c:	2b01      	cmp	r3, #1
 807349e:	d108      	bne.n	80734b2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80734a0:	687b      	ldr	r3, [r7, #4]
 80734a2:	2200      	movs	r2, #0
 80734a4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80734a8:	2100      	movs	r1, #0
 80734aa:	6878      	ldr	r0, [r7, #4]
 80734ac:	f000 fdc4 	bl	8074038 <HAL_PCDEx_LPM_Callback>
 80734b0:	e002      	b.n	80734b8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80734b2:	6878      	ldr	r0, [r7, #4]
 80734b4:	f004 fe94 	bl	80781e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80734b8:	687b      	ldr	r3, [r7, #4]
 80734ba:	681b      	ldr	r3, [r3, #0]
 80734bc:	695a      	ldr	r2, [r3, #20]
 80734be:	687b      	ldr	r3, [r7, #4]
 80734c0:	681b      	ldr	r3, [r3, #0]
 80734c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80734c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80734c8:	687b      	ldr	r3, [r7, #4]
 80734ca:	681b      	ldr	r3, [r3, #0]
 80734cc:	4618      	mov	r0, r3
 80734ce:	f002 fad2 	bl	8075a76 <USB_ReadInterrupts>
 80734d2:	4603      	mov	r3, r0
 80734d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80734d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80734dc:	d112      	bne.n	8073504 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80734de:	69fb      	ldr	r3, [r7, #28]
 80734e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80734e4:	689b      	ldr	r3, [r3, #8]
 80734e6:	f003 0301 	and.w	r3, r3, #1
 80734ea:	2b01      	cmp	r3, #1
 80734ec:	d102      	bne.n	80734f4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80734ee:	6878      	ldr	r0, [r7, #4]
 80734f0:	f004 fe50 	bl	8078194 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80734f4:	687b      	ldr	r3, [r7, #4]
 80734f6:	681b      	ldr	r3, [r3, #0]
 80734f8:	695a      	ldr	r2, [r3, #20]
 80734fa:	687b      	ldr	r3, [r7, #4]
 80734fc:	681b      	ldr	r3, [r3, #0]
 80734fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8073502:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8073504:	687b      	ldr	r3, [r7, #4]
 8073506:	681b      	ldr	r3, [r3, #0]
 8073508:	4618      	mov	r0, r3
 807350a:	f002 fab4 	bl	8075a76 <USB_ReadInterrupts>
 807350e:	4603      	mov	r3, r0
 8073510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8073514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8073518:	f040 80c7 	bne.w	80736aa <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 807351c:	69fb      	ldr	r3, [r7, #28]
 807351e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073522:	685b      	ldr	r3, [r3, #4]
 8073524:	69fa      	ldr	r2, [r7, #28]
 8073526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807352a:	f023 0301 	bic.w	r3, r3, #1
 807352e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8073530:	687b      	ldr	r3, [r7, #4]
 8073532:	681b      	ldr	r3, [r3, #0]
 8073534:	2110      	movs	r1, #16
 8073536:	4618      	mov	r0, r3
 8073538:	f001 fc5e 	bl	8074df8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 807353c:	2300      	movs	r3, #0
 807353e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8073540:	e056      	b.n	80735f0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8073542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8073544:	015a      	lsls	r2, r3, #5
 8073546:	69fb      	ldr	r3, [r7, #28]
 8073548:	4413      	add	r3, r2
 807354a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807354e:	461a      	mov	r2, r3
 8073550:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8073554:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8073556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8073558:	015a      	lsls	r2, r3, #5
 807355a:	69fb      	ldr	r3, [r7, #28]
 807355c:	4413      	add	r3, r2
 807355e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8073562:	681b      	ldr	r3, [r3, #0]
 8073564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8073566:	0151      	lsls	r1, r2, #5
 8073568:	69fa      	ldr	r2, [r7, #28]
 807356a:	440a      	add	r2, r1
 807356c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8073570:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8073574:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8073576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8073578:	015a      	lsls	r2, r3, #5
 807357a:	69fb      	ldr	r3, [r7, #28]
 807357c:	4413      	add	r3, r2
 807357e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8073582:	681b      	ldr	r3, [r3, #0]
 8073584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8073586:	0151      	lsls	r1, r2, #5
 8073588:	69fa      	ldr	r2, [r7, #28]
 807358a:	440a      	add	r2, r1
 807358c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8073590:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8073594:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8073596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8073598:	015a      	lsls	r2, r3, #5
 807359a:	69fb      	ldr	r3, [r7, #28]
 807359c:	4413      	add	r3, r2
 807359e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80735a2:	461a      	mov	r2, r3
 80735a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80735a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80735aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80735ac:	015a      	lsls	r2, r3, #5
 80735ae:	69fb      	ldr	r3, [r7, #28]
 80735b0:	4413      	add	r3, r2
 80735b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80735b6:	681b      	ldr	r3, [r3, #0]
 80735b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80735ba:	0151      	lsls	r1, r2, #5
 80735bc:	69fa      	ldr	r2, [r7, #28]
 80735be:	440a      	add	r2, r1
 80735c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80735c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80735c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80735ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80735cc:	015a      	lsls	r2, r3, #5
 80735ce:	69fb      	ldr	r3, [r7, #28]
 80735d0:	4413      	add	r3, r2
 80735d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80735d6:	681b      	ldr	r3, [r3, #0]
 80735d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80735da:	0151      	lsls	r1, r2, #5
 80735dc:	69fa      	ldr	r2, [r7, #28]
 80735de:	440a      	add	r2, r1
 80735e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80735e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80735e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80735ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80735ec:	3301      	adds	r3, #1
 80735ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80735f0:	687b      	ldr	r3, [r7, #4]
 80735f2:	685b      	ldr	r3, [r3, #4]
 80735f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80735f6:	429a      	cmp	r2, r3
 80735f8:	d3a3      	bcc.n	8073542 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80735fa:	69fb      	ldr	r3, [r7, #28]
 80735fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073600:	69db      	ldr	r3, [r3, #28]
 8073602:	69fa      	ldr	r2, [r7, #28]
 8073604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8073608:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 807360c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 807360e:	687b      	ldr	r3, [r7, #4]
 8073610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8073612:	2b00      	cmp	r3, #0
 8073614:	d016      	beq.n	8073644 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8073616:	69fb      	ldr	r3, [r7, #28]
 8073618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807361c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8073620:	69fa      	ldr	r2, [r7, #28]
 8073622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8073626:	f043 030b 	orr.w	r3, r3, #11
 807362a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 807362e:	69fb      	ldr	r3, [r7, #28]
 8073630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8073636:	69fa      	ldr	r2, [r7, #28]
 8073638:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807363c:	f043 030b 	orr.w	r3, r3, #11
 8073640:	6453      	str	r3, [r2, #68]	; 0x44
 8073642:	e015      	b.n	8073670 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8073644:	69fb      	ldr	r3, [r7, #28]
 8073646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807364a:	695b      	ldr	r3, [r3, #20]
 807364c:	69fa      	ldr	r2, [r7, #28]
 807364e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8073652:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8073656:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 807365a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 807365c:	69fb      	ldr	r3, [r7, #28]
 807365e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073662:	691b      	ldr	r3, [r3, #16]
 8073664:	69fa      	ldr	r2, [r7, #28]
 8073666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807366a:	f043 030b 	orr.w	r3, r3, #11
 807366e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8073670:	69fb      	ldr	r3, [r7, #28]
 8073672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073676:	681b      	ldr	r3, [r3, #0]
 8073678:	69fa      	ldr	r2, [r7, #28]
 807367a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 807367e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8073682:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8073684:	687b      	ldr	r3, [r7, #4]
 8073686:	6818      	ldr	r0, [r3, #0]
 8073688:	687b      	ldr	r3, [r7, #4]
 807368a:	691b      	ldr	r3, [r3, #16]
 807368c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 807368e:	687b      	ldr	r3, [r7, #4]
 8073690:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8073694:	461a      	mov	r2, r3
 8073696:	f002 fab3 	bl	8075c00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 807369a:	687b      	ldr	r3, [r7, #4]
 807369c:	681b      	ldr	r3, [r3, #0]
 807369e:	695a      	ldr	r2, [r3, #20]
 80736a0:	687b      	ldr	r3, [r7, #4]
 80736a2:	681b      	ldr	r3, [r3, #0]
 80736a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80736a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80736aa:	687b      	ldr	r3, [r7, #4]
 80736ac:	681b      	ldr	r3, [r3, #0]
 80736ae:	4618      	mov	r0, r3
 80736b0:	f002 f9e1 	bl	8075a76 <USB_ReadInterrupts>
 80736b4:	4603      	mov	r3, r0
 80736b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80736ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80736be:	d124      	bne.n	807370a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80736c0:	687b      	ldr	r3, [r7, #4]
 80736c2:	681b      	ldr	r3, [r3, #0]
 80736c4:	4618      	mov	r0, r3
 80736c6:	f002 fa77 	bl	8075bb8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80736ca:	687b      	ldr	r3, [r7, #4]
 80736cc:	681b      	ldr	r3, [r3, #0]
 80736ce:	4618      	mov	r0, r3
 80736d0:	f001 fbf3 	bl	8074eba <USB_GetDevSpeed>
 80736d4:	4603      	mov	r3, r0
 80736d6:	461a      	mov	r2, r3
 80736d8:	687b      	ldr	r3, [r7, #4]
 80736da:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80736dc:	687b      	ldr	r3, [r7, #4]
 80736de:	681c      	ldr	r4, [r3, #0]
 80736e0:	f001 f8ca 	bl	8074878 <HAL_RCC_GetHCLKFreq>
 80736e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80736e6:	687b      	ldr	r3, [r7, #4]
 80736e8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80736ea:	b2db      	uxtb	r3, r3
 80736ec:	461a      	mov	r2, r3
 80736ee:	4620      	mov	r0, r4
 80736f0:	f001 f930 	bl	8074954 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80736f4:	6878      	ldr	r0, [r7, #4]
 80736f6:	f004 fd2e 	bl	8078156 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80736fa:	687b      	ldr	r3, [r7, #4]
 80736fc:	681b      	ldr	r3, [r3, #0]
 80736fe:	695a      	ldr	r2, [r3, #20]
 8073700:	687b      	ldr	r3, [r7, #4]
 8073702:	681b      	ldr	r3, [r3, #0]
 8073704:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8073708:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 807370a:	687b      	ldr	r3, [r7, #4]
 807370c:	681b      	ldr	r3, [r3, #0]
 807370e:	4618      	mov	r0, r3
 8073710:	f002 f9b1 	bl	8075a76 <USB_ReadInterrupts>
 8073714:	4603      	mov	r3, r0
 8073716:	f003 0308 	and.w	r3, r3, #8
 807371a:	2b08      	cmp	r3, #8
 807371c:	d10a      	bne.n	8073734 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 807371e:	6878      	ldr	r0, [r7, #4]
 8073720:	f004 fd0b 	bl	807813a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8073724:	687b      	ldr	r3, [r7, #4]
 8073726:	681b      	ldr	r3, [r3, #0]
 8073728:	695a      	ldr	r2, [r3, #20]
 807372a:	687b      	ldr	r3, [r7, #4]
 807372c:	681b      	ldr	r3, [r3, #0]
 807372e:	f002 0208 	and.w	r2, r2, #8
 8073732:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8073734:	687b      	ldr	r3, [r7, #4]
 8073736:	681b      	ldr	r3, [r3, #0]
 8073738:	4618      	mov	r0, r3
 807373a:	f002 f99c 	bl	8075a76 <USB_ReadInterrupts>
 807373e:	4603      	mov	r3, r0
 8073740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8073744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8073748:	d10f      	bne.n	807376a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 807374a:	2300      	movs	r3, #0
 807374c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 807374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073750:	b2db      	uxtb	r3, r3
 8073752:	4619      	mov	r1, r3
 8073754:	6878      	ldr	r0, [r7, #4]
 8073756:	f004 fd63 	bl	8078220 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 807375a:	687b      	ldr	r3, [r7, #4]
 807375c:	681b      	ldr	r3, [r3, #0]
 807375e:	695a      	ldr	r2, [r3, #20]
 8073760:	687b      	ldr	r3, [r7, #4]
 8073762:	681b      	ldr	r3, [r3, #0]
 8073764:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8073768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 807376a:	687b      	ldr	r3, [r7, #4]
 807376c:	681b      	ldr	r3, [r3, #0]
 807376e:	4618      	mov	r0, r3
 8073770:	f002 f981 	bl	8075a76 <USB_ReadInterrupts>
 8073774:	4603      	mov	r3, r0
 8073776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 807377a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 807377e:	d10f      	bne.n	80737a0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8073780:	2300      	movs	r3, #0
 8073782:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8073784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8073786:	b2db      	uxtb	r3, r3
 8073788:	4619      	mov	r1, r3
 807378a:	6878      	ldr	r0, [r7, #4]
 807378c:	f004 fd36 	bl	80781fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8073790:	687b      	ldr	r3, [r7, #4]
 8073792:	681b      	ldr	r3, [r3, #0]
 8073794:	695a      	ldr	r2, [r3, #20]
 8073796:	687b      	ldr	r3, [r7, #4]
 8073798:	681b      	ldr	r3, [r3, #0]
 807379a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 807379e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80737a0:	687b      	ldr	r3, [r7, #4]
 80737a2:	681b      	ldr	r3, [r3, #0]
 80737a4:	4618      	mov	r0, r3
 80737a6:	f002 f966 	bl	8075a76 <USB_ReadInterrupts>
 80737aa:	4603      	mov	r3, r0
 80737ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80737b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80737b4:	d10a      	bne.n	80737cc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80737b6:	6878      	ldr	r0, [r7, #4]
 80737b8:	f004 fd44 	bl	8078244 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80737bc:	687b      	ldr	r3, [r7, #4]
 80737be:	681b      	ldr	r3, [r3, #0]
 80737c0:	695a      	ldr	r2, [r3, #20]
 80737c2:	687b      	ldr	r3, [r7, #4]
 80737c4:	681b      	ldr	r3, [r3, #0]
 80737c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80737ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80737cc:	687b      	ldr	r3, [r7, #4]
 80737ce:	681b      	ldr	r3, [r3, #0]
 80737d0:	4618      	mov	r0, r3
 80737d2:	f002 f950 	bl	8075a76 <USB_ReadInterrupts>
 80737d6:	4603      	mov	r3, r0
 80737d8:	f003 0304 	and.w	r3, r3, #4
 80737dc:	2b04      	cmp	r3, #4
 80737de:	d115      	bne.n	807380c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80737e0:	687b      	ldr	r3, [r7, #4]
 80737e2:	681b      	ldr	r3, [r3, #0]
 80737e4:	685b      	ldr	r3, [r3, #4]
 80737e6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80737e8:	69bb      	ldr	r3, [r7, #24]
 80737ea:	f003 0304 	and.w	r3, r3, #4
 80737ee:	2b00      	cmp	r3, #0
 80737f0:	d002      	beq.n	80737f8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80737f2:	6878      	ldr	r0, [r7, #4]
 80737f4:	f004 fd34 	bl	8078260 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80737f8:	687b      	ldr	r3, [r7, #4]
 80737fa:	681b      	ldr	r3, [r3, #0]
 80737fc:	6859      	ldr	r1, [r3, #4]
 80737fe:	687b      	ldr	r3, [r7, #4]
 8073800:	681b      	ldr	r3, [r3, #0]
 8073802:	69ba      	ldr	r2, [r7, #24]
 8073804:	430a      	orrs	r2, r1
 8073806:	605a      	str	r2, [r3, #4]
 8073808:	e000      	b.n	807380c <HAL_PCD_IRQHandler+0x75e>
      return;
 807380a:	bf00      	nop
    }
  }
}
 807380c:	3734      	adds	r7, #52	; 0x34
 807380e:	46bd      	mov	sp, r7
 8073810:	bd90      	pop	{r4, r7, pc}

08073812 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8073812:	b580      	push	{r7, lr}
 8073814:	b082      	sub	sp, #8
 8073816:	af00      	add	r7, sp, #0
 8073818:	6078      	str	r0, [r7, #4]
 807381a:	460b      	mov	r3, r1
 807381c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 807381e:	687b      	ldr	r3, [r7, #4]
 8073820:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8073824:	2b01      	cmp	r3, #1
 8073826:	d101      	bne.n	807382c <HAL_PCD_SetAddress+0x1a>
 8073828:	2302      	movs	r3, #2
 807382a:	e013      	b.n	8073854 <HAL_PCD_SetAddress+0x42>
 807382c:	687b      	ldr	r3, [r7, #4]
 807382e:	2201      	movs	r2, #1
 8073830:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8073834:	687b      	ldr	r3, [r7, #4]
 8073836:	78fa      	ldrb	r2, [r7, #3]
 8073838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 807383c:	687b      	ldr	r3, [r7, #4]
 807383e:	681b      	ldr	r3, [r3, #0]
 8073840:	78fa      	ldrb	r2, [r7, #3]
 8073842:	4611      	mov	r1, r2
 8073844:	4618      	mov	r0, r3
 8073846:	f002 f8ae 	bl	80759a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 807384a:	687b      	ldr	r3, [r7, #4]
 807384c:	2200      	movs	r2, #0
 807384e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8073852:	2300      	movs	r3, #0
}
 8073854:	4618      	mov	r0, r3
 8073856:	3708      	adds	r7, #8
 8073858:	46bd      	mov	sp, r7
 807385a:	bd80      	pop	{r7, pc}

0807385c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 807385c:	b580      	push	{r7, lr}
 807385e:	b084      	sub	sp, #16
 8073860:	af00      	add	r7, sp, #0
 8073862:	6078      	str	r0, [r7, #4]
 8073864:	4608      	mov	r0, r1
 8073866:	4611      	mov	r1, r2
 8073868:	461a      	mov	r2, r3
 807386a:	4603      	mov	r3, r0
 807386c:	70fb      	strb	r3, [r7, #3]
 807386e:	460b      	mov	r3, r1
 8073870:	803b      	strh	r3, [r7, #0]
 8073872:	4613      	mov	r3, r2
 8073874:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8073876:	2300      	movs	r3, #0
 8073878:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 807387a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 807387e:	2b00      	cmp	r3, #0
 8073880:	da0f      	bge.n	80738a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8073882:	78fb      	ldrb	r3, [r7, #3]
 8073884:	f003 020f 	and.w	r2, r3, #15
 8073888:	4613      	mov	r3, r2
 807388a:	00db      	lsls	r3, r3, #3
 807388c:	1a9b      	subs	r3, r3, r2
 807388e:	009b      	lsls	r3, r3, #2
 8073890:	3338      	adds	r3, #56	; 0x38
 8073892:	687a      	ldr	r2, [r7, #4]
 8073894:	4413      	add	r3, r2
 8073896:	3304      	adds	r3, #4
 8073898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 807389a:	68fb      	ldr	r3, [r7, #12]
 807389c:	2201      	movs	r2, #1
 807389e:	705a      	strb	r2, [r3, #1]
 80738a0:	e00f      	b.n	80738c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80738a2:	78fb      	ldrb	r3, [r7, #3]
 80738a4:	f003 020f 	and.w	r2, r3, #15
 80738a8:	4613      	mov	r3, r2
 80738aa:	00db      	lsls	r3, r3, #3
 80738ac:	1a9b      	subs	r3, r3, r2
 80738ae:	009b      	lsls	r3, r3, #2
 80738b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80738b4:	687a      	ldr	r2, [r7, #4]
 80738b6:	4413      	add	r3, r2
 80738b8:	3304      	adds	r3, #4
 80738ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80738bc:	68fb      	ldr	r3, [r7, #12]
 80738be:	2200      	movs	r2, #0
 80738c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80738c2:	78fb      	ldrb	r3, [r7, #3]
 80738c4:	f003 030f 	and.w	r3, r3, #15
 80738c8:	b2da      	uxtb	r2, r3
 80738ca:	68fb      	ldr	r3, [r7, #12]
 80738cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80738ce:	883a      	ldrh	r2, [r7, #0]
 80738d0:	68fb      	ldr	r3, [r7, #12]
 80738d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80738d4:	68fb      	ldr	r3, [r7, #12]
 80738d6:	78ba      	ldrb	r2, [r7, #2]
 80738d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80738da:	68fb      	ldr	r3, [r7, #12]
 80738dc:	785b      	ldrb	r3, [r3, #1]
 80738de:	2b00      	cmp	r3, #0
 80738e0:	d004      	beq.n	80738ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80738e2:	68fb      	ldr	r3, [r7, #12]
 80738e4:	781b      	ldrb	r3, [r3, #0]
 80738e6:	b29a      	uxth	r2, r3
 80738e8:	68fb      	ldr	r3, [r7, #12]
 80738ea:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80738ec:	78bb      	ldrb	r3, [r7, #2]
 80738ee:	2b02      	cmp	r3, #2
 80738f0:	d102      	bne.n	80738f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80738f2:	68fb      	ldr	r3, [r7, #12]
 80738f4:	2200      	movs	r2, #0
 80738f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80738f8:	687b      	ldr	r3, [r7, #4]
 80738fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80738fe:	2b01      	cmp	r3, #1
 8073900:	d101      	bne.n	8073906 <HAL_PCD_EP_Open+0xaa>
 8073902:	2302      	movs	r3, #2
 8073904:	e00e      	b.n	8073924 <HAL_PCD_EP_Open+0xc8>
 8073906:	687b      	ldr	r3, [r7, #4]
 8073908:	2201      	movs	r2, #1
 807390a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 807390e:	687b      	ldr	r3, [r7, #4]
 8073910:	681b      	ldr	r3, [r3, #0]
 8073912:	68f9      	ldr	r1, [r7, #12]
 8073914:	4618      	mov	r0, r3
 8073916:	f001 faf5 	bl	8074f04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 807391a:	687b      	ldr	r3, [r7, #4]
 807391c:	2200      	movs	r2, #0
 807391e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8073922:	7afb      	ldrb	r3, [r7, #11]
}
 8073924:	4618      	mov	r0, r3
 8073926:	3710      	adds	r7, #16
 8073928:	46bd      	mov	sp, r7
 807392a:	bd80      	pop	{r7, pc}

0807392c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 807392c:	b580      	push	{r7, lr}
 807392e:	b086      	sub	sp, #24
 8073930:	af00      	add	r7, sp, #0
 8073932:	60f8      	str	r0, [r7, #12]
 8073934:	607a      	str	r2, [r7, #4]
 8073936:	603b      	str	r3, [r7, #0]
 8073938:	460b      	mov	r3, r1
 807393a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 807393c:	7afb      	ldrb	r3, [r7, #11]
 807393e:	f003 020f 	and.w	r2, r3, #15
 8073942:	4613      	mov	r3, r2
 8073944:	00db      	lsls	r3, r3, #3
 8073946:	1a9b      	subs	r3, r3, r2
 8073948:	009b      	lsls	r3, r3, #2
 807394a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 807394e:	68fa      	ldr	r2, [r7, #12]
 8073950:	4413      	add	r3, r2
 8073952:	3304      	adds	r3, #4
 8073954:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8073956:	697b      	ldr	r3, [r7, #20]
 8073958:	687a      	ldr	r2, [r7, #4]
 807395a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 807395c:	697b      	ldr	r3, [r7, #20]
 807395e:	683a      	ldr	r2, [r7, #0]
 8073960:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8073962:	697b      	ldr	r3, [r7, #20]
 8073964:	2200      	movs	r2, #0
 8073966:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8073968:	697b      	ldr	r3, [r7, #20]
 807396a:	2200      	movs	r2, #0
 807396c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 807396e:	7afb      	ldrb	r3, [r7, #11]
 8073970:	f003 030f 	and.w	r3, r3, #15
 8073974:	b2da      	uxtb	r2, r3
 8073976:	697b      	ldr	r3, [r7, #20]
 8073978:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 807397a:	68fb      	ldr	r3, [r7, #12]
 807397c:	691b      	ldr	r3, [r3, #16]
 807397e:	2b01      	cmp	r3, #1
 8073980:	d102      	bne.n	8073988 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8073982:	687a      	ldr	r2, [r7, #4]
 8073984:	697b      	ldr	r3, [r7, #20]
 8073986:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8073988:	7afb      	ldrb	r3, [r7, #11]
 807398a:	f003 030f 	and.w	r3, r3, #15
 807398e:	2b00      	cmp	r3, #0
 8073990:	d109      	bne.n	80739a6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8073992:	68fb      	ldr	r3, [r7, #12]
 8073994:	6818      	ldr	r0, [r3, #0]
 8073996:	68fb      	ldr	r3, [r7, #12]
 8073998:	691b      	ldr	r3, [r3, #16]
 807399a:	b2db      	uxtb	r3, r3
 807399c:	461a      	mov	r2, r3
 807399e:	6979      	ldr	r1, [r7, #20]
 80739a0:	f001 fd7c 	bl	807549c <USB_EP0StartXfer>
 80739a4:	e008      	b.n	80739b8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80739a6:	68fb      	ldr	r3, [r7, #12]
 80739a8:	6818      	ldr	r0, [r3, #0]
 80739aa:	68fb      	ldr	r3, [r7, #12]
 80739ac:	691b      	ldr	r3, [r3, #16]
 80739ae:	b2db      	uxtb	r3, r3
 80739b0:	461a      	mov	r2, r3
 80739b2:	6979      	ldr	r1, [r7, #20]
 80739b4:	f001 fb2e 	bl	8075014 <USB_EPStartXfer>
  }

  return HAL_OK;
 80739b8:	2300      	movs	r3, #0
}
 80739ba:	4618      	mov	r0, r3
 80739bc:	3718      	adds	r7, #24
 80739be:	46bd      	mov	sp, r7
 80739c0:	bd80      	pop	{r7, pc}

080739c2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80739c2:	b580      	push	{r7, lr}
 80739c4:	b086      	sub	sp, #24
 80739c6:	af00      	add	r7, sp, #0
 80739c8:	60f8      	str	r0, [r7, #12]
 80739ca:	607a      	str	r2, [r7, #4]
 80739cc:	603b      	str	r3, [r7, #0]
 80739ce:	460b      	mov	r3, r1
 80739d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80739d2:	7afb      	ldrb	r3, [r7, #11]
 80739d4:	f003 020f 	and.w	r2, r3, #15
 80739d8:	4613      	mov	r3, r2
 80739da:	00db      	lsls	r3, r3, #3
 80739dc:	1a9b      	subs	r3, r3, r2
 80739de:	009b      	lsls	r3, r3, #2
 80739e0:	3338      	adds	r3, #56	; 0x38
 80739e2:	68fa      	ldr	r2, [r7, #12]
 80739e4:	4413      	add	r3, r2
 80739e6:	3304      	adds	r3, #4
 80739e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80739ea:	697b      	ldr	r3, [r7, #20]
 80739ec:	687a      	ldr	r2, [r7, #4]
 80739ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80739f0:	697b      	ldr	r3, [r7, #20]
 80739f2:	683a      	ldr	r2, [r7, #0]
 80739f4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80739f6:	697b      	ldr	r3, [r7, #20]
 80739f8:	2200      	movs	r2, #0
 80739fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80739fc:	697b      	ldr	r3, [r7, #20]
 80739fe:	2201      	movs	r2, #1
 8073a00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8073a02:	7afb      	ldrb	r3, [r7, #11]
 8073a04:	f003 030f 	and.w	r3, r3, #15
 8073a08:	b2da      	uxtb	r2, r3
 8073a0a:	697b      	ldr	r3, [r7, #20]
 8073a0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8073a0e:	68fb      	ldr	r3, [r7, #12]
 8073a10:	691b      	ldr	r3, [r3, #16]
 8073a12:	2b01      	cmp	r3, #1
 8073a14:	d102      	bne.n	8073a1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8073a16:	687a      	ldr	r2, [r7, #4]
 8073a18:	697b      	ldr	r3, [r7, #20]
 8073a1a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8073a1c:	7afb      	ldrb	r3, [r7, #11]
 8073a1e:	f003 030f 	and.w	r3, r3, #15
 8073a22:	2b00      	cmp	r3, #0
 8073a24:	d109      	bne.n	8073a3a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8073a26:	68fb      	ldr	r3, [r7, #12]
 8073a28:	6818      	ldr	r0, [r3, #0]
 8073a2a:	68fb      	ldr	r3, [r7, #12]
 8073a2c:	691b      	ldr	r3, [r3, #16]
 8073a2e:	b2db      	uxtb	r3, r3
 8073a30:	461a      	mov	r2, r3
 8073a32:	6979      	ldr	r1, [r7, #20]
 8073a34:	f001 fd32 	bl	807549c <USB_EP0StartXfer>
 8073a38:	e008      	b.n	8073a4c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8073a3a:	68fb      	ldr	r3, [r7, #12]
 8073a3c:	6818      	ldr	r0, [r3, #0]
 8073a3e:	68fb      	ldr	r3, [r7, #12]
 8073a40:	691b      	ldr	r3, [r3, #16]
 8073a42:	b2db      	uxtb	r3, r3
 8073a44:	461a      	mov	r2, r3
 8073a46:	6979      	ldr	r1, [r7, #20]
 8073a48:	f001 fae4 	bl	8075014 <USB_EPStartXfer>
  }

  return HAL_OK;
 8073a4c:	2300      	movs	r3, #0
}
 8073a4e:	4618      	mov	r0, r3
 8073a50:	3718      	adds	r7, #24
 8073a52:	46bd      	mov	sp, r7
 8073a54:	bd80      	pop	{r7, pc}

08073a56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8073a56:	b580      	push	{r7, lr}
 8073a58:	b084      	sub	sp, #16
 8073a5a:	af00      	add	r7, sp, #0
 8073a5c:	6078      	str	r0, [r7, #4]
 8073a5e:	460b      	mov	r3, r1
 8073a60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8073a62:	78fb      	ldrb	r3, [r7, #3]
 8073a64:	f003 020f 	and.w	r2, r3, #15
 8073a68:	687b      	ldr	r3, [r7, #4]
 8073a6a:	685b      	ldr	r3, [r3, #4]
 8073a6c:	429a      	cmp	r2, r3
 8073a6e:	d901      	bls.n	8073a74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8073a70:	2301      	movs	r3, #1
 8073a72:	e050      	b.n	8073b16 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8073a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8073a78:	2b00      	cmp	r3, #0
 8073a7a:	da0f      	bge.n	8073a9c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8073a7c:	78fb      	ldrb	r3, [r7, #3]
 8073a7e:	f003 020f 	and.w	r2, r3, #15
 8073a82:	4613      	mov	r3, r2
 8073a84:	00db      	lsls	r3, r3, #3
 8073a86:	1a9b      	subs	r3, r3, r2
 8073a88:	009b      	lsls	r3, r3, #2
 8073a8a:	3338      	adds	r3, #56	; 0x38
 8073a8c:	687a      	ldr	r2, [r7, #4]
 8073a8e:	4413      	add	r3, r2
 8073a90:	3304      	adds	r3, #4
 8073a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8073a94:	68fb      	ldr	r3, [r7, #12]
 8073a96:	2201      	movs	r2, #1
 8073a98:	705a      	strb	r2, [r3, #1]
 8073a9a:	e00d      	b.n	8073ab8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8073a9c:	78fa      	ldrb	r2, [r7, #3]
 8073a9e:	4613      	mov	r3, r2
 8073aa0:	00db      	lsls	r3, r3, #3
 8073aa2:	1a9b      	subs	r3, r3, r2
 8073aa4:	009b      	lsls	r3, r3, #2
 8073aa6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8073aaa:	687a      	ldr	r2, [r7, #4]
 8073aac:	4413      	add	r3, r2
 8073aae:	3304      	adds	r3, #4
 8073ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8073ab2:	68fb      	ldr	r3, [r7, #12]
 8073ab4:	2200      	movs	r2, #0
 8073ab6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8073ab8:	68fb      	ldr	r3, [r7, #12]
 8073aba:	2201      	movs	r2, #1
 8073abc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8073abe:	78fb      	ldrb	r3, [r7, #3]
 8073ac0:	f003 030f 	and.w	r3, r3, #15
 8073ac4:	b2da      	uxtb	r2, r3
 8073ac6:	68fb      	ldr	r3, [r7, #12]
 8073ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8073aca:	687b      	ldr	r3, [r7, #4]
 8073acc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8073ad0:	2b01      	cmp	r3, #1
 8073ad2:	d101      	bne.n	8073ad8 <HAL_PCD_EP_SetStall+0x82>
 8073ad4:	2302      	movs	r3, #2
 8073ad6:	e01e      	b.n	8073b16 <HAL_PCD_EP_SetStall+0xc0>
 8073ad8:	687b      	ldr	r3, [r7, #4]
 8073ada:	2201      	movs	r2, #1
 8073adc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8073ae0:	687b      	ldr	r3, [r7, #4]
 8073ae2:	681b      	ldr	r3, [r3, #0]
 8073ae4:	68f9      	ldr	r1, [r7, #12]
 8073ae6:	4618      	mov	r0, r3
 8073ae8:	f001 fe89 	bl	80757fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8073aec:	78fb      	ldrb	r3, [r7, #3]
 8073aee:	f003 030f 	and.w	r3, r3, #15
 8073af2:	2b00      	cmp	r3, #0
 8073af4:	d10a      	bne.n	8073b0c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8073af6:	687b      	ldr	r3, [r7, #4]
 8073af8:	6818      	ldr	r0, [r3, #0]
 8073afa:	687b      	ldr	r3, [r7, #4]
 8073afc:	691b      	ldr	r3, [r3, #16]
 8073afe:	b2d9      	uxtb	r1, r3
 8073b00:	687b      	ldr	r3, [r7, #4]
 8073b02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8073b06:	461a      	mov	r2, r3
 8073b08:	f002 f87a 	bl	8075c00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8073b0c:	687b      	ldr	r3, [r7, #4]
 8073b0e:	2200      	movs	r2, #0
 8073b10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8073b14:	2300      	movs	r3, #0
}
 8073b16:	4618      	mov	r0, r3
 8073b18:	3710      	adds	r7, #16
 8073b1a:	46bd      	mov	sp, r7
 8073b1c:	bd80      	pop	{r7, pc}

08073b1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8073b1e:	b580      	push	{r7, lr}
 8073b20:	b084      	sub	sp, #16
 8073b22:	af00      	add	r7, sp, #0
 8073b24:	6078      	str	r0, [r7, #4]
 8073b26:	460b      	mov	r3, r1
 8073b28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8073b2a:	78fb      	ldrb	r3, [r7, #3]
 8073b2c:	f003 020f 	and.w	r2, r3, #15
 8073b30:	687b      	ldr	r3, [r7, #4]
 8073b32:	685b      	ldr	r3, [r3, #4]
 8073b34:	429a      	cmp	r2, r3
 8073b36:	d901      	bls.n	8073b3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8073b38:	2301      	movs	r3, #1
 8073b3a:	e042      	b.n	8073bc2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8073b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8073b40:	2b00      	cmp	r3, #0
 8073b42:	da0f      	bge.n	8073b64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8073b44:	78fb      	ldrb	r3, [r7, #3]
 8073b46:	f003 020f 	and.w	r2, r3, #15
 8073b4a:	4613      	mov	r3, r2
 8073b4c:	00db      	lsls	r3, r3, #3
 8073b4e:	1a9b      	subs	r3, r3, r2
 8073b50:	009b      	lsls	r3, r3, #2
 8073b52:	3338      	adds	r3, #56	; 0x38
 8073b54:	687a      	ldr	r2, [r7, #4]
 8073b56:	4413      	add	r3, r2
 8073b58:	3304      	adds	r3, #4
 8073b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8073b5c:	68fb      	ldr	r3, [r7, #12]
 8073b5e:	2201      	movs	r2, #1
 8073b60:	705a      	strb	r2, [r3, #1]
 8073b62:	e00f      	b.n	8073b84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8073b64:	78fb      	ldrb	r3, [r7, #3]
 8073b66:	f003 020f 	and.w	r2, r3, #15
 8073b6a:	4613      	mov	r3, r2
 8073b6c:	00db      	lsls	r3, r3, #3
 8073b6e:	1a9b      	subs	r3, r3, r2
 8073b70:	009b      	lsls	r3, r3, #2
 8073b72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8073b76:	687a      	ldr	r2, [r7, #4]
 8073b78:	4413      	add	r3, r2
 8073b7a:	3304      	adds	r3, #4
 8073b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8073b7e:	68fb      	ldr	r3, [r7, #12]
 8073b80:	2200      	movs	r2, #0
 8073b82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8073b84:	68fb      	ldr	r3, [r7, #12]
 8073b86:	2200      	movs	r2, #0
 8073b88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8073b8a:	78fb      	ldrb	r3, [r7, #3]
 8073b8c:	f003 030f 	and.w	r3, r3, #15
 8073b90:	b2da      	uxtb	r2, r3
 8073b92:	68fb      	ldr	r3, [r7, #12]
 8073b94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8073b96:	687b      	ldr	r3, [r7, #4]
 8073b98:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8073b9c:	2b01      	cmp	r3, #1
 8073b9e:	d101      	bne.n	8073ba4 <HAL_PCD_EP_ClrStall+0x86>
 8073ba0:	2302      	movs	r3, #2
 8073ba2:	e00e      	b.n	8073bc2 <HAL_PCD_EP_ClrStall+0xa4>
 8073ba4:	687b      	ldr	r3, [r7, #4]
 8073ba6:	2201      	movs	r2, #1
 8073ba8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8073bac:	687b      	ldr	r3, [r7, #4]
 8073bae:	681b      	ldr	r3, [r3, #0]
 8073bb0:	68f9      	ldr	r1, [r7, #12]
 8073bb2:	4618      	mov	r0, r3
 8073bb4:	f001 fe91 	bl	80758da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8073bb8:	687b      	ldr	r3, [r7, #4]
 8073bba:	2200      	movs	r2, #0
 8073bbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8073bc0:	2300      	movs	r3, #0
}
 8073bc2:	4618      	mov	r0, r3
 8073bc4:	3710      	adds	r7, #16
 8073bc6:	46bd      	mov	sp, r7
 8073bc8:	bd80      	pop	{r7, pc}

08073bca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8073bca:	b580      	push	{r7, lr}
 8073bcc:	b08a      	sub	sp, #40	; 0x28
 8073bce:	af02      	add	r7, sp, #8
 8073bd0:	6078      	str	r0, [r7, #4]
 8073bd2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8073bd4:	687b      	ldr	r3, [r7, #4]
 8073bd6:	681b      	ldr	r3, [r3, #0]
 8073bd8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8073bda:	697b      	ldr	r3, [r7, #20]
 8073bdc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8073bde:	683a      	ldr	r2, [r7, #0]
 8073be0:	4613      	mov	r3, r2
 8073be2:	00db      	lsls	r3, r3, #3
 8073be4:	1a9b      	subs	r3, r3, r2
 8073be6:	009b      	lsls	r3, r3, #2
 8073be8:	3338      	adds	r3, #56	; 0x38
 8073bea:	687a      	ldr	r2, [r7, #4]
 8073bec:	4413      	add	r3, r2
 8073bee:	3304      	adds	r3, #4
 8073bf0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8073bf2:	68fb      	ldr	r3, [r7, #12]
 8073bf4:	699a      	ldr	r2, [r3, #24]
 8073bf6:	68fb      	ldr	r3, [r7, #12]
 8073bf8:	695b      	ldr	r3, [r3, #20]
 8073bfa:	429a      	cmp	r2, r3
 8073bfc:	d901      	bls.n	8073c02 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8073bfe:	2301      	movs	r3, #1
 8073c00:	e06c      	b.n	8073cdc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8073c02:	68fb      	ldr	r3, [r7, #12]
 8073c04:	695a      	ldr	r2, [r3, #20]
 8073c06:	68fb      	ldr	r3, [r7, #12]
 8073c08:	699b      	ldr	r3, [r3, #24]
 8073c0a:	1ad3      	subs	r3, r2, r3
 8073c0c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8073c0e:	68fb      	ldr	r3, [r7, #12]
 8073c10:	689b      	ldr	r3, [r3, #8]
 8073c12:	69fa      	ldr	r2, [r7, #28]
 8073c14:	429a      	cmp	r2, r3
 8073c16:	d902      	bls.n	8073c1e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8073c18:	68fb      	ldr	r3, [r7, #12]
 8073c1a:	689b      	ldr	r3, [r3, #8]
 8073c1c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8073c1e:	69fb      	ldr	r3, [r7, #28]
 8073c20:	3303      	adds	r3, #3
 8073c22:	089b      	lsrs	r3, r3, #2
 8073c24:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8073c26:	e02b      	b.n	8073c80 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8073c28:	68fb      	ldr	r3, [r7, #12]
 8073c2a:	695a      	ldr	r2, [r3, #20]
 8073c2c:	68fb      	ldr	r3, [r7, #12]
 8073c2e:	699b      	ldr	r3, [r3, #24]
 8073c30:	1ad3      	subs	r3, r2, r3
 8073c32:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8073c34:	68fb      	ldr	r3, [r7, #12]
 8073c36:	689b      	ldr	r3, [r3, #8]
 8073c38:	69fa      	ldr	r2, [r7, #28]
 8073c3a:	429a      	cmp	r2, r3
 8073c3c:	d902      	bls.n	8073c44 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8073c3e:	68fb      	ldr	r3, [r7, #12]
 8073c40:	689b      	ldr	r3, [r3, #8]
 8073c42:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8073c44:	69fb      	ldr	r3, [r7, #28]
 8073c46:	3303      	adds	r3, #3
 8073c48:	089b      	lsrs	r3, r3, #2
 8073c4a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8073c4c:	68fb      	ldr	r3, [r7, #12]
 8073c4e:	68d9      	ldr	r1, [r3, #12]
 8073c50:	683b      	ldr	r3, [r7, #0]
 8073c52:	b2da      	uxtb	r2, r3
 8073c54:	69fb      	ldr	r3, [r7, #28]
 8073c56:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8073c58:	687b      	ldr	r3, [r7, #4]
 8073c5a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8073c5c:	b2db      	uxtb	r3, r3
 8073c5e:	9300      	str	r3, [sp, #0]
 8073c60:	4603      	mov	r3, r0
 8073c62:	6978      	ldr	r0, [r7, #20]
 8073c64:	f001 fd6d 	bl	8075742 <USB_WritePacket>

    ep->xfer_buff  += len;
 8073c68:	68fb      	ldr	r3, [r7, #12]
 8073c6a:	68da      	ldr	r2, [r3, #12]
 8073c6c:	69fb      	ldr	r3, [r7, #28]
 8073c6e:	441a      	add	r2, r3
 8073c70:	68fb      	ldr	r3, [r7, #12]
 8073c72:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8073c74:	68fb      	ldr	r3, [r7, #12]
 8073c76:	699a      	ldr	r2, [r3, #24]
 8073c78:	69fb      	ldr	r3, [r7, #28]
 8073c7a:	441a      	add	r2, r3
 8073c7c:	68fb      	ldr	r3, [r7, #12]
 8073c7e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8073c80:	683b      	ldr	r3, [r7, #0]
 8073c82:	015a      	lsls	r2, r3, #5
 8073c84:	693b      	ldr	r3, [r7, #16]
 8073c86:	4413      	add	r3, r2
 8073c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8073c8c:	699b      	ldr	r3, [r3, #24]
 8073c8e:	b29b      	uxth	r3, r3
 8073c90:	69ba      	ldr	r2, [r7, #24]
 8073c92:	429a      	cmp	r2, r3
 8073c94:	d809      	bhi.n	8073caa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8073c96:	68fb      	ldr	r3, [r7, #12]
 8073c98:	699a      	ldr	r2, [r3, #24]
 8073c9a:	68fb      	ldr	r3, [r7, #12]
 8073c9c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8073c9e:	429a      	cmp	r2, r3
 8073ca0:	d203      	bcs.n	8073caa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8073ca2:	68fb      	ldr	r3, [r7, #12]
 8073ca4:	695b      	ldr	r3, [r3, #20]
 8073ca6:	2b00      	cmp	r3, #0
 8073ca8:	d1be      	bne.n	8073c28 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8073caa:	68fb      	ldr	r3, [r7, #12]
 8073cac:	695a      	ldr	r2, [r3, #20]
 8073cae:	68fb      	ldr	r3, [r7, #12]
 8073cb0:	699b      	ldr	r3, [r3, #24]
 8073cb2:	429a      	cmp	r2, r3
 8073cb4:	d811      	bhi.n	8073cda <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8073cb6:	683b      	ldr	r3, [r7, #0]
 8073cb8:	f003 030f 	and.w	r3, r3, #15
 8073cbc:	2201      	movs	r2, #1
 8073cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8073cc2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8073cc4:	693b      	ldr	r3, [r7, #16]
 8073cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8073cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8073ccc:	68bb      	ldr	r3, [r7, #8]
 8073cce:	43db      	mvns	r3, r3
 8073cd0:	6939      	ldr	r1, [r7, #16]
 8073cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8073cd6:	4013      	ands	r3, r2
 8073cd8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8073cda:	2300      	movs	r3, #0
}
 8073cdc:	4618      	mov	r0, r3
 8073cde:	3720      	adds	r7, #32
 8073ce0:	46bd      	mov	sp, r7
 8073ce2:	bd80      	pop	{r7, pc}

08073ce4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8073ce4:	b580      	push	{r7, lr}
 8073ce6:	b086      	sub	sp, #24
 8073ce8:	af00      	add	r7, sp, #0
 8073cea:	6078      	str	r0, [r7, #4]
 8073cec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8073cee:	687b      	ldr	r3, [r7, #4]
 8073cf0:	681b      	ldr	r3, [r3, #0]
 8073cf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8073cf4:	697b      	ldr	r3, [r7, #20]
 8073cf6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8073cf8:	697b      	ldr	r3, [r7, #20]
 8073cfa:	333c      	adds	r3, #60	; 0x3c
 8073cfc:	3304      	adds	r3, #4
 8073cfe:	681b      	ldr	r3, [r3, #0]
 8073d00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8073d02:	683b      	ldr	r3, [r7, #0]
 8073d04:	015a      	lsls	r2, r3, #5
 8073d06:	693b      	ldr	r3, [r7, #16]
 8073d08:	4413      	add	r3, r2
 8073d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073d0e:	689b      	ldr	r3, [r3, #8]
 8073d10:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8073d12:	687b      	ldr	r3, [r7, #4]
 8073d14:	691b      	ldr	r3, [r3, #16]
 8073d16:	2b01      	cmp	r3, #1
 8073d18:	f040 80a0 	bne.w	8073e5c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8073d1c:	68bb      	ldr	r3, [r7, #8]
 8073d1e:	f003 0308 	and.w	r3, r3, #8
 8073d22:	2b00      	cmp	r3, #0
 8073d24:	d015      	beq.n	8073d52 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8073d26:	68fb      	ldr	r3, [r7, #12]
 8073d28:	4a72      	ldr	r2, [pc, #456]	; (8073ef4 <PCD_EP_OutXfrComplete_int+0x210>)
 8073d2a:	4293      	cmp	r3, r2
 8073d2c:	f240 80dd 	bls.w	8073eea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8073d30:	68bb      	ldr	r3, [r7, #8]
 8073d32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8073d36:	2b00      	cmp	r3, #0
 8073d38:	f000 80d7 	beq.w	8073eea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8073d3c:	683b      	ldr	r3, [r7, #0]
 8073d3e:	015a      	lsls	r2, r3, #5
 8073d40:	693b      	ldr	r3, [r7, #16]
 8073d42:	4413      	add	r3, r2
 8073d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073d48:	461a      	mov	r2, r3
 8073d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8073d4e:	6093      	str	r3, [r2, #8]
 8073d50:	e0cb      	b.n	8073eea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8073d52:	68bb      	ldr	r3, [r7, #8]
 8073d54:	f003 0320 	and.w	r3, r3, #32
 8073d58:	2b00      	cmp	r3, #0
 8073d5a:	d009      	beq.n	8073d70 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8073d5c:	683b      	ldr	r3, [r7, #0]
 8073d5e:	015a      	lsls	r2, r3, #5
 8073d60:	693b      	ldr	r3, [r7, #16]
 8073d62:	4413      	add	r3, r2
 8073d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073d68:	461a      	mov	r2, r3
 8073d6a:	2320      	movs	r3, #32
 8073d6c:	6093      	str	r3, [r2, #8]
 8073d6e:	e0bc      	b.n	8073eea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8073d70:	68bb      	ldr	r3, [r7, #8]
 8073d72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8073d76:	2b00      	cmp	r3, #0
 8073d78:	f040 80b7 	bne.w	8073eea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8073d7c:	68fb      	ldr	r3, [r7, #12]
 8073d7e:	4a5d      	ldr	r2, [pc, #372]	; (8073ef4 <PCD_EP_OutXfrComplete_int+0x210>)
 8073d80:	4293      	cmp	r3, r2
 8073d82:	d90f      	bls.n	8073da4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8073d84:	68bb      	ldr	r3, [r7, #8]
 8073d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8073d8a:	2b00      	cmp	r3, #0
 8073d8c:	d00a      	beq.n	8073da4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8073d8e:	683b      	ldr	r3, [r7, #0]
 8073d90:	015a      	lsls	r2, r3, #5
 8073d92:	693b      	ldr	r3, [r7, #16]
 8073d94:	4413      	add	r3, r2
 8073d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073d9a:	461a      	mov	r2, r3
 8073d9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8073da0:	6093      	str	r3, [r2, #8]
 8073da2:	e0a2      	b.n	8073eea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8073da4:	6879      	ldr	r1, [r7, #4]
 8073da6:	683a      	ldr	r2, [r7, #0]
 8073da8:	4613      	mov	r3, r2
 8073daa:	00db      	lsls	r3, r3, #3
 8073dac:	1a9b      	subs	r3, r3, r2
 8073dae:	009b      	lsls	r3, r3, #2
 8073db0:	440b      	add	r3, r1
 8073db2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8073db6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8073db8:	683b      	ldr	r3, [r7, #0]
 8073dba:	0159      	lsls	r1, r3, #5
 8073dbc:	693b      	ldr	r3, [r7, #16]
 8073dbe:	440b      	add	r3, r1
 8073dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073dc4:	691b      	ldr	r3, [r3, #16]
 8073dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8073dca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8073dcc:	6878      	ldr	r0, [r7, #4]
 8073dce:	683a      	ldr	r2, [r7, #0]
 8073dd0:	4613      	mov	r3, r2
 8073dd2:	00db      	lsls	r3, r3, #3
 8073dd4:	1a9b      	subs	r3, r3, r2
 8073dd6:	009b      	lsls	r3, r3, #2
 8073dd8:	4403      	add	r3, r0
 8073dda:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8073dde:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8073de0:	6879      	ldr	r1, [r7, #4]
 8073de2:	683a      	ldr	r2, [r7, #0]
 8073de4:	4613      	mov	r3, r2
 8073de6:	00db      	lsls	r3, r3, #3
 8073de8:	1a9b      	subs	r3, r3, r2
 8073dea:	009b      	lsls	r3, r3, #2
 8073dec:	440b      	add	r3, r1
 8073dee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8073df2:	6819      	ldr	r1, [r3, #0]
 8073df4:	6878      	ldr	r0, [r7, #4]
 8073df6:	683a      	ldr	r2, [r7, #0]
 8073df8:	4613      	mov	r3, r2
 8073dfa:	00db      	lsls	r3, r3, #3
 8073dfc:	1a9b      	subs	r3, r3, r2
 8073dfe:	009b      	lsls	r3, r3, #2
 8073e00:	4403      	add	r3, r0
 8073e02:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8073e06:	681b      	ldr	r3, [r3, #0]
 8073e08:	4419      	add	r1, r3
 8073e0a:	6878      	ldr	r0, [r7, #4]
 8073e0c:	683a      	ldr	r2, [r7, #0]
 8073e0e:	4613      	mov	r3, r2
 8073e10:	00db      	lsls	r3, r3, #3
 8073e12:	1a9b      	subs	r3, r3, r2
 8073e14:	009b      	lsls	r3, r3, #2
 8073e16:	4403      	add	r3, r0
 8073e18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8073e1c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8073e1e:	683b      	ldr	r3, [r7, #0]
 8073e20:	2b00      	cmp	r3, #0
 8073e22:	d114      	bne.n	8073e4e <PCD_EP_OutXfrComplete_int+0x16a>
 8073e24:	6879      	ldr	r1, [r7, #4]
 8073e26:	683a      	ldr	r2, [r7, #0]
 8073e28:	4613      	mov	r3, r2
 8073e2a:	00db      	lsls	r3, r3, #3
 8073e2c:	1a9b      	subs	r3, r3, r2
 8073e2e:	009b      	lsls	r3, r3, #2
 8073e30:	440b      	add	r3, r1
 8073e32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8073e36:	681b      	ldr	r3, [r3, #0]
 8073e38:	2b00      	cmp	r3, #0
 8073e3a:	d108      	bne.n	8073e4e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8073e3c:	687b      	ldr	r3, [r7, #4]
 8073e3e:	6818      	ldr	r0, [r3, #0]
 8073e40:	687b      	ldr	r3, [r7, #4]
 8073e42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8073e46:	461a      	mov	r2, r3
 8073e48:	2101      	movs	r1, #1
 8073e4a:	f001 fed9 	bl	8075c00 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8073e4e:	683b      	ldr	r3, [r7, #0]
 8073e50:	b2db      	uxtb	r3, r3
 8073e52:	4619      	mov	r1, r3
 8073e54:	6878      	ldr	r0, [r7, #4]
 8073e56:	f004 f93b 	bl	80780d0 <HAL_PCD_DataOutStageCallback>
 8073e5a:	e046      	b.n	8073eea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8073e5c:	68fb      	ldr	r3, [r7, #12]
 8073e5e:	4a26      	ldr	r2, [pc, #152]	; (8073ef8 <PCD_EP_OutXfrComplete_int+0x214>)
 8073e60:	4293      	cmp	r3, r2
 8073e62:	d124      	bne.n	8073eae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8073e64:	68bb      	ldr	r3, [r7, #8]
 8073e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8073e6a:	2b00      	cmp	r3, #0
 8073e6c:	d00a      	beq.n	8073e84 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8073e6e:	683b      	ldr	r3, [r7, #0]
 8073e70:	015a      	lsls	r2, r3, #5
 8073e72:	693b      	ldr	r3, [r7, #16]
 8073e74:	4413      	add	r3, r2
 8073e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073e7a:	461a      	mov	r2, r3
 8073e7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8073e80:	6093      	str	r3, [r2, #8]
 8073e82:	e032      	b.n	8073eea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8073e84:	68bb      	ldr	r3, [r7, #8]
 8073e86:	f003 0320 	and.w	r3, r3, #32
 8073e8a:	2b00      	cmp	r3, #0
 8073e8c:	d008      	beq.n	8073ea0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8073e8e:	683b      	ldr	r3, [r7, #0]
 8073e90:	015a      	lsls	r2, r3, #5
 8073e92:	693b      	ldr	r3, [r7, #16]
 8073e94:	4413      	add	r3, r2
 8073e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073e9a:	461a      	mov	r2, r3
 8073e9c:	2320      	movs	r3, #32
 8073e9e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8073ea0:	683b      	ldr	r3, [r7, #0]
 8073ea2:	b2db      	uxtb	r3, r3
 8073ea4:	4619      	mov	r1, r3
 8073ea6:	6878      	ldr	r0, [r7, #4]
 8073ea8:	f004 f912 	bl	80780d0 <HAL_PCD_DataOutStageCallback>
 8073eac:	e01d      	b.n	8073eea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8073eae:	683b      	ldr	r3, [r7, #0]
 8073eb0:	2b00      	cmp	r3, #0
 8073eb2:	d114      	bne.n	8073ede <PCD_EP_OutXfrComplete_int+0x1fa>
 8073eb4:	6879      	ldr	r1, [r7, #4]
 8073eb6:	683a      	ldr	r2, [r7, #0]
 8073eb8:	4613      	mov	r3, r2
 8073eba:	00db      	lsls	r3, r3, #3
 8073ebc:	1a9b      	subs	r3, r3, r2
 8073ebe:	009b      	lsls	r3, r3, #2
 8073ec0:	440b      	add	r3, r1
 8073ec2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8073ec6:	681b      	ldr	r3, [r3, #0]
 8073ec8:	2b00      	cmp	r3, #0
 8073eca:	d108      	bne.n	8073ede <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8073ecc:	687b      	ldr	r3, [r7, #4]
 8073ece:	6818      	ldr	r0, [r3, #0]
 8073ed0:	687b      	ldr	r3, [r7, #4]
 8073ed2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8073ed6:	461a      	mov	r2, r3
 8073ed8:	2100      	movs	r1, #0
 8073eda:	f001 fe91 	bl	8075c00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8073ede:	683b      	ldr	r3, [r7, #0]
 8073ee0:	b2db      	uxtb	r3, r3
 8073ee2:	4619      	mov	r1, r3
 8073ee4:	6878      	ldr	r0, [r7, #4]
 8073ee6:	f004 f8f3 	bl	80780d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8073eea:	2300      	movs	r3, #0
}
 8073eec:	4618      	mov	r0, r3
 8073eee:	3718      	adds	r7, #24
 8073ef0:	46bd      	mov	sp, r7
 8073ef2:	bd80      	pop	{r7, pc}
 8073ef4:	4f54300a 	.word	0x4f54300a
 8073ef8:	4f54310a 	.word	0x4f54310a

08073efc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8073efc:	b580      	push	{r7, lr}
 8073efe:	b086      	sub	sp, #24
 8073f00:	af00      	add	r7, sp, #0
 8073f02:	6078      	str	r0, [r7, #4]
 8073f04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8073f06:	687b      	ldr	r3, [r7, #4]
 8073f08:	681b      	ldr	r3, [r3, #0]
 8073f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8073f0c:	697b      	ldr	r3, [r7, #20]
 8073f0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8073f10:	697b      	ldr	r3, [r7, #20]
 8073f12:	333c      	adds	r3, #60	; 0x3c
 8073f14:	3304      	adds	r3, #4
 8073f16:	681b      	ldr	r3, [r3, #0]
 8073f18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8073f1a:	683b      	ldr	r3, [r7, #0]
 8073f1c:	015a      	lsls	r2, r3, #5
 8073f1e:	693b      	ldr	r3, [r7, #16]
 8073f20:	4413      	add	r3, r2
 8073f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073f26:	689b      	ldr	r3, [r3, #8]
 8073f28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8073f2a:	68fb      	ldr	r3, [r7, #12]
 8073f2c:	4a15      	ldr	r2, [pc, #84]	; (8073f84 <PCD_EP_OutSetupPacket_int+0x88>)
 8073f2e:	4293      	cmp	r3, r2
 8073f30:	d90e      	bls.n	8073f50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8073f32:	68bb      	ldr	r3, [r7, #8]
 8073f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8073f38:	2b00      	cmp	r3, #0
 8073f3a:	d009      	beq.n	8073f50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8073f3c:	683b      	ldr	r3, [r7, #0]
 8073f3e:	015a      	lsls	r2, r3, #5
 8073f40:	693b      	ldr	r3, [r7, #16]
 8073f42:	4413      	add	r3, r2
 8073f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8073f48:	461a      	mov	r2, r3
 8073f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8073f4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8073f50:	6878      	ldr	r0, [r7, #4]
 8073f52:	f004 f8ab 	bl	80780ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8073f56:	68fb      	ldr	r3, [r7, #12]
 8073f58:	4a0a      	ldr	r2, [pc, #40]	; (8073f84 <PCD_EP_OutSetupPacket_int+0x88>)
 8073f5a:	4293      	cmp	r3, r2
 8073f5c:	d90c      	bls.n	8073f78 <PCD_EP_OutSetupPacket_int+0x7c>
 8073f5e:	687b      	ldr	r3, [r7, #4]
 8073f60:	691b      	ldr	r3, [r3, #16]
 8073f62:	2b01      	cmp	r3, #1
 8073f64:	d108      	bne.n	8073f78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8073f66:	687b      	ldr	r3, [r7, #4]
 8073f68:	6818      	ldr	r0, [r3, #0]
 8073f6a:	687b      	ldr	r3, [r7, #4]
 8073f6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8073f70:	461a      	mov	r2, r3
 8073f72:	2101      	movs	r1, #1
 8073f74:	f001 fe44 	bl	8075c00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8073f78:	2300      	movs	r3, #0
}
 8073f7a:	4618      	mov	r0, r3
 8073f7c:	3718      	adds	r7, #24
 8073f7e:	46bd      	mov	sp, r7
 8073f80:	bd80      	pop	{r7, pc}
 8073f82:	bf00      	nop
 8073f84:	4f54300a 	.word	0x4f54300a

08073f88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8073f88:	b480      	push	{r7}
 8073f8a:	b085      	sub	sp, #20
 8073f8c:	af00      	add	r7, sp, #0
 8073f8e:	6078      	str	r0, [r7, #4]
 8073f90:	460b      	mov	r3, r1
 8073f92:	70fb      	strb	r3, [r7, #3]
 8073f94:	4613      	mov	r3, r2
 8073f96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8073f98:	687b      	ldr	r3, [r7, #4]
 8073f9a:	681b      	ldr	r3, [r3, #0]
 8073f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8073f9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8073fa0:	78fb      	ldrb	r3, [r7, #3]
 8073fa2:	2b00      	cmp	r3, #0
 8073fa4:	d107      	bne.n	8073fb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8073fa6:	883b      	ldrh	r3, [r7, #0]
 8073fa8:	0419      	lsls	r1, r3, #16
 8073faa:	687b      	ldr	r3, [r7, #4]
 8073fac:	681b      	ldr	r3, [r3, #0]
 8073fae:	68ba      	ldr	r2, [r7, #8]
 8073fb0:	430a      	orrs	r2, r1
 8073fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8073fb4:	e028      	b.n	8074008 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8073fb6:	687b      	ldr	r3, [r7, #4]
 8073fb8:	681b      	ldr	r3, [r3, #0]
 8073fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8073fbc:	0c1b      	lsrs	r3, r3, #16
 8073fbe:	68ba      	ldr	r2, [r7, #8]
 8073fc0:	4413      	add	r3, r2
 8073fc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8073fc4:	2300      	movs	r3, #0
 8073fc6:	73fb      	strb	r3, [r7, #15]
 8073fc8:	e00d      	b.n	8073fe6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8073fca:	687b      	ldr	r3, [r7, #4]
 8073fcc:	681a      	ldr	r2, [r3, #0]
 8073fce:	7bfb      	ldrb	r3, [r7, #15]
 8073fd0:	3340      	adds	r3, #64	; 0x40
 8073fd2:	009b      	lsls	r3, r3, #2
 8073fd4:	4413      	add	r3, r2
 8073fd6:	685b      	ldr	r3, [r3, #4]
 8073fd8:	0c1b      	lsrs	r3, r3, #16
 8073fda:	68ba      	ldr	r2, [r7, #8]
 8073fdc:	4413      	add	r3, r2
 8073fde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8073fe0:	7bfb      	ldrb	r3, [r7, #15]
 8073fe2:	3301      	adds	r3, #1
 8073fe4:	73fb      	strb	r3, [r7, #15]
 8073fe6:	7bfa      	ldrb	r2, [r7, #15]
 8073fe8:	78fb      	ldrb	r3, [r7, #3]
 8073fea:	3b01      	subs	r3, #1
 8073fec:	429a      	cmp	r2, r3
 8073fee:	d3ec      	bcc.n	8073fca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8073ff0:	883b      	ldrh	r3, [r7, #0]
 8073ff2:	0418      	lsls	r0, r3, #16
 8073ff4:	687b      	ldr	r3, [r7, #4]
 8073ff6:	6819      	ldr	r1, [r3, #0]
 8073ff8:	78fb      	ldrb	r3, [r7, #3]
 8073ffa:	3b01      	subs	r3, #1
 8073ffc:	68ba      	ldr	r2, [r7, #8]
 8073ffe:	4302      	orrs	r2, r0
 8074000:	3340      	adds	r3, #64	; 0x40
 8074002:	009b      	lsls	r3, r3, #2
 8074004:	440b      	add	r3, r1
 8074006:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8074008:	2300      	movs	r3, #0
}
 807400a:	4618      	mov	r0, r3
 807400c:	3714      	adds	r7, #20
 807400e:	46bd      	mov	sp, r7
 8074010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074014:	4770      	bx	lr

08074016 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8074016:	b480      	push	{r7}
 8074018:	b083      	sub	sp, #12
 807401a:	af00      	add	r7, sp, #0
 807401c:	6078      	str	r0, [r7, #4]
 807401e:	460b      	mov	r3, r1
 8074020:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8074022:	687b      	ldr	r3, [r7, #4]
 8074024:	681b      	ldr	r3, [r3, #0]
 8074026:	887a      	ldrh	r2, [r7, #2]
 8074028:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 807402a:	2300      	movs	r3, #0
}
 807402c:	4618      	mov	r0, r3
 807402e:	370c      	adds	r7, #12
 8074030:	46bd      	mov	sp, r7
 8074032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074036:	4770      	bx	lr

08074038 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8074038:	b480      	push	{r7}
 807403a:	b083      	sub	sp, #12
 807403c:	af00      	add	r7, sp, #0
 807403e:	6078      	str	r0, [r7, #4]
 8074040:	460b      	mov	r3, r1
 8074042:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8074044:	bf00      	nop
 8074046:	370c      	adds	r7, #12
 8074048:	46bd      	mov	sp, r7
 807404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807404e:	4770      	bx	lr

08074050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8074050:	b580      	push	{r7, lr}
 8074052:	b086      	sub	sp, #24
 8074054:	af00      	add	r7, sp, #0
 8074056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8074058:	687b      	ldr	r3, [r7, #4]
 807405a:	2b00      	cmp	r3, #0
 807405c:	d101      	bne.n	8074062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 807405e:	2301      	movs	r3, #1
 8074060:	e264      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8074062:	687b      	ldr	r3, [r7, #4]
 8074064:	681b      	ldr	r3, [r3, #0]
 8074066:	f003 0301 	and.w	r3, r3, #1
 807406a:	2b00      	cmp	r3, #0
 807406c:	d075      	beq.n	807415a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 807406e:	4ba3      	ldr	r3, [pc, #652]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 8074070:	689b      	ldr	r3, [r3, #8]
 8074072:	f003 030c 	and.w	r3, r3, #12
 8074076:	2b04      	cmp	r3, #4
 8074078:	d00c      	beq.n	8074094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 807407a:	4ba0      	ldr	r3, [pc, #640]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 807407c:	689b      	ldr	r3, [r3, #8]
 807407e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8074082:	2b08      	cmp	r3, #8
 8074084:	d112      	bne.n	80740ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8074086:	4b9d      	ldr	r3, [pc, #628]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 8074088:	685b      	ldr	r3, [r3, #4]
 807408a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 807408e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8074092:	d10b      	bne.n	80740ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8074094:	4b99      	ldr	r3, [pc, #612]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 8074096:	681b      	ldr	r3, [r3, #0]
 8074098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 807409c:	2b00      	cmp	r3, #0
 807409e:	d05b      	beq.n	8074158 <HAL_RCC_OscConfig+0x108>
 80740a0:	687b      	ldr	r3, [r7, #4]
 80740a2:	685b      	ldr	r3, [r3, #4]
 80740a4:	2b00      	cmp	r3, #0
 80740a6:	d157      	bne.n	8074158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80740a8:	2301      	movs	r3, #1
 80740aa:	e23f      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80740ac:	687b      	ldr	r3, [r7, #4]
 80740ae:	685b      	ldr	r3, [r3, #4]
 80740b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80740b4:	d106      	bne.n	80740c4 <HAL_RCC_OscConfig+0x74>
 80740b6:	4b91      	ldr	r3, [pc, #580]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80740b8:	681b      	ldr	r3, [r3, #0]
 80740ba:	4a90      	ldr	r2, [pc, #576]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80740bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80740c0:	6013      	str	r3, [r2, #0]
 80740c2:	e01d      	b.n	8074100 <HAL_RCC_OscConfig+0xb0>
 80740c4:	687b      	ldr	r3, [r7, #4]
 80740c6:	685b      	ldr	r3, [r3, #4]
 80740c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80740cc:	d10c      	bne.n	80740e8 <HAL_RCC_OscConfig+0x98>
 80740ce:	4b8b      	ldr	r3, [pc, #556]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80740d0:	681b      	ldr	r3, [r3, #0]
 80740d2:	4a8a      	ldr	r2, [pc, #552]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80740d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80740d8:	6013      	str	r3, [r2, #0]
 80740da:	4b88      	ldr	r3, [pc, #544]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80740dc:	681b      	ldr	r3, [r3, #0]
 80740de:	4a87      	ldr	r2, [pc, #540]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80740e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80740e4:	6013      	str	r3, [r2, #0]
 80740e6:	e00b      	b.n	8074100 <HAL_RCC_OscConfig+0xb0>
 80740e8:	4b84      	ldr	r3, [pc, #528]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80740ea:	681b      	ldr	r3, [r3, #0]
 80740ec:	4a83      	ldr	r2, [pc, #524]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80740ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80740f2:	6013      	str	r3, [r2, #0]
 80740f4:	4b81      	ldr	r3, [pc, #516]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80740f6:	681b      	ldr	r3, [r3, #0]
 80740f8:	4a80      	ldr	r2, [pc, #512]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80740fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80740fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8074100:	687b      	ldr	r3, [r7, #4]
 8074102:	685b      	ldr	r3, [r3, #4]
 8074104:	2b00      	cmp	r3, #0
 8074106:	d013      	beq.n	8074130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8074108:	f7fe fb82 	bl	8072810 <HAL_GetTick>
 807410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 807410e:	e008      	b.n	8074122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8074110:	f7fe fb7e 	bl	8072810 <HAL_GetTick>
 8074114:	4602      	mov	r2, r0
 8074116:	693b      	ldr	r3, [r7, #16]
 8074118:	1ad3      	subs	r3, r2, r3
 807411a:	2b64      	cmp	r3, #100	; 0x64
 807411c:	d901      	bls.n	8074122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 807411e:	2303      	movs	r3, #3
 8074120:	e204      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8074122:	4b76      	ldr	r3, [pc, #472]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 8074124:	681b      	ldr	r3, [r3, #0]
 8074126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 807412a:	2b00      	cmp	r3, #0
 807412c:	d0f0      	beq.n	8074110 <HAL_RCC_OscConfig+0xc0>
 807412e:	e014      	b.n	807415a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8074130:	f7fe fb6e 	bl	8072810 <HAL_GetTick>
 8074134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8074136:	e008      	b.n	807414a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8074138:	f7fe fb6a 	bl	8072810 <HAL_GetTick>
 807413c:	4602      	mov	r2, r0
 807413e:	693b      	ldr	r3, [r7, #16]
 8074140:	1ad3      	subs	r3, r2, r3
 8074142:	2b64      	cmp	r3, #100	; 0x64
 8074144:	d901      	bls.n	807414a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8074146:	2303      	movs	r3, #3
 8074148:	e1f0      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 807414a:	4b6c      	ldr	r3, [pc, #432]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 807414c:	681b      	ldr	r3, [r3, #0]
 807414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8074152:	2b00      	cmp	r3, #0
 8074154:	d1f0      	bne.n	8074138 <HAL_RCC_OscConfig+0xe8>
 8074156:	e000      	b.n	807415a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8074158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 807415a:	687b      	ldr	r3, [r7, #4]
 807415c:	681b      	ldr	r3, [r3, #0]
 807415e:	f003 0302 	and.w	r3, r3, #2
 8074162:	2b00      	cmp	r3, #0
 8074164:	d063      	beq.n	807422e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8074166:	4b65      	ldr	r3, [pc, #404]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 8074168:	689b      	ldr	r3, [r3, #8]
 807416a:	f003 030c 	and.w	r3, r3, #12
 807416e:	2b00      	cmp	r3, #0
 8074170:	d00b      	beq.n	807418a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8074172:	4b62      	ldr	r3, [pc, #392]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 8074174:	689b      	ldr	r3, [r3, #8]
 8074176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 807417a:	2b08      	cmp	r3, #8
 807417c:	d11c      	bne.n	80741b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 807417e:	4b5f      	ldr	r3, [pc, #380]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 8074180:	685b      	ldr	r3, [r3, #4]
 8074182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8074186:	2b00      	cmp	r3, #0
 8074188:	d116      	bne.n	80741b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 807418a:	4b5c      	ldr	r3, [pc, #368]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 807418c:	681b      	ldr	r3, [r3, #0]
 807418e:	f003 0302 	and.w	r3, r3, #2
 8074192:	2b00      	cmp	r3, #0
 8074194:	d005      	beq.n	80741a2 <HAL_RCC_OscConfig+0x152>
 8074196:	687b      	ldr	r3, [r7, #4]
 8074198:	68db      	ldr	r3, [r3, #12]
 807419a:	2b01      	cmp	r3, #1
 807419c:	d001      	beq.n	80741a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 807419e:	2301      	movs	r3, #1
 80741a0:	e1c4      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80741a2:	4b56      	ldr	r3, [pc, #344]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80741a4:	681b      	ldr	r3, [r3, #0]
 80741a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80741aa:	687b      	ldr	r3, [r7, #4]
 80741ac:	691b      	ldr	r3, [r3, #16]
 80741ae:	00db      	lsls	r3, r3, #3
 80741b0:	4952      	ldr	r1, [pc, #328]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80741b2:	4313      	orrs	r3, r2
 80741b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80741b6:	e03a      	b.n	807422e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80741b8:	687b      	ldr	r3, [r7, #4]
 80741ba:	68db      	ldr	r3, [r3, #12]
 80741bc:	2b00      	cmp	r3, #0
 80741be:	d020      	beq.n	8074202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80741c0:	4b4f      	ldr	r3, [pc, #316]	; (8074300 <HAL_RCC_OscConfig+0x2b0>)
 80741c2:	2201      	movs	r2, #1
 80741c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80741c6:	f7fe fb23 	bl	8072810 <HAL_GetTick>
 80741ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80741cc:	e008      	b.n	80741e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80741ce:	f7fe fb1f 	bl	8072810 <HAL_GetTick>
 80741d2:	4602      	mov	r2, r0
 80741d4:	693b      	ldr	r3, [r7, #16]
 80741d6:	1ad3      	subs	r3, r2, r3
 80741d8:	2b02      	cmp	r3, #2
 80741da:	d901      	bls.n	80741e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80741dc:	2303      	movs	r3, #3
 80741de:	e1a5      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80741e0:	4b46      	ldr	r3, [pc, #280]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80741e2:	681b      	ldr	r3, [r3, #0]
 80741e4:	f003 0302 	and.w	r3, r3, #2
 80741e8:	2b00      	cmp	r3, #0
 80741ea:	d0f0      	beq.n	80741ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80741ec:	4b43      	ldr	r3, [pc, #268]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80741ee:	681b      	ldr	r3, [r3, #0]
 80741f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80741f4:	687b      	ldr	r3, [r7, #4]
 80741f6:	691b      	ldr	r3, [r3, #16]
 80741f8:	00db      	lsls	r3, r3, #3
 80741fa:	4940      	ldr	r1, [pc, #256]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80741fc:	4313      	orrs	r3, r2
 80741fe:	600b      	str	r3, [r1, #0]
 8074200:	e015      	b.n	807422e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8074202:	4b3f      	ldr	r3, [pc, #252]	; (8074300 <HAL_RCC_OscConfig+0x2b0>)
 8074204:	2200      	movs	r2, #0
 8074206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8074208:	f7fe fb02 	bl	8072810 <HAL_GetTick>
 807420c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 807420e:	e008      	b.n	8074222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8074210:	f7fe fafe 	bl	8072810 <HAL_GetTick>
 8074214:	4602      	mov	r2, r0
 8074216:	693b      	ldr	r3, [r7, #16]
 8074218:	1ad3      	subs	r3, r2, r3
 807421a:	2b02      	cmp	r3, #2
 807421c:	d901      	bls.n	8074222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 807421e:	2303      	movs	r3, #3
 8074220:	e184      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8074222:	4b36      	ldr	r3, [pc, #216]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 8074224:	681b      	ldr	r3, [r3, #0]
 8074226:	f003 0302 	and.w	r3, r3, #2
 807422a:	2b00      	cmp	r3, #0
 807422c:	d1f0      	bne.n	8074210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 807422e:	687b      	ldr	r3, [r7, #4]
 8074230:	681b      	ldr	r3, [r3, #0]
 8074232:	f003 0308 	and.w	r3, r3, #8
 8074236:	2b00      	cmp	r3, #0
 8074238:	d030      	beq.n	807429c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 807423a:	687b      	ldr	r3, [r7, #4]
 807423c:	695b      	ldr	r3, [r3, #20]
 807423e:	2b00      	cmp	r3, #0
 8074240:	d016      	beq.n	8074270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8074242:	4b30      	ldr	r3, [pc, #192]	; (8074304 <HAL_RCC_OscConfig+0x2b4>)
 8074244:	2201      	movs	r2, #1
 8074246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8074248:	f7fe fae2 	bl	8072810 <HAL_GetTick>
 807424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 807424e:	e008      	b.n	8074262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8074250:	f7fe fade 	bl	8072810 <HAL_GetTick>
 8074254:	4602      	mov	r2, r0
 8074256:	693b      	ldr	r3, [r7, #16]
 8074258:	1ad3      	subs	r3, r2, r3
 807425a:	2b02      	cmp	r3, #2
 807425c:	d901      	bls.n	8074262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 807425e:	2303      	movs	r3, #3
 8074260:	e164      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8074262:	4b26      	ldr	r3, [pc, #152]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 8074264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8074266:	f003 0302 	and.w	r3, r3, #2
 807426a:	2b00      	cmp	r3, #0
 807426c:	d0f0      	beq.n	8074250 <HAL_RCC_OscConfig+0x200>
 807426e:	e015      	b.n	807429c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8074270:	4b24      	ldr	r3, [pc, #144]	; (8074304 <HAL_RCC_OscConfig+0x2b4>)
 8074272:	2200      	movs	r2, #0
 8074274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8074276:	f7fe facb 	bl	8072810 <HAL_GetTick>
 807427a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 807427c:	e008      	b.n	8074290 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 807427e:	f7fe fac7 	bl	8072810 <HAL_GetTick>
 8074282:	4602      	mov	r2, r0
 8074284:	693b      	ldr	r3, [r7, #16]
 8074286:	1ad3      	subs	r3, r2, r3
 8074288:	2b02      	cmp	r3, #2
 807428a:	d901      	bls.n	8074290 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 807428c:	2303      	movs	r3, #3
 807428e:	e14d      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8074290:	4b1a      	ldr	r3, [pc, #104]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 8074292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8074294:	f003 0302 	and.w	r3, r3, #2
 8074298:	2b00      	cmp	r3, #0
 807429a:	d1f0      	bne.n	807427e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 807429c:	687b      	ldr	r3, [r7, #4]
 807429e:	681b      	ldr	r3, [r3, #0]
 80742a0:	f003 0304 	and.w	r3, r3, #4
 80742a4:	2b00      	cmp	r3, #0
 80742a6:	f000 80a0 	beq.w	80743ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80742aa:	2300      	movs	r3, #0
 80742ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80742ae:	4b13      	ldr	r3, [pc, #76]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80742b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80742b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80742b6:	2b00      	cmp	r3, #0
 80742b8:	d10f      	bne.n	80742da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80742ba:	2300      	movs	r3, #0
 80742bc:	60bb      	str	r3, [r7, #8]
 80742be:	4b0f      	ldr	r3, [pc, #60]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80742c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80742c2:	4a0e      	ldr	r2, [pc, #56]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80742c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80742c8:	6413      	str	r3, [r2, #64]	; 0x40
 80742ca:	4b0c      	ldr	r3, [pc, #48]	; (80742fc <HAL_RCC_OscConfig+0x2ac>)
 80742cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80742ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80742d2:	60bb      	str	r3, [r7, #8]
 80742d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80742d6:	2301      	movs	r3, #1
 80742d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80742da:	4b0b      	ldr	r3, [pc, #44]	; (8074308 <HAL_RCC_OscConfig+0x2b8>)
 80742dc:	681b      	ldr	r3, [r3, #0]
 80742de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80742e2:	2b00      	cmp	r3, #0
 80742e4:	d121      	bne.n	807432a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80742e6:	4b08      	ldr	r3, [pc, #32]	; (8074308 <HAL_RCC_OscConfig+0x2b8>)
 80742e8:	681b      	ldr	r3, [r3, #0]
 80742ea:	4a07      	ldr	r2, [pc, #28]	; (8074308 <HAL_RCC_OscConfig+0x2b8>)
 80742ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80742f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80742f2:	f7fe fa8d 	bl	8072810 <HAL_GetTick>
 80742f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80742f8:	e011      	b.n	807431e <HAL_RCC_OscConfig+0x2ce>
 80742fa:	bf00      	nop
 80742fc:	40023800 	.word	0x40023800
 8074300:	42470000 	.word	0x42470000
 8074304:	42470e80 	.word	0x42470e80
 8074308:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 807430c:	f7fe fa80 	bl	8072810 <HAL_GetTick>
 8074310:	4602      	mov	r2, r0
 8074312:	693b      	ldr	r3, [r7, #16]
 8074314:	1ad3      	subs	r3, r2, r3
 8074316:	2b02      	cmp	r3, #2
 8074318:	d901      	bls.n	807431e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 807431a:	2303      	movs	r3, #3
 807431c:	e106      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 807431e:	4b85      	ldr	r3, [pc, #532]	; (8074534 <HAL_RCC_OscConfig+0x4e4>)
 8074320:	681b      	ldr	r3, [r3, #0]
 8074322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8074326:	2b00      	cmp	r3, #0
 8074328:	d0f0      	beq.n	807430c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 807432a:	687b      	ldr	r3, [r7, #4]
 807432c:	689b      	ldr	r3, [r3, #8]
 807432e:	2b01      	cmp	r3, #1
 8074330:	d106      	bne.n	8074340 <HAL_RCC_OscConfig+0x2f0>
 8074332:	4b81      	ldr	r3, [pc, #516]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 8074334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8074336:	4a80      	ldr	r2, [pc, #512]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 8074338:	f043 0301 	orr.w	r3, r3, #1
 807433c:	6713      	str	r3, [r2, #112]	; 0x70
 807433e:	e01c      	b.n	807437a <HAL_RCC_OscConfig+0x32a>
 8074340:	687b      	ldr	r3, [r7, #4]
 8074342:	689b      	ldr	r3, [r3, #8]
 8074344:	2b05      	cmp	r3, #5
 8074346:	d10c      	bne.n	8074362 <HAL_RCC_OscConfig+0x312>
 8074348:	4b7b      	ldr	r3, [pc, #492]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 807434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 807434c:	4a7a      	ldr	r2, [pc, #488]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 807434e:	f043 0304 	orr.w	r3, r3, #4
 8074352:	6713      	str	r3, [r2, #112]	; 0x70
 8074354:	4b78      	ldr	r3, [pc, #480]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 8074356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8074358:	4a77      	ldr	r2, [pc, #476]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 807435a:	f043 0301 	orr.w	r3, r3, #1
 807435e:	6713      	str	r3, [r2, #112]	; 0x70
 8074360:	e00b      	b.n	807437a <HAL_RCC_OscConfig+0x32a>
 8074362:	4b75      	ldr	r3, [pc, #468]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 8074364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8074366:	4a74      	ldr	r2, [pc, #464]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 8074368:	f023 0301 	bic.w	r3, r3, #1
 807436c:	6713      	str	r3, [r2, #112]	; 0x70
 807436e:	4b72      	ldr	r3, [pc, #456]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 8074370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8074372:	4a71      	ldr	r2, [pc, #452]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 8074374:	f023 0304 	bic.w	r3, r3, #4
 8074378:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 807437a:	687b      	ldr	r3, [r7, #4]
 807437c:	689b      	ldr	r3, [r3, #8]
 807437e:	2b00      	cmp	r3, #0
 8074380:	d015      	beq.n	80743ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8074382:	f7fe fa45 	bl	8072810 <HAL_GetTick>
 8074386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8074388:	e00a      	b.n	80743a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 807438a:	f7fe fa41 	bl	8072810 <HAL_GetTick>
 807438e:	4602      	mov	r2, r0
 8074390:	693b      	ldr	r3, [r7, #16]
 8074392:	1ad3      	subs	r3, r2, r3
 8074394:	f241 3288 	movw	r2, #5000	; 0x1388
 8074398:	4293      	cmp	r3, r2
 807439a:	d901      	bls.n	80743a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 807439c:	2303      	movs	r3, #3
 807439e:	e0c5      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80743a0:	4b65      	ldr	r3, [pc, #404]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 80743a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80743a4:	f003 0302 	and.w	r3, r3, #2
 80743a8:	2b00      	cmp	r3, #0
 80743aa:	d0ee      	beq.n	807438a <HAL_RCC_OscConfig+0x33a>
 80743ac:	e014      	b.n	80743d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80743ae:	f7fe fa2f 	bl	8072810 <HAL_GetTick>
 80743b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80743b4:	e00a      	b.n	80743cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80743b6:	f7fe fa2b 	bl	8072810 <HAL_GetTick>
 80743ba:	4602      	mov	r2, r0
 80743bc:	693b      	ldr	r3, [r7, #16]
 80743be:	1ad3      	subs	r3, r2, r3
 80743c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80743c4:	4293      	cmp	r3, r2
 80743c6:	d901      	bls.n	80743cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80743c8:	2303      	movs	r3, #3
 80743ca:	e0af      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80743cc:	4b5a      	ldr	r3, [pc, #360]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 80743ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80743d0:	f003 0302 	and.w	r3, r3, #2
 80743d4:	2b00      	cmp	r3, #0
 80743d6:	d1ee      	bne.n	80743b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80743d8:	7dfb      	ldrb	r3, [r7, #23]
 80743da:	2b01      	cmp	r3, #1
 80743dc:	d105      	bne.n	80743ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80743de:	4b56      	ldr	r3, [pc, #344]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 80743e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80743e2:	4a55      	ldr	r2, [pc, #340]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 80743e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80743e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80743ea:	687b      	ldr	r3, [r7, #4]
 80743ec:	699b      	ldr	r3, [r3, #24]
 80743ee:	2b00      	cmp	r3, #0
 80743f0:	f000 809b 	beq.w	807452a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80743f4:	4b50      	ldr	r3, [pc, #320]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 80743f6:	689b      	ldr	r3, [r3, #8]
 80743f8:	f003 030c 	and.w	r3, r3, #12
 80743fc:	2b08      	cmp	r3, #8
 80743fe:	d05c      	beq.n	80744ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8074400:	687b      	ldr	r3, [r7, #4]
 8074402:	699b      	ldr	r3, [r3, #24]
 8074404:	2b02      	cmp	r3, #2
 8074406:	d141      	bne.n	807448c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8074408:	4b4c      	ldr	r3, [pc, #304]	; (807453c <HAL_RCC_OscConfig+0x4ec>)
 807440a:	2200      	movs	r2, #0
 807440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 807440e:	f7fe f9ff 	bl	8072810 <HAL_GetTick>
 8074412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8074414:	e008      	b.n	8074428 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8074416:	f7fe f9fb 	bl	8072810 <HAL_GetTick>
 807441a:	4602      	mov	r2, r0
 807441c:	693b      	ldr	r3, [r7, #16]
 807441e:	1ad3      	subs	r3, r2, r3
 8074420:	2b02      	cmp	r3, #2
 8074422:	d901      	bls.n	8074428 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8074424:	2303      	movs	r3, #3
 8074426:	e081      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8074428:	4b43      	ldr	r3, [pc, #268]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 807442a:	681b      	ldr	r3, [r3, #0]
 807442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8074430:	2b00      	cmp	r3, #0
 8074432:	d1f0      	bne.n	8074416 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8074434:	687b      	ldr	r3, [r7, #4]
 8074436:	69da      	ldr	r2, [r3, #28]
 8074438:	687b      	ldr	r3, [r7, #4]
 807443a:	6a1b      	ldr	r3, [r3, #32]
 807443c:	431a      	orrs	r2, r3
 807443e:	687b      	ldr	r3, [r7, #4]
 8074440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8074442:	019b      	lsls	r3, r3, #6
 8074444:	431a      	orrs	r2, r3
 8074446:	687b      	ldr	r3, [r7, #4]
 8074448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807444a:	085b      	lsrs	r3, r3, #1
 807444c:	3b01      	subs	r3, #1
 807444e:	041b      	lsls	r3, r3, #16
 8074450:	431a      	orrs	r2, r3
 8074452:	687b      	ldr	r3, [r7, #4]
 8074454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8074456:	061b      	lsls	r3, r3, #24
 8074458:	4937      	ldr	r1, [pc, #220]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 807445a:	4313      	orrs	r3, r2
 807445c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 807445e:	4b37      	ldr	r3, [pc, #220]	; (807453c <HAL_RCC_OscConfig+0x4ec>)
 8074460:	2201      	movs	r2, #1
 8074462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8074464:	f7fe f9d4 	bl	8072810 <HAL_GetTick>
 8074468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807446a:	e008      	b.n	807447e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 807446c:	f7fe f9d0 	bl	8072810 <HAL_GetTick>
 8074470:	4602      	mov	r2, r0
 8074472:	693b      	ldr	r3, [r7, #16]
 8074474:	1ad3      	subs	r3, r2, r3
 8074476:	2b02      	cmp	r3, #2
 8074478:	d901      	bls.n	807447e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 807447a:	2303      	movs	r3, #3
 807447c:	e056      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 807447e:	4b2e      	ldr	r3, [pc, #184]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 8074480:	681b      	ldr	r3, [r3, #0]
 8074482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8074486:	2b00      	cmp	r3, #0
 8074488:	d0f0      	beq.n	807446c <HAL_RCC_OscConfig+0x41c>
 807448a:	e04e      	b.n	807452a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 807448c:	4b2b      	ldr	r3, [pc, #172]	; (807453c <HAL_RCC_OscConfig+0x4ec>)
 807448e:	2200      	movs	r2, #0
 8074490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8074492:	f7fe f9bd 	bl	8072810 <HAL_GetTick>
 8074496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8074498:	e008      	b.n	80744ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 807449a:	f7fe f9b9 	bl	8072810 <HAL_GetTick>
 807449e:	4602      	mov	r2, r0
 80744a0:	693b      	ldr	r3, [r7, #16]
 80744a2:	1ad3      	subs	r3, r2, r3
 80744a4:	2b02      	cmp	r3, #2
 80744a6:	d901      	bls.n	80744ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80744a8:	2303      	movs	r3, #3
 80744aa:	e03f      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80744ac:	4b22      	ldr	r3, [pc, #136]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 80744ae:	681b      	ldr	r3, [r3, #0]
 80744b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80744b4:	2b00      	cmp	r3, #0
 80744b6:	d1f0      	bne.n	807449a <HAL_RCC_OscConfig+0x44a>
 80744b8:	e037      	b.n	807452a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80744ba:	687b      	ldr	r3, [r7, #4]
 80744bc:	699b      	ldr	r3, [r3, #24]
 80744be:	2b01      	cmp	r3, #1
 80744c0:	d101      	bne.n	80744c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80744c2:	2301      	movs	r3, #1
 80744c4:	e032      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80744c6:	4b1c      	ldr	r3, [pc, #112]	; (8074538 <HAL_RCC_OscConfig+0x4e8>)
 80744c8:	685b      	ldr	r3, [r3, #4]
 80744ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80744cc:	687b      	ldr	r3, [r7, #4]
 80744ce:	699b      	ldr	r3, [r3, #24]
 80744d0:	2b01      	cmp	r3, #1
 80744d2:	d028      	beq.n	8074526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80744d4:	68fb      	ldr	r3, [r7, #12]
 80744d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80744da:	687b      	ldr	r3, [r7, #4]
 80744dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80744de:	429a      	cmp	r2, r3
 80744e0:	d121      	bne.n	8074526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80744e2:	68fb      	ldr	r3, [r7, #12]
 80744e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80744e8:	687b      	ldr	r3, [r7, #4]
 80744ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80744ec:	429a      	cmp	r2, r3
 80744ee:	d11a      	bne.n	8074526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80744f0:	68fa      	ldr	r2, [r7, #12]
 80744f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80744f6:	4013      	ands	r3, r2
 80744f8:	687a      	ldr	r2, [r7, #4]
 80744fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80744fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80744fe:	4293      	cmp	r3, r2
 8074500:	d111      	bne.n	8074526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8074502:	68fb      	ldr	r3, [r7, #12]
 8074504:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8074508:	687b      	ldr	r3, [r7, #4]
 807450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 807450c:	085b      	lsrs	r3, r3, #1
 807450e:	3b01      	subs	r3, #1
 8074510:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8074512:	429a      	cmp	r2, r3
 8074514:	d107      	bne.n	8074526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8074516:	68fb      	ldr	r3, [r7, #12]
 8074518:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 807451c:	687b      	ldr	r3, [r7, #4]
 807451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8074520:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8074522:	429a      	cmp	r2, r3
 8074524:	d001      	beq.n	807452a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8074526:	2301      	movs	r3, #1
 8074528:	e000      	b.n	807452c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 807452a:	2300      	movs	r3, #0
}
 807452c:	4618      	mov	r0, r3
 807452e:	3718      	adds	r7, #24
 8074530:	46bd      	mov	sp, r7
 8074532:	bd80      	pop	{r7, pc}
 8074534:	40007000 	.word	0x40007000
 8074538:	40023800 	.word	0x40023800
 807453c:	42470060 	.word	0x42470060

08074540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8074540:	b580      	push	{r7, lr}
 8074542:	b084      	sub	sp, #16
 8074544:	af00      	add	r7, sp, #0
 8074546:	6078      	str	r0, [r7, #4]
 8074548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 807454a:	687b      	ldr	r3, [r7, #4]
 807454c:	2b00      	cmp	r3, #0
 807454e:	d101      	bne.n	8074554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8074550:	2301      	movs	r3, #1
 8074552:	e0cc      	b.n	80746ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8074554:	4b68      	ldr	r3, [pc, #416]	; (80746f8 <HAL_RCC_ClockConfig+0x1b8>)
 8074556:	681b      	ldr	r3, [r3, #0]
 8074558:	f003 0307 	and.w	r3, r3, #7
 807455c:	683a      	ldr	r2, [r7, #0]
 807455e:	429a      	cmp	r2, r3
 8074560:	d90c      	bls.n	807457c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8074562:	4b65      	ldr	r3, [pc, #404]	; (80746f8 <HAL_RCC_ClockConfig+0x1b8>)
 8074564:	683a      	ldr	r2, [r7, #0]
 8074566:	b2d2      	uxtb	r2, r2
 8074568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 807456a:	4b63      	ldr	r3, [pc, #396]	; (80746f8 <HAL_RCC_ClockConfig+0x1b8>)
 807456c:	681b      	ldr	r3, [r3, #0]
 807456e:	f003 0307 	and.w	r3, r3, #7
 8074572:	683a      	ldr	r2, [r7, #0]
 8074574:	429a      	cmp	r2, r3
 8074576:	d001      	beq.n	807457c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8074578:	2301      	movs	r3, #1
 807457a:	e0b8      	b.n	80746ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 807457c:	687b      	ldr	r3, [r7, #4]
 807457e:	681b      	ldr	r3, [r3, #0]
 8074580:	f003 0302 	and.w	r3, r3, #2
 8074584:	2b00      	cmp	r3, #0
 8074586:	d020      	beq.n	80745ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8074588:	687b      	ldr	r3, [r7, #4]
 807458a:	681b      	ldr	r3, [r3, #0]
 807458c:	f003 0304 	and.w	r3, r3, #4
 8074590:	2b00      	cmp	r3, #0
 8074592:	d005      	beq.n	80745a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8074594:	4b59      	ldr	r3, [pc, #356]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 8074596:	689b      	ldr	r3, [r3, #8]
 8074598:	4a58      	ldr	r2, [pc, #352]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 807459a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 807459e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80745a0:	687b      	ldr	r3, [r7, #4]
 80745a2:	681b      	ldr	r3, [r3, #0]
 80745a4:	f003 0308 	and.w	r3, r3, #8
 80745a8:	2b00      	cmp	r3, #0
 80745aa:	d005      	beq.n	80745b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80745ac:	4b53      	ldr	r3, [pc, #332]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 80745ae:	689b      	ldr	r3, [r3, #8]
 80745b0:	4a52      	ldr	r2, [pc, #328]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 80745b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80745b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80745b8:	4b50      	ldr	r3, [pc, #320]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 80745ba:	689b      	ldr	r3, [r3, #8]
 80745bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80745c0:	687b      	ldr	r3, [r7, #4]
 80745c2:	689b      	ldr	r3, [r3, #8]
 80745c4:	494d      	ldr	r1, [pc, #308]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 80745c6:	4313      	orrs	r3, r2
 80745c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80745ca:	687b      	ldr	r3, [r7, #4]
 80745cc:	681b      	ldr	r3, [r3, #0]
 80745ce:	f003 0301 	and.w	r3, r3, #1
 80745d2:	2b00      	cmp	r3, #0
 80745d4:	d044      	beq.n	8074660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80745d6:	687b      	ldr	r3, [r7, #4]
 80745d8:	685b      	ldr	r3, [r3, #4]
 80745da:	2b01      	cmp	r3, #1
 80745dc:	d107      	bne.n	80745ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80745de:	4b47      	ldr	r3, [pc, #284]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 80745e0:	681b      	ldr	r3, [r3, #0]
 80745e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80745e6:	2b00      	cmp	r3, #0
 80745e8:	d119      	bne.n	807461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80745ea:	2301      	movs	r3, #1
 80745ec:	e07f      	b.n	80746ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80745ee:	687b      	ldr	r3, [r7, #4]
 80745f0:	685b      	ldr	r3, [r3, #4]
 80745f2:	2b02      	cmp	r3, #2
 80745f4:	d003      	beq.n	80745fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80745f6:	687b      	ldr	r3, [r7, #4]
 80745f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80745fa:	2b03      	cmp	r3, #3
 80745fc:	d107      	bne.n	807460e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80745fe:	4b3f      	ldr	r3, [pc, #252]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 8074600:	681b      	ldr	r3, [r3, #0]
 8074602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8074606:	2b00      	cmp	r3, #0
 8074608:	d109      	bne.n	807461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807460a:	2301      	movs	r3, #1
 807460c:	e06f      	b.n	80746ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 807460e:	4b3b      	ldr	r3, [pc, #236]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 8074610:	681b      	ldr	r3, [r3, #0]
 8074612:	f003 0302 	and.w	r3, r3, #2
 8074616:	2b00      	cmp	r3, #0
 8074618:	d101      	bne.n	807461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 807461a:	2301      	movs	r3, #1
 807461c:	e067      	b.n	80746ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 807461e:	4b37      	ldr	r3, [pc, #220]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 8074620:	689b      	ldr	r3, [r3, #8]
 8074622:	f023 0203 	bic.w	r2, r3, #3
 8074626:	687b      	ldr	r3, [r7, #4]
 8074628:	685b      	ldr	r3, [r3, #4]
 807462a:	4934      	ldr	r1, [pc, #208]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 807462c:	4313      	orrs	r3, r2
 807462e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8074630:	f7fe f8ee 	bl	8072810 <HAL_GetTick>
 8074634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8074636:	e00a      	b.n	807464e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8074638:	f7fe f8ea 	bl	8072810 <HAL_GetTick>
 807463c:	4602      	mov	r2, r0
 807463e:	68fb      	ldr	r3, [r7, #12]
 8074640:	1ad3      	subs	r3, r2, r3
 8074642:	f241 3288 	movw	r2, #5000	; 0x1388
 8074646:	4293      	cmp	r3, r2
 8074648:	d901      	bls.n	807464e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 807464a:	2303      	movs	r3, #3
 807464c:	e04f      	b.n	80746ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 807464e:	4b2b      	ldr	r3, [pc, #172]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 8074650:	689b      	ldr	r3, [r3, #8]
 8074652:	f003 020c 	and.w	r2, r3, #12
 8074656:	687b      	ldr	r3, [r7, #4]
 8074658:	685b      	ldr	r3, [r3, #4]
 807465a:	009b      	lsls	r3, r3, #2
 807465c:	429a      	cmp	r2, r3
 807465e:	d1eb      	bne.n	8074638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8074660:	4b25      	ldr	r3, [pc, #148]	; (80746f8 <HAL_RCC_ClockConfig+0x1b8>)
 8074662:	681b      	ldr	r3, [r3, #0]
 8074664:	f003 0307 	and.w	r3, r3, #7
 8074668:	683a      	ldr	r2, [r7, #0]
 807466a:	429a      	cmp	r2, r3
 807466c:	d20c      	bcs.n	8074688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 807466e:	4b22      	ldr	r3, [pc, #136]	; (80746f8 <HAL_RCC_ClockConfig+0x1b8>)
 8074670:	683a      	ldr	r2, [r7, #0]
 8074672:	b2d2      	uxtb	r2, r2
 8074674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8074676:	4b20      	ldr	r3, [pc, #128]	; (80746f8 <HAL_RCC_ClockConfig+0x1b8>)
 8074678:	681b      	ldr	r3, [r3, #0]
 807467a:	f003 0307 	and.w	r3, r3, #7
 807467e:	683a      	ldr	r2, [r7, #0]
 8074680:	429a      	cmp	r2, r3
 8074682:	d001      	beq.n	8074688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8074684:	2301      	movs	r3, #1
 8074686:	e032      	b.n	80746ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8074688:	687b      	ldr	r3, [r7, #4]
 807468a:	681b      	ldr	r3, [r3, #0]
 807468c:	f003 0304 	and.w	r3, r3, #4
 8074690:	2b00      	cmp	r3, #0
 8074692:	d008      	beq.n	80746a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8074694:	4b19      	ldr	r3, [pc, #100]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 8074696:	689b      	ldr	r3, [r3, #8]
 8074698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 807469c:	687b      	ldr	r3, [r7, #4]
 807469e:	68db      	ldr	r3, [r3, #12]
 80746a0:	4916      	ldr	r1, [pc, #88]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 80746a2:	4313      	orrs	r3, r2
 80746a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80746a6:	687b      	ldr	r3, [r7, #4]
 80746a8:	681b      	ldr	r3, [r3, #0]
 80746aa:	f003 0308 	and.w	r3, r3, #8
 80746ae:	2b00      	cmp	r3, #0
 80746b0:	d009      	beq.n	80746c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80746b2:	4b12      	ldr	r3, [pc, #72]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 80746b4:	689b      	ldr	r3, [r3, #8]
 80746b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80746ba:	687b      	ldr	r3, [r7, #4]
 80746bc:	691b      	ldr	r3, [r3, #16]
 80746be:	00db      	lsls	r3, r3, #3
 80746c0:	490e      	ldr	r1, [pc, #56]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 80746c2:	4313      	orrs	r3, r2
 80746c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80746c6:	f000 f821 	bl	807470c <HAL_RCC_GetSysClockFreq>
 80746ca:	4602      	mov	r2, r0
 80746cc:	4b0b      	ldr	r3, [pc, #44]	; (80746fc <HAL_RCC_ClockConfig+0x1bc>)
 80746ce:	689b      	ldr	r3, [r3, #8]
 80746d0:	091b      	lsrs	r3, r3, #4
 80746d2:	f003 030f 	and.w	r3, r3, #15
 80746d6:	490a      	ldr	r1, [pc, #40]	; (8074700 <HAL_RCC_ClockConfig+0x1c0>)
 80746d8:	5ccb      	ldrb	r3, [r1, r3]
 80746da:	fa22 f303 	lsr.w	r3, r2, r3
 80746de:	4a09      	ldr	r2, [pc, #36]	; (8074704 <HAL_RCC_ClockConfig+0x1c4>)
 80746e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80746e2:	4b09      	ldr	r3, [pc, #36]	; (8074708 <HAL_RCC_ClockConfig+0x1c8>)
 80746e4:	681b      	ldr	r3, [r3, #0]
 80746e6:	4618      	mov	r0, r3
 80746e8:	f7fe f84e 	bl	8072788 <HAL_InitTick>

  return HAL_OK;
 80746ec:	2300      	movs	r3, #0
}
 80746ee:	4618      	mov	r0, r3
 80746f0:	3710      	adds	r7, #16
 80746f2:	46bd      	mov	sp, r7
 80746f4:	bd80      	pop	{r7, pc}
 80746f6:	bf00      	nop
 80746f8:	40023c00 	.word	0x40023c00
 80746fc:	40023800 	.word	0x40023800
 8074700:	08078704 	.word	0x08078704
 8074704:	20000000 	.word	0x20000000
 8074708:	20000004 	.word	0x20000004

0807470c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 807470c:	b5b0      	push	{r4, r5, r7, lr}
 807470e:	b084      	sub	sp, #16
 8074710:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8074712:	2100      	movs	r1, #0
 8074714:	6079      	str	r1, [r7, #4]
 8074716:	2100      	movs	r1, #0
 8074718:	60f9      	str	r1, [r7, #12]
 807471a:	2100      	movs	r1, #0
 807471c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 807471e:	2100      	movs	r1, #0
 8074720:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8074722:	4952      	ldr	r1, [pc, #328]	; (807486c <HAL_RCC_GetSysClockFreq+0x160>)
 8074724:	6889      	ldr	r1, [r1, #8]
 8074726:	f001 010c 	and.w	r1, r1, #12
 807472a:	2908      	cmp	r1, #8
 807472c:	d00d      	beq.n	807474a <HAL_RCC_GetSysClockFreq+0x3e>
 807472e:	2908      	cmp	r1, #8
 8074730:	f200 8094 	bhi.w	807485c <HAL_RCC_GetSysClockFreq+0x150>
 8074734:	2900      	cmp	r1, #0
 8074736:	d002      	beq.n	807473e <HAL_RCC_GetSysClockFreq+0x32>
 8074738:	2904      	cmp	r1, #4
 807473a:	d003      	beq.n	8074744 <HAL_RCC_GetSysClockFreq+0x38>
 807473c:	e08e      	b.n	807485c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 807473e:	4b4c      	ldr	r3, [pc, #304]	; (8074870 <HAL_RCC_GetSysClockFreq+0x164>)
 8074740:	60bb      	str	r3, [r7, #8]
       break;
 8074742:	e08e      	b.n	8074862 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8074744:	4b4b      	ldr	r3, [pc, #300]	; (8074874 <HAL_RCC_GetSysClockFreq+0x168>)
 8074746:	60bb      	str	r3, [r7, #8]
      break;
 8074748:	e08b      	b.n	8074862 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 807474a:	4948      	ldr	r1, [pc, #288]	; (807486c <HAL_RCC_GetSysClockFreq+0x160>)
 807474c:	6849      	ldr	r1, [r1, #4]
 807474e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8074752:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8074754:	4945      	ldr	r1, [pc, #276]	; (807486c <HAL_RCC_GetSysClockFreq+0x160>)
 8074756:	6849      	ldr	r1, [r1, #4]
 8074758:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 807475c:	2900      	cmp	r1, #0
 807475e:	d024      	beq.n	80747aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8074760:	4942      	ldr	r1, [pc, #264]	; (807486c <HAL_RCC_GetSysClockFreq+0x160>)
 8074762:	6849      	ldr	r1, [r1, #4]
 8074764:	0989      	lsrs	r1, r1, #6
 8074766:	4608      	mov	r0, r1
 8074768:	f04f 0100 	mov.w	r1, #0
 807476c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8074770:	f04f 0500 	mov.w	r5, #0
 8074774:	ea00 0204 	and.w	r2, r0, r4
 8074778:	ea01 0305 	and.w	r3, r1, r5
 807477c:	493d      	ldr	r1, [pc, #244]	; (8074874 <HAL_RCC_GetSysClockFreq+0x168>)
 807477e:	fb01 f003 	mul.w	r0, r1, r3
 8074782:	2100      	movs	r1, #0
 8074784:	fb01 f102 	mul.w	r1, r1, r2
 8074788:	1844      	adds	r4, r0, r1
 807478a:	493a      	ldr	r1, [pc, #232]	; (8074874 <HAL_RCC_GetSysClockFreq+0x168>)
 807478c:	fba2 0101 	umull	r0, r1, r2, r1
 8074790:	1863      	adds	r3, r4, r1
 8074792:	4619      	mov	r1, r3
 8074794:	687b      	ldr	r3, [r7, #4]
 8074796:	461a      	mov	r2, r3
 8074798:	f04f 0300 	mov.w	r3, #0
 807479c:	f7fd fd1c 	bl	80721d8 <__aeabi_uldivmod>
 80747a0:	4602      	mov	r2, r0
 80747a2:	460b      	mov	r3, r1
 80747a4:	4613      	mov	r3, r2
 80747a6:	60fb      	str	r3, [r7, #12]
 80747a8:	e04a      	b.n	8074840 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80747aa:	4b30      	ldr	r3, [pc, #192]	; (807486c <HAL_RCC_GetSysClockFreq+0x160>)
 80747ac:	685b      	ldr	r3, [r3, #4]
 80747ae:	099b      	lsrs	r3, r3, #6
 80747b0:	461a      	mov	r2, r3
 80747b2:	f04f 0300 	mov.w	r3, #0
 80747b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80747ba:	f04f 0100 	mov.w	r1, #0
 80747be:	ea02 0400 	and.w	r4, r2, r0
 80747c2:	ea03 0501 	and.w	r5, r3, r1
 80747c6:	4620      	mov	r0, r4
 80747c8:	4629      	mov	r1, r5
 80747ca:	f04f 0200 	mov.w	r2, #0
 80747ce:	f04f 0300 	mov.w	r3, #0
 80747d2:	014b      	lsls	r3, r1, #5
 80747d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80747d8:	0142      	lsls	r2, r0, #5
 80747da:	4610      	mov	r0, r2
 80747dc:	4619      	mov	r1, r3
 80747de:	1b00      	subs	r0, r0, r4
 80747e0:	eb61 0105 	sbc.w	r1, r1, r5
 80747e4:	f04f 0200 	mov.w	r2, #0
 80747e8:	f04f 0300 	mov.w	r3, #0
 80747ec:	018b      	lsls	r3, r1, #6
 80747ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80747f2:	0182      	lsls	r2, r0, #6
 80747f4:	1a12      	subs	r2, r2, r0
 80747f6:	eb63 0301 	sbc.w	r3, r3, r1
 80747fa:	f04f 0000 	mov.w	r0, #0
 80747fe:	f04f 0100 	mov.w	r1, #0
 8074802:	00d9      	lsls	r1, r3, #3
 8074804:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8074808:	00d0      	lsls	r0, r2, #3
 807480a:	4602      	mov	r2, r0
 807480c:	460b      	mov	r3, r1
 807480e:	1912      	adds	r2, r2, r4
 8074810:	eb45 0303 	adc.w	r3, r5, r3
 8074814:	f04f 0000 	mov.w	r0, #0
 8074818:	f04f 0100 	mov.w	r1, #0
 807481c:	0299      	lsls	r1, r3, #10
 807481e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8074822:	0290      	lsls	r0, r2, #10
 8074824:	4602      	mov	r2, r0
 8074826:	460b      	mov	r3, r1
 8074828:	4610      	mov	r0, r2
 807482a:	4619      	mov	r1, r3
 807482c:	687b      	ldr	r3, [r7, #4]
 807482e:	461a      	mov	r2, r3
 8074830:	f04f 0300 	mov.w	r3, #0
 8074834:	f7fd fcd0 	bl	80721d8 <__aeabi_uldivmod>
 8074838:	4602      	mov	r2, r0
 807483a:	460b      	mov	r3, r1
 807483c:	4613      	mov	r3, r2
 807483e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8074840:	4b0a      	ldr	r3, [pc, #40]	; (807486c <HAL_RCC_GetSysClockFreq+0x160>)
 8074842:	685b      	ldr	r3, [r3, #4]
 8074844:	0c1b      	lsrs	r3, r3, #16
 8074846:	f003 0303 	and.w	r3, r3, #3
 807484a:	3301      	adds	r3, #1
 807484c:	005b      	lsls	r3, r3, #1
 807484e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8074850:	68fa      	ldr	r2, [r7, #12]
 8074852:	683b      	ldr	r3, [r7, #0]
 8074854:	fbb2 f3f3 	udiv	r3, r2, r3
 8074858:	60bb      	str	r3, [r7, #8]
      break;
 807485a:	e002      	b.n	8074862 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 807485c:	4b04      	ldr	r3, [pc, #16]	; (8074870 <HAL_RCC_GetSysClockFreq+0x164>)
 807485e:	60bb      	str	r3, [r7, #8]
      break;
 8074860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8074862:	68bb      	ldr	r3, [r7, #8]
}
 8074864:	4618      	mov	r0, r3
 8074866:	3710      	adds	r7, #16
 8074868:	46bd      	mov	sp, r7
 807486a:	bdb0      	pop	{r4, r5, r7, pc}
 807486c:	40023800 	.word	0x40023800
 8074870:	00f42400 	.word	0x00f42400
 8074874:	017d7840 	.word	0x017d7840

08074878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8074878:	b480      	push	{r7}
 807487a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 807487c:	4b03      	ldr	r3, [pc, #12]	; (807488c <HAL_RCC_GetHCLKFreq+0x14>)
 807487e:	681b      	ldr	r3, [r3, #0]
}
 8074880:	4618      	mov	r0, r3
 8074882:	46bd      	mov	sp, r7
 8074884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074888:	4770      	bx	lr
 807488a:	bf00      	nop
 807488c:	20000000 	.word	0x20000000

08074890 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8074890:	b084      	sub	sp, #16
 8074892:	b580      	push	{r7, lr}
 8074894:	b084      	sub	sp, #16
 8074896:	af00      	add	r7, sp, #0
 8074898:	6078      	str	r0, [r7, #4]
 807489a:	f107 001c 	add.w	r0, r7, #28
 807489e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80748a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80748a4:	2b01      	cmp	r3, #1
 80748a6:	d122      	bne.n	80748ee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80748a8:	687b      	ldr	r3, [r7, #4]
 80748aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80748ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80748b0:	687b      	ldr	r3, [r7, #4]
 80748b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80748b4:	687b      	ldr	r3, [r7, #4]
 80748b6:	68db      	ldr	r3, [r3, #12]
 80748b8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80748bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80748c0:	687a      	ldr	r2, [r7, #4]
 80748c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80748c4:	687b      	ldr	r3, [r7, #4]
 80748c6:	68db      	ldr	r3, [r3, #12]
 80748c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80748cc:	687b      	ldr	r3, [r7, #4]
 80748ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80748d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80748d2:	2b01      	cmp	r3, #1
 80748d4:	d105      	bne.n	80748e2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80748d6:	687b      	ldr	r3, [r7, #4]
 80748d8:	68db      	ldr	r3, [r3, #12]
 80748da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80748de:	687b      	ldr	r3, [r7, #4]
 80748e0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80748e2:	6878      	ldr	r0, [r7, #4]
 80748e4:	f001 f9ea 	bl	8075cbc <USB_CoreReset>
 80748e8:	4603      	mov	r3, r0
 80748ea:	73fb      	strb	r3, [r7, #15]
 80748ec:	e01a      	b.n	8074924 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80748ee:	687b      	ldr	r3, [r7, #4]
 80748f0:	68db      	ldr	r3, [r3, #12]
 80748f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80748f6:	687b      	ldr	r3, [r7, #4]
 80748f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80748fa:	6878      	ldr	r0, [r7, #4]
 80748fc:	f001 f9de 	bl	8075cbc <USB_CoreReset>
 8074900:	4603      	mov	r3, r0
 8074902:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8074904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8074906:	2b00      	cmp	r3, #0
 8074908:	d106      	bne.n	8074918 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 807490a:	687b      	ldr	r3, [r7, #4]
 807490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807490e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8074912:	687b      	ldr	r3, [r7, #4]
 8074914:	639a      	str	r2, [r3, #56]	; 0x38
 8074916:	e005      	b.n	8074924 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8074918:	687b      	ldr	r3, [r7, #4]
 807491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 807491c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8074920:	687b      	ldr	r3, [r7, #4]
 8074922:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8074924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8074926:	2b01      	cmp	r3, #1
 8074928:	d10b      	bne.n	8074942 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 807492a:	687b      	ldr	r3, [r7, #4]
 807492c:	689b      	ldr	r3, [r3, #8]
 807492e:	f043 0206 	orr.w	r2, r3, #6
 8074932:	687b      	ldr	r3, [r7, #4]
 8074934:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8074936:	687b      	ldr	r3, [r7, #4]
 8074938:	689b      	ldr	r3, [r3, #8]
 807493a:	f043 0220 	orr.w	r2, r3, #32
 807493e:	687b      	ldr	r3, [r7, #4]
 8074940:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8074942:	7bfb      	ldrb	r3, [r7, #15]
}
 8074944:	4618      	mov	r0, r3
 8074946:	3710      	adds	r7, #16
 8074948:	46bd      	mov	sp, r7
 807494a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 807494e:	b004      	add	sp, #16
 8074950:	4770      	bx	lr
	...

08074954 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8074954:	b480      	push	{r7}
 8074956:	b087      	sub	sp, #28
 8074958:	af00      	add	r7, sp, #0
 807495a:	60f8      	str	r0, [r7, #12]
 807495c:	60b9      	str	r1, [r7, #8]
 807495e:	4613      	mov	r3, r2
 8074960:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8074962:	79fb      	ldrb	r3, [r7, #7]
 8074964:	2b02      	cmp	r3, #2
 8074966:	d165      	bne.n	8074a34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8074968:	68bb      	ldr	r3, [r7, #8]
 807496a:	4a41      	ldr	r2, [pc, #260]	; (8074a70 <USB_SetTurnaroundTime+0x11c>)
 807496c:	4293      	cmp	r3, r2
 807496e:	d906      	bls.n	807497e <USB_SetTurnaroundTime+0x2a>
 8074970:	68bb      	ldr	r3, [r7, #8]
 8074972:	4a40      	ldr	r2, [pc, #256]	; (8074a74 <USB_SetTurnaroundTime+0x120>)
 8074974:	4293      	cmp	r3, r2
 8074976:	d202      	bcs.n	807497e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8074978:	230f      	movs	r3, #15
 807497a:	617b      	str	r3, [r7, #20]
 807497c:	e062      	b.n	8074a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 807497e:	68bb      	ldr	r3, [r7, #8]
 8074980:	4a3c      	ldr	r2, [pc, #240]	; (8074a74 <USB_SetTurnaroundTime+0x120>)
 8074982:	4293      	cmp	r3, r2
 8074984:	d306      	bcc.n	8074994 <USB_SetTurnaroundTime+0x40>
 8074986:	68bb      	ldr	r3, [r7, #8]
 8074988:	4a3b      	ldr	r2, [pc, #236]	; (8074a78 <USB_SetTurnaroundTime+0x124>)
 807498a:	4293      	cmp	r3, r2
 807498c:	d202      	bcs.n	8074994 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 807498e:	230e      	movs	r3, #14
 8074990:	617b      	str	r3, [r7, #20]
 8074992:	e057      	b.n	8074a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8074994:	68bb      	ldr	r3, [r7, #8]
 8074996:	4a38      	ldr	r2, [pc, #224]	; (8074a78 <USB_SetTurnaroundTime+0x124>)
 8074998:	4293      	cmp	r3, r2
 807499a:	d306      	bcc.n	80749aa <USB_SetTurnaroundTime+0x56>
 807499c:	68bb      	ldr	r3, [r7, #8]
 807499e:	4a37      	ldr	r2, [pc, #220]	; (8074a7c <USB_SetTurnaroundTime+0x128>)
 80749a0:	4293      	cmp	r3, r2
 80749a2:	d202      	bcs.n	80749aa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80749a4:	230d      	movs	r3, #13
 80749a6:	617b      	str	r3, [r7, #20]
 80749a8:	e04c      	b.n	8074a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80749aa:	68bb      	ldr	r3, [r7, #8]
 80749ac:	4a33      	ldr	r2, [pc, #204]	; (8074a7c <USB_SetTurnaroundTime+0x128>)
 80749ae:	4293      	cmp	r3, r2
 80749b0:	d306      	bcc.n	80749c0 <USB_SetTurnaroundTime+0x6c>
 80749b2:	68bb      	ldr	r3, [r7, #8]
 80749b4:	4a32      	ldr	r2, [pc, #200]	; (8074a80 <USB_SetTurnaroundTime+0x12c>)
 80749b6:	4293      	cmp	r3, r2
 80749b8:	d802      	bhi.n	80749c0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80749ba:	230c      	movs	r3, #12
 80749bc:	617b      	str	r3, [r7, #20]
 80749be:	e041      	b.n	8074a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80749c0:	68bb      	ldr	r3, [r7, #8]
 80749c2:	4a2f      	ldr	r2, [pc, #188]	; (8074a80 <USB_SetTurnaroundTime+0x12c>)
 80749c4:	4293      	cmp	r3, r2
 80749c6:	d906      	bls.n	80749d6 <USB_SetTurnaroundTime+0x82>
 80749c8:	68bb      	ldr	r3, [r7, #8]
 80749ca:	4a2e      	ldr	r2, [pc, #184]	; (8074a84 <USB_SetTurnaroundTime+0x130>)
 80749cc:	4293      	cmp	r3, r2
 80749ce:	d802      	bhi.n	80749d6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80749d0:	230b      	movs	r3, #11
 80749d2:	617b      	str	r3, [r7, #20]
 80749d4:	e036      	b.n	8074a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80749d6:	68bb      	ldr	r3, [r7, #8]
 80749d8:	4a2a      	ldr	r2, [pc, #168]	; (8074a84 <USB_SetTurnaroundTime+0x130>)
 80749da:	4293      	cmp	r3, r2
 80749dc:	d906      	bls.n	80749ec <USB_SetTurnaroundTime+0x98>
 80749de:	68bb      	ldr	r3, [r7, #8]
 80749e0:	4a29      	ldr	r2, [pc, #164]	; (8074a88 <USB_SetTurnaroundTime+0x134>)
 80749e2:	4293      	cmp	r3, r2
 80749e4:	d802      	bhi.n	80749ec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80749e6:	230a      	movs	r3, #10
 80749e8:	617b      	str	r3, [r7, #20]
 80749ea:	e02b      	b.n	8074a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80749ec:	68bb      	ldr	r3, [r7, #8]
 80749ee:	4a26      	ldr	r2, [pc, #152]	; (8074a88 <USB_SetTurnaroundTime+0x134>)
 80749f0:	4293      	cmp	r3, r2
 80749f2:	d906      	bls.n	8074a02 <USB_SetTurnaroundTime+0xae>
 80749f4:	68bb      	ldr	r3, [r7, #8]
 80749f6:	4a25      	ldr	r2, [pc, #148]	; (8074a8c <USB_SetTurnaroundTime+0x138>)
 80749f8:	4293      	cmp	r3, r2
 80749fa:	d202      	bcs.n	8074a02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80749fc:	2309      	movs	r3, #9
 80749fe:	617b      	str	r3, [r7, #20]
 8074a00:	e020      	b.n	8074a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8074a02:	68bb      	ldr	r3, [r7, #8]
 8074a04:	4a21      	ldr	r2, [pc, #132]	; (8074a8c <USB_SetTurnaroundTime+0x138>)
 8074a06:	4293      	cmp	r3, r2
 8074a08:	d306      	bcc.n	8074a18 <USB_SetTurnaroundTime+0xc4>
 8074a0a:	68bb      	ldr	r3, [r7, #8]
 8074a0c:	4a20      	ldr	r2, [pc, #128]	; (8074a90 <USB_SetTurnaroundTime+0x13c>)
 8074a0e:	4293      	cmp	r3, r2
 8074a10:	d802      	bhi.n	8074a18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8074a12:	2308      	movs	r3, #8
 8074a14:	617b      	str	r3, [r7, #20]
 8074a16:	e015      	b.n	8074a44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8074a18:	68bb      	ldr	r3, [r7, #8]
 8074a1a:	4a1d      	ldr	r2, [pc, #116]	; (8074a90 <USB_SetTurnaroundTime+0x13c>)
 8074a1c:	4293      	cmp	r3, r2
 8074a1e:	d906      	bls.n	8074a2e <USB_SetTurnaroundTime+0xda>
 8074a20:	68bb      	ldr	r3, [r7, #8]
 8074a22:	4a1c      	ldr	r2, [pc, #112]	; (8074a94 <USB_SetTurnaroundTime+0x140>)
 8074a24:	4293      	cmp	r3, r2
 8074a26:	d202      	bcs.n	8074a2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8074a28:	2307      	movs	r3, #7
 8074a2a:	617b      	str	r3, [r7, #20]
 8074a2c:	e00a      	b.n	8074a44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8074a2e:	2306      	movs	r3, #6
 8074a30:	617b      	str	r3, [r7, #20]
 8074a32:	e007      	b.n	8074a44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8074a34:	79fb      	ldrb	r3, [r7, #7]
 8074a36:	2b00      	cmp	r3, #0
 8074a38:	d102      	bne.n	8074a40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8074a3a:	2309      	movs	r3, #9
 8074a3c:	617b      	str	r3, [r7, #20]
 8074a3e:	e001      	b.n	8074a44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8074a40:	2309      	movs	r3, #9
 8074a42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8074a44:	68fb      	ldr	r3, [r7, #12]
 8074a46:	68db      	ldr	r3, [r3, #12]
 8074a48:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8074a4c:	68fb      	ldr	r3, [r7, #12]
 8074a4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8074a50:	68fb      	ldr	r3, [r7, #12]
 8074a52:	68da      	ldr	r2, [r3, #12]
 8074a54:	697b      	ldr	r3, [r7, #20]
 8074a56:	029b      	lsls	r3, r3, #10
 8074a58:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8074a5c:	431a      	orrs	r2, r3
 8074a5e:	68fb      	ldr	r3, [r7, #12]
 8074a60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8074a62:	2300      	movs	r3, #0
}
 8074a64:	4618      	mov	r0, r3
 8074a66:	371c      	adds	r7, #28
 8074a68:	46bd      	mov	sp, r7
 8074a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074a6e:	4770      	bx	lr
 8074a70:	00d8acbf 	.word	0x00d8acbf
 8074a74:	00e4e1c0 	.word	0x00e4e1c0
 8074a78:	00f42400 	.word	0x00f42400
 8074a7c:	01067380 	.word	0x01067380
 8074a80:	011a499f 	.word	0x011a499f
 8074a84:	01312cff 	.word	0x01312cff
 8074a88:	014ca43f 	.word	0x014ca43f
 8074a8c:	016e3600 	.word	0x016e3600
 8074a90:	01a6ab1f 	.word	0x01a6ab1f
 8074a94:	01e84800 	.word	0x01e84800

08074a98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8074a98:	b480      	push	{r7}
 8074a9a:	b083      	sub	sp, #12
 8074a9c:	af00      	add	r7, sp, #0
 8074a9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8074aa0:	687b      	ldr	r3, [r7, #4]
 8074aa2:	689b      	ldr	r3, [r3, #8]
 8074aa4:	f043 0201 	orr.w	r2, r3, #1
 8074aa8:	687b      	ldr	r3, [r7, #4]
 8074aaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8074aac:	2300      	movs	r3, #0
}
 8074aae:	4618      	mov	r0, r3
 8074ab0:	370c      	adds	r7, #12
 8074ab2:	46bd      	mov	sp, r7
 8074ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074ab8:	4770      	bx	lr

08074aba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8074aba:	b480      	push	{r7}
 8074abc:	b083      	sub	sp, #12
 8074abe:	af00      	add	r7, sp, #0
 8074ac0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8074ac2:	687b      	ldr	r3, [r7, #4]
 8074ac4:	689b      	ldr	r3, [r3, #8]
 8074ac6:	f023 0201 	bic.w	r2, r3, #1
 8074aca:	687b      	ldr	r3, [r7, #4]
 8074acc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8074ace:	2300      	movs	r3, #0
}
 8074ad0:	4618      	mov	r0, r3
 8074ad2:	370c      	adds	r7, #12
 8074ad4:	46bd      	mov	sp, r7
 8074ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074ada:	4770      	bx	lr

08074adc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8074adc:	b580      	push	{r7, lr}
 8074ade:	b082      	sub	sp, #8
 8074ae0:	af00      	add	r7, sp, #0
 8074ae2:	6078      	str	r0, [r7, #4]
 8074ae4:	460b      	mov	r3, r1
 8074ae6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8074ae8:	687b      	ldr	r3, [r7, #4]
 8074aea:	68db      	ldr	r3, [r3, #12]
 8074aec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8074af0:	687b      	ldr	r3, [r7, #4]
 8074af2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8074af4:	78fb      	ldrb	r3, [r7, #3]
 8074af6:	2b01      	cmp	r3, #1
 8074af8:	d106      	bne.n	8074b08 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8074afa:	687b      	ldr	r3, [r7, #4]
 8074afc:	68db      	ldr	r3, [r3, #12]
 8074afe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8074b02:	687b      	ldr	r3, [r7, #4]
 8074b04:	60da      	str	r2, [r3, #12]
 8074b06:	e00b      	b.n	8074b20 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8074b08:	78fb      	ldrb	r3, [r7, #3]
 8074b0a:	2b00      	cmp	r3, #0
 8074b0c:	d106      	bne.n	8074b1c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8074b0e:	687b      	ldr	r3, [r7, #4]
 8074b10:	68db      	ldr	r3, [r3, #12]
 8074b12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8074b16:	687b      	ldr	r3, [r7, #4]
 8074b18:	60da      	str	r2, [r3, #12]
 8074b1a:	e001      	b.n	8074b20 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8074b1c:	2301      	movs	r3, #1
 8074b1e:	e003      	b.n	8074b28 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8074b20:	2032      	movs	r0, #50	; 0x32
 8074b22:	f7fd fe81 	bl	8072828 <HAL_Delay>

  return HAL_OK;
 8074b26:	2300      	movs	r3, #0
}
 8074b28:	4618      	mov	r0, r3
 8074b2a:	3708      	adds	r7, #8
 8074b2c:	46bd      	mov	sp, r7
 8074b2e:	bd80      	pop	{r7, pc}

08074b30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8074b30:	b084      	sub	sp, #16
 8074b32:	b580      	push	{r7, lr}
 8074b34:	b086      	sub	sp, #24
 8074b36:	af00      	add	r7, sp, #0
 8074b38:	6078      	str	r0, [r7, #4]
 8074b3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8074b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8074b42:	2300      	movs	r3, #0
 8074b44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8074b46:	687b      	ldr	r3, [r7, #4]
 8074b48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8074b4a:	2300      	movs	r3, #0
 8074b4c:	613b      	str	r3, [r7, #16]
 8074b4e:	e009      	b.n	8074b64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8074b50:	687a      	ldr	r2, [r7, #4]
 8074b52:	693b      	ldr	r3, [r7, #16]
 8074b54:	3340      	adds	r3, #64	; 0x40
 8074b56:	009b      	lsls	r3, r3, #2
 8074b58:	4413      	add	r3, r2
 8074b5a:	2200      	movs	r2, #0
 8074b5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8074b5e:	693b      	ldr	r3, [r7, #16]
 8074b60:	3301      	adds	r3, #1
 8074b62:	613b      	str	r3, [r7, #16]
 8074b64:	693b      	ldr	r3, [r7, #16]
 8074b66:	2b0e      	cmp	r3, #14
 8074b68:	d9f2      	bls.n	8074b50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8074b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8074b6c:	2b00      	cmp	r3, #0
 8074b6e:	d11c      	bne.n	8074baa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8074b70:	68fb      	ldr	r3, [r7, #12]
 8074b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074b76:	685b      	ldr	r3, [r3, #4]
 8074b78:	68fa      	ldr	r2, [r7, #12]
 8074b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8074b7e:	f043 0302 	orr.w	r3, r3, #2
 8074b82:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8074b84:	687b      	ldr	r3, [r7, #4]
 8074b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8074b88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8074b8c:	687b      	ldr	r3, [r7, #4]
 8074b8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8074b90:	687b      	ldr	r3, [r7, #4]
 8074b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8074b94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8074b98:	687b      	ldr	r3, [r7, #4]
 8074b9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8074b9c:	687b      	ldr	r3, [r7, #4]
 8074b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8074ba0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8074ba4:	687b      	ldr	r3, [r7, #4]
 8074ba6:	639a      	str	r2, [r3, #56]	; 0x38
 8074ba8:	e00b      	b.n	8074bc2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8074baa:	687b      	ldr	r3, [r7, #4]
 8074bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8074bae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8074bb2:	687b      	ldr	r3, [r7, #4]
 8074bb4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8074bb6:	687b      	ldr	r3, [r7, #4]
 8074bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8074bba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8074bbe:	687b      	ldr	r3, [r7, #4]
 8074bc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8074bc2:	68fb      	ldr	r3, [r7, #12]
 8074bc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8074bc8:	461a      	mov	r2, r3
 8074bca:	2300      	movs	r3, #0
 8074bcc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8074bce:	68fb      	ldr	r3, [r7, #12]
 8074bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074bd4:	4619      	mov	r1, r3
 8074bd6:	68fb      	ldr	r3, [r7, #12]
 8074bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074bdc:	461a      	mov	r2, r3
 8074bde:	680b      	ldr	r3, [r1, #0]
 8074be0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8074be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8074be4:	2b01      	cmp	r3, #1
 8074be6:	d10c      	bne.n	8074c02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8074be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8074bea:	2b00      	cmp	r3, #0
 8074bec:	d104      	bne.n	8074bf8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8074bee:	2100      	movs	r1, #0
 8074bf0:	6878      	ldr	r0, [r7, #4]
 8074bf2:	f000 f949 	bl	8074e88 <USB_SetDevSpeed>
 8074bf6:	e008      	b.n	8074c0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8074bf8:	2101      	movs	r1, #1
 8074bfa:	6878      	ldr	r0, [r7, #4]
 8074bfc:	f000 f944 	bl	8074e88 <USB_SetDevSpeed>
 8074c00:	e003      	b.n	8074c0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8074c02:	2103      	movs	r1, #3
 8074c04:	6878      	ldr	r0, [r7, #4]
 8074c06:	f000 f93f 	bl	8074e88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8074c0a:	2110      	movs	r1, #16
 8074c0c:	6878      	ldr	r0, [r7, #4]
 8074c0e:	f000 f8f3 	bl	8074df8 <USB_FlushTxFifo>
 8074c12:	4603      	mov	r3, r0
 8074c14:	2b00      	cmp	r3, #0
 8074c16:	d001      	beq.n	8074c1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8074c18:	2301      	movs	r3, #1
 8074c1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8074c1c:	6878      	ldr	r0, [r7, #4]
 8074c1e:	f000 f911 	bl	8074e44 <USB_FlushRxFifo>
 8074c22:	4603      	mov	r3, r0
 8074c24:	2b00      	cmp	r3, #0
 8074c26:	d001      	beq.n	8074c2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8074c28:	2301      	movs	r3, #1
 8074c2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8074c2c:	68fb      	ldr	r3, [r7, #12]
 8074c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074c32:	461a      	mov	r2, r3
 8074c34:	2300      	movs	r3, #0
 8074c36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8074c38:	68fb      	ldr	r3, [r7, #12]
 8074c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074c3e:	461a      	mov	r2, r3
 8074c40:	2300      	movs	r3, #0
 8074c42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8074c44:	68fb      	ldr	r3, [r7, #12]
 8074c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074c4a:	461a      	mov	r2, r3
 8074c4c:	2300      	movs	r3, #0
 8074c4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8074c50:	2300      	movs	r3, #0
 8074c52:	613b      	str	r3, [r7, #16]
 8074c54:	e043      	b.n	8074cde <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8074c56:	693b      	ldr	r3, [r7, #16]
 8074c58:	015a      	lsls	r2, r3, #5
 8074c5a:	68fb      	ldr	r3, [r7, #12]
 8074c5c:	4413      	add	r3, r2
 8074c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074c62:	681b      	ldr	r3, [r3, #0]
 8074c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8074c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8074c6c:	d118      	bne.n	8074ca0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8074c6e:	693b      	ldr	r3, [r7, #16]
 8074c70:	2b00      	cmp	r3, #0
 8074c72:	d10a      	bne.n	8074c8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8074c74:	693b      	ldr	r3, [r7, #16]
 8074c76:	015a      	lsls	r2, r3, #5
 8074c78:	68fb      	ldr	r3, [r7, #12]
 8074c7a:	4413      	add	r3, r2
 8074c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074c80:	461a      	mov	r2, r3
 8074c82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8074c86:	6013      	str	r3, [r2, #0]
 8074c88:	e013      	b.n	8074cb2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8074c8a:	693b      	ldr	r3, [r7, #16]
 8074c8c:	015a      	lsls	r2, r3, #5
 8074c8e:	68fb      	ldr	r3, [r7, #12]
 8074c90:	4413      	add	r3, r2
 8074c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074c96:	461a      	mov	r2, r3
 8074c98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8074c9c:	6013      	str	r3, [r2, #0]
 8074c9e:	e008      	b.n	8074cb2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8074ca0:	693b      	ldr	r3, [r7, #16]
 8074ca2:	015a      	lsls	r2, r3, #5
 8074ca4:	68fb      	ldr	r3, [r7, #12]
 8074ca6:	4413      	add	r3, r2
 8074ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074cac:	461a      	mov	r2, r3
 8074cae:	2300      	movs	r3, #0
 8074cb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8074cb2:	693b      	ldr	r3, [r7, #16]
 8074cb4:	015a      	lsls	r2, r3, #5
 8074cb6:	68fb      	ldr	r3, [r7, #12]
 8074cb8:	4413      	add	r3, r2
 8074cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074cbe:	461a      	mov	r2, r3
 8074cc0:	2300      	movs	r3, #0
 8074cc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8074cc4:	693b      	ldr	r3, [r7, #16]
 8074cc6:	015a      	lsls	r2, r3, #5
 8074cc8:	68fb      	ldr	r3, [r7, #12]
 8074cca:	4413      	add	r3, r2
 8074ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074cd0:	461a      	mov	r2, r3
 8074cd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8074cd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8074cd8:	693b      	ldr	r3, [r7, #16]
 8074cda:	3301      	adds	r3, #1
 8074cdc:	613b      	str	r3, [r7, #16]
 8074cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8074ce0:	693a      	ldr	r2, [r7, #16]
 8074ce2:	429a      	cmp	r2, r3
 8074ce4:	d3b7      	bcc.n	8074c56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8074ce6:	2300      	movs	r3, #0
 8074ce8:	613b      	str	r3, [r7, #16]
 8074cea:	e043      	b.n	8074d74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8074cec:	693b      	ldr	r3, [r7, #16]
 8074cee:	015a      	lsls	r2, r3, #5
 8074cf0:	68fb      	ldr	r3, [r7, #12]
 8074cf2:	4413      	add	r3, r2
 8074cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074cf8:	681b      	ldr	r3, [r3, #0]
 8074cfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8074cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8074d02:	d118      	bne.n	8074d36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8074d04:	693b      	ldr	r3, [r7, #16]
 8074d06:	2b00      	cmp	r3, #0
 8074d08:	d10a      	bne.n	8074d20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8074d0a:	693b      	ldr	r3, [r7, #16]
 8074d0c:	015a      	lsls	r2, r3, #5
 8074d0e:	68fb      	ldr	r3, [r7, #12]
 8074d10:	4413      	add	r3, r2
 8074d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074d16:	461a      	mov	r2, r3
 8074d18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8074d1c:	6013      	str	r3, [r2, #0]
 8074d1e:	e013      	b.n	8074d48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8074d20:	693b      	ldr	r3, [r7, #16]
 8074d22:	015a      	lsls	r2, r3, #5
 8074d24:	68fb      	ldr	r3, [r7, #12]
 8074d26:	4413      	add	r3, r2
 8074d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074d2c:	461a      	mov	r2, r3
 8074d2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8074d32:	6013      	str	r3, [r2, #0]
 8074d34:	e008      	b.n	8074d48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8074d36:	693b      	ldr	r3, [r7, #16]
 8074d38:	015a      	lsls	r2, r3, #5
 8074d3a:	68fb      	ldr	r3, [r7, #12]
 8074d3c:	4413      	add	r3, r2
 8074d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074d42:	461a      	mov	r2, r3
 8074d44:	2300      	movs	r3, #0
 8074d46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8074d48:	693b      	ldr	r3, [r7, #16]
 8074d4a:	015a      	lsls	r2, r3, #5
 8074d4c:	68fb      	ldr	r3, [r7, #12]
 8074d4e:	4413      	add	r3, r2
 8074d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074d54:	461a      	mov	r2, r3
 8074d56:	2300      	movs	r3, #0
 8074d58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8074d5a:	693b      	ldr	r3, [r7, #16]
 8074d5c:	015a      	lsls	r2, r3, #5
 8074d5e:	68fb      	ldr	r3, [r7, #12]
 8074d60:	4413      	add	r3, r2
 8074d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074d66:	461a      	mov	r2, r3
 8074d68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8074d6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8074d6e:	693b      	ldr	r3, [r7, #16]
 8074d70:	3301      	adds	r3, #1
 8074d72:	613b      	str	r3, [r7, #16]
 8074d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8074d76:	693a      	ldr	r2, [r7, #16]
 8074d78:	429a      	cmp	r2, r3
 8074d7a:	d3b7      	bcc.n	8074cec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8074d7c:	68fb      	ldr	r3, [r7, #12]
 8074d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074d82:	691b      	ldr	r3, [r3, #16]
 8074d84:	68fa      	ldr	r2, [r7, #12]
 8074d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8074d8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8074d8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8074d90:	687b      	ldr	r3, [r7, #4]
 8074d92:	2200      	movs	r2, #0
 8074d94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8074d96:	687b      	ldr	r3, [r7, #4]
 8074d98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8074d9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8074d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8074da0:	2b00      	cmp	r3, #0
 8074da2:	d105      	bne.n	8074db0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8074da4:	687b      	ldr	r3, [r7, #4]
 8074da6:	699b      	ldr	r3, [r3, #24]
 8074da8:	f043 0210 	orr.w	r2, r3, #16
 8074dac:	687b      	ldr	r3, [r7, #4]
 8074dae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8074db0:	687b      	ldr	r3, [r7, #4]
 8074db2:	699a      	ldr	r2, [r3, #24]
 8074db4:	4b0f      	ldr	r3, [pc, #60]	; (8074df4 <USB_DevInit+0x2c4>)
 8074db6:	4313      	orrs	r3, r2
 8074db8:	687a      	ldr	r2, [r7, #4]
 8074dba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8074dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8074dbe:	2b00      	cmp	r3, #0
 8074dc0:	d005      	beq.n	8074dce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8074dc2:	687b      	ldr	r3, [r7, #4]
 8074dc4:	699b      	ldr	r3, [r3, #24]
 8074dc6:	f043 0208 	orr.w	r2, r3, #8
 8074dca:	687b      	ldr	r3, [r7, #4]
 8074dcc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8074dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8074dd0:	2b01      	cmp	r3, #1
 8074dd2:	d107      	bne.n	8074de4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8074dd4:	687b      	ldr	r3, [r7, #4]
 8074dd6:	699b      	ldr	r3, [r3, #24]
 8074dd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8074ddc:	f043 0304 	orr.w	r3, r3, #4
 8074de0:	687a      	ldr	r2, [r7, #4]
 8074de2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8074de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8074de6:	4618      	mov	r0, r3
 8074de8:	3718      	adds	r7, #24
 8074dea:	46bd      	mov	sp, r7
 8074dec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8074df0:	b004      	add	sp, #16
 8074df2:	4770      	bx	lr
 8074df4:	803c3800 	.word	0x803c3800

08074df8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8074df8:	b480      	push	{r7}
 8074dfa:	b085      	sub	sp, #20
 8074dfc:	af00      	add	r7, sp, #0
 8074dfe:	6078      	str	r0, [r7, #4]
 8074e00:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8074e02:	2300      	movs	r3, #0
 8074e04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8074e06:	683b      	ldr	r3, [r7, #0]
 8074e08:	019b      	lsls	r3, r3, #6
 8074e0a:	f043 0220 	orr.w	r2, r3, #32
 8074e0e:	687b      	ldr	r3, [r7, #4]
 8074e10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8074e12:	68fb      	ldr	r3, [r7, #12]
 8074e14:	3301      	adds	r3, #1
 8074e16:	60fb      	str	r3, [r7, #12]
 8074e18:	68fb      	ldr	r3, [r7, #12]
 8074e1a:	4a09      	ldr	r2, [pc, #36]	; (8074e40 <USB_FlushTxFifo+0x48>)
 8074e1c:	4293      	cmp	r3, r2
 8074e1e:	d901      	bls.n	8074e24 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8074e20:	2303      	movs	r3, #3
 8074e22:	e006      	b.n	8074e32 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8074e24:	687b      	ldr	r3, [r7, #4]
 8074e26:	691b      	ldr	r3, [r3, #16]
 8074e28:	f003 0320 	and.w	r3, r3, #32
 8074e2c:	2b20      	cmp	r3, #32
 8074e2e:	d0f0      	beq.n	8074e12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8074e30:	2300      	movs	r3, #0
}
 8074e32:	4618      	mov	r0, r3
 8074e34:	3714      	adds	r7, #20
 8074e36:	46bd      	mov	sp, r7
 8074e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074e3c:	4770      	bx	lr
 8074e3e:	bf00      	nop
 8074e40:	00030d40 	.word	0x00030d40

08074e44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8074e44:	b480      	push	{r7}
 8074e46:	b085      	sub	sp, #20
 8074e48:	af00      	add	r7, sp, #0
 8074e4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8074e4c:	2300      	movs	r3, #0
 8074e4e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8074e50:	687b      	ldr	r3, [r7, #4]
 8074e52:	2210      	movs	r2, #16
 8074e54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8074e56:	68fb      	ldr	r3, [r7, #12]
 8074e58:	3301      	adds	r3, #1
 8074e5a:	60fb      	str	r3, [r7, #12]
 8074e5c:	68fb      	ldr	r3, [r7, #12]
 8074e5e:	4a09      	ldr	r2, [pc, #36]	; (8074e84 <USB_FlushRxFifo+0x40>)
 8074e60:	4293      	cmp	r3, r2
 8074e62:	d901      	bls.n	8074e68 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8074e64:	2303      	movs	r3, #3
 8074e66:	e006      	b.n	8074e76 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8074e68:	687b      	ldr	r3, [r7, #4]
 8074e6a:	691b      	ldr	r3, [r3, #16]
 8074e6c:	f003 0310 	and.w	r3, r3, #16
 8074e70:	2b10      	cmp	r3, #16
 8074e72:	d0f0      	beq.n	8074e56 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8074e74:	2300      	movs	r3, #0
}
 8074e76:	4618      	mov	r0, r3
 8074e78:	3714      	adds	r7, #20
 8074e7a:	46bd      	mov	sp, r7
 8074e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074e80:	4770      	bx	lr
 8074e82:	bf00      	nop
 8074e84:	00030d40 	.word	0x00030d40

08074e88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8074e88:	b480      	push	{r7}
 8074e8a:	b085      	sub	sp, #20
 8074e8c:	af00      	add	r7, sp, #0
 8074e8e:	6078      	str	r0, [r7, #4]
 8074e90:	460b      	mov	r3, r1
 8074e92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8074e94:	687b      	ldr	r3, [r7, #4]
 8074e96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8074e98:	68fb      	ldr	r3, [r7, #12]
 8074e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074e9e:	681a      	ldr	r2, [r3, #0]
 8074ea0:	78fb      	ldrb	r3, [r7, #3]
 8074ea2:	68f9      	ldr	r1, [r7, #12]
 8074ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8074ea8:	4313      	orrs	r3, r2
 8074eaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8074eac:	2300      	movs	r3, #0
}
 8074eae:	4618      	mov	r0, r3
 8074eb0:	3714      	adds	r7, #20
 8074eb2:	46bd      	mov	sp, r7
 8074eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074eb8:	4770      	bx	lr

08074eba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8074eba:	b480      	push	{r7}
 8074ebc:	b087      	sub	sp, #28
 8074ebe:	af00      	add	r7, sp, #0
 8074ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8074ec2:	687b      	ldr	r3, [r7, #4]
 8074ec4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8074ec6:	693b      	ldr	r3, [r7, #16]
 8074ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074ecc:	689b      	ldr	r3, [r3, #8]
 8074ece:	f003 0306 	and.w	r3, r3, #6
 8074ed2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8074ed4:	68fb      	ldr	r3, [r7, #12]
 8074ed6:	2b00      	cmp	r3, #0
 8074ed8:	d102      	bne.n	8074ee0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8074eda:	2300      	movs	r3, #0
 8074edc:	75fb      	strb	r3, [r7, #23]
 8074ede:	e00a      	b.n	8074ef6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8074ee0:	68fb      	ldr	r3, [r7, #12]
 8074ee2:	2b02      	cmp	r3, #2
 8074ee4:	d002      	beq.n	8074eec <USB_GetDevSpeed+0x32>
 8074ee6:	68fb      	ldr	r3, [r7, #12]
 8074ee8:	2b06      	cmp	r3, #6
 8074eea:	d102      	bne.n	8074ef2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8074eec:	2302      	movs	r3, #2
 8074eee:	75fb      	strb	r3, [r7, #23]
 8074ef0:	e001      	b.n	8074ef6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8074ef2:	230f      	movs	r3, #15
 8074ef4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8074ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8074ef8:	4618      	mov	r0, r3
 8074efa:	371c      	adds	r7, #28
 8074efc:	46bd      	mov	sp, r7
 8074efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8074f02:	4770      	bx	lr

08074f04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8074f04:	b480      	push	{r7}
 8074f06:	b085      	sub	sp, #20
 8074f08:	af00      	add	r7, sp, #0
 8074f0a:	6078      	str	r0, [r7, #4]
 8074f0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8074f0e:	687b      	ldr	r3, [r7, #4]
 8074f10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8074f12:	683b      	ldr	r3, [r7, #0]
 8074f14:	781b      	ldrb	r3, [r3, #0]
 8074f16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8074f18:	683b      	ldr	r3, [r7, #0]
 8074f1a:	785b      	ldrb	r3, [r3, #1]
 8074f1c:	2b01      	cmp	r3, #1
 8074f1e:	d13a      	bne.n	8074f96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8074f20:	68fb      	ldr	r3, [r7, #12]
 8074f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074f26:	69da      	ldr	r2, [r3, #28]
 8074f28:	683b      	ldr	r3, [r7, #0]
 8074f2a:	781b      	ldrb	r3, [r3, #0]
 8074f2c:	f003 030f 	and.w	r3, r3, #15
 8074f30:	2101      	movs	r1, #1
 8074f32:	fa01 f303 	lsl.w	r3, r1, r3
 8074f36:	b29b      	uxth	r3, r3
 8074f38:	68f9      	ldr	r1, [r7, #12]
 8074f3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8074f3e:	4313      	orrs	r3, r2
 8074f40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8074f42:	68bb      	ldr	r3, [r7, #8]
 8074f44:	015a      	lsls	r2, r3, #5
 8074f46:	68fb      	ldr	r3, [r7, #12]
 8074f48:	4413      	add	r3, r2
 8074f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074f4e:	681b      	ldr	r3, [r3, #0]
 8074f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8074f54:	2b00      	cmp	r3, #0
 8074f56:	d155      	bne.n	8075004 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8074f58:	68bb      	ldr	r3, [r7, #8]
 8074f5a:	015a      	lsls	r2, r3, #5
 8074f5c:	68fb      	ldr	r3, [r7, #12]
 8074f5e:	4413      	add	r3, r2
 8074f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8074f64:	681a      	ldr	r2, [r3, #0]
 8074f66:	683b      	ldr	r3, [r7, #0]
 8074f68:	689b      	ldr	r3, [r3, #8]
 8074f6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8074f6e:	683b      	ldr	r3, [r7, #0]
 8074f70:	78db      	ldrb	r3, [r3, #3]
 8074f72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8074f74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8074f76:	68bb      	ldr	r3, [r7, #8]
 8074f78:	059b      	lsls	r3, r3, #22
 8074f7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8074f7c:	4313      	orrs	r3, r2
 8074f7e:	68ba      	ldr	r2, [r7, #8]
 8074f80:	0151      	lsls	r1, r2, #5
 8074f82:	68fa      	ldr	r2, [r7, #12]
 8074f84:	440a      	add	r2, r1
 8074f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8074f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8074f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8074f92:	6013      	str	r3, [r2, #0]
 8074f94:	e036      	b.n	8075004 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8074f96:	68fb      	ldr	r3, [r7, #12]
 8074f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8074f9c:	69da      	ldr	r2, [r3, #28]
 8074f9e:	683b      	ldr	r3, [r7, #0]
 8074fa0:	781b      	ldrb	r3, [r3, #0]
 8074fa2:	f003 030f 	and.w	r3, r3, #15
 8074fa6:	2101      	movs	r1, #1
 8074fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8074fac:	041b      	lsls	r3, r3, #16
 8074fae:	68f9      	ldr	r1, [r7, #12]
 8074fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8074fb4:	4313      	orrs	r3, r2
 8074fb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8074fb8:	68bb      	ldr	r3, [r7, #8]
 8074fba:	015a      	lsls	r2, r3, #5
 8074fbc:	68fb      	ldr	r3, [r7, #12]
 8074fbe:	4413      	add	r3, r2
 8074fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074fc4:	681b      	ldr	r3, [r3, #0]
 8074fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8074fca:	2b00      	cmp	r3, #0
 8074fcc:	d11a      	bne.n	8075004 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8074fce:	68bb      	ldr	r3, [r7, #8]
 8074fd0:	015a      	lsls	r2, r3, #5
 8074fd2:	68fb      	ldr	r3, [r7, #12]
 8074fd4:	4413      	add	r3, r2
 8074fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8074fda:	681a      	ldr	r2, [r3, #0]
 8074fdc:	683b      	ldr	r3, [r7, #0]
 8074fde:	689b      	ldr	r3, [r3, #8]
 8074fe0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8074fe4:	683b      	ldr	r3, [r7, #0]
 8074fe6:	78db      	ldrb	r3, [r3, #3]
 8074fe8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8074fea:	430b      	orrs	r3, r1
 8074fec:	4313      	orrs	r3, r2
 8074fee:	68ba      	ldr	r2, [r7, #8]
 8074ff0:	0151      	lsls	r1, r2, #5
 8074ff2:	68fa      	ldr	r2, [r7, #12]
 8074ff4:	440a      	add	r2, r1
 8074ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8074ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8074ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8075002:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8075004:	2300      	movs	r3, #0
}
 8075006:	4618      	mov	r0, r3
 8075008:	3714      	adds	r7, #20
 807500a:	46bd      	mov	sp, r7
 807500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075010:	4770      	bx	lr
	...

08075014 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8075014:	b580      	push	{r7, lr}
 8075016:	b08a      	sub	sp, #40	; 0x28
 8075018:	af02      	add	r7, sp, #8
 807501a:	60f8      	str	r0, [r7, #12]
 807501c:	60b9      	str	r1, [r7, #8]
 807501e:	4613      	mov	r3, r2
 8075020:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075022:	68fb      	ldr	r3, [r7, #12]
 8075024:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8075026:	68bb      	ldr	r3, [r7, #8]
 8075028:	781b      	ldrb	r3, [r3, #0]
 807502a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 807502c:	68bb      	ldr	r3, [r7, #8]
 807502e:	785b      	ldrb	r3, [r3, #1]
 8075030:	2b01      	cmp	r3, #1
 8075032:	f040 815c 	bne.w	80752ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8075036:	68bb      	ldr	r3, [r7, #8]
 8075038:	695b      	ldr	r3, [r3, #20]
 807503a:	2b00      	cmp	r3, #0
 807503c:	d132      	bne.n	80750a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807503e:	69bb      	ldr	r3, [r7, #24]
 8075040:	015a      	lsls	r2, r3, #5
 8075042:	69fb      	ldr	r3, [r7, #28]
 8075044:	4413      	add	r3, r2
 8075046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807504a:	691b      	ldr	r3, [r3, #16]
 807504c:	69ba      	ldr	r2, [r7, #24]
 807504e:	0151      	lsls	r1, r2, #5
 8075050:	69fa      	ldr	r2, [r7, #28]
 8075052:	440a      	add	r2, r1
 8075054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075058:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807505c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8075060:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8075062:	69bb      	ldr	r3, [r7, #24]
 8075064:	015a      	lsls	r2, r3, #5
 8075066:	69fb      	ldr	r3, [r7, #28]
 8075068:	4413      	add	r3, r2
 807506a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807506e:	691b      	ldr	r3, [r3, #16]
 8075070:	69ba      	ldr	r2, [r7, #24]
 8075072:	0151      	lsls	r1, r2, #5
 8075074:	69fa      	ldr	r2, [r7, #28]
 8075076:	440a      	add	r2, r1
 8075078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807507c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8075080:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8075082:	69bb      	ldr	r3, [r7, #24]
 8075084:	015a      	lsls	r2, r3, #5
 8075086:	69fb      	ldr	r3, [r7, #28]
 8075088:	4413      	add	r3, r2
 807508a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807508e:	691b      	ldr	r3, [r3, #16]
 8075090:	69ba      	ldr	r2, [r7, #24]
 8075092:	0151      	lsls	r1, r2, #5
 8075094:	69fa      	ldr	r2, [r7, #28]
 8075096:	440a      	add	r2, r1
 8075098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807509c:	0cdb      	lsrs	r3, r3, #19
 807509e:	04db      	lsls	r3, r3, #19
 80750a0:	6113      	str	r3, [r2, #16]
 80750a2:	e074      	b.n	807518e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80750a4:	69bb      	ldr	r3, [r7, #24]
 80750a6:	015a      	lsls	r2, r3, #5
 80750a8:	69fb      	ldr	r3, [r7, #28]
 80750aa:	4413      	add	r3, r2
 80750ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80750b0:	691b      	ldr	r3, [r3, #16]
 80750b2:	69ba      	ldr	r2, [r7, #24]
 80750b4:	0151      	lsls	r1, r2, #5
 80750b6:	69fa      	ldr	r2, [r7, #28]
 80750b8:	440a      	add	r2, r1
 80750ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80750be:	0cdb      	lsrs	r3, r3, #19
 80750c0:	04db      	lsls	r3, r3, #19
 80750c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80750c4:	69bb      	ldr	r3, [r7, #24]
 80750c6:	015a      	lsls	r2, r3, #5
 80750c8:	69fb      	ldr	r3, [r7, #28]
 80750ca:	4413      	add	r3, r2
 80750cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80750d0:	691b      	ldr	r3, [r3, #16]
 80750d2:	69ba      	ldr	r2, [r7, #24]
 80750d4:	0151      	lsls	r1, r2, #5
 80750d6:	69fa      	ldr	r2, [r7, #28]
 80750d8:	440a      	add	r2, r1
 80750da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80750de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80750e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80750e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80750e8:	69bb      	ldr	r3, [r7, #24]
 80750ea:	015a      	lsls	r2, r3, #5
 80750ec:	69fb      	ldr	r3, [r7, #28]
 80750ee:	4413      	add	r3, r2
 80750f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80750f4:	691a      	ldr	r2, [r3, #16]
 80750f6:	68bb      	ldr	r3, [r7, #8]
 80750f8:	6959      	ldr	r1, [r3, #20]
 80750fa:	68bb      	ldr	r3, [r7, #8]
 80750fc:	689b      	ldr	r3, [r3, #8]
 80750fe:	440b      	add	r3, r1
 8075100:	1e59      	subs	r1, r3, #1
 8075102:	68bb      	ldr	r3, [r7, #8]
 8075104:	689b      	ldr	r3, [r3, #8]
 8075106:	fbb1 f3f3 	udiv	r3, r1, r3
 807510a:	04d9      	lsls	r1, r3, #19
 807510c:	4b9d      	ldr	r3, [pc, #628]	; (8075384 <USB_EPStartXfer+0x370>)
 807510e:	400b      	ands	r3, r1
 8075110:	69b9      	ldr	r1, [r7, #24]
 8075112:	0148      	lsls	r0, r1, #5
 8075114:	69f9      	ldr	r1, [r7, #28]
 8075116:	4401      	add	r1, r0
 8075118:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 807511c:	4313      	orrs	r3, r2
 807511e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8075120:	69bb      	ldr	r3, [r7, #24]
 8075122:	015a      	lsls	r2, r3, #5
 8075124:	69fb      	ldr	r3, [r7, #28]
 8075126:	4413      	add	r3, r2
 8075128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807512c:	691a      	ldr	r2, [r3, #16]
 807512e:	68bb      	ldr	r3, [r7, #8]
 8075130:	695b      	ldr	r3, [r3, #20]
 8075132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8075136:	69b9      	ldr	r1, [r7, #24]
 8075138:	0148      	lsls	r0, r1, #5
 807513a:	69f9      	ldr	r1, [r7, #28]
 807513c:	4401      	add	r1, r0
 807513e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8075142:	4313      	orrs	r3, r2
 8075144:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8075146:	68bb      	ldr	r3, [r7, #8]
 8075148:	78db      	ldrb	r3, [r3, #3]
 807514a:	2b01      	cmp	r3, #1
 807514c:	d11f      	bne.n	807518e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 807514e:	69bb      	ldr	r3, [r7, #24]
 8075150:	015a      	lsls	r2, r3, #5
 8075152:	69fb      	ldr	r3, [r7, #28]
 8075154:	4413      	add	r3, r2
 8075156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807515a:	691b      	ldr	r3, [r3, #16]
 807515c:	69ba      	ldr	r2, [r7, #24]
 807515e:	0151      	lsls	r1, r2, #5
 8075160:	69fa      	ldr	r2, [r7, #28]
 8075162:	440a      	add	r2, r1
 8075164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075168:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 807516c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 807516e:	69bb      	ldr	r3, [r7, #24]
 8075170:	015a      	lsls	r2, r3, #5
 8075172:	69fb      	ldr	r3, [r7, #28]
 8075174:	4413      	add	r3, r2
 8075176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807517a:	691b      	ldr	r3, [r3, #16]
 807517c:	69ba      	ldr	r2, [r7, #24]
 807517e:	0151      	lsls	r1, r2, #5
 8075180:	69fa      	ldr	r2, [r7, #28]
 8075182:	440a      	add	r2, r1
 8075184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075188:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 807518c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 807518e:	79fb      	ldrb	r3, [r7, #7]
 8075190:	2b01      	cmp	r3, #1
 8075192:	d14b      	bne.n	807522c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8075194:	68bb      	ldr	r3, [r7, #8]
 8075196:	691b      	ldr	r3, [r3, #16]
 8075198:	2b00      	cmp	r3, #0
 807519a:	d009      	beq.n	80751b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 807519c:	69bb      	ldr	r3, [r7, #24]
 807519e:	015a      	lsls	r2, r3, #5
 80751a0:	69fb      	ldr	r3, [r7, #28]
 80751a2:	4413      	add	r3, r2
 80751a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80751a8:	461a      	mov	r2, r3
 80751aa:	68bb      	ldr	r3, [r7, #8]
 80751ac:	691b      	ldr	r3, [r3, #16]
 80751ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80751b0:	68bb      	ldr	r3, [r7, #8]
 80751b2:	78db      	ldrb	r3, [r3, #3]
 80751b4:	2b01      	cmp	r3, #1
 80751b6:	d128      	bne.n	807520a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80751b8:	69fb      	ldr	r3, [r7, #28]
 80751ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80751be:	689b      	ldr	r3, [r3, #8]
 80751c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80751c4:	2b00      	cmp	r3, #0
 80751c6:	d110      	bne.n	80751ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80751c8:	69bb      	ldr	r3, [r7, #24]
 80751ca:	015a      	lsls	r2, r3, #5
 80751cc:	69fb      	ldr	r3, [r7, #28]
 80751ce:	4413      	add	r3, r2
 80751d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80751d4:	681b      	ldr	r3, [r3, #0]
 80751d6:	69ba      	ldr	r2, [r7, #24]
 80751d8:	0151      	lsls	r1, r2, #5
 80751da:	69fa      	ldr	r2, [r7, #28]
 80751dc:	440a      	add	r2, r1
 80751de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80751e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80751e6:	6013      	str	r3, [r2, #0]
 80751e8:	e00f      	b.n	807520a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80751ea:	69bb      	ldr	r3, [r7, #24]
 80751ec:	015a      	lsls	r2, r3, #5
 80751ee:	69fb      	ldr	r3, [r7, #28]
 80751f0:	4413      	add	r3, r2
 80751f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80751f6:	681b      	ldr	r3, [r3, #0]
 80751f8:	69ba      	ldr	r2, [r7, #24]
 80751fa:	0151      	lsls	r1, r2, #5
 80751fc:	69fa      	ldr	r2, [r7, #28]
 80751fe:	440a      	add	r2, r1
 8075200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8075208:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807520a:	69bb      	ldr	r3, [r7, #24]
 807520c:	015a      	lsls	r2, r3, #5
 807520e:	69fb      	ldr	r3, [r7, #28]
 8075210:	4413      	add	r3, r2
 8075212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075216:	681b      	ldr	r3, [r3, #0]
 8075218:	69ba      	ldr	r2, [r7, #24]
 807521a:	0151      	lsls	r1, r2, #5
 807521c:	69fa      	ldr	r2, [r7, #28]
 807521e:	440a      	add	r2, r1
 8075220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075224:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8075228:	6013      	str	r3, [r2, #0]
 807522a:	e12f      	b.n	807548c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807522c:	69bb      	ldr	r3, [r7, #24]
 807522e:	015a      	lsls	r2, r3, #5
 8075230:	69fb      	ldr	r3, [r7, #28]
 8075232:	4413      	add	r3, r2
 8075234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075238:	681b      	ldr	r3, [r3, #0]
 807523a:	69ba      	ldr	r2, [r7, #24]
 807523c:	0151      	lsls	r1, r2, #5
 807523e:	69fa      	ldr	r2, [r7, #28]
 8075240:	440a      	add	r2, r1
 8075242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075246:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807524a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 807524c:	68bb      	ldr	r3, [r7, #8]
 807524e:	78db      	ldrb	r3, [r3, #3]
 8075250:	2b01      	cmp	r3, #1
 8075252:	d015      	beq.n	8075280 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8075254:	68bb      	ldr	r3, [r7, #8]
 8075256:	695b      	ldr	r3, [r3, #20]
 8075258:	2b00      	cmp	r3, #0
 807525a:	f000 8117 	beq.w	807548c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 807525e:	69fb      	ldr	r3, [r7, #28]
 8075260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8075266:	68bb      	ldr	r3, [r7, #8]
 8075268:	781b      	ldrb	r3, [r3, #0]
 807526a:	f003 030f 	and.w	r3, r3, #15
 807526e:	2101      	movs	r1, #1
 8075270:	fa01 f303 	lsl.w	r3, r1, r3
 8075274:	69f9      	ldr	r1, [r7, #28]
 8075276:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 807527a:	4313      	orrs	r3, r2
 807527c:	634b      	str	r3, [r1, #52]	; 0x34
 807527e:	e105      	b.n	807548c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8075280:	69fb      	ldr	r3, [r7, #28]
 8075282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075286:	689b      	ldr	r3, [r3, #8]
 8075288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 807528c:	2b00      	cmp	r3, #0
 807528e:	d110      	bne.n	80752b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8075290:	69bb      	ldr	r3, [r7, #24]
 8075292:	015a      	lsls	r2, r3, #5
 8075294:	69fb      	ldr	r3, [r7, #28]
 8075296:	4413      	add	r3, r2
 8075298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807529c:	681b      	ldr	r3, [r3, #0]
 807529e:	69ba      	ldr	r2, [r7, #24]
 80752a0:	0151      	lsls	r1, r2, #5
 80752a2:	69fa      	ldr	r2, [r7, #28]
 80752a4:	440a      	add	r2, r1
 80752a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80752aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80752ae:	6013      	str	r3, [r2, #0]
 80752b0:	e00f      	b.n	80752d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80752b2:	69bb      	ldr	r3, [r7, #24]
 80752b4:	015a      	lsls	r2, r3, #5
 80752b6:	69fb      	ldr	r3, [r7, #28]
 80752b8:	4413      	add	r3, r2
 80752ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80752be:	681b      	ldr	r3, [r3, #0]
 80752c0:	69ba      	ldr	r2, [r7, #24]
 80752c2:	0151      	lsls	r1, r2, #5
 80752c4:	69fa      	ldr	r2, [r7, #28]
 80752c6:	440a      	add	r2, r1
 80752c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80752cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80752d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80752d2:	68bb      	ldr	r3, [r7, #8]
 80752d4:	68d9      	ldr	r1, [r3, #12]
 80752d6:	68bb      	ldr	r3, [r7, #8]
 80752d8:	781a      	ldrb	r2, [r3, #0]
 80752da:	68bb      	ldr	r3, [r7, #8]
 80752dc:	695b      	ldr	r3, [r3, #20]
 80752de:	b298      	uxth	r0, r3
 80752e0:	79fb      	ldrb	r3, [r7, #7]
 80752e2:	9300      	str	r3, [sp, #0]
 80752e4:	4603      	mov	r3, r0
 80752e6:	68f8      	ldr	r0, [r7, #12]
 80752e8:	f000 fa2b 	bl	8075742 <USB_WritePacket>
 80752ec:	e0ce      	b.n	807548c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80752ee:	69bb      	ldr	r3, [r7, #24]
 80752f0:	015a      	lsls	r2, r3, #5
 80752f2:	69fb      	ldr	r3, [r7, #28]
 80752f4:	4413      	add	r3, r2
 80752f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80752fa:	691b      	ldr	r3, [r3, #16]
 80752fc:	69ba      	ldr	r2, [r7, #24]
 80752fe:	0151      	lsls	r1, r2, #5
 8075300:	69fa      	ldr	r2, [r7, #28]
 8075302:	440a      	add	r2, r1
 8075304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075308:	0cdb      	lsrs	r3, r3, #19
 807530a:	04db      	lsls	r3, r3, #19
 807530c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 807530e:	69bb      	ldr	r3, [r7, #24]
 8075310:	015a      	lsls	r2, r3, #5
 8075312:	69fb      	ldr	r3, [r7, #28]
 8075314:	4413      	add	r3, r2
 8075316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807531a:	691b      	ldr	r3, [r3, #16]
 807531c:	69ba      	ldr	r2, [r7, #24]
 807531e:	0151      	lsls	r1, r2, #5
 8075320:	69fa      	ldr	r2, [r7, #28]
 8075322:	440a      	add	r2, r1
 8075324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075328:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807532c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8075330:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8075332:	68bb      	ldr	r3, [r7, #8]
 8075334:	695b      	ldr	r3, [r3, #20]
 8075336:	2b00      	cmp	r3, #0
 8075338:	d126      	bne.n	8075388 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 807533a:	69bb      	ldr	r3, [r7, #24]
 807533c:	015a      	lsls	r2, r3, #5
 807533e:	69fb      	ldr	r3, [r7, #28]
 8075340:	4413      	add	r3, r2
 8075342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075346:	691a      	ldr	r2, [r3, #16]
 8075348:	68bb      	ldr	r3, [r7, #8]
 807534a:	689b      	ldr	r3, [r3, #8]
 807534c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8075350:	69b9      	ldr	r1, [r7, #24]
 8075352:	0148      	lsls	r0, r1, #5
 8075354:	69f9      	ldr	r1, [r7, #28]
 8075356:	4401      	add	r1, r0
 8075358:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 807535c:	4313      	orrs	r3, r2
 807535e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8075360:	69bb      	ldr	r3, [r7, #24]
 8075362:	015a      	lsls	r2, r3, #5
 8075364:	69fb      	ldr	r3, [r7, #28]
 8075366:	4413      	add	r3, r2
 8075368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807536c:	691b      	ldr	r3, [r3, #16]
 807536e:	69ba      	ldr	r2, [r7, #24]
 8075370:	0151      	lsls	r1, r2, #5
 8075372:	69fa      	ldr	r2, [r7, #28]
 8075374:	440a      	add	r2, r1
 8075376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807537a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 807537e:	6113      	str	r3, [r2, #16]
 8075380:	e036      	b.n	80753f0 <USB_EPStartXfer+0x3dc>
 8075382:	bf00      	nop
 8075384:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8075388:	68bb      	ldr	r3, [r7, #8]
 807538a:	695a      	ldr	r2, [r3, #20]
 807538c:	68bb      	ldr	r3, [r7, #8]
 807538e:	689b      	ldr	r3, [r3, #8]
 8075390:	4413      	add	r3, r2
 8075392:	1e5a      	subs	r2, r3, #1
 8075394:	68bb      	ldr	r3, [r7, #8]
 8075396:	689b      	ldr	r3, [r3, #8]
 8075398:	fbb2 f3f3 	udiv	r3, r2, r3
 807539c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 807539e:	69bb      	ldr	r3, [r7, #24]
 80753a0:	015a      	lsls	r2, r3, #5
 80753a2:	69fb      	ldr	r3, [r7, #28]
 80753a4:	4413      	add	r3, r2
 80753a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80753aa:	691a      	ldr	r2, [r3, #16]
 80753ac:	8afb      	ldrh	r3, [r7, #22]
 80753ae:	04d9      	lsls	r1, r3, #19
 80753b0:	4b39      	ldr	r3, [pc, #228]	; (8075498 <USB_EPStartXfer+0x484>)
 80753b2:	400b      	ands	r3, r1
 80753b4:	69b9      	ldr	r1, [r7, #24]
 80753b6:	0148      	lsls	r0, r1, #5
 80753b8:	69f9      	ldr	r1, [r7, #28]
 80753ba:	4401      	add	r1, r0
 80753bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80753c0:	4313      	orrs	r3, r2
 80753c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80753c4:	69bb      	ldr	r3, [r7, #24]
 80753c6:	015a      	lsls	r2, r3, #5
 80753c8:	69fb      	ldr	r3, [r7, #28]
 80753ca:	4413      	add	r3, r2
 80753cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80753d0:	691a      	ldr	r2, [r3, #16]
 80753d2:	68bb      	ldr	r3, [r7, #8]
 80753d4:	689b      	ldr	r3, [r3, #8]
 80753d6:	8af9      	ldrh	r1, [r7, #22]
 80753d8:	fb01 f303 	mul.w	r3, r1, r3
 80753dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80753e0:	69b9      	ldr	r1, [r7, #24]
 80753e2:	0148      	lsls	r0, r1, #5
 80753e4:	69f9      	ldr	r1, [r7, #28]
 80753e6:	4401      	add	r1, r0
 80753e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80753ec:	4313      	orrs	r3, r2
 80753ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80753f0:	79fb      	ldrb	r3, [r7, #7]
 80753f2:	2b01      	cmp	r3, #1
 80753f4:	d10d      	bne.n	8075412 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80753f6:	68bb      	ldr	r3, [r7, #8]
 80753f8:	68db      	ldr	r3, [r3, #12]
 80753fa:	2b00      	cmp	r3, #0
 80753fc:	d009      	beq.n	8075412 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80753fe:	68bb      	ldr	r3, [r7, #8]
 8075400:	68d9      	ldr	r1, [r3, #12]
 8075402:	69bb      	ldr	r3, [r7, #24]
 8075404:	015a      	lsls	r2, r3, #5
 8075406:	69fb      	ldr	r3, [r7, #28]
 8075408:	4413      	add	r3, r2
 807540a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 807540e:	460a      	mov	r2, r1
 8075410:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8075412:	68bb      	ldr	r3, [r7, #8]
 8075414:	78db      	ldrb	r3, [r3, #3]
 8075416:	2b01      	cmp	r3, #1
 8075418:	d128      	bne.n	807546c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 807541a:	69fb      	ldr	r3, [r7, #28]
 807541c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075420:	689b      	ldr	r3, [r3, #8]
 8075422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8075426:	2b00      	cmp	r3, #0
 8075428:	d110      	bne.n	807544c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 807542a:	69bb      	ldr	r3, [r7, #24]
 807542c:	015a      	lsls	r2, r3, #5
 807542e:	69fb      	ldr	r3, [r7, #28]
 8075430:	4413      	add	r3, r2
 8075432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075436:	681b      	ldr	r3, [r3, #0]
 8075438:	69ba      	ldr	r2, [r7, #24]
 807543a:	0151      	lsls	r1, r2, #5
 807543c:	69fa      	ldr	r2, [r7, #28]
 807543e:	440a      	add	r2, r1
 8075440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075444:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8075448:	6013      	str	r3, [r2, #0]
 807544a:	e00f      	b.n	807546c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 807544c:	69bb      	ldr	r3, [r7, #24]
 807544e:	015a      	lsls	r2, r3, #5
 8075450:	69fb      	ldr	r3, [r7, #28]
 8075452:	4413      	add	r3, r2
 8075454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075458:	681b      	ldr	r3, [r3, #0]
 807545a:	69ba      	ldr	r2, [r7, #24]
 807545c:	0151      	lsls	r1, r2, #5
 807545e:	69fa      	ldr	r2, [r7, #28]
 8075460:	440a      	add	r2, r1
 8075462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 807546a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 807546c:	69bb      	ldr	r3, [r7, #24]
 807546e:	015a      	lsls	r2, r3, #5
 8075470:	69fb      	ldr	r3, [r7, #28]
 8075472:	4413      	add	r3, r2
 8075474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075478:	681b      	ldr	r3, [r3, #0]
 807547a:	69ba      	ldr	r2, [r7, #24]
 807547c:	0151      	lsls	r1, r2, #5
 807547e:	69fa      	ldr	r2, [r7, #28]
 8075480:	440a      	add	r2, r1
 8075482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075486:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807548a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 807548c:	2300      	movs	r3, #0
}
 807548e:	4618      	mov	r0, r3
 8075490:	3720      	adds	r7, #32
 8075492:	46bd      	mov	sp, r7
 8075494:	bd80      	pop	{r7, pc}
 8075496:	bf00      	nop
 8075498:	1ff80000 	.word	0x1ff80000

0807549c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 807549c:	b480      	push	{r7}
 807549e:	b087      	sub	sp, #28
 80754a0:	af00      	add	r7, sp, #0
 80754a2:	60f8      	str	r0, [r7, #12]
 80754a4:	60b9      	str	r1, [r7, #8]
 80754a6:	4613      	mov	r3, r2
 80754a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80754aa:	68fb      	ldr	r3, [r7, #12]
 80754ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80754ae:	68bb      	ldr	r3, [r7, #8]
 80754b0:	781b      	ldrb	r3, [r3, #0]
 80754b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80754b4:	68bb      	ldr	r3, [r7, #8]
 80754b6:	785b      	ldrb	r3, [r3, #1]
 80754b8:	2b01      	cmp	r3, #1
 80754ba:	f040 80cd 	bne.w	8075658 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80754be:	68bb      	ldr	r3, [r7, #8]
 80754c0:	695b      	ldr	r3, [r3, #20]
 80754c2:	2b00      	cmp	r3, #0
 80754c4:	d132      	bne.n	807552c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80754c6:	693b      	ldr	r3, [r7, #16]
 80754c8:	015a      	lsls	r2, r3, #5
 80754ca:	697b      	ldr	r3, [r7, #20]
 80754cc:	4413      	add	r3, r2
 80754ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80754d2:	691b      	ldr	r3, [r3, #16]
 80754d4:	693a      	ldr	r2, [r7, #16]
 80754d6:	0151      	lsls	r1, r2, #5
 80754d8:	697a      	ldr	r2, [r7, #20]
 80754da:	440a      	add	r2, r1
 80754dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80754e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80754e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80754e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80754ea:	693b      	ldr	r3, [r7, #16]
 80754ec:	015a      	lsls	r2, r3, #5
 80754ee:	697b      	ldr	r3, [r7, #20]
 80754f0:	4413      	add	r3, r2
 80754f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80754f6:	691b      	ldr	r3, [r3, #16]
 80754f8:	693a      	ldr	r2, [r7, #16]
 80754fa:	0151      	lsls	r1, r2, #5
 80754fc:	697a      	ldr	r2, [r7, #20]
 80754fe:	440a      	add	r2, r1
 8075500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8075508:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807550a:	693b      	ldr	r3, [r7, #16]
 807550c:	015a      	lsls	r2, r3, #5
 807550e:	697b      	ldr	r3, [r7, #20]
 8075510:	4413      	add	r3, r2
 8075512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075516:	691b      	ldr	r3, [r3, #16]
 8075518:	693a      	ldr	r2, [r7, #16]
 807551a:	0151      	lsls	r1, r2, #5
 807551c:	697a      	ldr	r2, [r7, #20]
 807551e:	440a      	add	r2, r1
 8075520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075524:	0cdb      	lsrs	r3, r3, #19
 8075526:	04db      	lsls	r3, r3, #19
 8075528:	6113      	str	r3, [r2, #16]
 807552a:	e04e      	b.n	80755ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 807552c:	693b      	ldr	r3, [r7, #16]
 807552e:	015a      	lsls	r2, r3, #5
 8075530:	697b      	ldr	r3, [r7, #20]
 8075532:	4413      	add	r3, r2
 8075534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075538:	691b      	ldr	r3, [r3, #16]
 807553a:	693a      	ldr	r2, [r7, #16]
 807553c:	0151      	lsls	r1, r2, #5
 807553e:	697a      	ldr	r2, [r7, #20]
 8075540:	440a      	add	r2, r1
 8075542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075546:	0cdb      	lsrs	r3, r3, #19
 8075548:	04db      	lsls	r3, r3, #19
 807554a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 807554c:	693b      	ldr	r3, [r7, #16]
 807554e:	015a      	lsls	r2, r3, #5
 8075550:	697b      	ldr	r3, [r7, #20]
 8075552:	4413      	add	r3, r2
 8075554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075558:	691b      	ldr	r3, [r3, #16]
 807555a:	693a      	ldr	r2, [r7, #16]
 807555c:	0151      	lsls	r1, r2, #5
 807555e:	697a      	ldr	r2, [r7, #20]
 8075560:	440a      	add	r2, r1
 8075562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075566:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 807556a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807556e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8075570:	68bb      	ldr	r3, [r7, #8]
 8075572:	695a      	ldr	r2, [r3, #20]
 8075574:	68bb      	ldr	r3, [r7, #8]
 8075576:	689b      	ldr	r3, [r3, #8]
 8075578:	429a      	cmp	r2, r3
 807557a:	d903      	bls.n	8075584 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 807557c:	68bb      	ldr	r3, [r7, #8]
 807557e:	689a      	ldr	r2, [r3, #8]
 8075580:	68bb      	ldr	r3, [r7, #8]
 8075582:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8075584:	693b      	ldr	r3, [r7, #16]
 8075586:	015a      	lsls	r2, r3, #5
 8075588:	697b      	ldr	r3, [r7, #20]
 807558a:	4413      	add	r3, r2
 807558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075590:	691b      	ldr	r3, [r3, #16]
 8075592:	693a      	ldr	r2, [r7, #16]
 8075594:	0151      	lsls	r1, r2, #5
 8075596:	697a      	ldr	r2, [r7, #20]
 8075598:	440a      	add	r2, r1
 807559a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807559e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80755a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80755a4:	693b      	ldr	r3, [r7, #16]
 80755a6:	015a      	lsls	r2, r3, #5
 80755a8:	697b      	ldr	r3, [r7, #20]
 80755aa:	4413      	add	r3, r2
 80755ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80755b0:	691a      	ldr	r2, [r3, #16]
 80755b2:	68bb      	ldr	r3, [r7, #8]
 80755b4:	695b      	ldr	r3, [r3, #20]
 80755b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80755ba:	6939      	ldr	r1, [r7, #16]
 80755bc:	0148      	lsls	r0, r1, #5
 80755be:	6979      	ldr	r1, [r7, #20]
 80755c0:	4401      	add	r1, r0
 80755c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80755c6:	4313      	orrs	r3, r2
 80755c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80755ca:	79fb      	ldrb	r3, [r7, #7]
 80755cc:	2b01      	cmp	r3, #1
 80755ce:	d11e      	bne.n	807560e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80755d0:	68bb      	ldr	r3, [r7, #8]
 80755d2:	691b      	ldr	r3, [r3, #16]
 80755d4:	2b00      	cmp	r3, #0
 80755d6:	d009      	beq.n	80755ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80755d8:	693b      	ldr	r3, [r7, #16]
 80755da:	015a      	lsls	r2, r3, #5
 80755dc:	697b      	ldr	r3, [r7, #20]
 80755de:	4413      	add	r3, r2
 80755e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80755e4:	461a      	mov	r2, r3
 80755e6:	68bb      	ldr	r3, [r7, #8]
 80755e8:	691b      	ldr	r3, [r3, #16]
 80755ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80755ec:	693b      	ldr	r3, [r7, #16]
 80755ee:	015a      	lsls	r2, r3, #5
 80755f0:	697b      	ldr	r3, [r7, #20]
 80755f2:	4413      	add	r3, r2
 80755f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80755f8:	681b      	ldr	r3, [r3, #0]
 80755fa:	693a      	ldr	r2, [r7, #16]
 80755fc:	0151      	lsls	r1, r2, #5
 80755fe:	697a      	ldr	r2, [r7, #20]
 8075600:	440a      	add	r2, r1
 8075602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075606:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807560a:	6013      	str	r3, [r2, #0]
 807560c:	e092      	b.n	8075734 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 807560e:	693b      	ldr	r3, [r7, #16]
 8075610:	015a      	lsls	r2, r3, #5
 8075612:	697b      	ldr	r3, [r7, #20]
 8075614:	4413      	add	r3, r2
 8075616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807561a:	681b      	ldr	r3, [r3, #0]
 807561c:	693a      	ldr	r2, [r7, #16]
 807561e:	0151      	lsls	r1, r2, #5
 8075620:	697a      	ldr	r2, [r7, #20]
 8075622:	440a      	add	r2, r1
 8075624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075628:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 807562c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 807562e:	68bb      	ldr	r3, [r7, #8]
 8075630:	695b      	ldr	r3, [r3, #20]
 8075632:	2b00      	cmp	r3, #0
 8075634:	d07e      	beq.n	8075734 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8075636:	697b      	ldr	r3, [r7, #20]
 8075638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 807563c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 807563e:	68bb      	ldr	r3, [r7, #8]
 8075640:	781b      	ldrb	r3, [r3, #0]
 8075642:	f003 030f 	and.w	r3, r3, #15
 8075646:	2101      	movs	r1, #1
 8075648:	fa01 f303 	lsl.w	r3, r1, r3
 807564c:	6979      	ldr	r1, [r7, #20]
 807564e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8075652:	4313      	orrs	r3, r2
 8075654:	634b      	str	r3, [r1, #52]	; 0x34
 8075656:	e06d      	b.n	8075734 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8075658:	693b      	ldr	r3, [r7, #16]
 807565a:	015a      	lsls	r2, r3, #5
 807565c:	697b      	ldr	r3, [r7, #20]
 807565e:	4413      	add	r3, r2
 8075660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075664:	691b      	ldr	r3, [r3, #16]
 8075666:	693a      	ldr	r2, [r7, #16]
 8075668:	0151      	lsls	r1, r2, #5
 807566a:	697a      	ldr	r2, [r7, #20]
 807566c:	440a      	add	r2, r1
 807566e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075672:	0cdb      	lsrs	r3, r3, #19
 8075674:	04db      	lsls	r3, r3, #19
 8075676:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8075678:	693b      	ldr	r3, [r7, #16]
 807567a:	015a      	lsls	r2, r3, #5
 807567c:	697b      	ldr	r3, [r7, #20]
 807567e:	4413      	add	r3, r2
 8075680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075684:	691b      	ldr	r3, [r3, #16]
 8075686:	693a      	ldr	r2, [r7, #16]
 8075688:	0151      	lsls	r1, r2, #5
 807568a:	697a      	ldr	r2, [r7, #20]
 807568c:	440a      	add	r2, r1
 807568e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075692:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8075696:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 807569a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 807569c:	68bb      	ldr	r3, [r7, #8]
 807569e:	695b      	ldr	r3, [r3, #20]
 80756a0:	2b00      	cmp	r3, #0
 80756a2:	d003      	beq.n	80756ac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80756a4:	68bb      	ldr	r3, [r7, #8]
 80756a6:	689a      	ldr	r2, [r3, #8]
 80756a8:	68bb      	ldr	r3, [r7, #8]
 80756aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80756ac:	693b      	ldr	r3, [r7, #16]
 80756ae:	015a      	lsls	r2, r3, #5
 80756b0:	697b      	ldr	r3, [r7, #20]
 80756b2:	4413      	add	r3, r2
 80756b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80756b8:	691b      	ldr	r3, [r3, #16]
 80756ba:	693a      	ldr	r2, [r7, #16]
 80756bc:	0151      	lsls	r1, r2, #5
 80756be:	697a      	ldr	r2, [r7, #20]
 80756c0:	440a      	add	r2, r1
 80756c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80756c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80756ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80756cc:	693b      	ldr	r3, [r7, #16]
 80756ce:	015a      	lsls	r2, r3, #5
 80756d0:	697b      	ldr	r3, [r7, #20]
 80756d2:	4413      	add	r3, r2
 80756d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80756d8:	691a      	ldr	r2, [r3, #16]
 80756da:	68bb      	ldr	r3, [r7, #8]
 80756dc:	689b      	ldr	r3, [r3, #8]
 80756de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80756e2:	6939      	ldr	r1, [r7, #16]
 80756e4:	0148      	lsls	r0, r1, #5
 80756e6:	6979      	ldr	r1, [r7, #20]
 80756e8:	4401      	add	r1, r0
 80756ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80756ee:	4313      	orrs	r3, r2
 80756f0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80756f2:	79fb      	ldrb	r3, [r7, #7]
 80756f4:	2b01      	cmp	r3, #1
 80756f6:	d10d      	bne.n	8075714 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80756f8:	68bb      	ldr	r3, [r7, #8]
 80756fa:	68db      	ldr	r3, [r3, #12]
 80756fc:	2b00      	cmp	r3, #0
 80756fe:	d009      	beq.n	8075714 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8075700:	68bb      	ldr	r3, [r7, #8]
 8075702:	68d9      	ldr	r1, [r3, #12]
 8075704:	693b      	ldr	r3, [r7, #16]
 8075706:	015a      	lsls	r2, r3, #5
 8075708:	697b      	ldr	r3, [r7, #20]
 807570a:	4413      	add	r3, r2
 807570c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075710:	460a      	mov	r2, r1
 8075712:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8075714:	693b      	ldr	r3, [r7, #16]
 8075716:	015a      	lsls	r2, r3, #5
 8075718:	697b      	ldr	r3, [r7, #20]
 807571a:	4413      	add	r3, r2
 807571c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075720:	681b      	ldr	r3, [r3, #0]
 8075722:	693a      	ldr	r2, [r7, #16]
 8075724:	0151      	lsls	r1, r2, #5
 8075726:	697a      	ldr	r2, [r7, #20]
 8075728:	440a      	add	r2, r1
 807572a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 807572e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8075732:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8075734:	2300      	movs	r3, #0
}
 8075736:	4618      	mov	r0, r3
 8075738:	371c      	adds	r7, #28
 807573a:	46bd      	mov	sp, r7
 807573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075740:	4770      	bx	lr

08075742 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8075742:	b480      	push	{r7}
 8075744:	b089      	sub	sp, #36	; 0x24
 8075746:	af00      	add	r7, sp, #0
 8075748:	60f8      	str	r0, [r7, #12]
 807574a:	60b9      	str	r1, [r7, #8]
 807574c:	4611      	mov	r1, r2
 807574e:	461a      	mov	r2, r3
 8075750:	460b      	mov	r3, r1
 8075752:	71fb      	strb	r3, [r7, #7]
 8075754:	4613      	mov	r3, r2
 8075756:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075758:	68fb      	ldr	r3, [r7, #12]
 807575a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 807575c:	68bb      	ldr	r3, [r7, #8]
 807575e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8075760:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8075764:	2b00      	cmp	r3, #0
 8075766:	d11a      	bne.n	807579e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8075768:	88bb      	ldrh	r3, [r7, #4]
 807576a:	3303      	adds	r3, #3
 807576c:	089b      	lsrs	r3, r3, #2
 807576e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8075770:	2300      	movs	r3, #0
 8075772:	61bb      	str	r3, [r7, #24]
 8075774:	e00f      	b.n	8075796 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8075776:	79fb      	ldrb	r3, [r7, #7]
 8075778:	031a      	lsls	r2, r3, #12
 807577a:	697b      	ldr	r3, [r7, #20]
 807577c:	4413      	add	r3, r2
 807577e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8075782:	461a      	mov	r2, r3
 8075784:	69fb      	ldr	r3, [r7, #28]
 8075786:	681b      	ldr	r3, [r3, #0]
 8075788:	6013      	str	r3, [r2, #0]
      pSrc++;
 807578a:	69fb      	ldr	r3, [r7, #28]
 807578c:	3304      	adds	r3, #4
 807578e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8075790:	69bb      	ldr	r3, [r7, #24]
 8075792:	3301      	adds	r3, #1
 8075794:	61bb      	str	r3, [r7, #24]
 8075796:	69ba      	ldr	r2, [r7, #24]
 8075798:	693b      	ldr	r3, [r7, #16]
 807579a:	429a      	cmp	r2, r3
 807579c:	d3eb      	bcc.n	8075776 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 807579e:	2300      	movs	r3, #0
}
 80757a0:	4618      	mov	r0, r3
 80757a2:	3724      	adds	r7, #36	; 0x24
 80757a4:	46bd      	mov	sp, r7
 80757a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80757aa:	4770      	bx	lr

080757ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80757ac:	b480      	push	{r7}
 80757ae:	b089      	sub	sp, #36	; 0x24
 80757b0:	af00      	add	r7, sp, #0
 80757b2:	60f8      	str	r0, [r7, #12]
 80757b4:	60b9      	str	r1, [r7, #8]
 80757b6:	4613      	mov	r3, r2
 80757b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80757ba:	68fb      	ldr	r3, [r7, #12]
 80757bc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80757be:	68bb      	ldr	r3, [r7, #8]
 80757c0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80757c2:	88fb      	ldrh	r3, [r7, #6]
 80757c4:	3303      	adds	r3, #3
 80757c6:	089b      	lsrs	r3, r3, #2
 80757c8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80757ca:	2300      	movs	r3, #0
 80757cc:	61bb      	str	r3, [r7, #24]
 80757ce:	e00b      	b.n	80757e8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80757d0:	697b      	ldr	r3, [r7, #20]
 80757d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80757d6:	681a      	ldr	r2, [r3, #0]
 80757d8:	69fb      	ldr	r3, [r7, #28]
 80757da:	601a      	str	r2, [r3, #0]
    pDest++;
 80757dc:	69fb      	ldr	r3, [r7, #28]
 80757de:	3304      	adds	r3, #4
 80757e0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80757e2:	69bb      	ldr	r3, [r7, #24]
 80757e4:	3301      	adds	r3, #1
 80757e6:	61bb      	str	r3, [r7, #24]
 80757e8:	69ba      	ldr	r2, [r7, #24]
 80757ea:	693b      	ldr	r3, [r7, #16]
 80757ec:	429a      	cmp	r2, r3
 80757ee:	d3ef      	bcc.n	80757d0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80757f0:	69fb      	ldr	r3, [r7, #28]
}
 80757f2:	4618      	mov	r0, r3
 80757f4:	3724      	adds	r7, #36	; 0x24
 80757f6:	46bd      	mov	sp, r7
 80757f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80757fc:	4770      	bx	lr

080757fe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80757fe:	b480      	push	{r7}
 8075800:	b085      	sub	sp, #20
 8075802:	af00      	add	r7, sp, #0
 8075804:	6078      	str	r0, [r7, #4]
 8075806:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075808:	687b      	ldr	r3, [r7, #4]
 807580a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 807580c:	683b      	ldr	r3, [r7, #0]
 807580e:	781b      	ldrb	r3, [r3, #0]
 8075810:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8075812:	683b      	ldr	r3, [r7, #0]
 8075814:	785b      	ldrb	r3, [r3, #1]
 8075816:	2b01      	cmp	r3, #1
 8075818:	d12c      	bne.n	8075874 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 807581a:	68bb      	ldr	r3, [r7, #8]
 807581c:	015a      	lsls	r2, r3, #5
 807581e:	68fb      	ldr	r3, [r7, #12]
 8075820:	4413      	add	r3, r2
 8075822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075826:	681b      	ldr	r3, [r3, #0]
 8075828:	2b00      	cmp	r3, #0
 807582a:	db12      	blt.n	8075852 <USB_EPSetStall+0x54>
 807582c:	68bb      	ldr	r3, [r7, #8]
 807582e:	2b00      	cmp	r3, #0
 8075830:	d00f      	beq.n	8075852 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8075832:	68bb      	ldr	r3, [r7, #8]
 8075834:	015a      	lsls	r2, r3, #5
 8075836:	68fb      	ldr	r3, [r7, #12]
 8075838:	4413      	add	r3, r2
 807583a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807583e:	681b      	ldr	r3, [r3, #0]
 8075840:	68ba      	ldr	r2, [r7, #8]
 8075842:	0151      	lsls	r1, r2, #5
 8075844:	68fa      	ldr	r2, [r7, #12]
 8075846:	440a      	add	r2, r1
 8075848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807584c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8075850:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8075852:	68bb      	ldr	r3, [r7, #8]
 8075854:	015a      	lsls	r2, r3, #5
 8075856:	68fb      	ldr	r3, [r7, #12]
 8075858:	4413      	add	r3, r2
 807585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 807585e:	681b      	ldr	r3, [r3, #0]
 8075860:	68ba      	ldr	r2, [r7, #8]
 8075862:	0151      	lsls	r1, r2, #5
 8075864:	68fa      	ldr	r2, [r7, #12]
 8075866:	440a      	add	r2, r1
 8075868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 807586c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8075870:	6013      	str	r3, [r2, #0]
 8075872:	e02b      	b.n	80758cc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8075874:	68bb      	ldr	r3, [r7, #8]
 8075876:	015a      	lsls	r2, r3, #5
 8075878:	68fb      	ldr	r3, [r7, #12]
 807587a:	4413      	add	r3, r2
 807587c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075880:	681b      	ldr	r3, [r3, #0]
 8075882:	2b00      	cmp	r3, #0
 8075884:	db12      	blt.n	80758ac <USB_EPSetStall+0xae>
 8075886:	68bb      	ldr	r3, [r7, #8]
 8075888:	2b00      	cmp	r3, #0
 807588a:	d00f      	beq.n	80758ac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 807588c:	68bb      	ldr	r3, [r7, #8]
 807588e:	015a      	lsls	r2, r3, #5
 8075890:	68fb      	ldr	r3, [r7, #12]
 8075892:	4413      	add	r3, r2
 8075894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075898:	681b      	ldr	r3, [r3, #0]
 807589a:	68ba      	ldr	r2, [r7, #8]
 807589c:	0151      	lsls	r1, r2, #5
 807589e:	68fa      	ldr	r2, [r7, #12]
 80758a0:	440a      	add	r2, r1
 80758a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80758a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80758aa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80758ac:	68bb      	ldr	r3, [r7, #8]
 80758ae:	015a      	lsls	r2, r3, #5
 80758b0:	68fb      	ldr	r3, [r7, #12]
 80758b2:	4413      	add	r3, r2
 80758b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80758b8:	681b      	ldr	r3, [r3, #0]
 80758ba:	68ba      	ldr	r2, [r7, #8]
 80758bc:	0151      	lsls	r1, r2, #5
 80758be:	68fa      	ldr	r2, [r7, #12]
 80758c0:	440a      	add	r2, r1
 80758c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80758c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80758ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80758cc:	2300      	movs	r3, #0
}
 80758ce:	4618      	mov	r0, r3
 80758d0:	3714      	adds	r7, #20
 80758d2:	46bd      	mov	sp, r7
 80758d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80758d8:	4770      	bx	lr

080758da <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80758da:	b480      	push	{r7}
 80758dc:	b085      	sub	sp, #20
 80758de:	af00      	add	r7, sp, #0
 80758e0:	6078      	str	r0, [r7, #4]
 80758e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80758e4:	687b      	ldr	r3, [r7, #4]
 80758e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80758e8:	683b      	ldr	r3, [r7, #0]
 80758ea:	781b      	ldrb	r3, [r3, #0]
 80758ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80758ee:	683b      	ldr	r3, [r7, #0]
 80758f0:	785b      	ldrb	r3, [r3, #1]
 80758f2:	2b01      	cmp	r3, #1
 80758f4:	d128      	bne.n	8075948 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80758f6:	68bb      	ldr	r3, [r7, #8]
 80758f8:	015a      	lsls	r2, r3, #5
 80758fa:	68fb      	ldr	r3, [r7, #12]
 80758fc:	4413      	add	r3, r2
 80758fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075902:	681b      	ldr	r3, [r3, #0]
 8075904:	68ba      	ldr	r2, [r7, #8]
 8075906:	0151      	lsls	r1, r2, #5
 8075908:	68fa      	ldr	r2, [r7, #12]
 807590a:	440a      	add	r2, r1
 807590c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075910:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8075914:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8075916:	683b      	ldr	r3, [r7, #0]
 8075918:	78db      	ldrb	r3, [r3, #3]
 807591a:	2b03      	cmp	r3, #3
 807591c:	d003      	beq.n	8075926 <USB_EPClearStall+0x4c>
 807591e:	683b      	ldr	r3, [r7, #0]
 8075920:	78db      	ldrb	r3, [r3, #3]
 8075922:	2b02      	cmp	r3, #2
 8075924:	d138      	bne.n	8075998 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8075926:	68bb      	ldr	r3, [r7, #8]
 8075928:	015a      	lsls	r2, r3, #5
 807592a:	68fb      	ldr	r3, [r7, #12]
 807592c:	4413      	add	r3, r2
 807592e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075932:	681b      	ldr	r3, [r3, #0]
 8075934:	68ba      	ldr	r2, [r7, #8]
 8075936:	0151      	lsls	r1, r2, #5
 8075938:	68fa      	ldr	r2, [r7, #12]
 807593a:	440a      	add	r2, r1
 807593c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8075944:	6013      	str	r3, [r2, #0]
 8075946:	e027      	b.n	8075998 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8075948:	68bb      	ldr	r3, [r7, #8]
 807594a:	015a      	lsls	r2, r3, #5
 807594c:	68fb      	ldr	r3, [r7, #12]
 807594e:	4413      	add	r3, r2
 8075950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075954:	681b      	ldr	r3, [r3, #0]
 8075956:	68ba      	ldr	r2, [r7, #8]
 8075958:	0151      	lsls	r1, r2, #5
 807595a:	68fa      	ldr	r2, [r7, #12]
 807595c:	440a      	add	r2, r1
 807595e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075962:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8075966:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8075968:	683b      	ldr	r3, [r7, #0]
 807596a:	78db      	ldrb	r3, [r3, #3]
 807596c:	2b03      	cmp	r3, #3
 807596e:	d003      	beq.n	8075978 <USB_EPClearStall+0x9e>
 8075970:	683b      	ldr	r3, [r7, #0]
 8075972:	78db      	ldrb	r3, [r3, #3]
 8075974:	2b02      	cmp	r3, #2
 8075976:	d10f      	bne.n	8075998 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8075978:	68bb      	ldr	r3, [r7, #8]
 807597a:	015a      	lsls	r2, r3, #5
 807597c:	68fb      	ldr	r3, [r7, #12]
 807597e:	4413      	add	r3, r2
 8075980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075984:	681b      	ldr	r3, [r3, #0]
 8075986:	68ba      	ldr	r2, [r7, #8]
 8075988:	0151      	lsls	r1, r2, #5
 807598a:	68fa      	ldr	r2, [r7, #12]
 807598c:	440a      	add	r2, r1
 807598e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8075996:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8075998:	2300      	movs	r3, #0
}
 807599a:	4618      	mov	r0, r3
 807599c:	3714      	adds	r7, #20
 807599e:	46bd      	mov	sp, r7
 80759a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80759a4:	4770      	bx	lr

080759a6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80759a6:	b480      	push	{r7}
 80759a8:	b085      	sub	sp, #20
 80759aa:	af00      	add	r7, sp, #0
 80759ac:	6078      	str	r0, [r7, #4]
 80759ae:	460b      	mov	r3, r1
 80759b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80759b2:	687b      	ldr	r3, [r7, #4]
 80759b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80759b6:	68fb      	ldr	r3, [r7, #12]
 80759b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80759bc:	681b      	ldr	r3, [r3, #0]
 80759be:	68fa      	ldr	r2, [r7, #12]
 80759c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80759c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80759c8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80759ca:	68fb      	ldr	r3, [r7, #12]
 80759cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80759d0:	681a      	ldr	r2, [r3, #0]
 80759d2:	78fb      	ldrb	r3, [r7, #3]
 80759d4:	011b      	lsls	r3, r3, #4
 80759d6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80759da:	68f9      	ldr	r1, [r7, #12]
 80759dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80759e0:	4313      	orrs	r3, r2
 80759e2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80759e4:	2300      	movs	r3, #0
}
 80759e6:	4618      	mov	r0, r3
 80759e8:	3714      	adds	r7, #20
 80759ea:	46bd      	mov	sp, r7
 80759ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80759f0:	4770      	bx	lr

080759f2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80759f2:	b480      	push	{r7}
 80759f4:	b085      	sub	sp, #20
 80759f6:	af00      	add	r7, sp, #0
 80759f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80759fa:	687b      	ldr	r3, [r7, #4]
 80759fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80759fe:	68fb      	ldr	r3, [r7, #12]
 8075a00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8075a04:	681b      	ldr	r3, [r3, #0]
 8075a06:	68fa      	ldr	r2, [r7, #12]
 8075a08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8075a0c:	f023 0303 	bic.w	r3, r3, #3
 8075a10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8075a12:	68fb      	ldr	r3, [r7, #12]
 8075a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075a18:	685b      	ldr	r3, [r3, #4]
 8075a1a:	68fa      	ldr	r2, [r7, #12]
 8075a1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8075a20:	f023 0302 	bic.w	r3, r3, #2
 8075a24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8075a26:	2300      	movs	r3, #0
}
 8075a28:	4618      	mov	r0, r3
 8075a2a:	3714      	adds	r7, #20
 8075a2c:	46bd      	mov	sp, r7
 8075a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075a32:	4770      	bx	lr

08075a34 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8075a34:	b480      	push	{r7}
 8075a36:	b085      	sub	sp, #20
 8075a38:	af00      	add	r7, sp, #0
 8075a3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075a3c:	687b      	ldr	r3, [r7, #4]
 8075a3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8075a40:	68fb      	ldr	r3, [r7, #12]
 8075a42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8075a46:	681b      	ldr	r3, [r3, #0]
 8075a48:	68fa      	ldr	r2, [r7, #12]
 8075a4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8075a4e:	f023 0303 	bic.w	r3, r3, #3
 8075a52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8075a54:	68fb      	ldr	r3, [r7, #12]
 8075a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075a5a:	685b      	ldr	r3, [r3, #4]
 8075a5c:	68fa      	ldr	r2, [r7, #12]
 8075a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8075a62:	f043 0302 	orr.w	r3, r3, #2
 8075a66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8075a68:	2300      	movs	r3, #0
}
 8075a6a:	4618      	mov	r0, r3
 8075a6c:	3714      	adds	r7, #20
 8075a6e:	46bd      	mov	sp, r7
 8075a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075a74:	4770      	bx	lr

08075a76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8075a76:	b480      	push	{r7}
 8075a78:	b085      	sub	sp, #20
 8075a7a:	af00      	add	r7, sp, #0
 8075a7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8075a7e:	687b      	ldr	r3, [r7, #4]
 8075a80:	695b      	ldr	r3, [r3, #20]
 8075a82:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8075a84:	687b      	ldr	r3, [r7, #4]
 8075a86:	699b      	ldr	r3, [r3, #24]
 8075a88:	68fa      	ldr	r2, [r7, #12]
 8075a8a:	4013      	ands	r3, r2
 8075a8c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8075a8e:	68fb      	ldr	r3, [r7, #12]
}
 8075a90:	4618      	mov	r0, r3
 8075a92:	3714      	adds	r7, #20
 8075a94:	46bd      	mov	sp, r7
 8075a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075a9a:	4770      	bx	lr

08075a9c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8075a9c:	b480      	push	{r7}
 8075a9e:	b085      	sub	sp, #20
 8075aa0:	af00      	add	r7, sp, #0
 8075aa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075aa4:	687b      	ldr	r3, [r7, #4]
 8075aa6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8075aa8:	68fb      	ldr	r3, [r7, #12]
 8075aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075aae:	699b      	ldr	r3, [r3, #24]
 8075ab0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8075ab2:	68fb      	ldr	r3, [r7, #12]
 8075ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075ab8:	69db      	ldr	r3, [r3, #28]
 8075aba:	68ba      	ldr	r2, [r7, #8]
 8075abc:	4013      	ands	r3, r2
 8075abe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8075ac0:	68bb      	ldr	r3, [r7, #8]
 8075ac2:	0c1b      	lsrs	r3, r3, #16
}
 8075ac4:	4618      	mov	r0, r3
 8075ac6:	3714      	adds	r7, #20
 8075ac8:	46bd      	mov	sp, r7
 8075aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075ace:	4770      	bx	lr

08075ad0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8075ad0:	b480      	push	{r7}
 8075ad2:	b085      	sub	sp, #20
 8075ad4:	af00      	add	r7, sp, #0
 8075ad6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075ad8:	687b      	ldr	r3, [r7, #4]
 8075ada:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8075adc:	68fb      	ldr	r3, [r7, #12]
 8075ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075ae2:	699b      	ldr	r3, [r3, #24]
 8075ae4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8075ae6:	68fb      	ldr	r3, [r7, #12]
 8075ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075aec:	69db      	ldr	r3, [r3, #28]
 8075aee:	68ba      	ldr	r2, [r7, #8]
 8075af0:	4013      	ands	r3, r2
 8075af2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8075af4:	68bb      	ldr	r3, [r7, #8]
 8075af6:	b29b      	uxth	r3, r3
}
 8075af8:	4618      	mov	r0, r3
 8075afa:	3714      	adds	r7, #20
 8075afc:	46bd      	mov	sp, r7
 8075afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075b02:	4770      	bx	lr

08075b04 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8075b04:	b480      	push	{r7}
 8075b06:	b085      	sub	sp, #20
 8075b08:	af00      	add	r7, sp, #0
 8075b0a:	6078      	str	r0, [r7, #4]
 8075b0c:	460b      	mov	r3, r1
 8075b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075b10:	687b      	ldr	r3, [r7, #4]
 8075b12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8075b14:	78fb      	ldrb	r3, [r7, #3]
 8075b16:	015a      	lsls	r2, r3, #5
 8075b18:	68fb      	ldr	r3, [r7, #12]
 8075b1a:	4413      	add	r3, r2
 8075b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075b20:	689b      	ldr	r3, [r3, #8]
 8075b22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8075b24:	68fb      	ldr	r3, [r7, #12]
 8075b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075b2a:	695b      	ldr	r3, [r3, #20]
 8075b2c:	68ba      	ldr	r2, [r7, #8]
 8075b2e:	4013      	ands	r3, r2
 8075b30:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8075b32:	68bb      	ldr	r3, [r7, #8]
}
 8075b34:	4618      	mov	r0, r3
 8075b36:	3714      	adds	r7, #20
 8075b38:	46bd      	mov	sp, r7
 8075b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075b3e:	4770      	bx	lr

08075b40 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8075b40:	b480      	push	{r7}
 8075b42:	b087      	sub	sp, #28
 8075b44:	af00      	add	r7, sp, #0
 8075b46:	6078      	str	r0, [r7, #4]
 8075b48:	460b      	mov	r3, r1
 8075b4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075b4c:	687b      	ldr	r3, [r7, #4]
 8075b4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8075b50:	697b      	ldr	r3, [r7, #20]
 8075b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075b56:	691b      	ldr	r3, [r3, #16]
 8075b58:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8075b5a:	697b      	ldr	r3, [r7, #20]
 8075b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8075b62:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8075b64:	78fb      	ldrb	r3, [r7, #3]
 8075b66:	f003 030f 	and.w	r3, r3, #15
 8075b6a:	68fa      	ldr	r2, [r7, #12]
 8075b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8075b70:	01db      	lsls	r3, r3, #7
 8075b72:	b2db      	uxtb	r3, r3
 8075b74:	693a      	ldr	r2, [r7, #16]
 8075b76:	4313      	orrs	r3, r2
 8075b78:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8075b7a:	78fb      	ldrb	r3, [r7, #3]
 8075b7c:	015a      	lsls	r2, r3, #5
 8075b7e:	697b      	ldr	r3, [r7, #20]
 8075b80:	4413      	add	r3, r2
 8075b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075b86:	689b      	ldr	r3, [r3, #8]
 8075b88:	693a      	ldr	r2, [r7, #16]
 8075b8a:	4013      	ands	r3, r2
 8075b8c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8075b8e:	68bb      	ldr	r3, [r7, #8]
}
 8075b90:	4618      	mov	r0, r3
 8075b92:	371c      	adds	r7, #28
 8075b94:	46bd      	mov	sp, r7
 8075b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075b9a:	4770      	bx	lr

08075b9c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8075b9c:	b480      	push	{r7}
 8075b9e:	b083      	sub	sp, #12
 8075ba0:	af00      	add	r7, sp, #0
 8075ba2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8075ba4:	687b      	ldr	r3, [r7, #4]
 8075ba6:	695b      	ldr	r3, [r3, #20]
 8075ba8:	f003 0301 	and.w	r3, r3, #1
}
 8075bac:	4618      	mov	r0, r3
 8075bae:	370c      	adds	r7, #12
 8075bb0:	46bd      	mov	sp, r7
 8075bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075bb6:	4770      	bx	lr

08075bb8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8075bb8:	b480      	push	{r7}
 8075bba:	b085      	sub	sp, #20
 8075bbc:	af00      	add	r7, sp, #0
 8075bbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075bc0:	687b      	ldr	r3, [r7, #4]
 8075bc2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8075bc4:	68fb      	ldr	r3, [r7, #12]
 8075bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8075bca:	681b      	ldr	r3, [r3, #0]
 8075bcc:	68fa      	ldr	r2, [r7, #12]
 8075bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8075bd2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8075bd6:	f023 0307 	bic.w	r3, r3, #7
 8075bda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8075bdc:	68fb      	ldr	r3, [r7, #12]
 8075bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8075be2:	685b      	ldr	r3, [r3, #4]
 8075be4:	68fa      	ldr	r2, [r7, #12]
 8075be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8075bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8075bee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8075bf0:	2300      	movs	r3, #0
}
 8075bf2:	4618      	mov	r0, r3
 8075bf4:	3714      	adds	r7, #20
 8075bf6:	46bd      	mov	sp, r7
 8075bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075bfc:	4770      	bx	lr
	...

08075c00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8075c00:	b480      	push	{r7}
 8075c02:	b087      	sub	sp, #28
 8075c04:	af00      	add	r7, sp, #0
 8075c06:	60f8      	str	r0, [r7, #12]
 8075c08:	460b      	mov	r3, r1
 8075c0a:	607a      	str	r2, [r7, #4]
 8075c0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8075c0e:	68fb      	ldr	r3, [r7, #12]
 8075c10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8075c12:	68fb      	ldr	r3, [r7, #12]
 8075c14:	333c      	adds	r3, #60	; 0x3c
 8075c16:	3304      	adds	r3, #4
 8075c18:	681b      	ldr	r3, [r3, #0]
 8075c1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8075c1c:	693b      	ldr	r3, [r7, #16]
 8075c1e:	4a26      	ldr	r2, [pc, #152]	; (8075cb8 <USB_EP0_OutStart+0xb8>)
 8075c20:	4293      	cmp	r3, r2
 8075c22:	d90a      	bls.n	8075c3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8075c24:	697b      	ldr	r3, [r7, #20]
 8075c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075c2a:	681b      	ldr	r3, [r3, #0]
 8075c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8075c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8075c34:	d101      	bne.n	8075c3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8075c36:	2300      	movs	r3, #0
 8075c38:	e037      	b.n	8075caa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8075c3a:	697b      	ldr	r3, [r7, #20]
 8075c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075c40:	461a      	mov	r2, r3
 8075c42:	2300      	movs	r3, #0
 8075c44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8075c46:	697b      	ldr	r3, [r7, #20]
 8075c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075c4c:	691b      	ldr	r3, [r3, #16]
 8075c4e:	697a      	ldr	r2, [r7, #20]
 8075c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075c54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8075c58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8075c5a:	697b      	ldr	r3, [r7, #20]
 8075c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075c60:	691b      	ldr	r3, [r3, #16]
 8075c62:	697a      	ldr	r2, [r7, #20]
 8075c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075c68:	f043 0318 	orr.w	r3, r3, #24
 8075c6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8075c6e:	697b      	ldr	r3, [r7, #20]
 8075c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075c74:	691b      	ldr	r3, [r3, #16]
 8075c76:	697a      	ldr	r2, [r7, #20]
 8075c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075c7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8075c80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8075c82:	7afb      	ldrb	r3, [r7, #11]
 8075c84:	2b01      	cmp	r3, #1
 8075c86:	d10f      	bne.n	8075ca8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8075c88:	697b      	ldr	r3, [r7, #20]
 8075c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075c8e:	461a      	mov	r2, r3
 8075c90:	687b      	ldr	r3, [r7, #4]
 8075c92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8075c94:	697b      	ldr	r3, [r7, #20]
 8075c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8075c9a:	681b      	ldr	r3, [r3, #0]
 8075c9c:	697a      	ldr	r2, [r7, #20]
 8075c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8075ca2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8075ca6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8075ca8:	2300      	movs	r3, #0
}
 8075caa:	4618      	mov	r0, r3
 8075cac:	371c      	adds	r7, #28
 8075cae:	46bd      	mov	sp, r7
 8075cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075cb4:	4770      	bx	lr
 8075cb6:	bf00      	nop
 8075cb8:	4f54300a 	.word	0x4f54300a

08075cbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8075cbc:	b480      	push	{r7}
 8075cbe:	b085      	sub	sp, #20
 8075cc0:	af00      	add	r7, sp, #0
 8075cc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8075cc4:	2300      	movs	r3, #0
 8075cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8075cc8:	68fb      	ldr	r3, [r7, #12]
 8075cca:	3301      	adds	r3, #1
 8075ccc:	60fb      	str	r3, [r7, #12]
 8075cce:	68fb      	ldr	r3, [r7, #12]
 8075cd0:	4a13      	ldr	r2, [pc, #76]	; (8075d20 <USB_CoreReset+0x64>)
 8075cd2:	4293      	cmp	r3, r2
 8075cd4:	d901      	bls.n	8075cda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8075cd6:	2303      	movs	r3, #3
 8075cd8:	e01b      	b.n	8075d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8075cda:	687b      	ldr	r3, [r7, #4]
 8075cdc:	691b      	ldr	r3, [r3, #16]
 8075cde:	2b00      	cmp	r3, #0
 8075ce0:	daf2      	bge.n	8075cc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8075ce2:	2300      	movs	r3, #0
 8075ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8075ce6:	687b      	ldr	r3, [r7, #4]
 8075ce8:	691b      	ldr	r3, [r3, #16]
 8075cea:	f043 0201 	orr.w	r2, r3, #1
 8075cee:	687b      	ldr	r3, [r7, #4]
 8075cf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8075cf2:	68fb      	ldr	r3, [r7, #12]
 8075cf4:	3301      	adds	r3, #1
 8075cf6:	60fb      	str	r3, [r7, #12]
 8075cf8:	68fb      	ldr	r3, [r7, #12]
 8075cfa:	4a09      	ldr	r2, [pc, #36]	; (8075d20 <USB_CoreReset+0x64>)
 8075cfc:	4293      	cmp	r3, r2
 8075cfe:	d901      	bls.n	8075d04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8075d00:	2303      	movs	r3, #3
 8075d02:	e006      	b.n	8075d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8075d04:	687b      	ldr	r3, [r7, #4]
 8075d06:	691b      	ldr	r3, [r3, #16]
 8075d08:	f003 0301 	and.w	r3, r3, #1
 8075d0c:	2b01      	cmp	r3, #1
 8075d0e:	d0f0      	beq.n	8075cf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8075d10:	2300      	movs	r3, #0
}
 8075d12:	4618      	mov	r0, r3
 8075d14:	3714      	adds	r7, #20
 8075d16:	46bd      	mov	sp, r7
 8075d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8075d1c:	4770      	bx	lr
 8075d1e:	bf00      	nop
 8075d20:	00030d40 	.word	0x00030d40

08075d24 <__NVIC_SystemReset>:
{
 8075d24:	b480      	push	{r7}
 8075d26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8075d28:	f3bf 8f4f 	dsb	sy
}
 8075d2c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8075d2e:	4b06      	ldr	r3, [pc, #24]	; (8075d48 <__NVIC_SystemReset+0x24>)
 8075d30:	68db      	ldr	r3, [r3, #12]
 8075d32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8075d36:	4904      	ldr	r1, [pc, #16]	; (8075d48 <__NVIC_SystemReset+0x24>)
 8075d38:	4b04      	ldr	r3, [pc, #16]	; (8075d4c <__NVIC_SystemReset+0x28>)
 8075d3a:	4313      	orrs	r3, r2
 8075d3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8075d3e:	f3bf 8f4f 	dsb	sy
}
 8075d42:	bf00      	nop
    __NOP();
 8075d44:	bf00      	nop
 8075d46:	e7fd      	b.n	8075d44 <__NVIC_SystemReset+0x20>
 8075d48:	e000ed00 	.word	0xe000ed00
 8075d4c:	05fa0004 	.word	0x05fa0004

08075d50 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8075d50:	b580      	push	{r7, lr}
 8075d52:	b084      	sub	sp, #16
 8075d54:	af00      	add	r7, sp, #0
 8075d56:	6078      	str	r0, [r7, #4]
 8075d58:	460b      	mov	r3, r1
 8075d5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8075d5c:	f240 401c 	movw	r0, #1052	; 0x41c
 8075d60:	f002 fc00 	bl	8078564 <USBD_static_malloc>
 8075d64:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8075d66:	68fb      	ldr	r3, [r7, #12]
 8075d68:	2b00      	cmp	r3, #0
 8075d6a:	d105      	bne.n	8075d78 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8075d6c:	687b      	ldr	r3, [r7, #4]
 8075d6e:	2200      	movs	r2, #0
 8075d70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8075d74:	2302      	movs	r3, #2
 8075d76:	e03f      	b.n	8075df8 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8075d78:	687b      	ldr	r3, [r7, #4]
 8075d7a:	68fa      	ldr	r2, [r7, #12]
 8075d7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 8075d80:	68fb      	ldr	r3, [r7, #12]
 8075d82:	2200      	movs	r2, #0
 8075d84:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8075d88:	68fb      	ldr	r3, [r7, #12]
 8075d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8075d8e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 8075d92:	68fb      	ldr	r3, [r7, #12]
 8075d94:	2200      	movs	r2, #0
 8075d96:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8075d9a:	68fb      	ldr	r3, [r7, #12]
 8075d9c:	2200      	movs	r2, #0
 8075d9e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8075da2:	68fb      	ldr	r3, [r7, #12]
 8075da4:	2200      	movs	r2, #0
 8075da6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8075daa:	68fb      	ldr	r3, [r7, #12]
 8075dac:	2202      	movs	r2, #2
 8075dae:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8075db2:	68fb      	ldr	r3, [r7, #12]
 8075db4:	2200      	movs	r2, #0
 8075db6:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8075dba:	68fb      	ldr	r3, [r7, #12]
 8075dbc:	2200      	movs	r2, #0
 8075dbe:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8075dc2:	68fb      	ldr	r3, [r7, #12]
 8075dc4:	2200      	movs	r2, #0
 8075dc6:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8075dca:	68fb      	ldr	r3, [r7, #12]
 8075dcc:	2200      	movs	r2, #0
 8075dce:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8075dd2:	68fb      	ldr	r3, [r7, #12]
 8075dd4:	2202      	movs	r2, #2
 8075dd6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 8075dda:	68fb      	ldr	r3, [r7, #12]
 8075ddc:	2200      	movs	r2, #0
 8075dde:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8075de2:	687b      	ldr	r3, [r7, #4]
 8075de4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8075de8:	685b      	ldr	r3, [r3, #4]
 8075dea:	4798      	blx	r3
 8075dec:	4603      	mov	r3, r0
 8075dee:	2b00      	cmp	r3, #0
 8075df0:	d001      	beq.n	8075df6 <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8075df2:	2303      	movs	r3, #3
 8075df4:	e000      	b.n	8075df8 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8075df6:	2300      	movs	r3, #0
}
 8075df8:	4618      	mov	r0, r3
 8075dfa:	3710      	adds	r7, #16
 8075dfc:	46bd      	mov	sp, r7
 8075dfe:	bd80      	pop	{r7, pc}

08075e00 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8075e00:	b580      	push	{r7, lr}
 8075e02:	b084      	sub	sp, #16
 8075e04:	af00      	add	r7, sp, #0
 8075e06:	6078      	str	r0, [r7, #4]
 8075e08:	460b      	mov	r3, r1
 8075e0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8075e0c:	687b      	ldr	r3, [r7, #4]
 8075e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8075e12:	2b00      	cmp	r3, #0
 8075e14:	d101      	bne.n	8075e1a <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8075e16:	2302      	movs	r3, #2
 8075e18:	e027      	b.n	8075e6a <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8075e1a:	687b      	ldr	r3, [r7, #4]
 8075e1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8075e20:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8075e22:	68fb      	ldr	r3, [r7, #12]
 8075e24:	2200      	movs	r2, #0
 8075e26:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8075e2a:	68fb      	ldr	r3, [r7, #12]
 8075e2c:	2200      	movs	r2, #0
 8075e2e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8075e32:	68fb      	ldr	r3, [r7, #12]
 8075e34:	2202      	movs	r2, #2
 8075e36:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8075e3a:	68fb      	ldr	r3, [r7, #12]
 8075e3c:	2200      	movs	r2, #0
 8075e3e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8075e42:	68fb      	ldr	r3, [r7, #12]
 8075e44:	2202      	movs	r2, #2
 8075e46:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8075e4a:	687b      	ldr	r3, [r7, #4]
 8075e4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8075e50:	689b      	ldr	r3, [r3, #8]
 8075e52:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8075e54:	687b      	ldr	r3, [r7, #4]
 8075e56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8075e5a:	4618      	mov	r0, r3
 8075e5c:	f002 fb90 	bl	8078580 <USBD_static_free>
  pdev->pClassData = NULL;
 8075e60:	687b      	ldr	r3, [r7, #4]
 8075e62:	2200      	movs	r2, #0
 8075e64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8075e68:	2300      	movs	r3, #0
}
 8075e6a:	4618      	mov	r0, r3
 8075e6c:	3710      	adds	r7, #16
 8075e6e:	46bd      	mov	sp, r7
 8075e70:	bd80      	pop	{r7, pc}
	...

08075e74 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8075e74:	b580      	push	{r7, lr}
 8075e76:	b088      	sub	sp, #32
 8075e78:	af00      	add	r7, sp, #0
 8075e7a:	6078      	str	r0, [r7, #4]
 8075e7c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8075e7e:	687b      	ldr	r3, [r7, #4]
 8075e80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8075e84:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8075e86:	2300      	movs	r3, #0
 8075e88:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8075e8a:	2300      	movs	r3, #0
 8075e8c:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8075e8e:	2300      	movs	r3, #0
 8075e90:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8075e92:	2300      	movs	r3, #0
 8075e94:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8075e96:	693b      	ldr	r3, [r7, #16]
 8075e98:	2b00      	cmp	r3, #0
 8075e9a:	d101      	bne.n	8075ea0 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8075e9c:	2303      	movs	r3, #3
 8075e9e:	e0d5      	b.n	807604c <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8075ea0:	683b      	ldr	r3, [r7, #0]
 8075ea2:	781b      	ldrb	r3, [r3, #0]
 8075ea4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8075ea8:	2b00      	cmp	r3, #0
 8075eaa:	d03e      	beq.n	8075f2a <USBD_DFU_Setup+0xb6>
 8075eac:	2b20      	cmp	r3, #32
 8075eae:	f040 80c5 	bne.w	807603c <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8075eb2:	683b      	ldr	r3, [r7, #0]
 8075eb4:	785b      	ldrb	r3, [r3, #1]
 8075eb6:	2b06      	cmp	r3, #6
 8075eb8:	d82f      	bhi.n	8075f1a <USBD_DFU_Setup+0xa6>
 8075eba:	a201      	add	r2, pc, #4	; (adr r2, 8075ec0 <USBD_DFU_Setup+0x4c>)
 8075ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8075ec0:	08075f11 	.word	0x08075f11
 8075ec4:	08075edd 	.word	0x08075edd
 8075ec8:	08075ee7 	.word	0x08075ee7
 8075ecc:	08075ef1 	.word	0x08075ef1
 8075ed0:	08075ef9 	.word	0x08075ef9
 8075ed4:	08075f01 	.word	0x08075f01
 8075ed8:	08075f09 	.word	0x08075f09
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8075edc:	6839      	ldr	r1, [r7, #0]
 8075ede:	6878      	ldr	r0, [r7, #4]
 8075ee0:	f000 fa6c 	bl	80763bc <DFU_Download>
          break;
 8075ee4:	e020      	b.n	8075f28 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8075ee6:	6839      	ldr	r1, [r7, #0]
 8075ee8:	6878      	ldr	r0, [r7, #4]
 8075eea:	f000 fad3 	bl	8076494 <DFU_Upload>
          break;
 8075eee:	e01b      	b.n	8075f28 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8075ef0:	6878      	ldr	r0, [r7, #4]
 8075ef2:	f000 fba9 	bl	8076648 <DFU_GetStatus>
          break;
 8075ef6:	e017      	b.n	8075f28 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8075ef8:	6878      	ldr	r0, [r7, #4]
 8075efa:	f000 fc5b 	bl	80767b4 <DFU_ClearStatus>
          break;
 8075efe:	e013      	b.n	8075f28 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8075f00:	6878      	ldr	r0, [r7, #4]
 8075f02:	f000 fcab 	bl	807685c <DFU_GetState>
          break;
 8075f06:	e00f      	b.n	8075f28 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8075f08:	6878      	ldr	r0, [r7, #4]
 8075f0a:	f000 fcbf 	bl	807688c <DFU_Abort>
          break;
 8075f0e:	e00b      	b.n	8075f28 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8075f10:	6839      	ldr	r1, [r7, #0]
 8075f12:	6878      	ldr	r0, [r7, #4]
 8075f14:	f000 f9ee 	bl	80762f4 <DFU_Detach>
          break;
 8075f18:	e006      	b.n	8075f28 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8075f1a:	6839      	ldr	r1, [r7, #0]
 8075f1c:	6878      	ldr	r0, [r7, #4]
 8075f1e:	f001 fdf9 	bl	8077b14 <USBD_CtlError>
          ret = USBD_FAIL;
 8075f22:	2303      	movs	r3, #3
 8075f24:	77fb      	strb	r3, [r7, #31]
          break;
 8075f26:	bf00      	nop
      }
      break;
 8075f28:	e08f      	b.n	807604a <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8075f2a:	683b      	ldr	r3, [r7, #0]
 8075f2c:	785b      	ldrb	r3, [r3, #1]
 8075f2e:	2b0b      	cmp	r3, #11
 8075f30:	d87b      	bhi.n	807602a <USBD_DFU_Setup+0x1b6>
 8075f32:	a201      	add	r2, pc, #4	; (adr r2, 8075f38 <USBD_DFU_Setup+0xc4>)
 8075f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8075f38:	08075f69 	.word	0x08075f69
 8075f3c:	08076039 	.word	0x08076039
 8075f40:	0807602b 	.word	0x0807602b
 8075f44:	0807602b 	.word	0x0807602b
 8075f48:	0807602b 	.word	0x0807602b
 8075f4c:	0807602b 	.word	0x0807602b
 8075f50:	08075f93 	.word	0x08075f93
 8075f54:	0807602b 	.word	0x0807602b
 8075f58:	0807602b 	.word	0x0807602b
 8075f5c:	0807602b 	.word	0x0807602b
 8075f60:	08075fbd 	.word	0x08075fbd
 8075f64:	08075fe9 	.word	0x08075fe9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8075f68:	687b      	ldr	r3, [r7, #4]
 8075f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8075f6e:	b2db      	uxtb	r3, r3
 8075f70:	2b03      	cmp	r3, #3
 8075f72:	d107      	bne.n	8075f84 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8075f74:	f107 030e 	add.w	r3, r7, #14
 8075f78:	2202      	movs	r2, #2
 8075f7a:	4619      	mov	r1, r3
 8075f7c:	6878      	ldr	r0, [r7, #4]
 8075f7e:	f001 fe3a 	bl	8077bf6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8075f82:	e05a      	b.n	807603a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8075f84:	6839      	ldr	r1, [r7, #0]
 8075f86:	6878      	ldr	r0, [r7, #4]
 8075f88:	f001 fdc4 	bl	8077b14 <USBD_CtlError>
            ret = USBD_FAIL;
 8075f8c:	2303      	movs	r3, #3
 8075f8e:	77fb      	strb	r3, [r7, #31]
          break;
 8075f90:	e053      	b.n	807603a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8075f92:	683b      	ldr	r3, [r7, #0]
 8075f94:	885b      	ldrh	r3, [r3, #2]
 8075f96:	0a1b      	lsrs	r3, r3, #8
 8075f98:	b29b      	uxth	r3, r3
 8075f9a:	2b21      	cmp	r3, #33	; 0x21
 8075f9c:	d107      	bne.n	8075fae <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8075f9e:	4b2d      	ldr	r3, [pc, #180]	; (8076054 <USBD_DFU_Setup+0x1e0>)
 8075fa0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8075fa2:	683b      	ldr	r3, [r7, #0]
 8075fa4:	88db      	ldrh	r3, [r3, #6]
 8075fa6:	2b09      	cmp	r3, #9
 8075fa8:	bf28      	it	cs
 8075faa:	2309      	movcs	r3, #9
 8075fac:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8075fae:	8afb      	ldrh	r3, [r7, #22]
 8075fb0:	461a      	mov	r2, r3
 8075fb2:	69b9      	ldr	r1, [r7, #24]
 8075fb4:	6878      	ldr	r0, [r7, #4]
 8075fb6:	f001 fe1e 	bl	8077bf6 <USBD_CtlSendData>
          break;
 8075fba:	e03e      	b.n	807603a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8075fbc:	687b      	ldr	r3, [r7, #4]
 8075fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8075fc2:	b2db      	uxtb	r3, r3
 8075fc4:	2b03      	cmp	r3, #3
 8075fc6:	d108      	bne.n	8075fda <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8075fc8:	693b      	ldr	r3, [r7, #16]
 8075fca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8075fce:	2201      	movs	r2, #1
 8075fd0:	4619      	mov	r1, r3
 8075fd2:	6878      	ldr	r0, [r7, #4]
 8075fd4:	f001 fe0f 	bl	8077bf6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8075fd8:	e02f      	b.n	807603a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8075fda:	6839      	ldr	r1, [r7, #0]
 8075fdc:	6878      	ldr	r0, [r7, #4]
 8075fde:	f001 fd99 	bl	8077b14 <USBD_CtlError>
            ret = USBD_FAIL;
 8075fe2:	2303      	movs	r3, #3
 8075fe4:	77fb      	strb	r3, [r7, #31]
          break;
 8075fe6:	e028      	b.n	807603a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8075fe8:	683b      	ldr	r3, [r7, #0]
 8075fea:	885b      	ldrh	r3, [r3, #2]
 8075fec:	b2db      	uxtb	r3, r3
 8075fee:	2b00      	cmp	r3, #0
 8075ff0:	d114      	bne.n	807601c <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8075ff2:	687b      	ldr	r3, [r7, #4]
 8075ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8075ff8:	b2db      	uxtb	r3, r3
 8075ffa:	2b03      	cmp	r3, #3
 8075ffc:	d107      	bne.n	807600e <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8075ffe:	683b      	ldr	r3, [r7, #0]
 8076000:	885b      	ldrh	r3, [r3, #2]
 8076002:	b2db      	uxtb	r3, r3
 8076004:	461a      	mov	r2, r3
 8076006:	693b      	ldr	r3, [r7, #16]
 8076008:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 807600c:	e015      	b.n	807603a <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 807600e:	6839      	ldr	r1, [r7, #0]
 8076010:	6878      	ldr	r0, [r7, #4]
 8076012:	f001 fd7f 	bl	8077b14 <USBD_CtlError>
              ret = USBD_FAIL;
 8076016:	2303      	movs	r3, #3
 8076018:	77fb      	strb	r3, [r7, #31]
          break;
 807601a:	e00e      	b.n	807603a <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 807601c:	6839      	ldr	r1, [r7, #0]
 807601e:	6878      	ldr	r0, [r7, #4]
 8076020:	f001 fd78 	bl	8077b14 <USBD_CtlError>
            ret = USBD_FAIL;
 8076024:	2303      	movs	r3, #3
 8076026:	77fb      	strb	r3, [r7, #31]
          break;
 8076028:	e007      	b.n	807603a <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 807602a:	6839      	ldr	r1, [r7, #0]
 807602c:	6878      	ldr	r0, [r7, #4]
 807602e:	f001 fd71 	bl	8077b14 <USBD_CtlError>
          ret = USBD_FAIL;
 8076032:	2303      	movs	r3, #3
 8076034:	77fb      	strb	r3, [r7, #31]
          break;
 8076036:	e000      	b.n	807603a <USBD_DFU_Setup+0x1c6>
          break;
 8076038:	bf00      	nop
      }
      break;
 807603a:	e006      	b.n	807604a <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 807603c:	6839      	ldr	r1, [r7, #0]
 807603e:	6878      	ldr	r0, [r7, #4]
 8076040:	f001 fd68 	bl	8077b14 <USBD_CtlError>
      ret = USBD_FAIL;
 8076044:	2303      	movs	r3, #3
 8076046:	77fb      	strb	r3, [r7, #31]
      break;
 8076048:	bf00      	nop
  }

  return (uint8_t)ret;
 807604a:	7ffb      	ldrb	r3, [r7, #31]
}
 807604c:	4618      	mov	r0, r3
 807604e:	3720      	adds	r7, #32
 8076050:	46bd      	mov	sp, r7
 8076052:	bd80      	pop	{r7, pc}
 8076054:	2000005a 	.word	0x2000005a

08076058 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8076058:	b480      	push	{r7}
 807605a:	b083      	sub	sp, #12
 807605c:	af00      	add	r7, sp, #0
 807605e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8076060:	687b      	ldr	r3, [r7, #4]
 8076062:	221b      	movs	r2, #27
 8076064:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8076066:	4b03      	ldr	r3, [pc, #12]	; (8076074 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8076068:	4618      	mov	r0, r3
 807606a:	370c      	adds	r7, #12
 807606c:	46bd      	mov	sp, r7
 807606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8076072:	4770      	bx	lr
 8076074:	20000048 	.word	0x20000048

08076078 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8076078:	b480      	push	{r7}
 807607a:	b083      	sub	sp, #12
 807607c:	af00      	add	r7, sp, #0
 807607e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8076080:	2300      	movs	r3, #0
}
 8076082:	4618      	mov	r0, r3
 8076084:	370c      	adds	r7, #12
 8076086:	46bd      	mov	sp, r7
 8076088:	f85d 7b04 	ldr.w	r7, [sp], #4
 807608c:	4770      	bx	lr

0807608e <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 807608e:	b580      	push	{r7, lr}
 8076090:	b088      	sub	sp, #32
 8076092:	af00      	add	r7, sp, #0
 8076094:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8076096:	687b      	ldr	r3, [r7, #4]
 8076098:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807609c:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807609e:	687b      	ldr	r3, [r7, #4]
 80760a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80760a4:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 80760a6:	69fb      	ldr	r3, [r7, #28]
 80760a8:	2b00      	cmp	r3, #0
 80760aa:	d101      	bne.n	80760b0 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80760ac:	2303      	movs	r3, #3
 80760ae:	e0ce      	b.n	807624e <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80760b0:	69fb      	ldr	r3, [r7, #28]
 80760b2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80760b6:	2b04      	cmp	r3, #4
 80760b8:	f040 80bd 	bne.w	8076236 <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 80760bc:	69fb      	ldr	r3, [r7, #28]
 80760be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80760c2:	2b00      	cmp	r3, #0
 80760c4:	d17c      	bne.n	80761c0 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 80760c6:	69fb      	ldr	r3, [r7, #28]
 80760c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80760cc:	2b01      	cmp	r3, #1
 80760ce:	f000 8093 	beq.w	80761f8 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 80760d2:	69fb      	ldr	r3, [r7, #28]
 80760d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80760d8:	2b05      	cmp	r3, #5
 80760da:	d15e      	bne.n	807619a <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80760dc:	69fb      	ldr	r3, [r7, #28]
 80760de:	781b      	ldrb	r3, [r3, #0]
 80760e0:	2b21      	cmp	r3, #33	; 0x21
 80760e2:	d124      	bne.n	807612e <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80760e4:	69fb      	ldr	r3, [r7, #28]
 80760e6:	785b      	ldrb	r3, [r3, #1]
 80760e8:	461a      	mov	r2, r3
 80760ea:	69fb      	ldr	r3, [r7, #28]
 80760ec:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80760f0:	69fb      	ldr	r3, [r7, #28]
 80760f2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80760f6:	69fb      	ldr	r3, [r7, #28]
 80760f8:	789b      	ldrb	r3, [r3, #2]
 80760fa:	021b      	lsls	r3, r3, #8
 80760fc:	441a      	add	r2, r3
 80760fe:	69fb      	ldr	r3, [r7, #28]
 8076100:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8076104:	69fb      	ldr	r3, [r7, #28]
 8076106:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807610a:	69fb      	ldr	r3, [r7, #28]
 807610c:	78db      	ldrb	r3, [r3, #3]
 807610e:	041b      	lsls	r3, r3, #16
 8076110:	441a      	add	r2, r3
 8076112:	69fb      	ldr	r3, [r7, #28]
 8076114:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8076118:	69fb      	ldr	r3, [r7, #28]
 807611a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807611e:	69fb      	ldr	r3, [r7, #28]
 8076120:	791b      	ldrb	r3, [r3, #4]
 8076122:	061b      	lsls	r3, r3, #24
 8076124:	441a      	add	r2, r3
 8076126:	69fb      	ldr	r3, [r7, #28]
 8076128:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 807612c:	e064      	b.n	80761f8 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 807612e:	69fb      	ldr	r3, [r7, #28]
 8076130:	781b      	ldrb	r3, [r3, #0]
 8076132:	2b41      	cmp	r3, #65	; 0x41
 8076134:	d12f      	bne.n	8076196 <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8076136:	69fb      	ldr	r3, [r7, #28]
 8076138:	785b      	ldrb	r3, [r3, #1]
 807613a:	461a      	mov	r2, r3
 807613c:	69fb      	ldr	r3, [r7, #28]
 807613e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8076142:	69fb      	ldr	r3, [r7, #28]
 8076144:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8076148:	69fb      	ldr	r3, [r7, #28]
 807614a:	789b      	ldrb	r3, [r3, #2]
 807614c:	021b      	lsls	r3, r3, #8
 807614e:	441a      	add	r2, r3
 8076150:	69fb      	ldr	r3, [r7, #28]
 8076152:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8076156:	69fb      	ldr	r3, [r7, #28]
 8076158:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 807615c:	69fb      	ldr	r3, [r7, #28]
 807615e:	78db      	ldrb	r3, [r3, #3]
 8076160:	041b      	lsls	r3, r3, #16
 8076162:	441a      	add	r2, r3
 8076164:	69fb      	ldr	r3, [r7, #28]
 8076166:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 807616a:	69fb      	ldr	r3, [r7, #28]
 807616c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8076170:	69fb      	ldr	r3, [r7, #28]
 8076172:	791b      	ldrb	r3, [r3, #4]
 8076174:	061b      	lsls	r3, r3, #24
 8076176:	441a      	add	r2, r3
 8076178:	69fb      	ldr	r3, [r7, #28]
 807617a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 807617e:	69bb      	ldr	r3, [r7, #24]
 8076180:	68db      	ldr	r3, [r3, #12]
 8076182:	69fa      	ldr	r2, [r7, #28]
 8076184:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8076188:	4610      	mov	r0, r2
 807618a:	4798      	blx	r3
 807618c:	4603      	mov	r3, r0
 807618e:	2b00      	cmp	r3, #0
 8076190:	d032      	beq.n	80761f8 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8076192:	2303      	movs	r3, #3
 8076194:	e05b      	b.n	807624e <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8076196:	2303      	movs	r3, #3
 8076198:	e059      	b.n	807624e <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 807619a:	69fb      	ldr	r3, [r7, #28]
 807619c:	2200      	movs	r2, #0
 807619e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 80761a2:	69fb      	ldr	r3, [r7, #28]
 80761a4:	2200      	movs	r2, #0
 80761a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 80761aa:	2300      	movs	r3, #0
 80761ac:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 80761ae:	2301      	movs	r3, #1
 80761b0:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 80761b2:	f107 030c 	add.w	r3, r7, #12
 80761b6:	4619      	mov	r1, r3
 80761b8:	6878      	ldr	r0, [r7, #4]
 80761ba:	f001 fcab 	bl	8077b14 <USBD_CtlError>
 80761be:	e01b      	b.n	80761f8 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80761c0:	69fb      	ldr	r3, [r7, #28]
 80761c2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80761c6:	2b01      	cmp	r3, #1
 80761c8:	d916      	bls.n	80761f8 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80761ca:	69fb      	ldr	r3, [r7, #28]
 80761cc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80761d0:	3b02      	subs	r3, #2
 80761d2:	029a      	lsls	r2, r3, #10
 80761d4:	69fb      	ldr	r3, [r7, #28]
 80761d6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80761da:	4413      	add	r3, r2
 80761dc:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80761de:	69bb      	ldr	r3, [r7, #24]
 80761e0:	691b      	ldr	r3, [r3, #16]
 80761e2:	69f8      	ldr	r0, [r7, #28]
 80761e4:	6979      	ldr	r1, [r7, #20]
 80761e6:	69fa      	ldr	r2, [r7, #28]
 80761e8:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80761ec:	4798      	blx	r3
 80761ee:	4603      	mov	r3, r0
 80761f0:	2b00      	cmp	r3, #0
 80761f2:	d001      	beq.n	80761f8 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 80761f4:	2303      	movs	r3, #3
 80761f6:	e02a      	b.n	807624e <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80761f8:	69fb      	ldr	r3, [r7, #28]
 80761fa:	2200      	movs	r2, #0
 80761fc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8076200:	69fb      	ldr	r3, [r7, #28]
 8076202:	2200      	movs	r2, #0
 8076204:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8076208:	69fb      	ldr	r3, [r7, #28]
 807620a:	2203      	movs	r2, #3
 807620c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8076210:	69fb      	ldr	r3, [r7, #28]
 8076212:	2200      	movs	r2, #0
 8076214:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8076218:	69fb      	ldr	r3, [r7, #28]
 807621a:	2200      	movs	r2, #0
 807621c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8076220:	69fb      	ldr	r3, [r7, #28]
 8076222:	2200      	movs	r2, #0
 8076224:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8076228:	69fb      	ldr	r3, [r7, #28]
 807622a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807622e:	69fb      	ldr	r3, [r7, #28]
 8076230:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8076234:	e00a      	b.n	807624c <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8076236:	69fb      	ldr	r3, [r7, #28]
 8076238:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807623c:	2b07      	cmp	r3, #7
 807623e:	d103      	bne.n	8076248 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8076240:	6878      	ldr	r0, [r7, #4]
 8076242:	f000 fb75 	bl	8076930 <DFU_Leave>
 8076246:	e001      	b.n	807624c <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8076248:	2303      	movs	r3, #3
 807624a:	e000      	b.n	807624e <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 807624c:	2300      	movs	r3, #0
}
 807624e:	4618      	mov	r0, r3
 8076250:	3720      	adds	r7, #32
 8076252:	46bd      	mov	sp, r7
 8076254:	bd80      	pop	{r7, pc}

08076256 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8076256:	b480      	push	{r7}
 8076258:	b083      	sub	sp, #12
 807625a:	af00      	add	r7, sp, #0
 807625c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 807625e:	2300      	movs	r3, #0
}
 8076260:	4618      	mov	r0, r3
 8076262:	370c      	adds	r7, #12
 8076264:	46bd      	mov	sp, r7
 8076266:	f85d 7b04 	ldr.w	r7, [sp], #4
 807626a:	4770      	bx	lr

0807626c <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 807626c:	b480      	push	{r7}
 807626e:	b083      	sub	sp, #12
 8076270:	af00      	add	r7, sp, #0
 8076272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8076274:	687b      	ldr	r3, [r7, #4]
 8076276:	220a      	movs	r2, #10
 8076278:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 807627a:	4b03      	ldr	r3, [pc, #12]	; (8076288 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 807627c:	4618      	mov	r0, r3
 807627e:	370c      	adds	r7, #12
 8076280:	46bd      	mov	sp, r7
 8076282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8076286:	4770      	bx	lr
 8076288:	20000064 	.word	0x20000064

0807628c <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 807628c:	b580      	push	{r7, lr}
 807628e:	b086      	sub	sp, #24
 8076290:	af00      	add	r7, sp, #0
 8076292:	60f8      	str	r0, [r7, #12]
 8076294:	460b      	mov	r3, r1
 8076296:	607a      	str	r2, [r7, #4]
 8076298:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 807629a:	68fb      	ldr	r3, [r7, #12]
 807629c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80762a0:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80762a2:	7afb      	ldrb	r3, [r7, #11]
 80762a4:	2b06      	cmp	r3, #6
 80762a6:	d808      	bhi.n	80762ba <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80762a8:	697b      	ldr	r3, [r7, #20]
 80762aa:	681b      	ldr	r3, [r3, #0]
 80762ac:	687a      	ldr	r2, [r7, #4]
 80762ae:	4905      	ldr	r1, [pc, #20]	; (80762c4 <USBD_DFU_GetUsrStringDesc+0x38>)
 80762b0:	4618      	mov	r0, r3
 80762b2:	f001 fc40 	bl	8077b36 <USBD_GetString>
    return USBD_StrDesc;
 80762b6:	4b03      	ldr	r3, [pc, #12]	; (80762c4 <USBD_DFU_GetUsrStringDesc+0x38>)
 80762b8:	e000      	b.n	80762bc <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80762ba:	2300      	movs	r3, #0
  }
}
 80762bc:	4618      	mov	r0, r3
 80762be:	3718      	adds	r7, #24
 80762c0:	46bd      	mov	sp, r7
 80762c2:	bd80      	pop	{r7, pc}
 80762c4:	200000f8 	.word	0x200000f8

080762c8 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80762c8:	b480      	push	{r7}
 80762ca:	b083      	sub	sp, #12
 80762cc:	af00      	add	r7, sp, #0
 80762ce:	6078      	str	r0, [r7, #4]
 80762d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80762d2:	683b      	ldr	r3, [r7, #0]
 80762d4:	2b00      	cmp	r3, #0
 80762d6:	d101      	bne.n	80762dc <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80762d8:	2303      	movs	r3, #3
 80762da:	e004      	b.n	80762e6 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80762dc:	687b      	ldr	r3, [r7, #4]
 80762de:	683a      	ldr	r2, [r7, #0]
 80762e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80762e4:	2300      	movs	r3, #0
}
 80762e6:	4618      	mov	r0, r3
 80762e8:	370c      	adds	r7, #12
 80762ea:	46bd      	mov	sp, r7
 80762ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80762f0:	4770      	bx	lr
	...

080762f4 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80762f4:	b580      	push	{r7, lr}
 80762f6:	b084      	sub	sp, #16
 80762f8:	af00      	add	r7, sp, #0
 80762fa:	6078      	str	r0, [r7, #4]
 80762fc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80762fe:	687b      	ldr	r3, [r7, #4]
 8076300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8076304:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8076306:	68fb      	ldr	r3, [r7, #12]
 8076308:	2b00      	cmp	r3, #0
 807630a:	d051      	beq.n	80763b0 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807630c:	68fb      	ldr	r3, [r7, #12]
 807630e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8076312:	2b02      	cmp	r3, #2
 8076314:	d013      	beq.n	807633e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8076316:	68fb      	ldr	r3, [r7, #12]
 8076318:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 807631c:	2b03      	cmp	r3, #3
 807631e:	d00e      	beq.n	807633e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8076320:	68fb      	ldr	r3, [r7, #12]
 8076322:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8076326:	2b05      	cmp	r3, #5
 8076328:	d009      	beq.n	807633e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807632a:	68fb      	ldr	r3, [r7, #12]
 807632c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8076330:	2b06      	cmp	r3, #6
 8076332:	d004      	beq.n	807633e <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8076334:	68fb      	ldr	r3, [r7, #12]
 8076336:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 807633a:	2b09      	cmp	r3, #9
 807633c:	d125      	bne.n	807638a <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 807633e:	68fb      	ldr	r3, [r7, #12]
 8076340:	2202      	movs	r2, #2
 8076342:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8076346:	68fb      	ldr	r3, [r7, #12]
 8076348:	2200      	movs	r2, #0
 807634a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 807634e:	68fb      	ldr	r3, [r7, #12]
 8076350:	2200      	movs	r2, #0
 8076352:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8076356:	68fb      	ldr	r3, [r7, #12]
 8076358:	2200      	movs	r2, #0
 807635a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 807635e:	68fb      	ldr	r3, [r7, #12]
 8076360:	2200      	movs	r2, #0
 8076362:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8076366:	68fb      	ldr	r3, [r7, #12]
 8076368:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807636c:	68fb      	ldr	r3, [r7, #12]
 807636e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8076372:	68fb      	ldr	r3, [r7, #12]
 8076374:	2200      	movs	r2, #0
 8076376:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 807637a:	68fb      	ldr	r3, [r7, #12]
 807637c:	2200      	movs	r2, #0
 807637e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8076382:	68fb      	ldr	r3, [r7, #12]
 8076384:	2200      	movs	r2, #0
 8076386:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 807638a:	4b0b      	ldr	r3, [pc, #44]	; (80763b8 <DFU_Detach+0xc4>)
 807638c:	7d5b      	ldrb	r3, [r3, #21]
 807638e:	f003 0310 	and.w	r3, r3, #16
 8076392:	2b00      	cmp	r3, #0
 8076394:	d006      	beq.n	80763a4 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8076396:	6878      	ldr	r0, [r7, #4]
 8076398:	f000 fb7b 	bl	8076a92 <USBD_Stop>
    (void)USBD_Start(pdev);
 807639c:	6878      	ldr	r0, [r7, #4]
 807639e:	f000 fb6c 	bl	8076a7a <USBD_Start>
 80763a2:	e006      	b.n	80763b2 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 80763a4:	683b      	ldr	r3, [r7, #0]
 80763a6:	885b      	ldrh	r3, [r3, #2]
 80763a8:	4618      	mov	r0, r3
 80763aa:	f7fc fa3d 	bl	8072828 <HAL_Delay>
 80763ae:	e000      	b.n	80763b2 <DFU_Detach+0xbe>
    return;
 80763b0:	bf00      	nop
  }
}
 80763b2:	3710      	adds	r7, #16
 80763b4:	46bd      	mov	sp, r7
 80763b6:	bd80      	pop	{r7, pc}
 80763b8:	20000048 	.word	0x20000048

080763bc <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80763bc:	b580      	push	{r7, lr}
 80763be:	b084      	sub	sp, #16
 80763c0:	af00      	add	r7, sp, #0
 80763c2:	6078      	str	r0, [r7, #4]
 80763c4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80763c6:	687b      	ldr	r3, [r7, #4]
 80763c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80763cc:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80763ce:	68fb      	ldr	r3, [r7, #12]
 80763d0:	2b00      	cmp	r3, #0
 80763d2:	d05b      	beq.n	807648c <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80763d4:	683b      	ldr	r3, [r7, #0]
 80763d6:	88db      	ldrh	r3, [r3, #6]
 80763d8:	2b00      	cmp	r3, #0
 80763da:	d02d      	beq.n	8076438 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80763dc:	68fb      	ldr	r3, [r7, #12]
 80763de:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80763e2:	2b02      	cmp	r3, #2
 80763e4:	d004      	beq.n	80763f0 <DFU_Download+0x34>
 80763e6:	68fb      	ldr	r3, [r7, #12]
 80763e8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80763ec:	2b05      	cmp	r3, #5
 80763ee:	d11e      	bne.n	807642e <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80763f0:	683b      	ldr	r3, [r7, #0]
 80763f2:	885b      	ldrh	r3, [r3, #2]
 80763f4:	461a      	mov	r2, r3
 80763f6:	68fb      	ldr	r3, [r7, #12]
 80763f8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80763fc:	683b      	ldr	r3, [r7, #0]
 80763fe:	88db      	ldrh	r3, [r3, #6]
 8076400:	461a      	mov	r2, r3
 8076402:	68fb      	ldr	r3, [r7, #12]
 8076404:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8076408:	68fb      	ldr	r3, [r7, #12]
 807640a:	2203      	movs	r2, #3
 807640c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8076410:	68fb      	ldr	r3, [r7, #12]
 8076412:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076416:	68fb      	ldr	r3, [r7, #12]
 8076418:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 807641c:	68f9      	ldr	r1, [r7, #12]
 807641e:	68fb      	ldr	r3, [r7, #12]
 8076420:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8076424:	461a      	mov	r2, r3
 8076426:	6878      	ldr	r0, [r7, #4]
 8076428:	f001 fc11 	bl	8077c4e <USBD_CtlPrepareRx>
 807642c:	e02f      	b.n	807648e <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 807642e:	6839      	ldr	r1, [r7, #0]
 8076430:	6878      	ldr	r0, [r7, #4]
 8076432:	f001 fb6f 	bl	8077b14 <USBD_CtlError>
 8076436:	e02a      	b.n	807648e <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8076438:	68fb      	ldr	r3, [r7, #12]
 807643a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807643e:	2b05      	cmp	r3, #5
 8076440:	d004      	beq.n	807644c <DFU_Download+0x90>
 8076442:	68fb      	ldr	r3, [r7, #12]
 8076444:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8076448:	2b02      	cmp	r3, #2
 807644a:	d11a      	bne.n	8076482 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 807644c:	68fb      	ldr	r3, [r7, #12]
 807644e:	2201      	movs	r2, #1
 8076450:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8076454:	68fb      	ldr	r3, [r7, #12]
 8076456:	2206      	movs	r2, #6
 8076458:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 807645c:	68fb      	ldr	r3, [r7, #12]
 807645e:	2200      	movs	r2, #0
 8076460:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8076464:	68fb      	ldr	r3, [r7, #12]
 8076466:	2200      	movs	r2, #0
 8076468:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 807646c:	68fb      	ldr	r3, [r7, #12]
 807646e:	2200      	movs	r2, #0
 8076470:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8076474:	68fb      	ldr	r3, [r7, #12]
 8076476:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807647a:	68fb      	ldr	r3, [r7, #12]
 807647c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8076480:	e005      	b.n	807648e <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8076482:	6839      	ldr	r1, [r7, #0]
 8076484:	6878      	ldr	r0, [r7, #4]
 8076486:	f001 fb45 	bl	8077b14 <USBD_CtlError>
 807648a:	e000      	b.n	807648e <DFU_Download+0xd2>
    return;
 807648c:	bf00      	nop
    }
  }
}
 807648e:	3710      	adds	r7, #16
 8076490:	46bd      	mov	sp, r7
 8076492:	bd80      	pop	{r7, pc}

08076494 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8076494:	b580      	push	{r7, lr}
 8076496:	b086      	sub	sp, #24
 8076498:	af00      	add	r7, sp, #0
 807649a:	6078      	str	r0, [r7, #4]
 807649c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 807649e:	687b      	ldr	r3, [r7, #4]
 80764a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80764a4:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80764a6:	687b      	ldr	r3, [r7, #4]
 80764a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80764ac:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 80764ae:	697b      	ldr	r3, [r7, #20]
 80764b0:	2b00      	cmp	r3, #0
 80764b2:	f000 80c4 	beq.w	807663e <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80764b6:	683b      	ldr	r3, [r7, #0]
 80764b8:	88db      	ldrh	r3, [r3, #6]
 80764ba:	2b00      	cmp	r3, #0
 80764bc:	f000 80a8 	beq.w	8076610 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80764c0:	697b      	ldr	r3, [r7, #20]
 80764c2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80764c6:	2b02      	cmp	r3, #2
 80764c8:	d005      	beq.n	80764d6 <DFU_Upload+0x42>
 80764ca:	697b      	ldr	r3, [r7, #20]
 80764cc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80764d0:	2b09      	cmp	r3, #9
 80764d2:	f040 8090 	bne.w	80765f6 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80764d6:	683b      	ldr	r3, [r7, #0]
 80764d8:	885b      	ldrh	r3, [r3, #2]
 80764da:	461a      	mov	r2, r3
 80764dc:	697b      	ldr	r3, [r7, #20]
 80764de:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80764e2:	683b      	ldr	r3, [r7, #0]
 80764e4:	88db      	ldrh	r3, [r3, #6]
 80764e6:	461a      	mov	r2, r3
 80764e8:	697b      	ldr	r3, [r7, #20]
 80764ea:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80764ee:	697b      	ldr	r3, [r7, #20]
 80764f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80764f4:	2b00      	cmp	r3, #0
 80764f6:	d12c      	bne.n	8076552 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80764f8:	697b      	ldr	r3, [r7, #20]
 80764fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80764fe:	2b03      	cmp	r3, #3
 8076500:	d901      	bls.n	8076506 <DFU_Upload+0x72>
 8076502:	2202      	movs	r2, #2
 8076504:	e000      	b.n	8076508 <DFU_Upload+0x74>
 8076506:	2209      	movs	r2, #9
 8076508:	697b      	ldr	r3, [r7, #20]
 807650a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 807650e:	697b      	ldr	r3, [r7, #20]
 8076510:	2200      	movs	r2, #0
 8076512:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8076516:	697b      	ldr	r3, [r7, #20]
 8076518:	2200      	movs	r2, #0
 807651a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807651e:	697b      	ldr	r3, [r7, #20]
 8076520:	2200      	movs	r2, #0
 8076522:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8076526:	697b      	ldr	r3, [r7, #20]
 8076528:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807652c:	697b      	ldr	r3, [r7, #20]
 807652e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8076532:	697b      	ldr	r3, [r7, #20]
 8076534:	2200      	movs	r2, #0
 8076536:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8076538:	697b      	ldr	r3, [r7, #20]
 807653a:	2221      	movs	r2, #33	; 0x21
 807653c:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 807653e:	697b      	ldr	r3, [r7, #20]
 8076540:	2241      	movs	r2, #65	; 0x41
 8076542:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8076544:	697b      	ldr	r3, [r7, #20]
 8076546:	2203      	movs	r2, #3
 8076548:	4619      	mov	r1, r3
 807654a:	6878      	ldr	r0, [r7, #4]
 807654c:	f001 fb53 	bl	8077bf6 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8076550:	e076      	b.n	8076640 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8076552:	697b      	ldr	r3, [r7, #20]
 8076554:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8076558:	2b01      	cmp	r3, #1
 807655a:	d931      	bls.n	80765c0 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 807655c:	697b      	ldr	r3, [r7, #20]
 807655e:	2209      	movs	r2, #9
 8076560:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8076564:	697b      	ldr	r3, [r7, #20]
 8076566:	2200      	movs	r2, #0
 8076568:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 807656c:	697b      	ldr	r3, [r7, #20]
 807656e:	2200      	movs	r2, #0
 8076570:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8076574:	697b      	ldr	r3, [r7, #20]
 8076576:	2200      	movs	r2, #0
 8076578:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807657c:	697b      	ldr	r3, [r7, #20]
 807657e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076582:	697b      	ldr	r3, [r7, #20]
 8076584:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8076588:	697b      	ldr	r3, [r7, #20]
 807658a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 807658e:	3b02      	subs	r3, #2
 8076590:	029a      	lsls	r2, r3, #10
 8076592:	697b      	ldr	r3, [r7, #20]
 8076594:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8076598:	4413      	add	r3, r2
 807659a:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 807659c:	693b      	ldr	r3, [r7, #16]
 807659e:	695b      	ldr	r3, [r3, #20]
 80765a0:	68f8      	ldr	r0, [r7, #12]
 80765a2:	6979      	ldr	r1, [r7, #20]
 80765a4:	697a      	ldr	r2, [r7, #20]
 80765a6:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80765aa:	4798      	blx	r3
 80765ac:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 80765ae:	697b      	ldr	r3, [r7, #20]
 80765b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80765b4:	461a      	mov	r2, r3
 80765b6:	68b9      	ldr	r1, [r7, #8]
 80765b8:	6878      	ldr	r0, [r7, #4]
 80765ba:	f001 fb1c 	bl	8077bf6 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80765be:	e03f      	b.n	8076640 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80765c0:	697b      	ldr	r3, [r7, #20]
 80765c2:	220f      	movs	r2, #15
 80765c4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80765c8:	697b      	ldr	r3, [r7, #20]
 80765ca:	2200      	movs	r2, #0
 80765cc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80765d0:	697b      	ldr	r3, [r7, #20]
 80765d2:	2200      	movs	r2, #0
 80765d4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80765d8:	697b      	ldr	r3, [r7, #20]
 80765da:	2200      	movs	r2, #0
 80765dc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80765e0:	697b      	ldr	r3, [r7, #20]
 80765e2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80765e6:	697b      	ldr	r3, [r7, #20]
 80765e8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 80765ec:	6839      	ldr	r1, [r7, #0]
 80765ee:	6878      	ldr	r0, [r7, #4]
 80765f0:	f001 fa90 	bl	8077b14 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80765f4:	e024      	b.n	8076640 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80765f6:	697b      	ldr	r3, [r7, #20]
 80765f8:	2200      	movs	r2, #0
 80765fa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 80765fe:	697b      	ldr	r3, [r7, #20]
 8076600:	2200      	movs	r2, #0
 8076602:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8076606:	6839      	ldr	r1, [r7, #0]
 8076608:	6878      	ldr	r0, [r7, #4]
 807660a:	f001 fa83 	bl	8077b14 <USBD_CtlError>
 807660e:	e017      	b.n	8076640 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8076610:	697b      	ldr	r3, [r7, #20]
 8076612:	2202      	movs	r2, #2
 8076614:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8076618:	697b      	ldr	r3, [r7, #20]
 807661a:	2200      	movs	r2, #0
 807661c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8076620:	697b      	ldr	r3, [r7, #20]
 8076622:	2200      	movs	r2, #0
 8076624:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8076628:	697b      	ldr	r3, [r7, #20]
 807662a:	2200      	movs	r2, #0
 807662c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8076630:	697b      	ldr	r3, [r7, #20]
 8076632:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076636:	697b      	ldr	r3, [r7, #20]
 8076638:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 807663c:	e000      	b.n	8076640 <DFU_Upload+0x1ac>
    return;
 807663e:	bf00      	nop
  }
}
 8076640:	3718      	adds	r7, #24
 8076642:	46bd      	mov	sp, r7
 8076644:	bd80      	pop	{r7, pc}
	...

08076648 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8076648:	b580      	push	{r7, lr}
 807664a:	b084      	sub	sp, #16
 807664c:	af00      	add	r7, sp, #0
 807664e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8076650:	687b      	ldr	r3, [r7, #4]
 8076652:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8076656:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8076658:	687b      	ldr	r3, [r7, #4]
 807665a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 807665e:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8076660:	68fb      	ldr	r3, [r7, #12]
 8076662:	2b00      	cmp	r3, #0
 8076664:	f000 80a0 	beq.w	80767a8 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8076668:	68fb      	ldr	r3, [r7, #12]
 807666a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 807666e:	2b03      	cmp	r3, #3
 8076670:	d002      	beq.n	8076678 <DFU_GetStatus+0x30>
 8076672:	2b06      	cmp	r3, #6
 8076674:	d051      	beq.n	807671a <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 8076676:	e08e      	b.n	8076796 <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8076678:	68fb      	ldr	r3, [r7, #12]
 807667a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807667e:	2b00      	cmp	r3, #0
 8076680:	d034      	beq.n	80766ec <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8076682:	68fb      	ldr	r3, [r7, #12]
 8076684:	2204      	movs	r2, #4
 8076686:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 807668a:	68fb      	ldr	r3, [r7, #12]
 807668c:	2200      	movs	r2, #0
 807668e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8076692:	68fb      	ldr	r3, [r7, #12]
 8076694:	2200      	movs	r2, #0
 8076696:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807669a:	68fb      	ldr	r3, [r7, #12]
 807669c:	2200      	movs	r2, #0
 807669e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80766a2:	68fb      	ldr	r3, [r7, #12]
 80766a4:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80766a8:	68fb      	ldr	r3, [r7, #12]
 80766aa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80766ae:	68fb      	ldr	r3, [r7, #12]
 80766b0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80766b4:	2b00      	cmp	r3, #0
 80766b6:	d10e      	bne.n	80766d6 <DFU_GetStatus+0x8e>
 80766b8:	68fb      	ldr	r3, [r7, #12]
 80766ba:	781b      	ldrb	r3, [r3, #0]
 80766bc:	2b41      	cmp	r3, #65	; 0x41
 80766be:	d10a      	bne.n	80766d6 <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80766c0:	68bb      	ldr	r3, [r7, #8]
 80766c2:	699b      	ldr	r3, [r3, #24]
 80766c4:	68fa      	ldr	r2, [r7, #12]
 80766c6:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80766ca:	68fa      	ldr	r2, [r7, #12]
 80766cc:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80766d0:	2100      	movs	r1, #0
 80766d2:	4798      	blx	r3
      break;
 80766d4:	e05f      	b.n	8076796 <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80766d6:	68bb      	ldr	r3, [r7, #8]
 80766d8:	699b      	ldr	r3, [r3, #24]
 80766da:	68fa      	ldr	r2, [r7, #12]
 80766dc:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80766e0:	68fa      	ldr	r2, [r7, #12]
 80766e2:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80766e6:	2101      	movs	r1, #1
 80766e8:	4798      	blx	r3
      break;
 80766ea:	e054      	b.n	8076796 <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80766ec:	68fb      	ldr	r3, [r7, #12]
 80766ee:	2205      	movs	r2, #5
 80766f0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80766f4:	68fb      	ldr	r3, [r7, #12]
 80766f6:	2200      	movs	r2, #0
 80766f8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80766fc:	68fb      	ldr	r3, [r7, #12]
 80766fe:	2200      	movs	r2, #0
 8076700:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8076704:	68fb      	ldr	r3, [r7, #12]
 8076706:	2200      	movs	r2, #0
 8076708:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 807670c:	68fb      	ldr	r3, [r7, #12]
 807670e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076712:	68fb      	ldr	r3, [r7, #12]
 8076714:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8076718:	e03d      	b.n	8076796 <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 807671a:	68fb      	ldr	r3, [r7, #12]
 807671c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8076720:	2b01      	cmp	r3, #1
 8076722:	d116      	bne.n	8076752 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8076724:	68fb      	ldr	r3, [r7, #12]
 8076726:	2207      	movs	r2, #7
 8076728:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 807672c:	68fb      	ldr	r3, [r7, #12]
 807672e:	2201      	movs	r2, #1
 8076730:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8076734:	68fb      	ldr	r3, [r7, #12]
 8076736:	2200      	movs	r2, #0
 8076738:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 807673c:	68fb      	ldr	r3, [r7, #12]
 807673e:	2200      	movs	r2, #0
 8076740:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8076744:	68fb      	ldr	r3, [r7, #12]
 8076746:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807674a:	68fb      	ldr	r3, [r7, #12]
 807674c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8076750:	e020      	b.n	8076794 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8076752:	68fb      	ldr	r3, [r7, #12]
 8076754:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8076758:	2b00      	cmp	r3, #0
 807675a:	d11b      	bne.n	8076794 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 807675c:	4b14      	ldr	r3, [pc, #80]	; (80767b0 <DFU_GetStatus+0x168>)
 807675e:	7d1b      	ldrb	r3, [r3, #20]
 8076760:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8076764:	2b00      	cmp	r3, #0
 8076766:	d015      	beq.n	8076794 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8076768:	68fb      	ldr	r3, [r7, #12]
 807676a:	2202      	movs	r2, #2
 807676c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8076770:	68fb      	ldr	r3, [r7, #12]
 8076772:	2200      	movs	r2, #0
 8076774:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8076778:	68fb      	ldr	r3, [r7, #12]
 807677a:	2200      	movs	r2, #0
 807677c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8076780:	68fb      	ldr	r3, [r7, #12]
 8076782:	2200      	movs	r2, #0
 8076784:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8076788:	68fb      	ldr	r3, [r7, #12]
 807678a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 807678e:	68fb      	ldr	r3, [r7, #12]
 8076790:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8076794:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8076796:	68fb      	ldr	r3, [r7, #12]
 8076798:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 807679c:	2206      	movs	r2, #6
 807679e:	4619      	mov	r1, r3
 80767a0:	6878      	ldr	r0, [r7, #4]
 80767a2:	f001 fa28 	bl	8077bf6 <USBD_CtlSendData>
 80767a6:	e000      	b.n	80767aa <DFU_GetStatus+0x162>
    return;
 80767a8:	bf00      	nop
}
 80767aa:	3710      	adds	r7, #16
 80767ac:	46bd      	mov	sp, r7
 80767ae:	bd80      	pop	{r7, pc}
 80767b0:	20000048 	.word	0x20000048

080767b4 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80767b4:	b480      	push	{r7}
 80767b6:	b085      	sub	sp, #20
 80767b8:	af00      	add	r7, sp, #0
 80767ba:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80767bc:	687b      	ldr	r3, [r7, #4]
 80767be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80767c2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80767c4:	68fb      	ldr	r3, [r7, #12]
 80767c6:	2b00      	cmp	r3, #0
 80767c8:	d042      	beq.n	8076850 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80767ca:	68fb      	ldr	r3, [r7, #12]
 80767cc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80767d0:	2b0a      	cmp	r3, #10
 80767d2:	d11e      	bne.n	8076812 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80767d4:	68fb      	ldr	r3, [r7, #12]
 80767d6:	2202      	movs	r2, #2
 80767d8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80767dc:	68fb      	ldr	r3, [r7, #12]
 80767de:	2200      	movs	r2, #0
 80767e0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80767e4:	68fb      	ldr	r3, [r7, #12]
 80767e6:	2200      	movs	r2, #0
 80767e8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80767ec:	68fb      	ldr	r3, [r7, #12]
 80767ee:	2200      	movs	r2, #0
 80767f0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80767f4:	68fb      	ldr	r3, [r7, #12]
 80767f6:	2200      	movs	r2, #0
 80767f8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80767fc:	68fb      	ldr	r3, [r7, #12]
 80767fe:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076802:	68fb      	ldr	r3, [r7, #12]
 8076804:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8076808:	68fb      	ldr	r3, [r7, #12]
 807680a:	2200      	movs	r2, #0
 807680c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8076810:	e01f      	b.n	8076852 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8076812:	68fb      	ldr	r3, [r7, #12]
 8076814:	220a      	movs	r2, #10
 8076816:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 807681a:	68fb      	ldr	r3, [r7, #12]
 807681c:	220e      	movs	r2, #14
 807681e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8076822:	68fb      	ldr	r3, [r7, #12]
 8076824:	2200      	movs	r2, #0
 8076826:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807682a:	68fb      	ldr	r3, [r7, #12]
 807682c:	2200      	movs	r2, #0
 807682e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8076832:	68fb      	ldr	r3, [r7, #12]
 8076834:	2200      	movs	r2, #0
 8076836:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 807683a:	68fb      	ldr	r3, [r7, #12]
 807683c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076840:	68fb      	ldr	r3, [r7, #12]
 8076842:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8076846:	68fb      	ldr	r3, [r7, #12]
 8076848:	2200      	movs	r2, #0
 807684a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 807684e:	e000      	b.n	8076852 <DFU_ClearStatus+0x9e>
    return;
 8076850:	bf00      	nop
  }
}
 8076852:	3714      	adds	r7, #20
 8076854:	46bd      	mov	sp, r7
 8076856:	f85d 7b04 	ldr.w	r7, [sp], #4
 807685a:	4770      	bx	lr

0807685c <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 807685c:	b580      	push	{r7, lr}
 807685e:	b084      	sub	sp, #16
 8076860:	af00      	add	r7, sp, #0
 8076862:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8076864:	687b      	ldr	r3, [r7, #4]
 8076866:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807686a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807686c:	68fb      	ldr	r3, [r7, #12]
 807686e:	2b00      	cmp	r3, #0
 8076870:	d008      	beq.n	8076884 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8076872:	68fb      	ldr	r3, [r7, #12]
 8076874:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8076878:	2201      	movs	r2, #1
 807687a:	4619      	mov	r1, r3
 807687c:	6878      	ldr	r0, [r7, #4]
 807687e:	f001 f9ba 	bl	8077bf6 <USBD_CtlSendData>
 8076882:	e000      	b.n	8076886 <DFU_GetState+0x2a>
    return;
 8076884:	bf00      	nop
}
 8076886:	3710      	adds	r7, #16
 8076888:	46bd      	mov	sp, r7
 807688a:	bd80      	pop	{r7, pc}

0807688c <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 807688c:	b480      	push	{r7}
 807688e:	b085      	sub	sp, #20
 8076890:	af00      	add	r7, sp, #0
 8076892:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8076894:	687b      	ldr	r3, [r7, #4]
 8076896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807689a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 807689c:	68fb      	ldr	r3, [r7, #12]
 807689e:	2b00      	cmp	r3, #0
 80768a0:	d03f      	beq.n	8076922 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80768a2:	68fb      	ldr	r3, [r7, #12]
 80768a4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80768a8:	2b02      	cmp	r3, #2
 80768aa:	d013      	beq.n	80768d4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80768ac:	68fb      	ldr	r3, [r7, #12]
 80768ae:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80768b2:	2b03      	cmp	r3, #3
 80768b4:	d00e      	beq.n	80768d4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80768b6:	68fb      	ldr	r3, [r7, #12]
 80768b8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80768bc:	2b05      	cmp	r3, #5
 80768be:	d009      	beq.n	80768d4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80768c0:	68fb      	ldr	r3, [r7, #12]
 80768c2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80768c6:	2b06      	cmp	r3, #6
 80768c8:	d004      	beq.n	80768d4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80768ca:	68fb      	ldr	r3, [r7, #12]
 80768cc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80768d0:	2b09      	cmp	r3, #9
 80768d2:	d127      	bne.n	8076924 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80768d4:	68fb      	ldr	r3, [r7, #12]
 80768d6:	2202      	movs	r2, #2
 80768d8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80768dc:	68fb      	ldr	r3, [r7, #12]
 80768de:	2200      	movs	r2, #0
 80768e0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80768e4:	68fb      	ldr	r3, [r7, #12]
 80768e6:	2200      	movs	r2, #0
 80768e8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80768ec:	68fb      	ldr	r3, [r7, #12]
 80768ee:	2200      	movs	r2, #0
 80768f0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80768f4:	68fb      	ldr	r3, [r7, #12]
 80768f6:	2200      	movs	r2, #0
 80768f8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80768fc:	68fb      	ldr	r3, [r7, #12]
 80768fe:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076902:	68fb      	ldr	r3, [r7, #12]
 8076904:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8076908:	68fb      	ldr	r3, [r7, #12]
 807690a:	2200      	movs	r2, #0
 807690c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8076910:	68fb      	ldr	r3, [r7, #12]
 8076912:	2200      	movs	r2, #0
 8076914:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8076918:	68fb      	ldr	r3, [r7, #12]
 807691a:	2200      	movs	r2, #0
 807691c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8076920:	e000      	b.n	8076924 <DFU_Abort+0x98>
    return;
 8076922:	bf00      	nop
  }
}
 8076924:	3714      	adds	r7, #20
 8076926:	46bd      	mov	sp, r7
 8076928:	f85d 7b04 	ldr.w	r7, [sp], #4
 807692c:	4770      	bx	lr
	...

08076930 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8076930:	b580      	push	{r7, lr}
 8076932:	b084      	sub	sp, #16
 8076934:	af00      	add	r7, sp, #0
 8076936:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8076938:	687b      	ldr	r3, [r7, #4]
 807693a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 807693e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8076940:	68fb      	ldr	r3, [r7, #12]
 8076942:	2b00      	cmp	r3, #0
 8076944:	d03b      	beq.n	80769be <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8076946:	68fb      	ldr	r3, [r7, #12]
 8076948:	2200      	movs	r2, #0
 807694a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 807694e:	4b1e      	ldr	r3, [pc, #120]	; (80769c8 <DFU_Leave+0x98>)
 8076950:	7d1b      	ldrb	r3, [r3, #20]
 8076952:	f003 0304 	and.w	r3, r3, #4
 8076956:	2b00      	cmp	r3, #0
 8076958:	d016      	beq.n	8076988 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 807695a:	68fb      	ldr	r3, [r7, #12]
 807695c:	2206      	movs	r2, #6
 807695e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8076962:	68fb      	ldr	r3, [r7, #12]
 8076964:	2200      	movs	r2, #0
 8076966:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 807696a:	68fb      	ldr	r3, [r7, #12]
 807696c:	2200      	movs	r2, #0
 807696e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8076972:	68fb      	ldr	r3, [r7, #12]
 8076974:	2200      	movs	r2, #0
 8076976:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 807697a:	68fb      	ldr	r3, [r7, #12]
 807697c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8076980:	68fb      	ldr	r3, [r7, #12]
 8076982:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8076986:	e01b      	b.n	80769c0 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8076988:	68fb      	ldr	r3, [r7, #12]
 807698a:	2208      	movs	r2, #8
 807698c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8076990:	68fb      	ldr	r3, [r7, #12]
 8076992:	2200      	movs	r2, #0
 8076994:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8076998:	68fb      	ldr	r3, [r7, #12]
 807699a:	2200      	movs	r2, #0
 807699c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80769a0:	68fb      	ldr	r3, [r7, #12]
 80769a2:	2200      	movs	r2, #0
 80769a4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80769a8:	68fb      	ldr	r3, [r7, #12]
 80769aa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80769ae:	68fb      	ldr	r3, [r7, #12]
 80769b0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 80769b4:	6878      	ldr	r0, [r7, #4]
 80769b6:	f000 f86c 	bl	8076a92 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 80769ba:	f7ff f9b3 	bl	8075d24 <__NVIC_SystemReset>
    return;
 80769be:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 80769c0:	3710      	adds	r7, #16
 80769c2:	46bd      	mov	sp, r7
 80769c4:	bd80      	pop	{r7, pc}
 80769c6:	bf00      	nop
 80769c8:	20000048 	.word	0x20000048

080769cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80769cc:	b580      	push	{r7, lr}
 80769ce:	b086      	sub	sp, #24
 80769d0:	af00      	add	r7, sp, #0
 80769d2:	60f8      	str	r0, [r7, #12]
 80769d4:	60b9      	str	r1, [r7, #8]
 80769d6:	4613      	mov	r3, r2
 80769d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80769da:	68fb      	ldr	r3, [r7, #12]
 80769dc:	2b00      	cmp	r3, #0
 80769de:	d101      	bne.n	80769e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80769e0:	2303      	movs	r3, #3
 80769e2:	e01f      	b.n	8076a24 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80769e4:	68fb      	ldr	r3, [r7, #12]
 80769e6:	2200      	movs	r2, #0
 80769e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80769ec:	68fb      	ldr	r3, [r7, #12]
 80769ee:	2200      	movs	r2, #0
 80769f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80769f4:	68fb      	ldr	r3, [r7, #12]
 80769f6:	2200      	movs	r2, #0
 80769f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80769fc:	68bb      	ldr	r3, [r7, #8]
 80769fe:	2b00      	cmp	r3, #0
 8076a00:	d003      	beq.n	8076a0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8076a02:	68fb      	ldr	r3, [r7, #12]
 8076a04:	68ba      	ldr	r2, [r7, #8]
 8076a06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8076a0a:	68fb      	ldr	r3, [r7, #12]
 8076a0c:	2201      	movs	r2, #1
 8076a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8076a12:	68fb      	ldr	r3, [r7, #12]
 8076a14:	79fa      	ldrb	r2, [r7, #7]
 8076a16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8076a18:	68f8      	ldr	r0, [r7, #12]
 8076a1a:	f001 fc2f 	bl	807827c <USBD_LL_Init>
 8076a1e:	4603      	mov	r3, r0
 8076a20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8076a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8076a24:	4618      	mov	r0, r3
 8076a26:	3718      	adds	r7, #24
 8076a28:	46bd      	mov	sp, r7
 8076a2a:	bd80      	pop	{r7, pc}

08076a2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8076a2c:	b580      	push	{r7, lr}
 8076a2e:	b084      	sub	sp, #16
 8076a30:	af00      	add	r7, sp, #0
 8076a32:	6078      	str	r0, [r7, #4]
 8076a34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8076a36:	2300      	movs	r3, #0
 8076a38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8076a3a:	683b      	ldr	r3, [r7, #0]
 8076a3c:	2b00      	cmp	r3, #0
 8076a3e:	d101      	bne.n	8076a44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8076a40:	2303      	movs	r3, #3
 8076a42:	e016      	b.n	8076a72 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8076a44:	687b      	ldr	r3, [r7, #4]
 8076a46:	683a      	ldr	r2, [r7, #0]
 8076a48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8076a4c:	687b      	ldr	r3, [r7, #4]
 8076a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8076a54:	2b00      	cmp	r3, #0
 8076a56:	d00b      	beq.n	8076a70 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8076a58:	687b      	ldr	r3, [r7, #4]
 8076a5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8076a60:	f107 020e 	add.w	r2, r7, #14
 8076a64:	4610      	mov	r0, r2
 8076a66:	4798      	blx	r3
 8076a68:	4602      	mov	r2, r0
 8076a6a:	687b      	ldr	r3, [r7, #4]
 8076a6c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8076a70:	2300      	movs	r3, #0
}
 8076a72:	4618      	mov	r0, r3
 8076a74:	3710      	adds	r7, #16
 8076a76:	46bd      	mov	sp, r7
 8076a78:	bd80      	pop	{r7, pc}

08076a7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8076a7a:	b580      	push	{r7, lr}
 8076a7c:	b082      	sub	sp, #8
 8076a7e:	af00      	add	r7, sp, #0
 8076a80:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8076a82:	6878      	ldr	r0, [r7, #4]
 8076a84:	f001 fc46 	bl	8078314 <USBD_LL_Start>
 8076a88:	4603      	mov	r3, r0
}
 8076a8a:	4618      	mov	r0, r3
 8076a8c:	3708      	adds	r7, #8
 8076a8e:	46bd      	mov	sp, r7
 8076a90:	bd80      	pop	{r7, pc}

08076a92 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8076a92:	b580      	push	{r7, lr}
 8076a94:	b082      	sub	sp, #8
 8076a96:	af00      	add	r7, sp, #0
 8076a98:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8076a9a:	6878      	ldr	r0, [r7, #4]
 8076a9c:	f001 fc55 	bl	807834a <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8076aa0:	687b      	ldr	r3, [r7, #4]
 8076aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076aa6:	2b00      	cmp	r3, #0
 8076aa8:	d009      	beq.n	8076abe <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8076aaa:	687b      	ldr	r3, [r7, #4]
 8076aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076ab0:	685b      	ldr	r3, [r3, #4]
 8076ab2:	687a      	ldr	r2, [r7, #4]
 8076ab4:	6852      	ldr	r2, [r2, #4]
 8076ab6:	b2d2      	uxtb	r2, r2
 8076ab8:	4611      	mov	r1, r2
 8076aba:	6878      	ldr	r0, [r7, #4]
 8076abc:	4798      	blx	r3
  }

  return USBD_OK;
 8076abe:	2300      	movs	r3, #0
}
 8076ac0:	4618      	mov	r0, r3
 8076ac2:	3708      	adds	r7, #8
 8076ac4:	46bd      	mov	sp, r7
 8076ac6:	bd80      	pop	{r7, pc}

08076ac8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8076ac8:	b480      	push	{r7}
 8076aca:	b083      	sub	sp, #12
 8076acc:	af00      	add	r7, sp, #0
 8076ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8076ad0:	2300      	movs	r3, #0
}
 8076ad2:	4618      	mov	r0, r3
 8076ad4:	370c      	adds	r7, #12
 8076ad6:	46bd      	mov	sp, r7
 8076ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8076adc:	4770      	bx	lr

08076ade <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8076ade:	b580      	push	{r7, lr}
 8076ae0:	b084      	sub	sp, #16
 8076ae2:	af00      	add	r7, sp, #0
 8076ae4:	6078      	str	r0, [r7, #4]
 8076ae6:	460b      	mov	r3, r1
 8076ae8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8076aea:	2303      	movs	r3, #3
 8076aec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8076aee:	687b      	ldr	r3, [r7, #4]
 8076af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076af4:	2b00      	cmp	r3, #0
 8076af6:	d009      	beq.n	8076b0c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8076af8:	687b      	ldr	r3, [r7, #4]
 8076afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076afe:	681b      	ldr	r3, [r3, #0]
 8076b00:	78fa      	ldrb	r2, [r7, #3]
 8076b02:	4611      	mov	r1, r2
 8076b04:	6878      	ldr	r0, [r7, #4]
 8076b06:	4798      	blx	r3
 8076b08:	4603      	mov	r3, r0
 8076b0a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8076b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8076b0e:	4618      	mov	r0, r3
 8076b10:	3710      	adds	r7, #16
 8076b12:	46bd      	mov	sp, r7
 8076b14:	bd80      	pop	{r7, pc}

08076b16 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8076b16:	b580      	push	{r7, lr}
 8076b18:	b082      	sub	sp, #8
 8076b1a:	af00      	add	r7, sp, #0
 8076b1c:	6078      	str	r0, [r7, #4]
 8076b1e:	460b      	mov	r3, r1
 8076b20:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8076b22:	687b      	ldr	r3, [r7, #4]
 8076b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076b28:	2b00      	cmp	r3, #0
 8076b2a:	d007      	beq.n	8076b3c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8076b2c:	687b      	ldr	r3, [r7, #4]
 8076b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076b32:	685b      	ldr	r3, [r3, #4]
 8076b34:	78fa      	ldrb	r2, [r7, #3]
 8076b36:	4611      	mov	r1, r2
 8076b38:	6878      	ldr	r0, [r7, #4]
 8076b3a:	4798      	blx	r3
  }

  return USBD_OK;
 8076b3c:	2300      	movs	r3, #0
}
 8076b3e:	4618      	mov	r0, r3
 8076b40:	3708      	adds	r7, #8
 8076b42:	46bd      	mov	sp, r7
 8076b44:	bd80      	pop	{r7, pc}

08076b46 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8076b46:	b580      	push	{r7, lr}
 8076b48:	b084      	sub	sp, #16
 8076b4a:	af00      	add	r7, sp, #0
 8076b4c:	6078      	str	r0, [r7, #4]
 8076b4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8076b50:	687b      	ldr	r3, [r7, #4]
 8076b52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8076b56:	6839      	ldr	r1, [r7, #0]
 8076b58:	4618      	mov	r0, r3
 8076b5a:	f000 ffa1 	bl	8077aa0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8076b5e:	687b      	ldr	r3, [r7, #4]
 8076b60:	2201      	movs	r2, #1
 8076b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8076b66:	687b      	ldr	r3, [r7, #4]
 8076b68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8076b6c:	461a      	mov	r2, r3
 8076b6e:	687b      	ldr	r3, [r7, #4]
 8076b70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8076b74:	687b      	ldr	r3, [r7, #4]
 8076b76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8076b7a:	f003 031f 	and.w	r3, r3, #31
 8076b7e:	2b02      	cmp	r3, #2
 8076b80:	d01a      	beq.n	8076bb8 <USBD_LL_SetupStage+0x72>
 8076b82:	2b02      	cmp	r3, #2
 8076b84:	d822      	bhi.n	8076bcc <USBD_LL_SetupStage+0x86>
 8076b86:	2b00      	cmp	r3, #0
 8076b88:	d002      	beq.n	8076b90 <USBD_LL_SetupStage+0x4a>
 8076b8a:	2b01      	cmp	r3, #1
 8076b8c:	d00a      	beq.n	8076ba4 <USBD_LL_SetupStage+0x5e>
 8076b8e:	e01d      	b.n	8076bcc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8076b90:	687b      	ldr	r3, [r7, #4]
 8076b92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8076b96:	4619      	mov	r1, r3
 8076b98:	6878      	ldr	r0, [r7, #4]
 8076b9a:	f000 fa61 	bl	8077060 <USBD_StdDevReq>
 8076b9e:	4603      	mov	r3, r0
 8076ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8076ba2:	e020      	b.n	8076be6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8076ba4:	687b      	ldr	r3, [r7, #4]
 8076ba6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8076baa:	4619      	mov	r1, r3
 8076bac:	6878      	ldr	r0, [r7, #4]
 8076bae:	f000 fac5 	bl	807713c <USBD_StdItfReq>
 8076bb2:	4603      	mov	r3, r0
 8076bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8076bb6:	e016      	b.n	8076be6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8076bb8:	687b      	ldr	r3, [r7, #4]
 8076bba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8076bbe:	4619      	mov	r1, r3
 8076bc0:	6878      	ldr	r0, [r7, #4]
 8076bc2:	f000 fb04 	bl	80771ce <USBD_StdEPReq>
 8076bc6:	4603      	mov	r3, r0
 8076bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8076bca:	e00c      	b.n	8076be6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8076bcc:	687b      	ldr	r3, [r7, #4]
 8076bce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8076bd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8076bd6:	b2db      	uxtb	r3, r3
 8076bd8:	4619      	mov	r1, r3
 8076bda:	6878      	ldr	r0, [r7, #4]
 8076bdc:	f001 fbf6 	bl	80783cc <USBD_LL_StallEP>
 8076be0:	4603      	mov	r3, r0
 8076be2:	73fb      	strb	r3, [r7, #15]
      break;
 8076be4:	bf00      	nop
  }

  return ret;
 8076be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8076be8:	4618      	mov	r0, r3
 8076bea:	3710      	adds	r7, #16
 8076bec:	46bd      	mov	sp, r7
 8076bee:	bd80      	pop	{r7, pc}

08076bf0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8076bf0:	b580      	push	{r7, lr}
 8076bf2:	b086      	sub	sp, #24
 8076bf4:	af00      	add	r7, sp, #0
 8076bf6:	60f8      	str	r0, [r7, #12]
 8076bf8:	460b      	mov	r3, r1
 8076bfa:	607a      	str	r2, [r7, #4]
 8076bfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8076bfe:	7afb      	ldrb	r3, [r7, #11]
 8076c00:	2b00      	cmp	r3, #0
 8076c02:	d138      	bne.n	8076c76 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8076c04:	68fb      	ldr	r3, [r7, #12]
 8076c06:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8076c0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8076c0c:	68fb      	ldr	r3, [r7, #12]
 8076c0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8076c12:	2b03      	cmp	r3, #3
 8076c14:	d14a      	bne.n	8076cac <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8076c16:	693b      	ldr	r3, [r7, #16]
 8076c18:	689a      	ldr	r2, [r3, #8]
 8076c1a:	693b      	ldr	r3, [r7, #16]
 8076c1c:	68db      	ldr	r3, [r3, #12]
 8076c1e:	429a      	cmp	r2, r3
 8076c20:	d913      	bls.n	8076c4a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8076c22:	693b      	ldr	r3, [r7, #16]
 8076c24:	689a      	ldr	r2, [r3, #8]
 8076c26:	693b      	ldr	r3, [r7, #16]
 8076c28:	68db      	ldr	r3, [r3, #12]
 8076c2a:	1ad2      	subs	r2, r2, r3
 8076c2c:	693b      	ldr	r3, [r7, #16]
 8076c2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8076c30:	693b      	ldr	r3, [r7, #16]
 8076c32:	68da      	ldr	r2, [r3, #12]
 8076c34:	693b      	ldr	r3, [r7, #16]
 8076c36:	689b      	ldr	r3, [r3, #8]
 8076c38:	4293      	cmp	r3, r2
 8076c3a:	bf28      	it	cs
 8076c3c:	4613      	movcs	r3, r2
 8076c3e:	461a      	mov	r2, r3
 8076c40:	6879      	ldr	r1, [r7, #4]
 8076c42:	68f8      	ldr	r0, [r7, #12]
 8076c44:	f001 f820 	bl	8077c88 <USBD_CtlContinueRx>
 8076c48:	e030      	b.n	8076cac <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8076c4a:	68fb      	ldr	r3, [r7, #12]
 8076c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076c50:	b2db      	uxtb	r3, r3
 8076c52:	2b03      	cmp	r3, #3
 8076c54:	d10b      	bne.n	8076c6e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8076c56:	68fb      	ldr	r3, [r7, #12]
 8076c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076c5c:	691b      	ldr	r3, [r3, #16]
 8076c5e:	2b00      	cmp	r3, #0
 8076c60:	d005      	beq.n	8076c6e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8076c62:	68fb      	ldr	r3, [r7, #12]
 8076c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076c68:	691b      	ldr	r3, [r3, #16]
 8076c6a:	68f8      	ldr	r0, [r7, #12]
 8076c6c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8076c6e:	68f8      	ldr	r0, [r7, #12]
 8076c70:	f001 f81b 	bl	8077caa <USBD_CtlSendStatus>
 8076c74:	e01a      	b.n	8076cac <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8076c76:	68fb      	ldr	r3, [r7, #12]
 8076c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076c7c:	b2db      	uxtb	r3, r3
 8076c7e:	2b03      	cmp	r3, #3
 8076c80:	d114      	bne.n	8076cac <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8076c82:	68fb      	ldr	r3, [r7, #12]
 8076c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076c88:	699b      	ldr	r3, [r3, #24]
 8076c8a:	2b00      	cmp	r3, #0
 8076c8c:	d00e      	beq.n	8076cac <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8076c8e:	68fb      	ldr	r3, [r7, #12]
 8076c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076c94:	699b      	ldr	r3, [r3, #24]
 8076c96:	7afa      	ldrb	r2, [r7, #11]
 8076c98:	4611      	mov	r1, r2
 8076c9a:	68f8      	ldr	r0, [r7, #12]
 8076c9c:	4798      	blx	r3
 8076c9e:	4603      	mov	r3, r0
 8076ca0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8076ca2:	7dfb      	ldrb	r3, [r7, #23]
 8076ca4:	2b00      	cmp	r3, #0
 8076ca6:	d001      	beq.n	8076cac <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8076ca8:	7dfb      	ldrb	r3, [r7, #23]
 8076caa:	e000      	b.n	8076cae <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8076cac:	2300      	movs	r3, #0
}
 8076cae:	4618      	mov	r0, r3
 8076cb0:	3718      	adds	r7, #24
 8076cb2:	46bd      	mov	sp, r7
 8076cb4:	bd80      	pop	{r7, pc}

08076cb6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8076cb6:	b580      	push	{r7, lr}
 8076cb8:	b086      	sub	sp, #24
 8076cba:	af00      	add	r7, sp, #0
 8076cbc:	60f8      	str	r0, [r7, #12]
 8076cbe:	460b      	mov	r3, r1
 8076cc0:	607a      	str	r2, [r7, #4]
 8076cc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8076cc4:	7afb      	ldrb	r3, [r7, #11]
 8076cc6:	2b00      	cmp	r3, #0
 8076cc8:	d16b      	bne.n	8076da2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8076cca:	68fb      	ldr	r3, [r7, #12]
 8076ccc:	3314      	adds	r3, #20
 8076cce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8076cd0:	68fb      	ldr	r3, [r7, #12]
 8076cd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8076cd6:	2b02      	cmp	r3, #2
 8076cd8:	d156      	bne.n	8076d88 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8076cda:	693b      	ldr	r3, [r7, #16]
 8076cdc:	689a      	ldr	r2, [r3, #8]
 8076cde:	693b      	ldr	r3, [r7, #16]
 8076ce0:	68db      	ldr	r3, [r3, #12]
 8076ce2:	429a      	cmp	r2, r3
 8076ce4:	d914      	bls.n	8076d10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8076ce6:	693b      	ldr	r3, [r7, #16]
 8076ce8:	689a      	ldr	r2, [r3, #8]
 8076cea:	693b      	ldr	r3, [r7, #16]
 8076cec:	68db      	ldr	r3, [r3, #12]
 8076cee:	1ad2      	subs	r2, r2, r3
 8076cf0:	693b      	ldr	r3, [r7, #16]
 8076cf2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8076cf4:	693b      	ldr	r3, [r7, #16]
 8076cf6:	689b      	ldr	r3, [r3, #8]
 8076cf8:	461a      	mov	r2, r3
 8076cfa:	6879      	ldr	r1, [r7, #4]
 8076cfc:	68f8      	ldr	r0, [r7, #12]
 8076cfe:	f000 ff95 	bl	8077c2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8076d02:	2300      	movs	r3, #0
 8076d04:	2200      	movs	r2, #0
 8076d06:	2100      	movs	r1, #0
 8076d08:	68f8      	ldr	r0, [r7, #12]
 8076d0a:	f001 fc09 	bl	8078520 <USBD_LL_PrepareReceive>
 8076d0e:	e03b      	b.n	8076d88 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8076d10:	693b      	ldr	r3, [r7, #16]
 8076d12:	68da      	ldr	r2, [r3, #12]
 8076d14:	693b      	ldr	r3, [r7, #16]
 8076d16:	689b      	ldr	r3, [r3, #8]
 8076d18:	429a      	cmp	r2, r3
 8076d1a:	d11c      	bne.n	8076d56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8076d1c:	693b      	ldr	r3, [r7, #16]
 8076d1e:	685a      	ldr	r2, [r3, #4]
 8076d20:	693b      	ldr	r3, [r7, #16]
 8076d22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8076d24:	429a      	cmp	r2, r3
 8076d26:	d316      	bcc.n	8076d56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8076d28:	693b      	ldr	r3, [r7, #16]
 8076d2a:	685a      	ldr	r2, [r3, #4]
 8076d2c:	68fb      	ldr	r3, [r7, #12]
 8076d2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8076d32:	429a      	cmp	r2, r3
 8076d34:	d20f      	bcs.n	8076d56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8076d36:	2200      	movs	r2, #0
 8076d38:	2100      	movs	r1, #0
 8076d3a:	68f8      	ldr	r0, [r7, #12]
 8076d3c:	f000 ff76 	bl	8077c2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8076d40:	68fb      	ldr	r3, [r7, #12]
 8076d42:	2200      	movs	r2, #0
 8076d44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8076d48:	2300      	movs	r3, #0
 8076d4a:	2200      	movs	r2, #0
 8076d4c:	2100      	movs	r1, #0
 8076d4e:	68f8      	ldr	r0, [r7, #12]
 8076d50:	f001 fbe6 	bl	8078520 <USBD_LL_PrepareReceive>
 8076d54:	e018      	b.n	8076d88 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8076d56:	68fb      	ldr	r3, [r7, #12]
 8076d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076d5c:	b2db      	uxtb	r3, r3
 8076d5e:	2b03      	cmp	r3, #3
 8076d60:	d10b      	bne.n	8076d7a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8076d62:	68fb      	ldr	r3, [r7, #12]
 8076d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076d68:	68db      	ldr	r3, [r3, #12]
 8076d6a:	2b00      	cmp	r3, #0
 8076d6c:	d005      	beq.n	8076d7a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8076d6e:	68fb      	ldr	r3, [r7, #12]
 8076d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076d74:	68db      	ldr	r3, [r3, #12]
 8076d76:	68f8      	ldr	r0, [r7, #12]
 8076d78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8076d7a:	2180      	movs	r1, #128	; 0x80
 8076d7c:	68f8      	ldr	r0, [r7, #12]
 8076d7e:	f001 fb25 	bl	80783cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8076d82:	68f8      	ldr	r0, [r7, #12]
 8076d84:	f000 ffa4 	bl	8077cd0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8076d88:	68fb      	ldr	r3, [r7, #12]
 8076d8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8076d8e:	2b01      	cmp	r3, #1
 8076d90:	d122      	bne.n	8076dd8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8076d92:	68f8      	ldr	r0, [r7, #12]
 8076d94:	f7ff fe98 	bl	8076ac8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8076d98:	68fb      	ldr	r3, [r7, #12]
 8076d9a:	2200      	movs	r2, #0
 8076d9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8076da0:	e01a      	b.n	8076dd8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8076da2:	68fb      	ldr	r3, [r7, #12]
 8076da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076da8:	b2db      	uxtb	r3, r3
 8076daa:	2b03      	cmp	r3, #3
 8076dac:	d114      	bne.n	8076dd8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8076dae:	68fb      	ldr	r3, [r7, #12]
 8076db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076db4:	695b      	ldr	r3, [r3, #20]
 8076db6:	2b00      	cmp	r3, #0
 8076db8:	d00e      	beq.n	8076dd8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8076dba:	68fb      	ldr	r3, [r7, #12]
 8076dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076dc0:	695b      	ldr	r3, [r3, #20]
 8076dc2:	7afa      	ldrb	r2, [r7, #11]
 8076dc4:	4611      	mov	r1, r2
 8076dc6:	68f8      	ldr	r0, [r7, #12]
 8076dc8:	4798      	blx	r3
 8076dca:	4603      	mov	r3, r0
 8076dcc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8076dce:	7dfb      	ldrb	r3, [r7, #23]
 8076dd0:	2b00      	cmp	r3, #0
 8076dd2:	d001      	beq.n	8076dd8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8076dd4:	7dfb      	ldrb	r3, [r7, #23]
 8076dd6:	e000      	b.n	8076dda <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8076dd8:	2300      	movs	r3, #0
}
 8076dda:	4618      	mov	r0, r3
 8076ddc:	3718      	adds	r7, #24
 8076dde:	46bd      	mov	sp, r7
 8076de0:	bd80      	pop	{r7, pc}

08076de2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8076de2:	b580      	push	{r7, lr}
 8076de4:	b082      	sub	sp, #8
 8076de6:	af00      	add	r7, sp, #0
 8076de8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8076dea:	687b      	ldr	r3, [r7, #4]
 8076dec:	2201      	movs	r2, #1
 8076dee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8076df2:	687b      	ldr	r3, [r7, #4]
 8076df4:	2200      	movs	r2, #0
 8076df6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8076dfa:	687b      	ldr	r3, [r7, #4]
 8076dfc:	2200      	movs	r2, #0
 8076dfe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8076e00:	687b      	ldr	r3, [r7, #4]
 8076e02:	2200      	movs	r2, #0
 8076e04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8076e08:	687b      	ldr	r3, [r7, #4]
 8076e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076e0e:	2b00      	cmp	r3, #0
 8076e10:	d101      	bne.n	8076e16 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8076e12:	2303      	movs	r3, #3
 8076e14:	e02f      	b.n	8076e76 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8076e16:	687b      	ldr	r3, [r7, #4]
 8076e18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8076e1c:	2b00      	cmp	r3, #0
 8076e1e:	d00f      	beq.n	8076e40 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8076e20:	687b      	ldr	r3, [r7, #4]
 8076e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076e26:	685b      	ldr	r3, [r3, #4]
 8076e28:	2b00      	cmp	r3, #0
 8076e2a:	d009      	beq.n	8076e40 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8076e2c:	687b      	ldr	r3, [r7, #4]
 8076e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076e32:	685b      	ldr	r3, [r3, #4]
 8076e34:	687a      	ldr	r2, [r7, #4]
 8076e36:	6852      	ldr	r2, [r2, #4]
 8076e38:	b2d2      	uxtb	r2, r2
 8076e3a:	4611      	mov	r1, r2
 8076e3c:	6878      	ldr	r0, [r7, #4]
 8076e3e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8076e40:	2340      	movs	r3, #64	; 0x40
 8076e42:	2200      	movs	r2, #0
 8076e44:	2100      	movs	r1, #0
 8076e46:	6878      	ldr	r0, [r7, #4]
 8076e48:	f001 fa9a 	bl	8078380 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8076e4c:	687b      	ldr	r3, [r7, #4]
 8076e4e:	2201      	movs	r2, #1
 8076e50:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8076e54:	687b      	ldr	r3, [r7, #4]
 8076e56:	2240      	movs	r2, #64	; 0x40
 8076e58:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8076e5c:	2340      	movs	r3, #64	; 0x40
 8076e5e:	2200      	movs	r2, #0
 8076e60:	2180      	movs	r1, #128	; 0x80
 8076e62:	6878      	ldr	r0, [r7, #4]
 8076e64:	f001 fa8c 	bl	8078380 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8076e68:	687b      	ldr	r3, [r7, #4]
 8076e6a:	2201      	movs	r2, #1
 8076e6c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8076e6e:	687b      	ldr	r3, [r7, #4]
 8076e70:	2240      	movs	r2, #64	; 0x40
 8076e72:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8076e74:	2300      	movs	r3, #0
}
 8076e76:	4618      	mov	r0, r3
 8076e78:	3708      	adds	r7, #8
 8076e7a:	46bd      	mov	sp, r7
 8076e7c:	bd80      	pop	{r7, pc}

08076e7e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8076e7e:	b480      	push	{r7}
 8076e80:	b083      	sub	sp, #12
 8076e82:	af00      	add	r7, sp, #0
 8076e84:	6078      	str	r0, [r7, #4]
 8076e86:	460b      	mov	r3, r1
 8076e88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8076e8a:	687b      	ldr	r3, [r7, #4]
 8076e8c:	78fa      	ldrb	r2, [r7, #3]
 8076e8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8076e90:	2300      	movs	r3, #0
}
 8076e92:	4618      	mov	r0, r3
 8076e94:	370c      	adds	r7, #12
 8076e96:	46bd      	mov	sp, r7
 8076e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8076e9c:	4770      	bx	lr

08076e9e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8076e9e:	b480      	push	{r7}
 8076ea0:	b083      	sub	sp, #12
 8076ea2:	af00      	add	r7, sp, #0
 8076ea4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8076ea6:	687b      	ldr	r3, [r7, #4]
 8076ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076eac:	b2da      	uxtb	r2, r3
 8076eae:	687b      	ldr	r3, [r7, #4]
 8076eb0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8076eb4:	687b      	ldr	r3, [r7, #4]
 8076eb6:	2204      	movs	r2, #4
 8076eb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8076ebc:	2300      	movs	r3, #0
}
 8076ebe:	4618      	mov	r0, r3
 8076ec0:	370c      	adds	r7, #12
 8076ec2:	46bd      	mov	sp, r7
 8076ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8076ec8:	4770      	bx	lr

08076eca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8076eca:	b480      	push	{r7}
 8076ecc:	b083      	sub	sp, #12
 8076ece:	af00      	add	r7, sp, #0
 8076ed0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8076ed2:	687b      	ldr	r3, [r7, #4]
 8076ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076ed8:	b2db      	uxtb	r3, r3
 8076eda:	2b04      	cmp	r3, #4
 8076edc:	d106      	bne.n	8076eec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8076ede:	687b      	ldr	r3, [r7, #4]
 8076ee0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8076ee4:	b2da      	uxtb	r2, r3
 8076ee6:	687b      	ldr	r3, [r7, #4]
 8076ee8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8076eec:	2300      	movs	r3, #0
}
 8076eee:	4618      	mov	r0, r3
 8076ef0:	370c      	adds	r7, #12
 8076ef2:	46bd      	mov	sp, r7
 8076ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8076ef8:	4770      	bx	lr

08076efa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8076efa:	b580      	push	{r7, lr}
 8076efc:	b082      	sub	sp, #8
 8076efe:	af00      	add	r7, sp, #0
 8076f00:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8076f02:	687b      	ldr	r3, [r7, #4]
 8076f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076f08:	2b00      	cmp	r3, #0
 8076f0a:	d101      	bne.n	8076f10 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8076f0c:	2303      	movs	r3, #3
 8076f0e:	e012      	b.n	8076f36 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8076f10:	687b      	ldr	r3, [r7, #4]
 8076f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076f16:	b2db      	uxtb	r3, r3
 8076f18:	2b03      	cmp	r3, #3
 8076f1a:	d10b      	bne.n	8076f34 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8076f1c:	687b      	ldr	r3, [r7, #4]
 8076f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076f22:	69db      	ldr	r3, [r3, #28]
 8076f24:	2b00      	cmp	r3, #0
 8076f26:	d005      	beq.n	8076f34 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8076f28:	687b      	ldr	r3, [r7, #4]
 8076f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076f2e:	69db      	ldr	r3, [r3, #28]
 8076f30:	6878      	ldr	r0, [r7, #4]
 8076f32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8076f34:	2300      	movs	r3, #0
}
 8076f36:	4618      	mov	r0, r3
 8076f38:	3708      	adds	r7, #8
 8076f3a:	46bd      	mov	sp, r7
 8076f3c:	bd80      	pop	{r7, pc}

08076f3e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8076f3e:	b580      	push	{r7, lr}
 8076f40:	b082      	sub	sp, #8
 8076f42:	af00      	add	r7, sp, #0
 8076f44:	6078      	str	r0, [r7, #4]
 8076f46:	460b      	mov	r3, r1
 8076f48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8076f4a:	687b      	ldr	r3, [r7, #4]
 8076f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076f50:	2b00      	cmp	r3, #0
 8076f52:	d101      	bne.n	8076f58 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8076f54:	2303      	movs	r3, #3
 8076f56:	e014      	b.n	8076f82 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8076f58:	687b      	ldr	r3, [r7, #4]
 8076f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076f5e:	b2db      	uxtb	r3, r3
 8076f60:	2b03      	cmp	r3, #3
 8076f62:	d10d      	bne.n	8076f80 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8076f64:	687b      	ldr	r3, [r7, #4]
 8076f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076f6a:	6a1b      	ldr	r3, [r3, #32]
 8076f6c:	2b00      	cmp	r3, #0
 8076f6e:	d007      	beq.n	8076f80 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8076f70:	687b      	ldr	r3, [r7, #4]
 8076f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076f76:	6a1b      	ldr	r3, [r3, #32]
 8076f78:	78fa      	ldrb	r2, [r7, #3]
 8076f7a:	4611      	mov	r1, r2
 8076f7c:	6878      	ldr	r0, [r7, #4]
 8076f7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8076f80:	2300      	movs	r3, #0
}
 8076f82:	4618      	mov	r0, r3
 8076f84:	3708      	adds	r7, #8
 8076f86:	46bd      	mov	sp, r7
 8076f88:	bd80      	pop	{r7, pc}

08076f8a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8076f8a:	b580      	push	{r7, lr}
 8076f8c:	b082      	sub	sp, #8
 8076f8e:	af00      	add	r7, sp, #0
 8076f90:	6078      	str	r0, [r7, #4]
 8076f92:	460b      	mov	r3, r1
 8076f94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8076f96:	687b      	ldr	r3, [r7, #4]
 8076f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076f9c:	2b00      	cmp	r3, #0
 8076f9e:	d101      	bne.n	8076fa4 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8076fa0:	2303      	movs	r3, #3
 8076fa2:	e014      	b.n	8076fce <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8076fa4:	687b      	ldr	r3, [r7, #4]
 8076fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8076faa:	b2db      	uxtb	r3, r3
 8076fac:	2b03      	cmp	r3, #3
 8076fae:	d10d      	bne.n	8076fcc <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8076fb0:	687b      	ldr	r3, [r7, #4]
 8076fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8076fb8:	2b00      	cmp	r3, #0
 8076fba:	d007      	beq.n	8076fcc <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8076fbc:	687b      	ldr	r3, [r7, #4]
 8076fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8076fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8076fc4:	78fa      	ldrb	r2, [r7, #3]
 8076fc6:	4611      	mov	r1, r2
 8076fc8:	6878      	ldr	r0, [r7, #4]
 8076fca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8076fcc:	2300      	movs	r3, #0
}
 8076fce:	4618      	mov	r0, r3
 8076fd0:	3708      	adds	r7, #8
 8076fd2:	46bd      	mov	sp, r7
 8076fd4:	bd80      	pop	{r7, pc}

08076fd6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8076fd6:	b480      	push	{r7}
 8076fd8:	b083      	sub	sp, #12
 8076fda:	af00      	add	r7, sp, #0
 8076fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8076fde:	2300      	movs	r3, #0
}
 8076fe0:	4618      	mov	r0, r3
 8076fe2:	370c      	adds	r7, #12
 8076fe4:	46bd      	mov	sp, r7
 8076fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8076fea:	4770      	bx	lr

08076fec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8076fec:	b580      	push	{r7, lr}
 8076fee:	b082      	sub	sp, #8
 8076ff0:	af00      	add	r7, sp, #0
 8076ff2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8076ff4:	687b      	ldr	r3, [r7, #4]
 8076ff6:	2201      	movs	r2, #1
 8076ff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8076ffc:	687b      	ldr	r3, [r7, #4]
 8076ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8077002:	2b00      	cmp	r3, #0
 8077004:	d009      	beq.n	807701a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8077006:	687b      	ldr	r3, [r7, #4]
 8077008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807700c:	685b      	ldr	r3, [r3, #4]
 807700e:	687a      	ldr	r2, [r7, #4]
 8077010:	6852      	ldr	r2, [r2, #4]
 8077012:	b2d2      	uxtb	r2, r2
 8077014:	4611      	mov	r1, r2
 8077016:	6878      	ldr	r0, [r7, #4]
 8077018:	4798      	blx	r3
  }

  return USBD_OK;
 807701a:	2300      	movs	r3, #0
}
 807701c:	4618      	mov	r0, r3
 807701e:	3708      	adds	r7, #8
 8077020:	46bd      	mov	sp, r7
 8077022:	bd80      	pop	{r7, pc}

08077024 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8077024:	b480      	push	{r7}
 8077026:	b087      	sub	sp, #28
 8077028:	af00      	add	r7, sp, #0
 807702a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 807702c:	687b      	ldr	r3, [r7, #4]
 807702e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8077030:	697b      	ldr	r3, [r7, #20]
 8077032:	781b      	ldrb	r3, [r3, #0]
 8077034:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8077036:	697b      	ldr	r3, [r7, #20]
 8077038:	3301      	adds	r3, #1
 807703a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 807703c:	697b      	ldr	r3, [r7, #20]
 807703e:	781b      	ldrb	r3, [r3, #0]
 8077040:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8077042:	8a3b      	ldrh	r3, [r7, #16]
 8077044:	021b      	lsls	r3, r3, #8
 8077046:	b21a      	sxth	r2, r3
 8077048:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 807704c:	4313      	orrs	r3, r2
 807704e:	b21b      	sxth	r3, r3
 8077050:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8077052:	89fb      	ldrh	r3, [r7, #14]
}
 8077054:	4618      	mov	r0, r3
 8077056:	371c      	adds	r7, #28
 8077058:	46bd      	mov	sp, r7
 807705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807705e:	4770      	bx	lr

08077060 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077060:	b580      	push	{r7, lr}
 8077062:	b084      	sub	sp, #16
 8077064:	af00      	add	r7, sp, #0
 8077066:	6078      	str	r0, [r7, #4]
 8077068:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 807706a:	2300      	movs	r3, #0
 807706c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807706e:	683b      	ldr	r3, [r7, #0]
 8077070:	781b      	ldrb	r3, [r3, #0]
 8077072:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8077076:	2b40      	cmp	r3, #64	; 0x40
 8077078:	d005      	beq.n	8077086 <USBD_StdDevReq+0x26>
 807707a:	2b40      	cmp	r3, #64	; 0x40
 807707c:	d853      	bhi.n	8077126 <USBD_StdDevReq+0xc6>
 807707e:	2b00      	cmp	r3, #0
 8077080:	d00b      	beq.n	807709a <USBD_StdDevReq+0x3a>
 8077082:	2b20      	cmp	r3, #32
 8077084:	d14f      	bne.n	8077126 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8077086:	687b      	ldr	r3, [r7, #4]
 8077088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807708c:	689b      	ldr	r3, [r3, #8]
 807708e:	6839      	ldr	r1, [r7, #0]
 8077090:	6878      	ldr	r0, [r7, #4]
 8077092:	4798      	blx	r3
 8077094:	4603      	mov	r3, r0
 8077096:	73fb      	strb	r3, [r7, #15]
      break;
 8077098:	e04a      	b.n	8077130 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 807709a:	683b      	ldr	r3, [r7, #0]
 807709c:	785b      	ldrb	r3, [r3, #1]
 807709e:	2b09      	cmp	r3, #9
 80770a0:	d83b      	bhi.n	807711a <USBD_StdDevReq+0xba>
 80770a2:	a201      	add	r2, pc, #4	; (adr r2, 80770a8 <USBD_StdDevReq+0x48>)
 80770a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80770a8:	080770fd 	.word	0x080770fd
 80770ac:	08077111 	.word	0x08077111
 80770b0:	0807711b 	.word	0x0807711b
 80770b4:	08077107 	.word	0x08077107
 80770b8:	0807711b 	.word	0x0807711b
 80770bc:	080770db 	.word	0x080770db
 80770c0:	080770d1 	.word	0x080770d1
 80770c4:	0807711b 	.word	0x0807711b
 80770c8:	080770f3 	.word	0x080770f3
 80770cc:	080770e5 	.word	0x080770e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80770d0:	6839      	ldr	r1, [r7, #0]
 80770d2:	6878      	ldr	r0, [r7, #4]
 80770d4:	f000 f9de 	bl	8077494 <USBD_GetDescriptor>
          break;
 80770d8:	e024      	b.n	8077124 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80770da:	6839      	ldr	r1, [r7, #0]
 80770dc:	6878      	ldr	r0, [r7, #4]
 80770de:	f000 fb55 	bl	807778c <USBD_SetAddress>
          break;
 80770e2:	e01f      	b.n	8077124 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80770e4:	6839      	ldr	r1, [r7, #0]
 80770e6:	6878      	ldr	r0, [r7, #4]
 80770e8:	f000 fb94 	bl	8077814 <USBD_SetConfig>
 80770ec:	4603      	mov	r3, r0
 80770ee:	73fb      	strb	r3, [r7, #15]
          break;
 80770f0:	e018      	b.n	8077124 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80770f2:	6839      	ldr	r1, [r7, #0]
 80770f4:	6878      	ldr	r0, [r7, #4]
 80770f6:	f000 fc33 	bl	8077960 <USBD_GetConfig>
          break;
 80770fa:	e013      	b.n	8077124 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80770fc:	6839      	ldr	r1, [r7, #0]
 80770fe:	6878      	ldr	r0, [r7, #4]
 8077100:	f000 fc64 	bl	80779cc <USBD_GetStatus>
          break;
 8077104:	e00e      	b.n	8077124 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8077106:	6839      	ldr	r1, [r7, #0]
 8077108:	6878      	ldr	r0, [r7, #4]
 807710a:	f000 fc93 	bl	8077a34 <USBD_SetFeature>
          break;
 807710e:	e009      	b.n	8077124 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8077110:	6839      	ldr	r1, [r7, #0]
 8077112:	6878      	ldr	r0, [r7, #4]
 8077114:	f000 fca2 	bl	8077a5c <USBD_ClrFeature>
          break;
 8077118:	e004      	b.n	8077124 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 807711a:	6839      	ldr	r1, [r7, #0]
 807711c:	6878      	ldr	r0, [r7, #4]
 807711e:	f000 fcf9 	bl	8077b14 <USBD_CtlError>
          break;
 8077122:	bf00      	nop
      }
      break;
 8077124:	e004      	b.n	8077130 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8077126:	6839      	ldr	r1, [r7, #0]
 8077128:	6878      	ldr	r0, [r7, #4]
 807712a:	f000 fcf3 	bl	8077b14 <USBD_CtlError>
      break;
 807712e:	bf00      	nop
  }

  return ret;
 8077130:	7bfb      	ldrb	r3, [r7, #15]
}
 8077132:	4618      	mov	r0, r3
 8077134:	3710      	adds	r7, #16
 8077136:	46bd      	mov	sp, r7
 8077138:	bd80      	pop	{r7, pc}
 807713a:	bf00      	nop

0807713c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807713c:	b580      	push	{r7, lr}
 807713e:	b084      	sub	sp, #16
 8077140:	af00      	add	r7, sp, #0
 8077142:	6078      	str	r0, [r7, #4]
 8077144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8077146:	2300      	movs	r3, #0
 8077148:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 807714a:	683b      	ldr	r3, [r7, #0]
 807714c:	781b      	ldrb	r3, [r3, #0]
 807714e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8077152:	2b40      	cmp	r3, #64	; 0x40
 8077154:	d005      	beq.n	8077162 <USBD_StdItfReq+0x26>
 8077156:	2b40      	cmp	r3, #64	; 0x40
 8077158:	d82f      	bhi.n	80771ba <USBD_StdItfReq+0x7e>
 807715a:	2b00      	cmp	r3, #0
 807715c:	d001      	beq.n	8077162 <USBD_StdItfReq+0x26>
 807715e:	2b20      	cmp	r3, #32
 8077160:	d12b      	bne.n	80771ba <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8077162:	687b      	ldr	r3, [r7, #4]
 8077164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8077168:	b2db      	uxtb	r3, r3
 807716a:	3b01      	subs	r3, #1
 807716c:	2b02      	cmp	r3, #2
 807716e:	d81d      	bhi.n	80771ac <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8077170:	683b      	ldr	r3, [r7, #0]
 8077172:	889b      	ldrh	r3, [r3, #4]
 8077174:	b2db      	uxtb	r3, r3
 8077176:	2b01      	cmp	r3, #1
 8077178:	d813      	bhi.n	80771a2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 807717a:	687b      	ldr	r3, [r7, #4]
 807717c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8077180:	689b      	ldr	r3, [r3, #8]
 8077182:	6839      	ldr	r1, [r7, #0]
 8077184:	6878      	ldr	r0, [r7, #4]
 8077186:	4798      	blx	r3
 8077188:	4603      	mov	r3, r0
 807718a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 807718c:	683b      	ldr	r3, [r7, #0]
 807718e:	88db      	ldrh	r3, [r3, #6]
 8077190:	2b00      	cmp	r3, #0
 8077192:	d110      	bne.n	80771b6 <USBD_StdItfReq+0x7a>
 8077194:	7bfb      	ldrb	r3, [r7, #15]
 8077196:	2b00      	cmp	r3, #0
 8077198:	d10d      	bne.n	80771b6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 807719a:	6878      	ldr	r0, [r7, #4]
 807719c:	f000 fd85 	bl	8077caa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80771a0:	e009      	b.n	80771b6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80771a2:	6839      	ldr	r1, [r7, #0]
 80771a4:	6878      	ldr	r0, [r7, #4]
 80771a6:	f000 fcb5 	bl	8077b14 <USBD_CtlError>
          break;
 80771aa:	e004      	b.n	80771b6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80771ac:	6839      	ldr	r1, [r7, #0]
 80771ae:	6878      	ldr	r0, [r7, #4]
 80771b0:	f000 fcb0 	bl	8077b14 <USBD_CtlError>
          break;
 80771b4:	e000      	b.n	80771b8 <USBD_StdItfReq+0x7c>
          break;
 80771b6:	bf00      	nop
      }
      break;
 80771b8:	e004      	b.n	80771c4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80771ba:	6839      	ldr	r1, [r7, #0]
 80771bc:	6878      	ldr	r0, [r7, #4]
 80771be:	f000 fca9 	bl	8077b14 <USBD_CtlError>
      break;
 80771c2:	bf00      	nop
  }

  return ret;
 80771c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80771c6:	4618      	mov	r0, r3
 80771c8:	3710      	adds	r7, #16
 80771ca:	46bd      	mov	sp, r7
 80771cc:	bd80      	pop	{r7, pc}

080771ce <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80771ce:	b580      	push	{r7, lr}
 80771d0:	b084      	sub	sp, #16
 80771d2:	af00      	add	r7, sp, #0
 80771d4:	6078      	str	r0, [r7, #4]
 80771d6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80771d8:	2300      	movs	r3, #0
 80771da:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80771dc:	683b      	ldr	r3, [r7, #0]
 80771de:	889b      	ldrh	r3, [r3, #4]
 80771e0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80771e2:	683b      	ldr	r3, [r7, #0]
 80771e4:	781b      	ldrb	r3, [r3, #0]
 80771e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80771ea:	2b40      	cmp	r3, #64	; 0x40
 80771ec:	d007      	beq.n	80771fe <USBD_StdEPReq+0x30>
 80771ee:	2b40      	cmp	r3, #64	; 0x40
 80771f0:	f200 8145 	bhi.w	807747e <USBD_StdEPReq+0x2b0>
 80771f4:	2b00      	cmp	r3, #0
 80771f6:	d00c      	beq.n	8077212 <USBD_StdEPReq+0x44>
 80771f8:	2b20      	cmp	r3, #32
 80771fa:	f040 8140 	bne.w	807747e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80771fe:	687b      	ldr	r3, [r7, #4]
 8077200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8077204:	689b      	ldr	r3, [r3, #8]
 8077206:	6839      	ldr	r1, [r7, #0]
 8077208:	6878      	ldr	r0, [r7, #4]
 807720a:	4798      	blx	r3
 807720c:	4603      	mov	r3, r0
 807720e:	73fb      	strb	r3, [r7, #15]
      break;
 8077210:	e13a      	b.n	8077488 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8077212:	683b      	ldr	r3, [r7, #0]
 8077214:	785b      	ldrb	r3, [r3, #1]
 8077216:	2b03      	cmp	r3, #3
 8077218:	d007      	beq.n	807722a <USBD_StdEPReq+0x5c>
 807721a:	2b03      	cmp	r3, #3
 807721c:	f300 8129 	bgt.w	8077472 <USBD_StdEPReq+0x2a4>
 8077220:	2b00      	cmp	r3, #0
 8077222:	d07f      	beq.n	8077324 <USBD_StdEPReq+0x156>
 8077224:	2b01      	cmp	r3, #1
 8077226:	d03c      	beq.n	80772a2 <USBD_StdEPReq+0xd4>
 8077228:	e123      	b.n	8077472 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 807722a:	687b      	ldr	r3, [r7, #4]
 807722c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8077230:	b2db      	uxtb	r3, r3
 8077232:	2b02      	cmp	r3, #2
 8077234:	d002      	beq.n	807723c <USBD_StdEPReq+0x6e>
 8077236:	2b03      	cmp	r3, #3
 8077238:	d016      	beq.n	8077268 <USBD_StdEPReq+0x9a>
 807723a:	e02c      	b.n	8077296 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 807723c:	7bbb      	ldrb	r3, [r7, #14]
 807723e:	2b00      	cmp	r3, #0
 8077240:	d00d      	beq.n	807725e <USBD_StdEPReq+0x90>
 8077242:	7bbb      	ldrb	r3, [r7, #14]
 8077244:	2b80      	cmp	r3, #128	; 0x80
 8077246:	d00a      	beq.n	807725e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8077248:	7bbb      	ldrb	r3, [r7, #14]
 807724a:	4619      	mov	r1, r3
 807724c:	6878      	ldr	r0, [r7, #4]
 807724e:	f001 f8bd 	bl	80783cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8077252:	2180      	movs	r1, #128	; 0x80
 8077254:	6878      	ldr	r0, [r7, #4]
 8077256:	f001 f8b9 	bl	80783cc <USBD_LL_StallEP>
 807725a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 807725c:	e020      	b.n	80772a0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 807725e:	6839      	ldr	r1, [r7, #0]
 8077260:	6878      	ldr	r0, [r7, #4]
 8077262:	f000 fc57 	bl	8077b14 <USBD_CtlError>
              break;
 8077266:	e01b      	b.n	80772a0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8077268:	683b      	ldr	r3, [r7, #0]
 807726a:	885b      	ldrh	r3, [r3, #2]
 807726c:	2b00      	cmp	r3, #0
 807726e:	d10e      	bne.n	807728e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8077270:	7bbb      	ldrb	r3, [r7, #14]
 8077272:	2b00      	cmp	r3, #0
 8077274:	d00b      	beq.n	807728e <USBD_StdEPReq+0xc0>
 8077276:	7bbb      	ldrb	r3, [r7, #14]
 8077278:	2b80      	cmp	r3, #128	; 0x80
 807727a:	d008      	beq.n	807728e <USBD_StdEPReq+0xc0>
 807727c:	683b      	ldr	r3, [r7, #0]
 807727e:	88db      	ldrh	r3, [r3, #6]
 8077280:	2b00      	cmp	r3, #0
 8077282:	d104      	bne.n	807728e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8077284:	7bbb      	ldrb	r3, [r7, #14]
 8077286:	4619      	mov	r1, r3
 8077288:	6878      	ldr	r0, [r7, #4]
 807728a:	f001 f89f 	bl	80783cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 807728e:	6878      	ldr	r0, [r7, #4]
 8077290:	f000 fd0b 	bl	8077caa <USBD_CtlSendStatus>

              break;
 8077294:	e004      	b.n	80772a0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8077296:	6839      	ldr	r1, [r7, #0]
 8077298:	6878      	ldr	r0, [r7, #4]
 807729a:	f000 fc3b 	bl	8077b14 <USBD_CtlError>
              break;
 807729e:	bf00      	nop
          }
          break;
 80772a0:	e0ec      	b.n	807747c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80772a2:	687b      	ldr	r3, [r7, #4]
 80772a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80772a8:	b2db      	uxtb	r3, r3
 80772aa:	2b02      	cmp	r3, #2
 80772ac:	d002      	beq.n	80772b4 <USBD_StdEPReq+0xe6>
 80772ae:	2b03      	cmp	r3, #3
 80772b0:	d016      	beq.n	80772e0 <USBD_StdEPReq+0x112>
 80772b2:	e030      	b.n	8077316 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80772b4:	7bbb      	ldrb	r3, [r7, #14]
 80772b6:	2b00      	cmp	r3, #0
 80772b8:	d00d      	beq.n	80772d6 <USBD_StdEPReq+0x108>
 80772ba:	7bbb      	ldrb	r3, [r7, #14]
 80772bc:	2b80      	cmp	r3, #128	; 0x80
 80772be:	d00a      	beq.n	80772d6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80772c0:	7bbb      	ldrb	r3, [r7, #14]
 80772c2:	4619      	mov	r1, r3
 80772c4:	6878      	ldr	r0, [r7, #4]
 80772c6:	f001 f881 	bl	80783cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80772ca:	2180      	movs	r1, #128	; 0x80
 80772cc:	6878      	ldr	r0, [r7, #4]
 80772ce:	f001 f87d 	bl	80783cc <USBD_LL_StallEP>
 80772d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80772d4:	e025      	b.n	8077322 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80772d6:	6839      	ldr	r1, [r7, #0]
 80772d8:	6878      	ldr	r0, [r7, #4]
 80772da:	f000 fc1b 	bl	8077b14 <USBD_CtlError>
              break;
 80772de:	e020      	b.n	8077322 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80772e0:	683b      	ldr	r3, [r7, #0]
 80772e2:	885b      	ldrh	r3, [r3, #2]
 80772e4:	2b00      	cmp	r3, #0
 80772e6:	d11b      	bne.n	8077320 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80772e8:	7bbb      	ldrb	r3, [r7, #14]
 80772ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80772ee:	2b00      	cmp	r3, #0
 80772f0:	d004      	beq.n	80772fc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80772f2:	7bbb      	ldrb	r3, [r7, #14]
 80772f4:	4619      	mov	r1, r3
 80772f6:	6878      	ldr	r0, [r7, #4]
 80772f8:	f001 f887 	bl	807840a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80772fc:	6878      	ldr	r0, [r7, #4]
 80772fe:	f000 fcd4 	bl	8077caa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8077302:	687b      	ldr	r3, [r7, #4]
 8077304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8077308:	689b      	ldr	r3, [r3, #8]
 807730a:	6839      	ldr	r1, [r7, #0]
 807730c:	6878      	ldr	r0, [r7, #4]
 807730e:	4798      	blx	r3
 8077310:	4603      	mov	r3, r0
 8077312:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8077314:	e004      	b.n	8077320 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8077316:	6839      	ldr	r1, [r7, #0]
 8077318:	6878      	ldr	r0, [r7, #4]
 807731a:	f000 fbfb 	bl	8077b14 <USBD_CtlError>
              break;
 807731e:	e000      	b.n	8077322 <USBD_StdEPReq+0x154>
              break;
 8077320:	bf00      	nop
          }
          break;
 8077322:	e0ab      	b.n	807747c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8077324:	687b      	ldr	r3, [r7, #4]
 8077326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 807732a:	b2db      	uxtb	r3, r3
 807732c:	2b02      	cmp	r3, #2
 807732e:	d002      	beq.n	8077336 <USBD_StdEPReq+0x168>
 8077330:	2b03      	cmp	r3, #3
 8077332:	d032      	beq.n	807739a <USBD_StdEPReq+0x1cc>
 8077334:	e097      	b.n	8077466 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8077336:	7bbb      	ldrb	r3, [r7, #14]
 8077338:	2b00      	cmp	r3, #0
 807733a:	d007      	beq.n	807734c <USBD_StdEPReq+0x17e>
 807733c:	7bbb      	ldrb	r3, [r7, #14]
 807733e:	2b80      	cmp	r3, #128	; 0x80
 8077340:	d004      	beq.n	807734c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8077342:	6839      	ldr	r1, [r7, #0]
 8077344:	6878      	ldr	r0, [r7, #4]
 8077346:	f000 fbe5 	bl	8077b14 <USBD_CtlError>
                break;
 807734a:	e091      	b.n	8077470 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 807734c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8077350:	2b00      	cmp	r3, #0
 8077352:	da0b      	bge.n	807736c <USBD_StdEPReq+0x19e>
 8077354:	7bbb      	ldrb	r3, [r7, #14]
 8077356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 807735a:	4613      	mov	r3, r2
 807735c:	009b      	lsls	r3, r3, #2
 807735e:	4413      	add	r3, r2
 8077360:	009b      	lsls	r3, r3, #2
 8077362:	3310      	adds	r3, #16
 8077364:	687a      	ldr	r2, [r7, #4]
 8077366:	4413      	add	r3, r2
 8077368:	3304      	adds	r3, #4
 807736a:	e00b      	b.n	8077384 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 807736c:	7bbb      	ldrb	r3, [r7, #14]
 807736e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8077372:	4613      	mov	r3, r2
 8077374:	009b      	lsls	r3, r3, #2
 8077376:	4413      	add	r3, r2
 8077378:	009b      	lsls	r3, r3, #2
 807737a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 807737e:	687a      	ldr	r2, [r7, #4]
 8077380:	4413      	add	r3, r2
 8077382:	3304      	adds	r3, #4
 8077384:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8077386:	68bb      	ldr	r3, [r7, #8]
 8077388:	2200      	movs	r2, #0
 807738a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 807738c:	68bb      	ldr	r3, [r7, #8]
 807738e:	2202      	movs	r2, #2
 8077390:	4619      	mov	r1, r3
 8077392:	6878      	ldr	r0, [r7, #4]
 8077394:	f000 fc2f 	bl	8077bf6 <USBD_CtlSendData>
              break;
 8077398:	e06a      	b.n	8077470 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 807739a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 807739e:	2b00      	cmp	r3, #0
 80773a0:	da11      	bge.n	80773c6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80773a2:	7bbb      	ldrb	r3, [r7, #14]
 80773a4:	f003 020f 	and.w	r2, r3, #15
 80773a8:	6879      	ldr	r1, [r7, #4]
 80773aa:	4613      	mov	r3, r2
 80773ac:	009b      	lsls	r3, r3, #2
 80773ae:	4413      	add	r3, r2
 80773b0:	009b      	lsls	r3, r3, #2
 80773b2:	440b      	add	r3, r1
 80773b4:	3324      	adds	r3, #36	; 0x24
 80773b6:	881b      	ldrh	r3, [r3, #0]
 80773b8:	2b00      	cmp	r3, #0
 80773ba:	d117      	bne.n	80773ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80773bc:	6839      	ldr	r1, [r7, #0]
 80773be:	6878      	ldr	r0, [r7, #4]
 80773c0:	f000 fba8 	bl	8077b14 <USBD_CtlError>
                  break;
 80773c4:	e054      	b.n	8077470 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80773c6:	7bbb      	ldrb	r3, [r7, #14]
 80773c8:	f003 020f 	and.w	r2, r3, #15
 80773cc:	6879      	ldr	r1, [r7, #4]
 80773ce:	4613      	mov	r3, r2
 80773d0:	009b      	lsls	r3, r3, #2
 80773d2:	4413      	add	r3, r2
 80773d4:	009b      	lsls	r3, r3, #2
 80773d6:	440b      	add	r3, r1
 80773d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80773dc:	881b      	ldrh	r3, [r3, #0]
 80773de:	2b00      	cmp	r3, #0
 80773e0:	d104      	bne.n	80773ec <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80773e2:	6839      	ldr	r1, [r7, #0]
 80773e4:	6878      	ldr	r0, [r7, #4]
 80773e6:	f000 fb95 	bl	8077b14 <USBD_CtlError>
                  break;
 80773ea:	e041      	b.n	8077470 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80773ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80773f0:	2b00      	cmp	r3, #0
 80773f2:	da0b      	bge.n	807740c <USBD_StdEPReq+0x23e>
 80773f4:	7bbb      	ldrb	r3, [r7, #14]
 80773f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80773fa:	4613      	mov	r3, r2
 80773fc:	009b      	lsls	r3, r3, #2
 80773fe:	4413      	add	r3, r2
 8077400:	009b      	lsls	r3, r3, #2
 8077402:	3310      	adds	r3, #16
 8077404:	687a      	ldr	r2, [r7, #4]
 8077406:	4413      	add	r3, r2
 8077408:	3304      	adds	r3, #4
 807740a:	e00b      	b.n	8077424 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 807740c:	7bbb      	ldrb	r3, [r7, #14]
 807740e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8077412:	4613      	mov	r3, r2
 8077414:	009b      	lsls	r3, r3, #2
 8077416:	4413      	add	r3, r2
 8077418:	009b      	lsls	r3, r3, #2
 807741a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 807741e:	687a      	ldr	r2, [r7, #4]
 8077420:	4413      	add	r3, r2
 8077422:	3304      	adds	r3, #4
 8077424:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8077426:	7bbb      	ldrb	r3, [r7, #14]
 8077428:	2b00      	cmp	r3, #0
 807742a:	d002      	beq.n	8077432 <USBD_StdEPReq+0x264>
 807742c:	7bbb      	ldrb	r3, [r7, #14]
 807742e:	2b80      	cmp	r3, #128	; 0x80
 8077430:	d103      	bne.n	807743a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8077432:	68bb      	ldr	r3, [r7, #8]
 8077434:	2200      	movs	r2, #0
 8077436:	601a      	str	r2, [r3, #0]
 8077438:	e00e      	b.n	8077458 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 807743a:	7bbb      	ldrb	r3, [r7, #14]
 807743c:	4619      	mov	r1, r3
 807743e:	6878      	ldr	r0, [r7, #4]
 8077440:	f001 f802 	bl	8078448 <USBD_LL_IsStallEP>
 8077444:	4603      	mov	r3, r0
 8077446:	2b00      	cmp	r3, #0
 8077448:	d003      	beq.n	8077452 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 807744a:	68bb      	ldr	r3, [r7, #8]
 807744c:	2201      	movs	r2, #1
 807744e:	601a      	str	r2, [r3, #0]
 8077450:	e002      	b.n	8077458 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8077452:	68bb      	ldr	r3, [r7, #8]
 8077454:	2200      	movs	r2, #0
 8077456:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8077458:	68bb      	ldr	r3, [r7, #8]
 807745a:	2202      	movs	r2, #2
 807745c:	4619      	mov	r1, r3
 807745e:	6878      	ldr	r0, [r7, #4]
 8077460:	f000 fbc9 	bl	8077bf6 <USBD_CtlSendData>
              break;
 8077464:	e004      	b.n	8077470 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8077466:	6839      	ldr	r1, [r7, #0]
 8077468:	6878      	ldr	r0, [r7, #4]
 807746a:	f000 fb53 	bl	8077b14 <USBD_CtlError>
              break;
 807746e:	bf00      	nop
          }
          break;
 8077470:	e004      	b.n	807747c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8077472:	6839      	ldr	r1, [r7, #0]
 8077474:	6878      	ldr	r0, [r7, #4]
 8077476:	f000 fb4d 	bl	8077b14 <USBD_CtlError>
          break;
 807747a:	bf00      	nop
      }
      break;
 807747c:	e004      	b.n	8077488 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 807747e:	6839      	ldr	r1, [r7, #0]
 8077480:	6878      	ldr	r0, [r7, #4]
 8077482:	f000 fb47 	bl	8077b14 <USBD_CtlError>
      break;
 8077486:	bf00      	nop
  }

  return ret;
 8077488:	7bfb      	ldrb	r3, [r7, #15]
}
 807748a:	4618      	mov	r0, r3
 807748c:	3710      	adds	r7, #16
 807748e:	46bd      	mov	sp, r7
 8077490:	bd80      	pop	{r7, pc}
	...

08077494 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077494:	b580      	push	{r7, lr}
 8077496:	b084      	sub	sp, #16
 8077498:	af00      	add	r7, sp, #0
 807749a:	6078      	str	r0, [r7, #4]
 807749c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 807749e:	2300      	movs	r3, #0
 80774a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80774a2:	2300      	movs	r3, #0
 80774a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80774a6:	2300      	movs	r3, #0
 80774a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80774aa:	683b      	ldr	r3, [r7, #0]
 80774ac:	885b      	ldrh	r3, [r3, #2]
 80774ae:	0a1b      	lsrs	r3, r3, #8
 80774b0:	b29b      	uxth	r3, r3
 80774b2:	3b01      	subs	r3, #1
 80774b4:	2b06      	cmp	r3, #6
 80774b6:	f200 813b 	bhi.w	8077730 <USBD_GetDescriptor+0x29c>
 80774ba:	a201      	add	r2, pc, #4	; (adr r2, 80774c0 <USBD_GetDescriptor+0x2c>)
 80774bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80774c0:	080774dd 	.word	0x080774dd
 80774c4:	080774f5 	.word	0x080774f5
 80774c8:	08077535 	.word	0x08077535
 80774cc:	08077731 	.word	0x08077731
 80774d0:	08077731 	.word	0x08077731
 80774d4:	080776d1 	.word	0x080776d1
 80774d8:	080776fd 	.word	0x080776fd
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80774dc:	687b      	ldr	r3, [r7, #4]
 80774de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80774e2:	681b      	ldr	r3, [r3, #0]
 80774e4:	687a      	ldr	r2, [r7, #4]
 80774e6:	7c12      	ldrb	r2, [r2, #16]
 80774e8:	f107 0108 	add.w	r1, r7, #8
 80774ec:	4610      	mov	r0, r2
 80774ee:	4798      	blx	r3
 80774f0:	60f8      	str	r0, [r7, #12]
      break;
 80774f2:	e125      	b.n	8077740 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80774f4:	687b      	ldr	r3, [r7, #4]
 80774f6:	7c1b      	ldrb	r3, [r3, #16]
 80774f8:	2b00      	cmp	r3, #0
 80774fa:	d10d      	bne.n	8077518 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80774fc:	687b      	ldr	r3, [r7, #4]
 80774fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8077502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8077504:	f107 0208 	add.w	r2, r7, #8
 8077508:	4610      	mov	r0, r2
 807750a:	4798      	blx	r3
 807750c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 807750e:	68fb      	ldr	r3, [r7, #12]
 8077510:	3301      	adds	r3, #1
 8077512:	2202      	movs	r2, #2
 8077514:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8077516:	e113      	b.n	8077740 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8077518:	687b      	ldr	r3, [r7, #4]
 807751a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8077520:	f107 0208 	add.w	r2, r7, #8
 8077524:	4610      	mov	r0, r2
 8077526:	4798      	blx	r3
 8077528:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 807752a:	68fb      	ldr	r3, [r7, #12]
 807752c:	3301      	adds	r3, #1
 807752e:	2202      	movs	r2, #2
 8077530:	701a      	strb	r2, [r3, #0]
      break;
 8077532:	e105      	b.n	8077740 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8077534:	683b      	ldr	r3, [r7, #0]
 8077536:	885b      	ldrh	r3, [r3, #2]
 8077538:	b2db      	uxtb	r3, r3
 807753a:	2b05      	cmp	r3, #5
 807753c:	f200 80ac 	bhi.w	8077698 <USBD_GetDescriptor+0x204>
 8077540:	a201      	add	r2, pc, #4	; (adr r2, 8077548 <USBD_GetDescriptor+0xb4>)
 8077542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8077546:	bf00      	nop
 8077548:	08077561 	.word	0x08077561
 807754c:	08077595 	.word	0x08077595
 8077550:	080775c9 	.word	0x080775c9
 8077554:	080775fd 	.word	0x080775fd
 8077558:	08077631 	.word	0x08077631
 807755c:	08077665 	.word	0x08077665
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8077560:	687b      	ldr	r3, [r7, #4]
 8077562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8077566:	685b      	ldr	r3, [r3, #4]
 8077568:	2b00      	cmp	r3, #0
 807756a:	d00b      	beq.n	8077584 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 807756c:	687b      	ldr	r3, [r7, #4]
 807756e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8077572:	685b      	ldr	r3, [r3, #4]
 8077574:	687a      	ldr	r2, [r7, #4]
 8077576:	7c12      	ldrb	r2, [r2, #16]
 8077578:	f107 0108 	add.w	r1, r7, #8
 807757c:	4610      	mov	r0, r2
 807757e:	4798      	blx	r3
 8077580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8077582:	e0a4      	b.n	80776ce <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8077584:	6839      	ldr	r1, [r7, #0]
 8077586:	6878      	ldr	r0, [r7, #4]
 8077588:	f000 fac4 	bl	8077b14 <USBD_CtlError>
            err++;
 807758c:	7afb      	ldrb	r3, [r7, #11]
 807758e:	3301      	adds	r3, #1
 8077590:	72fb      	strb	r3, [r7, #11]
          break;
 8077592:	e09c      	b.n	80776ce <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8077594:	687b      	ldr	r3, [r7, #4]
 8077596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807759a:	689b      	ldr	r3, [r3, #8]
 807759c:	2b00      	cmp	r3, #0
 807759e:	d00b      	beq.n	80775b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80775a0:	687b      	ldr	r3, [r7, #4]
 80775a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80775a6:	689b      	ldr	r3, [r3, #8]
 80775a8:	687a      	ldr	r2, [r7, #4]
 80775aa:	7c12      	ldrb	r2, [r2, #16]
 80775ac:	f107 0108 	add.w	r1, r7, #8
 80775b0:	4610      	mov	r0, r2
 80775b2:	4798      	blx	r3
 80775b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80775b6:	e08a      	b.n	80776ce <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80775b8:	6839      	ldr	r1, [r7, #0]
 80775ba:	6878      	ldr	r0, [r7, #4]
 80775bc:	f000 faaa 	bl	8077b14 <USBD_CtlError>
            err++;
 80775c0:	7afb      	ldrb	r3, [r7, #11]
 80775c2:	3301      	adds	r3, #1
 80775c4:	72fb      	strb	r3, [r7, #11]
          break;
 80775c6:	e082      	b.n	80776ce <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80775c8:	687b      	ldr	r3, [r7, #4]
 80775ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80775ce:	68db      	ldr	r3, [r3, #12]
 80775d0:	2b00      	cmp	r3, #0
 80775d2:	d00b      	beq.n	80775ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80775d4:	687b      	ldr	r3, [r7, #4]
 80775d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80775da:	68db      	ldr	r3, [r3, #12]
 80775dc:	687a      	ldr	r2, [r7, #4]
 80775de:	7c12      	ldrb	r2, [r2, #16]
 80775e0:	f107 0108 	add.w	r1, r7, #8
 80775e4:	4610      	mov	r0, r2
 80775e6:	4798      	blx	r3
 80775e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80775ea:	e070      	b.n	80776ce <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 80775ec:	6839      	ldr	r1, [r7, #0]
 80775ee:	6878      	ldr	r0, [r7, #4]
 80775f0:	f000 fa90 	bl	8077b14 <USBD_CtlError>
            err++;
 80775f4:	7afb      	ldrb	r3, [r7, #11]
 80775f6:	3301      	adds	r3, #1
 80775f8:	72fb      	strb	r3, [r7, #11]
          break;
 80775fa:	e068      	b.n	80776ce <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80775fc:	687b      	ldr	r3, [r7, #4]
 80775fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8077602:	691b      	ldr	r3, [r3, #16]
 8077604:	2b00      	cmp	r3, #0
 8077606:	d00b      	beq.n	8077620 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8077608:	687b      	ldr	r3, [r7, #4]
 807760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807760e:	691b      	ldr	r3, [r3, #16]
 8077610:	687a      	ldr	r2, [r7, #4]
 8077612:	7c12      	ldrb	r2, [r2, #16]
 8077614:	f107 0108 	add.w	r1, r7, #8
 8077618:	4610      	mov	r0, r2
 807761a:	4798      	blx	r3
 807761c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 807761e:	e056      	b.n	80776ce <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8077620:	6839      	ldr	r1, [r7, #0]
 8077622:	6878      	ldr	r0, [r7, #4]
 8077624:	f000 fa76 	bl	8077b14 <USBD_CtlError>
            err++;
 8077628:	7afb      	ldrb	r3, [r7, #11]
 807762a:	3301      	adds	r3, #1
 807762c:	72fb      	strb	r3, [r7, #11]
          break;
 807762e:	e04e      	b.n	80776ce <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8077630:	687b      	ldr	r3, [r7, #4]
 8077632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8077636:	695b      	ldr	r3, [r3, #20]
 8077638:	2b00      	cmp	r3, #0
 807763a:	d00b      	beq.n	8077654 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 807763c:	687b      	ldr	r3, [r7, #4]
 807763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8077642:	695b      	ldr	r3, [r3, #20]
 8077644:	687a      	ldr	r2, [r7, #4]
 8077646:	7c12      	ldrb	r2, [r2, #16]
 8077648:	f107 0108 	add.w	r1, r7, #8
 807764c:	4610      	mov	r0, r2
 807764e:	4798      	blx	r3
 8077650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8077652:	e03c      	b.n	80776ce <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8077654:	6839      	ldr	r1, [r7, #0]
 8077656:	6878      	ldr	r0, [r7, #4]
 8077658:	f000 fa5c 	bl	8077b14 <USBD_CtlError>
            err++;
 807765c:	7afb      	ldrb	r3, [r7, #11]
 807765e:	3301      	adds	r3, #1
 8077660:	72fb      	strb	r3, [r7, #11]
          break;
 8077662:	e034      	b.n	80776ce <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8077664:	687b      	ldr	r3, [r7, #4]
 8077666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 807766a:	699b      	ldr	r3, [r3, #24]
 807766c:	2b00      	cmp	r3, #0
 807766e:	d00b      	beq.n	8077688 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8077670:	687b      	ldr	r3, [r7, #4]
 8077672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8077676:	699b      	ldr	r3, [r3, #24]
 8077678:	687a      	ldr	r2, [r7, #4]
 807767a:	7c12      	ldrb	r2, [r2, #16]
 807767c:	f107 0108 	add.w	r1, r7, #8
 8077680:	4610      	mov	r0, r2
 8077682:	4798      	blx	r3
 8077684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8077686:	e022      	b.n	80776ce <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 8077688:	6839      	ldr	r1, [r7, #0]
 807768a:	6878      	ldr	r0, [r7, #4]
 807768c:	f000 fa42 	bl	8077b14 <USBD_CtlError>
            err++;
 8077690:	7afb      	ldrb	r3, [r7, #11]
 8077692:	3301      	adds	r3, #1
 8077694:	72fb      	strb	r3, [r7, #11]
          break;
 8077696:	e01a      	b.n	80776ce <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8077698:	687b      	ldr	r3, [r7, #4]
 807769a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80776a0:	2b00      	cmp	r3, #0
 80776a2:	d00c      	beq.n	80776be <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 80776a4:	687b      	ldr	r3, [r7, #4]
 80776a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80776aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80776ac:	683a      	ldr	r2, [r7, #0]
 80776ae:	8852      	ldrh	r2, [r2, #2]
 80776b0:	b2d1      	uxtb	r1, r2
 80776b2:	f107 0208 	add.w	r2, r7, #8
 80776b6:	6878      	ldr	r0, [r7, #4]
 80776b8:	4798      	blx	r3
 80776ba:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 80776bc:	e006      	b.n	80776cc <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 80776be:	6839      	ldr	r1, [r7, #0]
 80776c0:	6878      	ldr	r0, [r7, #4]
 80776c2:	f000 fa27 	bl	8077b14 <USBD_CtlError>
            err++;
 80776c6:	7afb      	ldrb	r3, [r7, #11]
 80776c8:	3301      	adds	r3, #1
 80776ca:	72fb      	strb	r3, [r7, #11]
          break;
 80776cc:	bf00      	nop
      }
      break;
 80776ce:	e037      	b.n	8077740 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80776d0:	687b      	ldr	r3, [r7, #4]
 80776d2:	7c1b      	ldrb	r3, [r3, #16]
 80776d4:	2b00      	cmp	r3, #0
 80776d6:	d109      	bne.n	80776ec <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80776d8:	687b      	ldr	r3, [r7, #4]
 80776da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80776de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80776e0:	f107 0208 	add.w	r2, r7, #8
 80776e4:	4610      	mov	r0, r2
 80776e6:	4798      	blx	r3
 80776e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80776ea:	e029      	b.n	8077740 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 80776ec:	6839      	ldr	r1, [r7, #0]
 80776ee:	6878      	ldr	r0, [r7, #4]
 80776f0:	f000 fa10 	bl	8077b14 <USBD_CtlError>
        err++;
 80776f4:	7afb      	ldrb	r3, [r7, #11]
 80776f6:	3301      	adds	r3, #1
 80776f8:	72fb      	strb	r3, [r7, #11]
      break;
 80776fa:	e021      	b.n	8077740 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80776fc:	687b      	ldr	r3, [r7, #4]
 80776fe:	7c1b      	ldrb	r3, [r3, #16]
 8077700:	2b00      	cmp	r3, #0
 8077702:	d10d      	bne.n	8077720 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8077704:	687b      	ldr	r3, [r7, #4]
 8077706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 807770a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807770c:	f107 0208 	add.w	r2, r7, #8
 8077710:	4610      	mov	r0, r2
 8077712:	4798      	blx	r3
 8077714:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8077716:	68fb      	ldr	r3, [r7, #12]
 8077718:	3301      	adds	r3, #1
 807771a:	2207      	movs	r2, #7
 807771c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 807771e:	e00f      	b.n	8077740 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 8077720:	6839      	ldr	r1, [r7, #0]
 8077722:	6878      	ldr	r0, [r7, #4]
 8077724:	f000 f9f6 	bl	8077b14 <USBD_CtlError>
        err++;
 8077728:	7afb      	ldrb	r3, [r7, #11]
 807772a:	3301      	adds	r3, #1
 807772c:	72fb      	strb	r3, [r7, #11]
      break;
 807772e:	e007      	b.n	8077740 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 8077730:	6839      	ldr	r1, [r7, #0]
 8077732:	6878      	ldr	r0, [r7, #4]
 8077734:	f000 f9ee 	bl	8077b14 <USBD_CtlError>
      err++;
 8077738:	7afb      	ldrb	r3, [r7, #11]
 807773a:	3301      	adds	r3, #1
 807773c:	72fb      	strb	r3, [r7, #11]
      break;
 807773e:	bf00      	nop
  }

  if (err != 0U)
 8077740:	7afb      	ldrb	r3, [r7, #11]
 8077742:	2b00      	cmp	r3, #0
 8077744:	d11e      	bne.n	8077784 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 8077746:	683b      	ldr	r3, [r7, #0]
 8077748:	88db      	ldrh	r3, [r3, #6]
 807774a:	2b00      	cmp	r3, #0
 807774c:	d016      	beq.n	807777c <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 807774e:	893b      	ldrh	r3, [r7, #8]
 8077750:	2b00      	cmp	r3, #0
 8077752:	d00e      	beq.n	8077772 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 8077754:	683b      	ldr	r3, [r7, #0]
 8077756:	88da      	ldrh	r2, [r3, #6]
 8077758:	893b      	ldrh	r3, [r7, #8]
 807775a:	4293      	cmp	r3, r2
 807775c:	bf28      	it	cs
 807775e:	4613      	movcs	r3, r2
 8077760:	b29b      	uxth	r3, r3
 8077762:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8077764:	893b      	ldrh	r3, [r7, #8]
 8077766:	461a      	mov	r2, r3
 8077768:	68f9      	ldr	r1, [r7, #12]
 807776a:	6878      	ldr	r0, [r7, #4]
 807776c:	f000 fa43 	bl	8077bf6 <USBD_CtlSendData>
 8077770:	e009      	b.n	8077786 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8077772:	6839      	ldr	r1, [r7, #0]
 8077774:	6878      	ldr	r0, [r7, #4]
 8077776:	f000 f9cd 	bl	8077b14 <USBD_CtlError>
 807777a:	e004      	b.n	8077786 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 807777c:	6878      	ldr	r0, [r7, #4]
 807777e:	f000 fa94 	bl	8077caa <USBD_CtlSendStatus>
 8077782:	e000      	b.n	8077786 <USBD_GetDescriptor+0x2f2>
    return;
 8077784:	bf00      	nop
  }
}
 8077786:	3710      	adds	r7, #16
 8077788:	46bd      	mov	sp, r7
 807778a:	bd80      	pop	{r7, pc}

0807778c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 807778c:	b580      	push	{r7, lr}
 807778e:	b084      	sub	sp, #16
 8077790:	af00      	add	r7, sp, #0
 8077792:	6078      	str	r0, [r7, #4]
 8077794:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8077796:	683b      	ldr	r3, [r7, #0]
 8077798:	889b      	ldrh	r3, [r3, #4]
 807779a:	2b00      	cmp	r3, #0
 807779c:	d131      	bne.n	8077802 <USBD_SetAddress+0x76>
 807779e:	683b      	ldr	r3, [r7, #0]
 80777a0:	88db      	ldrh	r3, [r3, #6]
 80777a2:	2b00      	cmp	r3, #0
 80777a4:	d12d      	bne.n	8077802 <USBD_SetAddress+0x76>
 80777a6:	683b      	ldr	r3, [r7, #0]
 80777a8:	885b      	ldrh	r3, [r3, #2]
 80777aa:	2b7f      	cmp	r3, #127	; 0x7f
 80777ac:	d829      	bhi.n	8077802 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80777ae:	683b      	ldr	r3, [r7, #0]
 80777b0:	885b      	ldrh	r3, [r3, #2]
 80777b2:	b2db      	uxtb	r3, r3
 80777b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80777b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80777ba:	687b      	ldr	r3, [r7, #4]
 80777bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80777c0:	b2db      	uxtb	r3, r3
 80777c2:	2b03      	cmp	r3, #3
 80777c4:	d104      	bne.n	80777d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80777c6:	6839      	ldr	r1, [r7, #0]
 80777c8:	6878      	ldr	r0, [r7, #4]
 80777ca:	f000 f9a3 	bl	8077b14 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80777ce:	e01d      	b.n	807780c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80777d0:	687b      	ldr	r3, [r7, #4]
 80777d2:	7bfa      	ldrb	r2, [r7, #15]
 80777d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80777d8:	7bfb      	ldrb	r3, [r7, #15]
 80777da:	4619      	mov	r1, r3
 80777dc:	6878      	ldr	r0, [r7, #4]
 80777de:	f000 fe5f 	bl	80784a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80777e2:	6878      	ldr	r0, [r7, #4]
 80777e4:	f000 fa61 	bl	8077caa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80777e8:	7bfb      	ldrb	r3, [r7, #15]
 80777ea:	2b00      	cmp	r3, #0
 80777ec:	d004      	beq.n	80777f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80777ee:	687b      	ldr	r3, [r7, #4]
 80777f0:	2202      	movs	r2, #2
 80777f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80777f6:	e009      	b.n	807780c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80777f8:	687b      	ldr	r3, [r7, #4]
 80777fa:	2201      	movs	r2, #1
 80777fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8077800:	e004      	b.n	807780c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8077802:	6839      	ldr	r1, [r7, #0]
 8077804:	6878      	ldr	r0, [r7, #4]
 8077806:	f000 f985 	bl	8077b14 <USBD_CtlError>
  }
}
 807780a:	bf00      	nop
 807780c:	bf00      	nop
 807780e:	3710      	adds	r7, #16
 8077810:	46bd      	mov	sp, r7
 8077812:	bd80      	pop	{r7, pc}

08077814 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077814:	b580      	push	{r7, lr}
 8077816:	b084      	sub	sp, #16
 8077818:	af00      	add	r7, sp, #0
 807781a:	6078      	str	r0, [r7, #4]
 807781c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 807781e:	2300      	movs	r3, #0
 8077820:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8077822:	683b      	ldr	r3, [r7, #0]
 8077824:	885b      	ldrh	r3, [r3, #2]
 8077826:	b2da      	uxtb	r2, r3
 8077828:	4b4c      	ldr	r3, [pc, #304]	; (807795c <USBD_SetConfig+0x148>)
 807782a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 807782c:	4b4b      	ldr	r3, [pc, #300]	; (807795c <USBD_SetConfig+0x148>)
 807782e:	781b      	ldrb	r3, [r3, #0]
 8077830:	2b01      	cmp	r3, #1
 8077832:	d905      	bls.n	8077840 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8077834:	6839      	ldr	r1, [r7, #0]
 8077836:	6878      	ldr	r0, [r7, #4]
 8077838:	f000 f96c 	bl	8077b14 <USBD_CtlError>
    return USBD_FAIL;
 807783c:	2303      	movs	r3, #3
 807783e:	e088      	b.n	8077952 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8077840:	687b      	ldr	r3, [r7, #4]
 8077842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8077846:	b2db      	uxtb	r3, r3
 8077848:	2b02      	cmp	r3, #2
 807784a:	d002      	beq.n	8077852 <USBD_SetConfig+0x3e>
 807784c:	2b03      	cmp	r3, #3
 807784e:	d025      	beq.n	807789c <USBD_SetConfig+0x88>
 8077850:	e071      	b.n	8077936 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8077852:	4b42      	ldr	r3, [pc, #264]	; (807795c <USBD_SetConfig+0x148>)
 8077854:	781b      	ldrb	r3, [r3, #0]
 8077856:	2b00      	cmp	r3, #0
 8077858:	d01c      	beq.n	8077894 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 807785a:	4b40      	ldr	r3, [pc, #256]	; (807795c <USBD_SetConfig+0x148>)
 807785c:	781b      	ldrb	r3, [r3, #0]
 807785e:	461a      	mov	r2, r3
 8077860:	687b      	ldr	r3, [r7, #4]
 8077862:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8077864:	4b3d      	ldr	r3, [pc, #244]	; (807795c <USBD_SetConfig+0x148>)
 8077866:	781b      	ldrb	r3, [r3, #0]
 8077868:	4619      	mov	r1, r3
 807786a:	6878      	ldr	r0, [r7, #4]
 807786c:	f7ff f937 	bl	8076ade <USBD_SetClassConfig>
 8077870:	4603      	mov	r3, r0
 8077872:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8077874:	7bfb      	ldrb	r3, [r7, #15]
 8077876:	2b00      	cmp	r3, #0
 8077878:	d004      	beq.n	8077884 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 807787a:	6839      	ldr	r1, [r7, #0]
 807787c:	6878      	ldr	r0, [r7, #4]
 807787e:	f000 f949 	bl	8077b14 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8077882:	e065      	b.n	8077950 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8077884:	6878      	ldr	r0, [r7, #4]
 8077886:	f000 fa10 	bl	8077caa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 807788a:	687b      	ldr	r3, [r7, #4]
 807788c:	2203      	movs	r2, #3
 807788e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8077892:	e05d      	b.n	8077950 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8077894:	6878      	ldr	r0, [r7, #4]
 8077896:	f000 fa08 	bl	8077caa <USBD_CtlSendStatus>
      break;
 807789a:	e059      	b.n	8077950 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 807789c:	4b2f      	ldr	r3, [pc, #188]	; (807795c <USBD_SetConfig+0x148>)
 807789e:	781b      	ldrb	r3, [r3, #0]
 80778a0:	2b00      	cmp	r3, #0
 80778a2:	d112      	bne.n	80778ca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80778a4:	687b      	ldr	r3, [r7, #4]
 80778a6:	2202      	movs	r2, #2
 80778a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80778ac:	4b2b      	ldr	r3, [pc, #172]	; (807795c <USBD_SetConfig+0x148>)
 80778ae:	781b      	ldrb	r3, [r3, #0]
 80778b0:	461a      	mov	r2, r3
 80778b2:	687b      	ldr	r3, [r7, #4]
 80778b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80778b6:	4b29      	ldr	r3, [pc, #164]	; (807795c <USBD_SetConfig+0x148>)
 80778b8:	781b      	ldrb	r3, [r3, #0]
 80778ba:	4619      	mov	r1, r3
 80778bc:	6878      	ldr	r0, [r7, #4]
 80778be:	f7ff f92a 	bl	8076b16 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80778c2:	6878      	ldr	r0, [r7, #4]
 80778c4:	f000 f9f1 	bl	8077caa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80778c8:	e042      	b.n	8077950 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80778ca:	4b24      	ldr	r3, [pc, #144]	; (807795c <USBD_SetConfig+0x148>)
 80778cc:	781b      	ldrb	r3, [r3, #0]
 80778ce:	461a      	mov	r2, r3
 80778d0:	687b      	ldr	r3, [r7, #4]
 80778d2:	685b      	ldr	r3, [r3, #4]
 80778d4:	429a      	cmp	r2, r3
 80778d6:	d02a      	beq.n	807792e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80778d8:	687b      	ldr	r3, [r7, #4]
 80778da:	685b      	ldr	r3, [r3, #4]
 80778dc:	b2db      	uxtb	r3, r3
 80778de:	4619      	mov	r1, r3
 80778e0:	6878      	ldr	r0, [r7, #4]
 80778e2:	f7ff f918 	bl	8076b16 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80778e6:	4b1d      	ldr	r3, [pc, #116]	; (807795c <USBD_SetConfig+0x148>)
 80778e8:	781b      	ldrb	r3, [r3, #0]
 80778ea:	461a      	mov	r2, r3
 80778ec:	687b      	ldr	r3, [r7, #4]
 80778ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80778f0:	4b1a      	ldr	r3, [pc, #104]	; (807795c <USBD_SetConfig+0x148>)
 80778f2:	781b      	ldrb	r3, [r3, #0]
 80778f4:	4619      	mov	r1, r3
 80778f6:	6878      	ldr	r0, [r7, #4]
 80778f8:	f7ff f8f1 	bl	8076ade <USBD_SetClassConfig>
 80778fc:	4603      	mov	r3, r0
 80778fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8077900:	7bfb      	ldrb	r3, [r7, #15]
 8077902:	2b00      	cmp	r3, #0
 8077904:	d00f      	beq.n	8077926 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8077906:	6839      	ldr	r1, [r7, #0]
 8077908:	6878      	ldr	r0, [r7, #4]
 807790a:	f000 f903 	bl	8077b14 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 807790e:	687b      	ldr	r3, [r7, #4]
 8077910:	685b      	ldr	r3, [r3, #4]
 8077912:	b2db      	uxtb	r3, r3
 8077914:	4619      	mov	r1, r3
 8077916:	6878      	ldr	r0, [r7, #4]
 8077918:	f7ff f8fd 	bl	8076b16 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 807791c:	687b      	ldr	r3, [r7, #4]
 807791e:	2202      	movs	r2, #2
 8077920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8077924:	e014      	b.n	8077950 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8077926:	6878      	ldr	r0, [r7, #4]
 8077928:	f000 f9bf 	bl	8077caa <USBD_CtlSendStatus>
      break;
 807792c:	e010      	b.n	8077950 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 807792e:	6878      	ldr	r0, [r7, #4]
 8077930:	f000 f9bb 	bl	8077caa <USBD_CtlSendStatus>
      break;
 8077934:	e00c      	b.n	8077950 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8077936:	6839      	ldr	r1, [r7, #0]
 8077938:	6878      	ldr	r0, [r7, #4]
 807793a:	f000 f8eb 	bl	8077b14 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 807793e:	4b07      	ldr	r3, [pc, #28]	; (807795c <USBD_SetConfig+0x148>)
 8077940:	781b      	ldrb	r3, [r3, #0]
 8077942:	4619      	mov	r1, r3
 8077944:	6878      	ldr	r0, [r7, #4]
 8077946:	f7ff f8e6 	bl	8076b16 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 807794a:	2303      	movs	r3, #3
 807794c:	73fb      	strb	r3, [r7, #15]
      break;
 807794e:	bf00      	nop
  }

  return ret;
 8077950:	7bfb      	ldrb	r3, [r7, #15]
}
 8077952:	4618      	mov	r0, r3
 8077954:	3710      	adds	r7, #16
 8077956:	46bd      	mov	sp, r7
 8077958:	bd80      	pop	{r7, pc}
 807795a:	bf00      	nop
 807795c:	200001f7 	.word	0x200001f7

08077960 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077960:	b580      	push	{r7, lr}
 8077962:	b082      	sub	sp, #8
 8077964:	af00      	add	r7, sp, #0
 8077966:	6078      	str	r0, [r7, #4]
 8077968:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 807796a:	683b      	ldr	r3, [r7, #0]
 807796c:	88db      	ldrh	r3, [r3, #6]
 807796e:	2b01      	cmp	r3, #1
 8077970:	d004      	beq.n	807797c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8077972:	6839      	ldr	r1, [r7, #0]
 8077974:	6878      	ldr	r0, [r7, #4]
 8077976:	f000 f8cd 	bl	8077b14 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 807797a:	e023      	b.n	80779c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 807797c:	687b      	ldr	r3, [r7, #4]
 807797e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8077982:	b2db      	uxtb	r3, r3
 8077984:	2b02      	cmp	r3, #2
 8077986:	dc02      	bgt.n	807798e <USBD_GetConfig+0x2e>
 8077988:	2b00      	cmp	r3, #0
 807798a:	dc03      	bgt.n	8077994 <USBD_GetConfig+0x34>
 807798c:	e015      	b.n	80779ba <USBD_GetConfig+0x5a>
 807798e:	2b03      	cmp	r3, #3
 8077990:	d00b      	beq.n	80779aa <USBD_GetConfig+0x4a>
 8077992:	e012      	b.n	80779ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8077994:	687b      	ldr	r3, [r7, #4]
 8077996:	2200      	movs	r2, #0
 8077998:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 807799a:	687b      	ldr	r3, [r7, #4]
 807799c:	3308      	adds	r3, #8
 807799e:	2201      	movs	r2, #1
 80779a0:	4619      	mov	r1, r3
 80779a2:	6878      	ldr	r0, [r7, #4]
 80779a4:	f000 f927 	bl	8077bf6 <USBD_CtlSendData>
        break;
 80779a8:	e00c      	b.n	80779c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80779aa:	687b      	ldr	r3, [r7, #4]
 80779ac:	3304      	adds	r3, #4
 80779ae:	2201      	movs	r2, #1
 80779b0:	4619      	mov	r1, r3
 80779b2:	6878      	ldr	r0, [r7, #4]
 80779b4:	f000 f91f 	bl	8077bf6 <USBD_CtlSendData>
        break;
 80779b8:	e004      	b.n	80779c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80779ba:	6839      	ldr	r1, [r7, #0]
 80779bc:	6878      	ldr	r0, [r7, #4]
 80779be:	f000 f8a9 	bl	8077b14 <USBD_CtlError>
        break;
 80779c2:	bf00      	nop
}
 80779c4:	bf00      	nop
 80779c6:	3708      	adds	r7, #8
 80779c8:	46bd      	mov	sp, r7
 80779ca:	bd80      	pop	{r7, pc}

080779cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80779cc:	b580      	push	{r7, lr}
 80779ce:	b082      	sub	sp, #8
 80779d0:	af00      	add	r7, sp, #0
 80779d2:	6078      	str	r0, [r7, #4]
 80779d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80779d6:	687b      	ldr	r3, [r7, #4]
 80779d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80779dc:	b2db      	uxtb	r3, r3
 80779de:	3b01      	subs	r3, #1
 80779e0:	2b02      	cmp	r3, #2
 80779e2:	d81e      	bhi.n	8077a22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80779e4:	683b      	ldr	r3, [r7, #0]
 80779e6:	88db      	ldrh	r3, [r3, #6]
 80779e8:	2b02      	cmp	r3, #2
 80779ea:	d004      	beq.n	80779f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80779ec:	6839      	ldr	r1, [r7, #0]
 80779ee:	6878      	ldr	r0, [r7, #4]
 80779f0:	f000 f890 	bl	8077b14 <USBD_CtlError>
        break;
 80779f4:	e01a      	b.n	8077a2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80779f6:	687b      	ldr	r3, [r7, #4]
 80779f8:	2201      	movs	r2, #1
 80779fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80779fc:	687b      	ldr	r3, [r7, #4]
 80779fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8077a02:	2b00      	cmp	r3, #0
 8077a04:	d005      	beq.n	8077a12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8077a06:	687b      	ldr	r3, [r7, #4]
 8077a08:	68db      	ldr	r3, [r3, #12]
 8077a0a:	f043 0202 	orr.w	r2, r3, #2
 8077a0e:	687b      	ldr	r3, [r7, #4]
 8077a10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8077a12:	687b      	ldr	r3, [r7, #4]
 8077a14:	330c      	adds	r3, #12
 8077a16:	2202      	movs	r2, #2
 8077a18:	4619      	mov	r1, r3
 8077a1a:	6878      	ldr	r0, [r7, #4]
 8077a1c:	f000 f8eb 	bl	8077bf6 <USBD_CtlSendData>
      break;
 8077a20:	e004      	b.n	8077a2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8077a22:	6839      	ldr	r1, [r7, #0]
 8077a24:	6878      	ldr	r0, [r7, #4]
 8077a26:	f000 f875 	bl	8077b14 <USBD_CtlError>
      break;
 8077a2a:	bf00      	nop
  }
}
 8077a2c:	bf00      	nop
 8077a2e:	3708      	adds	r7, #8
 8077a30:	46bd      	mov	sp, r7
 8077a32:	bd80      	pop	{r7, pc}

08077a34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077a34:	b580      	push	{r7, lr}
 8077a36:	b082      	sub	sp, #8
 8077a38:	af00      	add	r7, sp, #0
 8077a3a:	6078      	str	r0, [r7, #4]
 8077a3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8077a3e:	683b      	ldr	r3, [r7, #0]
 8077a40:	885b      	ldrh	r3, [r3, #2]
 8077a42:	2b01      	cmp	r3, #1
 8077a44:	d106      	bne.n	8077a54 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8077a46:	687b      	ldr	r3, [r7, #4]
 8077a48:	2201      	movs	r2, #1
 8077a4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8077a4e:	6878      	ldr	r0, [r7, #4]
 8077a50:	f000 f92b 	bl	8077caa <USBD_CtlSendStatus>
  }
}
 8077a54:	bf00      	nop
 8077a56:	3708      	adds	r7, #8
 8077a58:	46bd      	mov	sp, r7
 8077a5a:	bd80      	pop	{r7, pc}

08077a5c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077a5c:	b580      	push	{r7, lr}
 8077a5e:	b082      	sub	sp, #8
 8077a60:	af00      	add	r7, sp, #0
 8077a62:	6078      	str	r0, [r7, #4]
 8077a64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8077a66:	687b      	ldr	r3, [r7, #4]
 8077a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8077a6c:	b2db      	uxtb	r3, r3
 8077a6e:	3b01      	subs	r3, #1
 8077a70:	2b02      	cmp	r3, #2
 8077a72:	d80b      	bhi.n	8077a8c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8077a74:	683b      	ldr	r3, [r7, #0]
 8077a76:	885b      	ldrh	r3, [r3, #2]
 8077a78:	2b01      	cmp	r3, #1
 8077a7a:	d10c      	bne.n	8077a96 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8077a7c:	687b      	ldr	r3, [r7, #4]
 8077a7e:	2200      	movs	r2, #0
 8077a80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8077a84:	6878      	ldr	r0, [r7, #4]
 8077a86:	f000 f910 	bl	8077caa <USBD_CtlSendStatus>
      }
      break;
 8077a8a:	e004      	b.n	8077a96 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8077a8c:	6839      	ldr	r1, [r7, #0]
 8077a8e:	6878      	ldr	r0, [r7, #4]
 8077a90:	f000 f840 	bl	8077b14 <USBD_CtlError>
      break;
 8077a94:	e000      	b.n	8077a98 <USBD_ClrFeature+0x3c>
      break;
 8077a96:	bf00      	nop
  }
}
 8077a98:	bf00      	nop
 8077a9a:	3708      	adds	r7, #8
 8077a9c:	46bd      	mov	sp, r7
 8077a9e:	bd80      	pop	{r7, pc}

08077aa0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8077aa0:	b580      	push	{r7, lr}
 8077aa2:	b084      	sub	sp, #16
 8077aa4:	af00      	add	r7, sp, #0
 8077aa6:	6078      	str	r0, [r7, #4]
 8077aa8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8077aaa:	683b      	ldr	r3, [r7, #0]
 8077aac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8077aae:	68fb      	ldr	r3, [r7, #12]
 8077ab0:	781a      	ldrb	r2, [r3, #0]
 8077ab2:	687b      	ldr	r3, [r7, #4]
 8077ab4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8077ab6:	68fb      	ldr	r3, [r7, #12]
 8077ab8:	3301      	adds	r3, #1
 8077aba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8077abc:	68fb      	ldr	r3, [r7, #12]
 8077abe:	781a      	ldrb	r2, [r3, #0]
 8077ac0:	687b      	ldr	r3, [r7, #4]
 8077ac2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8077ac4:	68fb      	ldr	r3, [r7, #12]
 8077ac6:	3301      	adds	r3, #1
 8077ac8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8077aca:	68f8      	ldr	r0, [r7, #12]
 8077acc:	f7ff faaa 	bl	8077024 <SWAPBYTE>
 8077ad0:	4603      	mov	r3, r0
 8077ad2:	461a      	mov	r2, r3
 8077ad4:	687b      	ldr	r3, [r7, #4]
 8077ad6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8077ad8:	68fb      	ldr	r3, [r7, #12]
 8077ada:	3301      	adds	r3, #1
 8077adc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8077ade:	68fb      	ldr	r3, [r7, #12]
 8077ae0:	3301      	adds	r3, #1
 8077ae2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8077ae4:	68f8      	ldr	r0, [r7, #12]
 8077ae6:	f7ff fa9d 	bl	8077024 <SWAPBYTE>
 8077aea:	4603      	mov	r3, r0
 8077aec:	461a      	mov	r2, r3
 8077aee:	687b      	ldr	r3, [r7, #4]
 8077af0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8077af2:	68fb      	ldr	r3, [r7, #12]
 8077af4:	3301      	adds	r3, #1
 8077af6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8077af8:	68fb      	ldr	r3, [r7, #12]
 8077afa:	3301      	adds	r3, #1
 8077afc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8077afe:	68f8      	ldr	r0, [r7, #12]
 8077b00:	f7ff fa90 	bl	8077024 <SWAPBYTE>
 8077b04:	4603      	mov	r3, r0
 8077b06:	461a      	mov	r2, r3
 8077b08:	687b      	ldr	r3, [r7, #4]
 8077b0a:	80da      	strh	r2, [r3, #6]
}
 8077b0c:	bf00      	nop
 8077b0e:	3710      	adds	r7, #16
 8077b10:	46bd      	mov	sp, r7
 8077b12:	bd80      	pop	{r7, pc}

08077b14 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8077b14:	b580      	push	{r7, lr}
 8077b16:	b082      	sub	sp, #8
 8077b18:	af00      	add	r7, sp, #0
 8077b1a:	6078      	str	r0, [r7, #4]
 8077b1c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8077b1e:	2180      	movs	r1, #128	; 0x80
 8077b20:	6878      	ldr	r0, [r7, #4]
 8077b22:	f000 fc53 	bl	80783cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8077b26:	2100      	movs	r1, #0
 8077b28:	6878      	ldr	r0, [r7, #4]
 8077b2a:	f000 fc4f 	bl	80783cc <USBD_LL_StallEP>
}
 8077b2e:	bf00      	nop
 8077b30:	3708      	adds	r7, #8
 8077b32:	46bd      	mov	sp, r7
 8077b34:	bd80      	pop	{r7, pc}

08077b36 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8077b36:	b580      	push	{r7, lr}
 8077b38:	b086      	sub	sp, #24
 8077b3a:	af00      	add	r7, sp, #0
 8077b3c:	60f8      	str	r0, [r7, #12]
 8077b3e:	60b9      	str	r1, [r7, #8]
 8077b40:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8077b42:	2300      	movs	r3, #0
 8077b44:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8077b46:	68fb      	ldr	r3, [r7, #12]
 8077b48:	2b00      	cmp	r3, #0
 8077b4a:	d036      	beq.n	8077bba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8077b4c:	68fb      	ldr	r3, [r7, #12]
 8077b4e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8077b50:	6938      	ldr	r0, [r7, #16]
 8077b52:	f000 f836 	bl	8077bc2 <USBD_GetLen>
 8077b56:	4603      	mov	r3, r0
 8077b58:	3301      	adds	r3, #1
 8077b5a:	b29b      	uxth	r3, r3
 8077b5c:	005b      	lsls	r3, r3, #1
 8077b5e:	b29a      	uxth	r2, r3
 8077b60:	687b      	ldr	r3, [r7, #4]
 8077b62:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8077b64:	7dfb      	ldrb	r3, [r7, #23]
 8077b66:	68ba      	ldr	r2, [r7, #8]
 8077b68:	4413      	add	r3, r2
 8077b6a:	687a      	ldr	r2, [r7, #4]
 8077b6c:	7812      	ldrb	r2, [r2, #0]
 8077b6e:	701a      	strb	r2, [r3, #0]
  idx++;
 8077b70:	7dfb      	ldrb	r3, [r7, #23]
 8077b72:	3301      	adds	r3, #1
 8077b74:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8077b76:	7dfb      	ldrb	r3, [r7, #23]
 8077b78:	68ba      	ldr	r2, [r7, #8]
 8077b7a:	4413      	add	r3, r2
 8077b7c:	2203      	movs	r2, #3
 8077b7e:	701a      	strb	r2, [r3, #0]
  idx++;
 8077b80:	7dfb      	ldrb	r3, [r7, #23]
 8077b82:	3301      	adds	r3, #1
 8077b84:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8077b86:	e013      	b.n	8077bb0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8077b88:	7dfb      	ldrb	r3, [r7, #23]
 8077b8a:	68ba      	ldr	r2, [r7, #8]
 8077b8c:	4413      	add	r3, r2
 8077b8e:	693a      	ldr	r2, [r7, #16]
 8077b90:	7812      	ldrb	r2, [r2, #0]
 8077b92:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8077b94:	693b      	ldr	r3, [r7, #16]
 8077b96:	3301      	adds	r3, #1
 8077b98:	613b      	str	r3, [r7, #16]
    idx++;
 8077b9a:	7dfb      	ldrb	r3, [r7, #23]
 8077b9c:	3301      	adds	r3, #1
 8077b9e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8077ba0:	7dfb      	ldrb	r3, [r7, #23]
 8077ba2:	68ba      	ldr	r2, [r7, #8]
 8077ba4:	4413      	add	r3, r2
 8077ba6:	2200      	movs	r2, #0
 8077ba8:	701a      	strb	r2, [r3, #0]
    idx++;
 8077baa:	7dfb      	ldrb	r3, [r7, #23]
 8077bac:	3301      	adds	r3, #1
 8077bae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8077bb0:	693b      	ldr	r3, [r7, #16]
 8077bb2:	781b      	ldrb	r3, [r3, #0]
 8077bb4:	2b00      	cmp	r3, #0
 8077bb6:	d1e7      	bne.n	8077b88 <USBD_GetString+0x52>
 8077bb8:	e000      	b.n	8077bbc <USBD_GetString+0x86>
    return;
 8077bba:	bf00      	nop
  }
}
 8077bbc:	3718      	adds	r7, #24
 8077bbe:	46bd      	mov	sp, r7
 8077bc0:	bd80      	pop	{r7, pc}

08077bc2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8077bc2:	b480      	push	{r7}
 8077bc4:	b085      	sub	sp, #20
 8077bc6:	af00      	add	r7, sp, #0
 8077bc8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8077bca:	2300      	movs	r3, #0
 8077bcc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8077bce:	687b      	ldr	r3, [r7, #4]
 8077bd0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8077bd2:	e005      	b.n	8077be0 <USBD_GetLen+0x1e>
  {
    len++;
 8077bd4:	7bfb      	ldrb	r3, [r7, #15]
 8077bd6:	3301      	adds	r3, #1
 8077bd8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8077bda:	68bb      	ldr	r3, [r7, #8]
 8077bdc:	3301      	adds	r3, #1
 8077bde:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8077be0:	68bb      	ldr	r3, [r7, #8]
 8077be2:	781b      	ldrb	r3, [r3, #0]
 8077be4:	2b00      	cmp	r3, #0
 8077be6:	d1f5      	bne.n	8077bd4 <USBD_GetLen+0x12>
  }

  return len;
 8077be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8077bea:	4618      	mov	r0, r3
 8077bec:	3714      	adds	r7, #20
 8077bee:	46bd      	mov	sp, r7
 8077bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8077bf4:	4770      	bx	lr

08077bf6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8077bf6:	b580      	push	{r7, lr}
 8077bf8:	b084      	sub	sp, #16
 8077bfa:	af00      	add	r7, sp, #0
 8077bfc:	60f8      	str	r0, [r7, #12]
 8077bfe:	60b9      	str	r1, [r7, #8]
 8077c00:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8077c02:	68fb      	ldr	r3, [r7, #12]
 8077c04:	2202      	movs	r2, #2
 8077c06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8077c0a:	68fb      	ldr	r3, [r7, #12]
 8077c0c:	687a      	ldr	r2, [r7, #4]
 8077c0e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8077c10:	68fb      	ldr	r3, [r7, #12]
 8077c12:	687a      	ldr	r2, [r7, #4]
 8077c14:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8077c16:	687b      	ldr	r3, [r7, #4]
 8077c18:	68ba      	ldr	r2, [r7, #8]
 8077c1a:	2100      	movs	r1, #0
 8077c1c:	68f8      	ldr	r0, [r7, #12]
 8077c1e:	f000 fc5e 	bl	80784de <USBD_LL_Transmit>

  return USBD_OK;
 8077c22:	2300      	movs	r3, #0
}
 8077c24:	4618      	mov	r0, r3
 8077c26:	3710      	adds	r7, #16
 8077c28:	46bd      	mov	sp, r7
 8077c2a:	bd80      	pop	{r7, pc}

08077c2c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8077c2c:	b580      	push	{r7, lr}
 8077c2e:	b084      	sub	sp, #16
 8077c30:	af00      	add	r7, sp, #0
 8077c32:	60f8      	str	r0, [r7, #12]
 8077c34:	60b9      	str	r1, [r7, #8]
 8077c36:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8077c38:	687b      	ldr	r3, [r7, #4]
 8077c3a:	68ba      	ldr	r2, [r7, #8]
 8077c3c:	2100      	movs	r1, #0
 8077c3e:	68f8      	ldr	r0, [r7, #12]
 8077c40:	f000 fc4d 	bl	80784de <USBD_LL_Transmit>

  return USBD_OK;
 8077c44:	2300      	movs	r3, #0
}
 8077c46:	4618      	mov	r0, r3
 8077c48:	3710      	adds	r7, #16
 8077c4a:	46bd      	mov	sp, r7
 8077c4c:	bd80      	pop	{r7, pc}

08077c4e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8077c4e:	b580      	push	{r7, lr}
 8077c50:	b084      	sub	sp, #16
 8077c52:	af00      	add	r7, sp, #0
 8077c54:	60f8      	str	r0, [r7, #12]
 8077c56:	60b9      	str	r1, [r7, #8]
 8077c58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8077c5a:	68fb      	ldr	r3, [r7, #12]
 8077c5c:	2203      	movs	r2, #3
 8077c5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8077c62:	68fb      	ldr	r3, [r7, #12]
 8077c64:	687a      	ldr	r2, [r7, #4]
 8077c66:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8077c6a:	68fb      	ldr	r3, [r7, #12]
 8077c6c:	687a      	ldr	r2, [r7, #4]
 8077c6e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8077c72:	687b      	ldr	r3, [r7, #4]
 8077c74:	68ba      	ldr	r2, [r7, #8]
 8077c76:	2100      	movs	r1, #0
 8077c78:	68f8      	ldr	r0, [r7, #12]
 8077c7a:	f000 fc51 	bl	8078520 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8077c7e:	2300      	movs	r3, #0
}
 8077c80:	4618      	mov	r0, r3
 8077c82:	3710      	adds	r7, #16
 8077c84:	46bd      	mov	sp, r7
 8077c86:	bd80      	pop	{r7, pc}

08077c88 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8077c88:	b580      	push	{r7, lr}
 8077c8a:	b084      	sub	sp, #16
 8077c8c:	af00      	add	r7, sp, #0
 8077c8e:	60f8      	str	r0, [r7, #12]
 8077c90:	60b9      	str	r1, [r7, #8]
 8077c92:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8077c94:	687b      	ldr	r3, [r7, #4]
 8077c96:	68ba      	ldr	r2, [r7, #8]
 8077c98:	2100      	movs	r1, #0
 8077c9a:	68f8      	ldr	r0, [r7, #12]
 8077c9c:	f000 fc40 	bl	8078520 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8077ca0:	2300      	movs	r3, #0
}
 8077ca2:	4618      	mov	r0, r3
 8077ca4:	3710      	adds	r7, #16
 8077ca6:	46bd      	mov	sp, r7
 8077ca8:	bd80      	pop	{r7, pc}

08077caa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8077caa:	b580      	push	{r7, lr}
 8077cac:	b082      	sub	sp, #8
 8077cae:	af00      	add	r7, sp, #0
 8077cb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8077cb2:	687b      	ldr	r3, [r7, #4]
 8077cb4:	2204      	movs	r2, #4
 8077cb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8077cba:	2300      	movs	r3, #0
 8077cbc:	2200      	movs	r2, #0
 8077cbe:	2100      	movs	r1, #0
 8077cc0:	6878      	ldr	r0, [r7, #4]
 8077cc2:	f000 fc0c 	bl	80784de <USBD_LL_Transmit>

  return USBD_OK;
 8077cc6:	2300      	movs	r3, #0
}
 8077cc8:	4618      	mov	r0, r3
 8077cca:	3708      	adds	r7, #8
 8077ccc:	46bd      	mov	sp, r7
 8077cce:	bd80      	pop	{r7, pc}

08077cd0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8077cd0:	b580      	push	{r7, lr}
 8077cd2:	b082      	sub	sp, #8
 8077cd4:	af00      	add	r7, sp, #0
 8077cd6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8077cd8:	687b      	ldr	r3, [r7, #4]
 8077cda:	2205      	movs	r2, #5
 8077cdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8077ce0:	2300      	movs	r3, #0
 8077ce2:	2200      	movs	r2, #0
 8077ce4:	2100      	movs	r1, #0
 8077ce6:	6878      	ldr	r0, [r7, #4]
 8077ce8:	f000 fc1a 	bl	8078520 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8077cec:	2300      	movs	r3, #0
}
 8077cee:	4618      	mov	r0, r3
 8077cf0:	3708      	adds	r7, #8
 8077cf2:	46bd      	mov	sp, r7
 8077cf4:	bd80      	pop	{r7, pc}
	...

08077cf8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8077cf8:	b580      	push	{r7, lr}
 8077cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8077cfc:	2200      	movs	r2, #0
 8077cfe:	4912      	ldr	r1, [pc, #72]	; (8077d48 <MX_USB_DEVICE_Init+0x50>)
 8077d00:	4812      	ldr	r0, [pc, #72]	; (8077d4c <MX_USB_DEVICE_Init+0x54>)
 8077d02:	f7fe fe63 	bl	80769cc <USBD_Init>
 8077d06:	4603      	mov	r3, r0
 8077d08:	2b00      	cmp	r3, #0
 8077d0a:	d001      	beq.n	8077d10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8077d0c:	f7fa fc7c 	bl	8072608 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8077d10:	490f      	ldr	r1, [pc, #60]	; (8077d50 <MX_USB_DEVICE_Init+0x58>)
 8077d12:	480e      	ldr	r0, [pc, #56]	; (8077d4c <MX_USB_DEVICE_Init+0x54>)
 8077d14:	f7fe fe8a 	bl	8076a2c <USBD_RegisterClass>
 8077d18:	4603      	mov	r3, r0
 8077d1a:	2b00      	cmp	r3, #0
 8077d1c:	d001      	beq.n	8077d22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8077d1e:	f7fa fc73 	bl	8072608 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8077d22:	490c      	ldr	r1, [pc, #48]	; (8077d54 <MX_USB_DEVICE_Init+0x5c>)
 8077d24:	4809      	ldr	r0, [pc, #36]	; (8077d4c <MX_USB_DEVICE_Init+0x54>)
 8077d26:	f7fe facf 	bl	80762c8 <USBD_DFU_RegisterMedia>
 8077d2a:	4603      	mov	r3, r0
 8077d2c:	2b00      	cmp	r3, #0
 8077d2e:	d001      	beq.n	8077d34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8077d30:	f7fa fc6a 	bl	8072608 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8077d34:	4805      	ldr	r0, [pc, #20]	; (8077d4c <MX_USB_DEVICE_Init+0x54>)
 8077d36:	f7fe fea0 	bl	8076a7a <USBD_Start>
 8077d3a:	4603      	mov	r3, r0
 8077d3c:	2b00      	cmp	r3, #0
 8077d3e:	d001      	beq.n	8077d44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8077d40:	f7fa fc62 	bl	8072608 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8077d44:	bf00      	nop
 8077d46:	bd80      	pop	{r7, pc}
 8077d48:	20000070 	.word	0x20000070
 8077d4c:	2000061c 	.word	0x2000061c
 8077d50:	2000000c 	.word	0x2000000c
 8077d54:	200000c0 	.word	0x200000c0

08077d58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077d58:	b480      	push	{r7}
 8077d5a:	b083      	sub	sp, #12
 8077d5c:	af00      	add	r7, sp, #0
 8077d5e:	4603      	mov	r3, r0
 8077d60:	6039      	str	r1, [r7, #0]
 8077d62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8077d64:	683b      	ldr	r3, [r7, #0]
 8077d66:	2212      	movs	r2, #18
 8077d68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8077d6a:	4b03      	ldr	r3, [pc, #12]	; (8077d78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8077d6c:	4618      	mov	r0, r3
 8077d6e:	370c      	adds	r7, #12
 8077d70:	46bd      	mov	sp, r7
 8077d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8077d76:	4770      	bx	lr
 8077d78:	2000008c 	.word	0x2000008c

08077d7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077d7c:	b480      	push	{r7}
 8077d7e:	b083      	sub	sp, #12
 8077d80:	af00      	add	r7, sp, #0
 8077d82:	4603      	mov	r3, r0
 8077d84:	6039      	str	r1, [r7, #0]
 8077d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8077d88:	683b      	ldr	r3, [r7, #0]
 8077d8a:	2204      	movs	r2, #4
 8077d8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8077d8e:	4b03      	ldr	r3, [pc, #12]	; (8077d9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8077d90:	4618      	mov	r0, r3
 8077d92:	370c      	adds	r7, #12
 8077d94:	46bd      	mov	sp, r7
 8077d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8077d9a:	4770      	bx	lr
 8077d9c:	200000a0 	.word	0x200000a0

08077da0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077da0:	b580      	push	{r7, lr}
 8077da2:	b082      	sub	sp, #8
 8077da4:	af00      	add	r7, sp, #0
 8077da6:	4603      	mov	r3, r0
 8077da8:	6039      	str	r1, [r7, #0]
 8077daa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8077dac:	79fb      	ldrb	r3, [r7, #7]
 8077dae:	2b00      	cmp	r3, #0
 8077db0:	d105      	bne.n	8077dbe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8077db2:	683a      	ldr	r2, [r7, #0]
 8077db4:	4907      	ldr	r1, [pc, #28]	; (8077dd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8077db6:	4808      	ldr	r0, [pc, #32]	; (8077dd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8077db8:	f7ff febd 	bl	8077b36 <USBD_GetString>
 8077dbc:	e004      	b.n	8077dc8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8077dbe:	683a      	ldr	r2, [r7, #0]
 8077dc0:	4904      	ldr	r1, [pc, #16]	; (8077dd4 <USBD_FS_ProductStrDescriptor+0x34>)
 8077dc2:	4805      	ldr	r0, [pc, #20]	; (8077dd8 <USBD_FS_ProductStrDescriptor+0x38>)
 8077dc4:	f7ff feb7 	bl	8077b36 <USBD_GetString>
  }
  return USBD_StrDesc;
 8077dc8:	4b02      	ldr	r3, [pc, #8]	; (8077dd4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8077dca:	4618      	mov	r0, r3
 8077dcc:	3708      	adds	r7, #8
 8077dce:	46bd      	mov	sp, r7
 8077dd0:	bd80      	pop	{r7, pc}
 8077dd2:	bf00      	nop
 8077dd4:	200008ec 	.word	0x200008ec
 8077dd8:	0807865c 	.word	0x0807865c

08077ddc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077ddc:	b580      	push	{r7, lr}
 8077dde:	b082      	sub	sp, #8
 8077de0:	af00      	add	r7, sp, #0
 8077de2:	4603      	mov	r3, r0
 8077de4:	6039      	str	r1, [r7, #0]
 8077de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8077de8:	683a      	ldr	r2, [r7, #0]
 8077dea:	4904      	ldr	r1, [pc, #16]	; (8077dfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8077dec:	4804      	ldr	r0, [pc, #16]	; (8077e00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8077dee:	f7ff fea2 	bl	8077b36 <USBD_GetString>
  return USBD_StrDesc;
 8077df2:	4b02      	ldr	r3, [pc, #8]	; (8077dfc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8077df4:	4618      	mov	r0, r3
 8077df6:	3708      	adds	r7, #8
 8077df8:	46bd      	mov	sp, r7
 8077dfa:	bd80      	pop	{r7, pc}
 8077dfc:	200008ec 	.word	0x200008ec
 8077e00:	08078680 	.word	0x08078680

08077e04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077e04:	b580      	push	{r7, lr}
 8077e06:	b082      	sub	sp, #8
 8077e08:	af00      	add	r7, sp, #0
 8077e0a:	4603      	mov	r3, r0
 8077e0c:	6039      	str	r1, [r7, #0]
 8077e0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8077e10:	683b      	ldr	r3, [r7, #0]
 8077e12:	221a      	movs	r2, #26
 8077e14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8077e16:	f000 f843 	bl	8077ea0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8077e1a:	4b02      	ldr	r3, [pc, #8]	; (8077e24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8077e1c:	4618      	mov	r0, r3
 8077e1e:	3708      	adds	r7, #8
 8077e20:	46bd      	mov	sp, r7
 8077e22:	bd80      	pop	{r7, pc}
 8077e24:	200000a4 	.word	0x200000a4

08077e28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077e28:	b580      	push	{r7, lr}
 8077e2a:	b082      	sub	sp, #8
 8077e2c:	af00      	add	r7, sp, #0
 8077e2e:	4603      	mov	r3, r0
 8077e30:	6039      	str	r1, [r7, #0]
 8077e32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8077e34:	79fb      	ldrb	r3, [r7, #7]
 8077e36:	2b00      	cmp	r3, #0
 8077e38:	d105      	bne.n	8077e46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8077e3a:	683a      	ldr	r2, [r7, #0]
 8077e3c:	4907      	ldr	r1, [pc, #28]	; (8077e5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8077e3e:	4808      	ldr	r0, [pc, #32]	; (8077e60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8077e40:	f7ff fe79 	bl	8077b36 <USBD_GetString>
 8077e44:	e004      	b.n	8077e50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8077e46:	683a      	ldr	r2, [r7, #0]
 8077e48:	4904      	ldr	r1, [pc, #16]	; (8077e5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8077e4a:	4805      	ldr	r0, [pc, #20]	; (8077e60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8077e4c:	f7ff fe73 	bl	8077b36 <USBD_GetString>
  }
  return USBD_StrDesc;
 8077e50:	4b02      	ldr	r3, [pc, #8]	; (8077e5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8077e52:	4618      	mov	r0, r3
 8077e54:	3708      	adds	r7, #8
 8077e56:	46bd      	mov	sp, r7
 8077e58:	bd80      	pop	{r7, pc}
 8077e5a:	bf00      	nop
 8077e5c:	200008ec 	.word	0x200008ec
 8077e60:	08078688 	.word	0x08078688

08077e64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8077e64:	b580      	push	{r7, lr}
 8077e66:	b082      	sub	sp, #8
 8077e68:	af00      	add	r7, sp, #0
 8077e6a:	4603      	mov	r3, r0
 8077e6c:	6039      	str	r1, [r7, #0]
 8077e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8077e70:	79fb      	ldrb	r3, [r7, #7]
 8077e72:	2b00      	cmp	r3, #0
 8077e74:	d105      	bne.n	8077e82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8077e76:	683a      	ldr	r2, [r7, #0]
 8077e78:	4907      	ldr	r1, [pc, #28]	; (8077e98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8077e7a:	4808      	ldr	r0, [pc, #32]	; (8077e9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8077e7c:	f7ff fe5b 	bl	8077b36 <USBD_GetString>
 8077e80:	e004      	b.n	8077e8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8077e82:	683a      	ldr	r2, [r7, #0]
 8077e84:	4904      	ldr	r1, [pc, #16]	; (8077e98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8077e86:	4805      	ldr	r0, [pc, #20]	; (8077e9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8077e88:	f7ff fe55 	bl	8077b36 <USBD_GetString>
  }
  return USBD_StrDesc;
 8077e8c:	4b02      	ldr	r3, [pc, #8]	; (8077e98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8077e8e:	4618      	mov	r0, r3
 8077e90:	3708      	adds	r7, #8
 8077e92:	46bd      	mov	sp, r7
 8077e94:	bd80      	pop	{r7, pc}
 8077e96:	bf00      	nop
 8077e98:	200008ec 	.word	0x200008ec
 8077e9c:	08078694 	.word	0x08078694

08077ea0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8077ea0:	b580      	push	{r7, lr}
 8077ea2:	b084      	sub	sp, #16
 8077ea4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8077ea6:	4b0f      	ldr	r3, [pc, #60]	; (8077ee4 <Get_SerialNum+0x44>)
 8077ea8:	681b      	ldr	r3, [r3, #0]
 8077eaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8077eac:	4b0e      	ldr	r3, [pc, #56]	; (8077ee8 <Get_SerialNum+0x48>)
 8077eae:	681b      	ldr	r3, [r3, #0]
 8077eb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8077eb2:	4b0e      	ldr	r3, [pc, #56]	; (8077eec <Get_SerialNum+0x4c>)
 8077eb4:	681b      	ldr	r3, [r3, #0]
 8077eb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8077eb8:	68fa      	ldr	r2, [r7, #12]
 8077eba:	687b      	ldr	r3, [r7, #4]
 8077ebc:	4413      	add	r3, r2
 8077ebe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8077ec0:	68fb      	ldr	r3, [r7, #12]
 8077ec2:	2b00      	cmp	r3, #0
 8077ec4:	d009      	beq.n	8077eda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8077ec6:	2208      	movs	r2, #8
 8077ec8:	4909      	ldr	r1, [pc, #36]	; (8077ef0 <Get_SerialNum+0x50>)
 8077eca:	68f8      	ldr	r0, [r7, #12]
 8077ecc:	f000 f814 	bl	8077ef8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8077ed0:	2204      	movs	r2, #4
 8077ed2:	4908      	ldr	r1, [pc, #32]	; (8077ef4 <Get_SerialNum+0x54>)
 8077ed4:	68b8      	ldr	r0, [r7, #8]
 8077ed6:	f000 f80f 	bl	8077ef8 <IntToUnicode>
  }
}
 8077eda:	bf00      	nop
 8077edc:	3710      	adds	r7, #16
 8077ede:	46bd      	mov	sp, r7
 8077ee0:	bd80      	pop	{r7, pc}
 8077ee2:	bf00      	nop
 8077ee4:	1fff7a10 	.word	0x1fff7a10
 8077ee8:	1fff7a14 	.word	0x1fff7a14
 8077eec:	1fff7a18 	.word	0x1fff7a18
 8077ef0:	200000a6 	.word	0x200000a6
 8077ef4:	200000b6 	.word	0x200000b6

08077ef8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8077ef8:	b480      	push	{r7}
 8077efa:	b087      	sub	sp, #28
 8077efc:	af00      	add	r7, sp, #0
 8077efe:	60f8      	str	r0, [r7, #12]
 8077f00:	60b9      	str	r1, [r7, #8]
 8077f02:	4613      	mov	r3, r2
 8077f04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8077f06:	2300      	movs	r3, #0
 8077f08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8077f0a:	2300      	movs	r3, #0
 8077f0c:	75fb      	strb	r3, [r7, #23]
 8077f0e:	e027      	b.n	8077f60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8077f10:	68fb      	ldr	r3, [r7, #12]
 8077f12:	0f1b      	lsrs	r3, r3, #28
 8077f14:	2b09      	cmp	r3, #9
 8077f16:	d80b      	bhi.n	8077f30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8077f18:	68fb      	ldr	r3, [r7, #12]
 8077f1a:	0f1b      	lsrs	r3, r3, #28
 8077f1c:	b2da      	uxtb	r2, r3
 8077f1e:	7dfb      	ldrb	r3, [r7, #23]
 8077f20:	005b      	lsls	r3, r3, #1
 8077f22:	4619      	mov	r1, r3
 8077f24:	68bb      	ldr	r3, [r7, #8]
 8077f26:	440b      	add	r3, r1
 8077f28:	3230      	adds	r2, #48	; 0x30
 8077f2a:	b2d2      	uxtb	r2, r2
 8077f2c:	701a      	strb	r2, [r3, #0]
 8077f2e:	e00a      	b.n	8077f46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8077f30:	68fb      	ldr	r3, [r7, #12]
 8077f32:	0f1b      	lsrs	r3, r3, #28
 8077f34:	b2da      	uxtb	r2, r3
 8077f36:	7dfb      	ldrb	r3, [r7, #23]
 8077f38:	005b      	lsls	r3, r3, #1
 8077f3a:	4619      	mov	r1, r3
 8077f3c:	68bb      	ldr	r3, [r7, #8]
 8077f3e:	440b      	add	r3, r1
 8077f40:	3237      	adds	r2, #55	; 0x37
 8077f42:	b2d2      	uxtb	r2, r2
 8077f44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8077f46:	68fb      	ldr	r3, [r7, #12]
 8077f48:	011b      	lsls	r3, r3, #4
 8077f4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8077f4c:	7dfb      	ldrb	r3, [r7, #23]
 8077f4e:	005b      	lsls	r3, r3, #1
 8077f50:	3301      	adds	r3, #1
 8077f52:	68ba      	ldr	r2, [r7, #8]
 8077f54:	4413      	add	r3, r2
 8077f56:	2200      	movs	r2, #0
 8077f58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8077f5a:	7dfb      	ldrb	r3, [r7, #23]
 8077f5c:	3301      	adds	r3, #1
 8077f5e:	75fb      	strb	r3, [r7, #23]
 8077f60:	7dfa      	ldrb	r2, [r7, #23]
 8077f62:	79fb      	ldrb	r3, [r7, #7]
 8077f64:	429a      	cmp	r2, r3
 8077f66:	d3d3      	bcc.n	8077f10 <IntToUnicode+0x18>
  }
}
 8077f68:	bf00      	nop
 8077f6a:	bf00      	nop
 8077f6c:	371c      	adds	r7, #28
 8077f6e:	46bd      	mov	sp, r7
 8077f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8077f74:	4770      	bx	lr

08077f76 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8077f76:	b480      	push	{r7}
 8077f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8077f7a:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8077f7c:	4618      	mov	r0, r3
 8077f7e:	46bd      	mov	sp, r7
 8077f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8077f84:	4770      	bx	lr

08077f86 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8077f86:	b480      	push	{r7}
 8077f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8077f8a:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8077f8c:	4618      	mov	r0, r3
 8077f8e:	46bd      	mov	sp, r7
 8077f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8077f94:	4770      	bx	lr

08077f96 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8077f96:	b480      	push	{r7}
 8077f98:	b083      	sub	sp, #12
 8077f9a:	af00      	add	r7, sp, #0
 8077f9c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8077f9e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8077fa0:	4618      	mov	r0, r3
 8077fa2:	370c      	adds	r7, #12
 8077fa4:	46bd      	mov	sp, r7
 8077fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8077faa:	4770      	bx	lr

08077fac <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8077fac:	b480      	push	{r7}
 8077fae:	b085      	sub	sp, #20
 8077fb0:	af00      	add	r7, sp, #0
 8077fb2:	60f8      	str	r0, [r7, #12]
 8077fb4:	60b9      	str	r1, [r7, #8]
 8077fb6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8077fb8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8077fba:	4618      	mov	r0, r3
 8077fbc:	3714      	adds	r7, #20
 8077fbe:	46bd      	mov	sp, r7
 8077fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8077fc4:	4770      	bx	lr

08077fc6 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8077fc6:	b480      	push	{r7}
 8077fc8:	b085      	sub	sp, #20
 8077fca:	af00      	add	r7, sp, #0
 8077fcc:	60f8      	str	r0, [r7, #12]
 8077fce:	60b9      	str	r1, [r7, #8]
 8077fd0:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8077fd2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8077fd4:	4618      	mov	r0, r3
 8077fd6:	3714      	adds	r7, #20
 8077fd8:	46bd      	mov	sp, r7
 8077fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8077fde:	4770      	bx	lr

08077fe0 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8077fe0:	b480      	push	{r7}
 8077fe2:	b085      	sub	sp, #20
 8077fe4:	af00      	add	r7, sp, #0
 8077fe6:	60f8      	str	r0, [r7, #12]
 8077fe8:	460b      	mov	r3, r1
 8077fea:	607a      	str	r2, [r7, #4]
 8077fec:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8077fee:	7afb      	ldrb	r3, [r7, #11]
 8077ff0:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8077ff2:	bf00      	nop
  }
  return (USBD_OK);
 8077ff4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8077ff6:	4618      	mov	r0, r3
 8077ff8:	3714      	adds	r7, #20
 8077ffa:	46bd      	mov	sp, r7
 8077ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078000:	4770      	bx	lr
	...

08078004 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8078004:	b580      	push	{r7, lr}
 8078006:	b08a      	sub	sp, #40	; 0x28
 8078008:	af00      	add	r7, sp, #0
 807800a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 807800c:	f107 0314 	add.w	r3, r7, #20
 8078010:	2200      	movs	r2, #0
 8078012:	601a      	str	r2, [r3, #0]
 8078014:	605a      	str	r2, [r3, #4]
 8078016:	609a      	str	r2, [r3, #8]
 8078018:	60da      	str	r2, [r3, #12]
 807801a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 807801c:	687b      	ldr	r3, [r7, #4]
 807801e:	681b      	ldr	r3, [r3, #0]
 8078020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8078024:	d13a      	bne.n	807809c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8078026:	2300      	movs	r3, #0
 8078028:	613b      	str	r3, [r7, #16]
 807802a:	4b1e      	ldr	r3, [pc, #120]	; (80780a4 <HAL_PCD_MspInit+0xa0>)
 807802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807802e:	4a1d      	ldr	r2, [pc, #116]	; (80780a4 <HAL_PCD_MspInit+0xa0>)
 8078030:	f043 0301 	orr.w	r3, r3, #1
 8078034:	6313      	str	r3, [r2, #48]	; 0x30
 8078036:	4b1b      	ldr	r3, [pc, #108]	; (80780a4 <HAL_PCD_MspInit+0xa0>)
 8078038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 807803a:	f003 0301 	and.w	r3, r3, #1
 807803e:	613b      	str	r3, [r7, #16]
 8078040:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8078042:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8078046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8078048:	2302      	movs	r3, #2
 807804a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 807804c:	2300      	movs	r3, #0
 807804e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8078050:	2303      	movs	r3, #3
 8078052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8078054:	230a      	movs	r3, #10
 8078056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8078058:	f107 0314 	add.w	r3, r7, #20
 807805c:	4619      	mov	r1, r3
 807805e:	4812      	ldr	r0, [pc, #72]	; (80780a8 <HAL_PCD_MspInit+0xa4>)
 8078060:	f7fa fd18 	bl	8072a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8078064:	4b0f      	ldr	r3, [pc, #60]	; (80780a4 <HAL_PCD_MspInit+0xa0>)
 8078066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8078068:	4a0e      	ldr	r2, [pc, #56]	; (80780a4 <HAL_PCD_MspInit+0xa0>)
 807806a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 807806e:	6353      	str	r3, [r2, #52]	; 0x34
 8078070:	2300      	movs	r3, #0
 8078072:	60fb      	str	r3, [r7, #12]
 8078074:	4b0b      	ldr	r3, [pc, #44]	; (80780a4 <HAL_PCD_MspInit+0xa0>)
 8078076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8078078:	4a0a      	ldr	r2, [pc, #40]	; (80780a4 <HAL_PCD_MspInit+0xa0>)
 807807a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 807807e:	6453      	str	r3, [r2, #68]	; 0x44
 8078080:	4b08      	ldr	r3, [pc, #32]	; (80780a4 <HAL_PCD_MspInit+0xa0>)
 8078082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8078084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8078088:	60fb      	str	r3, [r7, #12]
 807808a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 807808c:	2200      	movs	r2, #0
 807808e:	2100      	movs	r1, #0
 8078090:	2043      	movs	r0, #67	; 0x43
 8078092:	f7fa fcc8 	bl	8072a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8078096:	2043      	movs	r0, #67	; 0x43
 8078098:	f7fa fce1 	bl	8072a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 807809c:	bf00      	nop
 807809e:	3728      	adds	r7, #40	; 0x28
 80780a0:	46bd      	mov	sp, r7
 80780a2:	bd80      	pop	{r7, pc}
 80780a4:	40023800 	.word	0x40023800
 80780a8:	40020000 	.word	0x40020000

080780ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80780ac:	b580      	push	{r7, lr}
 80780ae:	b082      	sub	sp, #8
 80780b0:	af00      	add	r7, sp, #0
 80780b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80780b4:	687b      	ldr	r3, [r7, #4]
 80780b6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80780ba:	687b      	ldr	r3, [r7, #4]
 80780bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80780c0:	4619      	mov	r1, r3
 80780c2:	4610      	mov	r0, r2
 80780c4:	f7fe fd3f 	bl	8076b46 <USBD_LL_SetupStage>
}
 80780c8:	bf00      	nop
 80780ca:	3708      	adds	r7, #8
 80780cc:	46bd      	mov	sp, r7
 80780ce:	bd80      	pop	{r7, pc}

080780d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80780d0:	b580      	push	{r7, lr}
 80780d2:	b082      	sub	sp, #8
 80780d4:	af00      	add	r7, sp, #0
 80780d6:	6078      	str	r0, [r7, #4]
 80780d8:	460b      	mov	r3, r1
 80780da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80780dc:	687b      	ldr	r3, [r7, #4]
 80780de:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80780e2:	78fa      	ldrb	r2, [r7, #3]
 80780e4:	6879      	ldr	r1, [r7, #4]
 80780e6:	4613      	mov	r3, r2
 80780e8:	00db      	lsls	r3, r3, #3
 80780ea:	1a9b      	subs	r3, r3, r2
 80780ec:	009b      	lsls	r3, r3, #2
 80780ee:	440b      	add	r3, r1
 80780f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80780f4:	681a      	ldr	r2, [r3, #0]
 80780f6:	78fb      	ldrb	r3, [r7, #3]
 80780f8:	4619      	mov	r1, r3
 80780fa:	f7fe fd79 	bl	8076bf0 <USBD_LL_DataOutStage>
}
 80780fe:	bf00      	nop
 8078100:	3708      	adds	r7, #8
 8078102:	46bd      	mov	sp, r7
 8078104:	bd80      	pop	{r7, pc}

08078106 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8078106:	b580      	push	{r7, lr}
 8078108:	b082      	sub	sp, #8
 807810a:	af00      	add	r7, sp, #0
 807810c:	6078      	str	r0, [r7, #4]
 807810e:	460b      	mov	r3, r1
 8078110:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8078112:	687b      	ldr	r3, [r7, #4]
 8078114:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8078118:	78fa      	ldrb	r2, [r7, #3]
 807811a:	6879      	ldr	r1, [r7, #4]
 807811c:	4613      	mov	r3, r2
 807811e:	00db      	lsls	r3, r3, #3
 8078120:	1a9b      	subs	r3, r3, r2
 8078122:	009b      	lsls	r3, r3, #2
 8078124:	440b      	add	r3, r1
 8078126:	3348      	adds	r3, #72	; 0x48
 8078128:	681a      	ldr	r2, [r3, #0]
 807812a:	78fb      	ldrb	r3, [r7, #3]
 807812c:	4619      	mov	r1, r3
 807812e:	f7fe fdc2 	bl	8076cb6 <USBD_LL_DataInStage>
}
 8078132:	bf00      	nop
 8078134:	3708      	adds	r7, #8
 8078136:	46bd      	mov	sp, r7
 8078138:	bd80      	pop	{r7, pc}

0807813a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 807813a:	b580      	push	{r7, lr}
 807813c:	b082      	sub	sp, #8
 807813e:	af00      	add	r7, sp, #0
 8078140:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8078142:	687b      	ldr	r3, [r7, #4]
 8078144:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8078148:	4618      	mov	r0, r3
 807814a:	f7fe fed6 	bl	8076efa <USBD_LL_SOF>
}
 807814e:	bf00      	nop
 8078150:	3708      	adds	r7, #8
 8078152:	46bd      	mov	sp, r7
 8078154:	bd80      	pop	{r7, pc}

08078156 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8078156:	b580      	push	{r7, lr}
 8078158:	b084      	sub	sp, #16
 807815a:	af00      	add	r7, sp, #0
 807815c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 807815e:	2301      	movs	r3, #1
 8078160:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8078162:	687b      	ldr	r3, [r7, #4]
 8078164:	68db      	ldr	r3, [r3, #12]
 8078166:	2b02      	cmp	r3, #2
 8078168:	d001      	beq.n	807816e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 807816a:	f7fa fa4d 	bl	8072608 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 807816e:	687b      	ldr	r3, [r7, #4]
 8078170:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8078174:	7bfa      	ldrb	r2, [r7, #15]
 8078176:	4611      	mov	r1, r2
 8078178:	4618      	mov	r0, r3
 807817a:	f7fe fe80 	bl	8076e7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 807817e:	687b      	ldr	r3, [r7, #4]
 8078180:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8078184:	4618      	mov	r0, r3
 8078186:	f7fe fe2c 	bl	8076de2 <USBD_LL_Reset>
}
 807818a:	bf00      	nop
 807818c:	3710      	adds	r7, #16
 807818e:	46bd      	mov	sp, r7
 8078190:	bd80      	pop	{r7, pc}
	...

08078194 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8078194:	b580      	push	{r7, lr}
 8078196:	b082      	sub	sp, #8
 8078198:	af00      	add	r7, sp, #0
 807819a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 807819c:	687b      	ldr	r3, [r7, #4]
 807819e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80781a2:	4618      	mov	r0, r3
 80781a4:	f7fe fe7b 	bl	8076e9e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80781a8:	687b      	ldr	r3, [r7, #4]
 80781aa:	681b      	ldr	r3, [r3, #0]
 80781ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80781b0:	681b      	ldr	r3, [r3, #0]
 80781b2:	687a      	ldr	r2, [r7, #4]
 80781b4:	6812      	ldr	r2, [r2, #0]
 80781b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80781ba:	f043 0301 	orr.w	r3, r3, #1
 80781be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80781c0:	687b      	ldr	r3, [r7, #4]
 80781c2:	6a1b      	ldr	r3, [r3, #32]
 80781c4:	2b00      	cmp	r3, #0
 80781c6:	d005      	beq.n	80781d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80781c8:	4b04      	ldr	r3, [pc, #16]	; (80781dc <HAL_PCD_SuspendCallback+0x48>)
 80781ca:	691b      	ldr	r3, [r3, #16]
 80781cc:	4a03      	ldr	r2, [pc, #12]	; (80781dc <HAL_PCD_SuspendCallback+0x48>)
 80781ce:	f043 0306 	orr.w	r3, r3, #6
 80781d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80781d4:	bf00      	nop
 80781d6:	3708      	adds	r7, #8
 80781d8:	46bd      	mov	sp, r7
 80781da:	bd80      	pop	{r7, pc}
 80781dc:	e000ed00 	.word	0xe000ed00

080781e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80781e0:	b580      	push	{r7, lr}
 80781e2:	b082      	sub	sp, #8
 80781e4:	af00      	add	r7, sp, #0
 80781e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80781e8:	687b      	ldr	r3, [r7, #4]
 80781ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80781ee:	4618      	mov	r0, r3
 80781f0:	f7fe fe6b 	bl	8076eca <USBD_LL_Resume>
}
 80781f4:	bf00      	nop
 80781f6:	3708      	adds	r7, #8
 80781f8:	46bd      	mov	sp, r7
 80781fa:	bd80      	pop	{r7, pc}

080781fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80781fc:	b580      	push	{r7, lr}
 80781fe:	b082      	sub	sp, #8
 8078200:	af00      	add	r7, sp, #0
 8078202:	6078      	str	r0, [r7, #4]
 8078204:	460b      	mov	r3, r1
 8078206:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8078208:	687b      	ldr	r3, [r7, #4]
 807820a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807820e:	78fa      	ldrb	r2, [r7, #3]
 8078210:	4611      	mov	r1, r2
 8078212:	4618      	mov	r0, r3
 8078214:	f7fe feb9 	bl	8076f8a <USBD_LL_IsoOUTIncomplete>
}
 8078218:	bf00      	nop
 807821a:	3708      	adds	r7, #8
 807821c:	46bd      	mov	sp, r7
 807821e:	bd80      	pop	{r7, pc}

08078220 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8078220:	b580      	push	{r7, lr}
 8078222:	b082      	sub	sp, #8
 8078224:	af00      	add	r7, sp, #0
 8078226:	6078      	str	r0, [r7, #4]
 8078228:	460b      	mov	r3, r1
 807822a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 807822c:	687b      	ldr	r3, [r7, #4]
 807822e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8078232:	78fa      	ldrb	r2, [r7, #3]
 8078234:	4611      	mov	r1, r2
 8078236:	4618      	mov	r0, r3
 8078238:	f7fe fe81 	bl	8076f3e <USBD_LL_IsoINIncomplete>
}
 807823c:	bf00      	nop
 807823e:	3708      	adds	r7, #8
 8078240:	46bd      	mov	sp, r7
 8078242:	bd80      	pop	{r7, pc}

08078244 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8078244:	b580      	push	{r7, lr}
 8078246:	b082      	sub	sp, #8
 8078248:	af00      	add	r7, sp, #0
 807824a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 807824c:	687b      	ldr	r3, [r7, #4]
 807824e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8078252:	4618      	mov	r0, r3
 8078254:	f7fe febf 	bl	8076fd6 <USBD_LL_DevConnected>
}
 8078258:	bf00      	nop
 807825a:	3708      	adds	r7, #8
 807825c:	46bd      	mov	sp, r7
 807825e:	bd80      	pop	{r7, pc}

08078260 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8078260:	b580      	push	{r7, lr}
 8078262:	b082      	sub	sp, #8
 8078264:	af00      	add	r7, sp, #0
 8078266:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8078268:	687b      	ldr	r3, [r7, #4]
 807826a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 807826e:	4618      	mov	r0, r3
 8078270:	f7fe febc 	bl	8076fec <USBD_LL_DevDisconnected>
}
 8078274:	bf00      	nop
 8078276:	3708      	adds	r7, #8
 8078278:	46bd      	mov	sp, r7
 807827a:	bd80      	pop	{r7, pc}

0807827c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 807827c:	b580      	push	{r7, lr}
 807827e:	b082      	sub	sp, #8
 8078280:	af00      	add	r7, sp, #0
 8078282:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8078284:	687b      	ldr	r3, [r7, #4]
 8078286:	781b      	ldrb	r3, [r3, #0]
 8078288:	2b00      	cmp	r3, #0
 807828a:	d13c      	bne.n	8078306 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 807828c:	4a20      	ldr	r2, [pc, #128]	; (8078310 <USBD_LL_Init+0x94>)
 807828e:	687b      	ldr	r3, [r7, #4]
 8078290:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8078294:	687b      	ldr	r3, [r7, #4]
 8078296:	4a1e      	ldr	r2, [pc, #120]	; (8078310 <USBD_LL_Init+0x94>)
 8078298:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 807829c:	4b1c      	ldr	r3, [pc, #112]	; (8078310 <USBD_LL_Init+0x94>)
 807829e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80782a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80782a4:	4b1a      	ldr	r3, [pc, #104]	; (8078310 <USBD_LL_Init+0x94>)
 80782a6:	2204      	movs	r2, #4
 80782a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80782aa:	4b19      	ldr	r3, [pc, #100]	; (8078310 <USBD_LL_Init+0x94>)
 80782ac:	2202      	movs	r2, #2
 80782ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80782b0:	4b17      	ldr	r3, [pc, #92]	; (8078310 <USBD_LL_Init+0x94>)
 80782b2:	2200      	movs	r2, #0
 80782b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80782b6:	4b16      	ldr	r3, [pc, #88]	; (8078310 <USBD_LL_Init+0x94>)
 80782b8:	2202      	movs	r2, #2
 80782ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80782bc:	4b14      	ldr	r3, [pc, #80]	; (8078310 <USBD_LL_Init+0x94>)
 80782be:	2201      	movs	r2, #1
 80782c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80782c2:	4b13      	ldr	r3, [pc, #76]	; (8078310 <USBD_LL_Init+0x94>)
 80782c4:	2200      	movs	r2, #0
 80782c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80782c8:	4b11      	ldr	r3, [pc, #68]	; (8078310 <USBD_LL_Init+0x94>)
 80782ca:	2200      	movs	r2, #0
 80782cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80782ce:	4b10      	ldr	r3, [pc, #64]	; (8078310 <USBD_LL_Init+0x94>)
 80782d0:	2200      	movs	r2, #0
 80782d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80782d4:	4b0e      	ldr	r3, [pc, #56]	; (8078310 <USBD_LL_Init+0x94>)
 80782d6:	2200      	movs	r2, #0
 80782d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80782da:	480d      	ldr	r0, [pc, #52]	; (8078310 <USBD_LL_Init+0x94>)
 80782dc:	f7fa fd5e 	bl	8072d9c <HAL_PCD_Init>
 80782e0:	4603      	mov	r3, r0
 80782e2:	2b00      	cmp	r3, #0
 80782e4:	d001      	beq.n	80782ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80782e6:	f7fa f98f 	bl	8072608 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80782ea:	2180      	movs	r1, #128	; 0x80
 80782ec:	4808      	ldr	r0, [pc, #32]	; (8078310 <USBD_LL_Init+0x94>)
 80782ee:	f7fb fe92 	bl	8074016 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80782f2:	2240      	movs	r2, #64	; 0x40
 80782f4:	2100      	movs	r1, #0
 80782f6:	4806      	ldr	r0, [pc, #24]	; (8078310 <USBD_LL_Init+0x94>)
 80782f8:	f7fb fe46 	bl	8073f88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80782fc:	2280      	movs	r2, #128	; 0x80
 80782fe:	2101      	movs	r1, #1
 8078300:	4803      	ldr	r0, [pc, #12]	; (8078310 <USBD_LL_Init+0x94>)
 8078302:	f7fb fe41 	bl	8073f88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8078306:	2300      	movs	r3, #0
}
 8078308:	4618      	mov	r0, r3
 807830a:	3708      	adds	r7, #8
 807830c:	46bd      	mov	sp, r7
 807830e:	bd80      	pop	{r7, pc}
 8078310:	20000aec 	.word	0x20000aec

08078314 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8078314:	b580      	push	{r7, lr}
 8078316:	b084      	sub	sp, #16
 8078318:	af00      	add	r7, sp, #0
 807831a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807831c:	2300      	movs	r3, #0
 807831e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8078320:	2300      	movs	r3, #0
 8078322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8078324:	687b      	ldr	r3, [r7, #4]
 8078326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807832a:	4618      	mov	r0, r3
 807832c:	f7fa fe53 	bl	8072fd6 <HAL_PCD_Start>
 8078330:	4603      	mov	r3, r0
 8078332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8078334:	7bfb      	ldrb	r3, [r7, #15]
 8078336:	4618      	mov	r0, r3
 8078338:	f000 f92c 	bl	8078594 <USBD_Get_USB_Status>
 807833c:	4603      	mov	r3, r0
 807833e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8078340:	7bbb      	ldrb	r3, [r7, #14]
}
 8078342:	4618      	mov	r0, r3
 8078344:	3710      	adds	r7, #16
 8078346:	46bd      	mov	sp, r7
 8078348:	bd80      	pop	{r7, pc}

0807834a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 807834a:	b580      	push	{r7, lr}
 807834c:	b084      	sub	sp, #16
 807834e:	af00      	add	r7, sp, #0
 8078350:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8078352:	2300      	movs	r3, #0
 8078354:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8078356:	2300      	movs	r3, #0
 8078358:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 807835a:	687b      	ldr	r3, [r7, #4]
 807835c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8078360:	4618      	mov	r0, r3
 8078362:	f7fa fe6b 	bl	807303c <HAL_PCD_Stop>
 8078366:	4603      	mov	r3, r0
 8078368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807836a:	7bfb      	ldrb	r3, [r7, #15]
 807836c:	4618      	mov	r0, r3
 807836e:	f000 f911 	bl	8078594 <USBD_Get_USB_Status>
 8078372:	4603      	mov	r3, r0
 8078374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8078376:	7bbb      	ldrb	r3, [r7, #14]
}
 8078378:	4618      	mov	r0, r3
 807837a:	3710      	adds	r7, #16
 807837c:	46bd      	mov	sp, r7
 807837e:	bd80      	pop	{r7, pc}

08078380 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8078380:	b580      	push	{r7, lr}
 8078382:	b084      	sub	sp, #16
 8078384:	af00      	add	r7, sp, #0
 8078386:	6078      	str	r0, [r7, #4]
 8078388:	4608      	mov	r0, r1
 807838a:	4611      	mov	r1, r2
 807838c:	461a      	mov	r2, r3
 807838e:	4603      	mov	r3, r0
 8078390:	70fb      	strb	r3, [r7, #3]
 8078392:	460b      	mov	r3, r1
 8078394:	70bb      	strb	r3, [r7, #2]
 8078396:	4613      	mov	r3, r2
 8078398:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 807839a:	2300      	movs	r3, #0
 807839c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807839e:	2300      	movs	r3, #0
 80783a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80783a2:	687b      	ldr	r3, [r7, #4]
 80783a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80783a8:	78bb      	ldrb	r3, [r7, #2]
 80783aa:	883a      	ldrh	r2, [r7, #0]
 80783ac:	78f9      	ldrb	r1, [r7, #3]
 80783ae:	f7fb fa55 	bl	807385c <HAL_PCD_EP_Open>
 80783b2:	4603      	mov	r3, r0
 80783b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80783b6:	7bfb      	ldrb	r3, [r7, #15]
 80783b8:	4618      	mov	r0, r3
 80783ba:	f000 f8eb 	bl	8078594 <USBD_Get_USB_Status>
 80783be:	4603      	mov	r3, r0
 80783c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80783c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80783c4:	4618      	mov	r0, r3
 80783c6:	3710      	adds	r7, #16
 80783c8:	46bd      	mov	sp, r7
 80783ca:	bd80      	pop	{r7, pc}

080783cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80783cc:	b580      	push	{r7, lr}
 80783ce:	b084      	sub	sp, #16
 80783d0:	af00      	add	r7, sp, #0
 80783d2:	6078      	str	r0, [r7, #4]
 80783d4:	460b      	mov	r3, r1
 80783d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80783d8:	2300      	movs	r3, #0
 80783da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80783dc:	2300      	movs	r3, #0
 80783de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80783e0:	687b      	ldr	r3, [r7, #4]
 80783e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80783e6:	78fa      	ldrb	r2, [r7, #3]
 80783e8:	4611      	mov	r1, r2
 80783ea:	4618      	mov	r0, r3
 80783ec:	f7fb fb33 	bl	8073a56 <HAL_PCD_EP_SetStall>
 80783f0:	4603      	mov	r3, r0
 80783f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80783f4:	7bfb      	ldrb	r3, [r7, #15]
 80783f6:	4618      	mov	r0, r3
 80783f8:	f000 f8cc 	bl	8078594 <USBD_Get_USB_Status>
 80783fc:	4603      	mov	r3, r0
 80783fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8078400:	7bbb      	ldrb	r3, [r7, #14]
}
 8078402:	4618      	mov	r0, r3
 8078404:	3710      	adds	r7, #16
 8078406:	46bd      	mov	sp, r7
 8078408:	bd80      	pop	{r7, pc}

0807840a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 807840a:	b580      	push	{r7, lr}
 807840c:	b084      	sub	sp, #16
 807840e:	af00      	add	r7, sp, #0
 8078410:	6078      	str	r0, [r7, #4]
 8078412:	460b      	mov	r3, r1
 8078414:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8078416:	2300      	movs	r3, #0
 8078418:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807841a:	2300      	movs	r3, #0
 807841c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 807841e:	687b      	ldr	r3, [r7, #4]
 8078420:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8078424:	78fa      	ldrb	r2, [r7, #3]
 8078426:	4611      	mov	r1, r2
 8078428:	4618      	mov	r0, r3
 807842a:	f7fb fb78 	bl	8073b1e <HAL_PCD_EP_ClrStall>
 807842e:	4603      	mov	r3, r0
 8078430:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8078432:	7bfb      	ldrb	r3, [r7, #15]
 8078434:	4618      	mov	r0, r3
 8078436:	f000 f8ad 	bl	8078594 <USBD_Get_USB_Status>
 807843a:	4603      	mov	r3, r0
 807843c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 807843e:	7bbb      	ldrb	r3, [r7, #14]
}
 8078440:	4618      	mov	r0, r3
 8078442:	3710      	adds	r7, #16
 8078444:	46bd      	mov	sp, r7
 8078446:	bd80      	pop	{r7, pc}

08078448 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8078448:	b480      	push	{r7}
 807844a:	b085      	sub	sp, #20
 807844c:	af00      	add	r7, sp, #0
 807844e:	6078      	str	r0, [r7, #4]
 8078450:	460b      	mov	r3, r1
 8078452:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8078454:	687b      	ldr	r3, [r7, #4]
 8078456:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 807845a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 807845c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8078460:	2b00      	cmp	r3, #0
 8078462:	da0b      	bge.n	807847c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8078464:	78fb      	ldrb	r3, [r7, #3]
 8078466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 807846a:	68f9      	ldr	r1, [r7, #12]
 807846c:	4613      	mov	r3, r2
 807846e:	00db      	lsls	r3, r3, #3
 8078470:	1a9b      	subs	r3, r3, r2
 8078472:	009b      	lsls	r3, r3, #2
 8078474:	440b      	add	r3, r1
 8078476:	333e      	adds	r3, #62	; 0x3e
 8078478:	781b      	ldrb	r3, [r3, #0]
 807847a:	e00b      	b.n	8078494 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 807847c:	78fb      	ldrb	r3, [r7, #3]
 807847e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8078482:	68f9      	ldr	r1, [r7, #12]
 8078484:	4613      	mov	r3, r2
 8078486:	00db      	lsls	r3, r3, #3
 8078488:	1a9b      	subs	r3, r3, r2
 807848a:	009b      	lsls	r3, r3, #2
 807848c:	440b      	add	r3, r1
 807848e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8078492:	781b      	ldrb	r3, [r3, #0]
  }
}
 8078494:	4618      	mov	r0, r3
 8078496:	3714      	adds	r7, #20
 8078498:	46bd      	mov	sp, r7
 807849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 807849e:	4770      	bx	lr

080784a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80784a0:	b580      	push	{r7, lr}
 80784a2:	b084      	sub	sp, #16
 80784a4:	af00      	add	r7, sp, #0
 80784a6:	6078      	str	r0, [r7, #4]
 80784a8:	460b      	mov	r3, r1
 80784aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80784ac:	2300      	movs	r3, #0
 80784ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80784b0:	2300      	movs	r3, #0
 80784b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80784b4:	687b      	ldr	r3, [r7, #4]
 80784b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80784ba:	78fa      	ldrb	r2, [r7, #3]
 80784bc:	4611      	mov	r1, r2
 80784be:	4618      	mov	r0, r3
 80784c0:	f7fb f9a7 	bl	8073812 <HAL_PCD_SetAddress>
 80784c4:	4603      	mov	r3, r0
 80784c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80784c8:	7bfb      	ldrb	r3, [r7, #15]
 80784ca:	4618      	mov	r0, r3
 80784cc:	f000 f862 	bl	8078594 <USBD_Get_USB_Status>
 80784d0:	4603      	mov	r3, r0
 80784d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80784d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80784d6:	4618      	mov	r0, r3
 80784d8:	3710      	adds	r7, #16
 80784da:	46bd      	mov	sp, r7
 80784dc:	bd80      	pop	{r7, pc}

080784de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80784de:	b580      	push	{r7, lr}
 80784e0:	b086      	sub	sp, #24
 80784e2:	af00      	add	r7, sp, #0
 80784e4:	60f8      	str	r0, [r7, #12]
 80784e6:	607a      	str	r2, [r7, #4]
 80784e8:	603b      	str	r3, [r7, #0]
 80784ea:	460b      	mov	r3, r1
 80784ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80784ee:	2300      	movs	r3, #0
 80784f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80784f2:	2300      	movs	r3, #0
 80784f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80784f6:	68fb      	ldr	r3, [r7, #12]
 80784f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80784fc:	7af9      	ldrb	r1, [r7, #11]
 80784fe:	683b      	ldr	r3, [r7, #0]
 8078500:	687a      	ldr	r2, [r7, #4]
 8078502:	f7fb fa5e 	bl	80739c2 <HAL_PCD_EP_Transmit>
 8078506:	4603      	mov	r3, r0
 8078508:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807850a:	7dfb      	ldrb	r3, [r7, #23]
 807850c:	4618      	mov	r0, r3
 807850e:	f000 f841 	bl	8078594 <USBD_Get_USB_Status>
 8078512:	4603      	mov	r3, r0
 8078514:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8078516:	7dbb      	ldrb	r3, [r7, #22]
}
 8078518:	4618      	mov	r0, r3
 807851a:	3718      	adds	r7, #24
 807851c:	46bd      	mov	sp, r7
 807851e:	bd80      	pop	{r7, pc}

08078520 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8078520:	b580      	push	{r7, lr}
 8078522:	b086      	sub	sp, #24
 8078524:	af00      	add	r7, sp, #0
 8078526:	60f8      	str	r0, [r7, #12]
 8078528:	607a      	str	r2, [r7, #4]
 807852a:	603b      	str	r3, [r7, #0]
 807852c:	460b      	mov	r3, r1
 807852e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8078530:	2300      	movs	r3, #0
 8078532:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8078534:	2300      	movs	r3, #0
 8078536:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8078538:	68fb      	ldr	r3, [r7, #12]
 807853a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 807853e:	7af9      	ldrb	r1, [r7, #11]
 8078540:	683b      	ldr	r3, [r7, #0]
 8078542:	687a      	ldr	r2, [r7, #4]
 8078544:	f7fb f9f2 	bl	807392c <HAL_PCD_EP_Receive>
 8078548:	4603      	mov	r3, r0
 807854a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 807854c:	7dfb      	ldrb	r3, [r7, #23]
 807854e:	4618      	mov	r0, r3
 8078550:	f000 f820 	bl	8078594 <USBD_Get_USB_Status>
 8078554:	4603      	mov	r3, r0
 8078556:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8078558:	7dbb      	ldrb	r3, [r7, #22]
}
 807855a:	4618      	mov	r0, r3
 807855c:	3718      	adds	r7, #24
 807855e:	46bd      	mov	sp, r7
 8078560:	bd80      	pop	{r7, pc}
	...

08078564 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8078564:	b480      	push	{r7}
 8078566:	b083      	sub	sp, #12
 8078568:	af00      	add	r7, sp, #0
 807856a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 807856c:	4b03      	ldr	r3, [pc, #12]	; (807857c <USBD_static_malloc+0x18>)
}
 807856e:	4618      	mov	r0, r3
 8078570:	370c      	adds	r7, #12
 8078572:	46bd      	mov	sp, r7
 8078574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078578:	4770      	bx	lr
 807857a:	bf00      	nop
 807857c:	200001f8 	.word	0x200001f8

08078580 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8078580:	b480      	push	{r7}
 8078582:	b083      	sub	sp, #12
 8078584:	af00      	add	r7, sp, #0
 8078586:	6078      	str	r0, [r7, #4]

}
 8078588:	bf00      	nop
 807858a:	370c      	adds	r7, #12
 807858c:	46bd      	mov	sp, r7
 807858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8078592:	4770      	bx	lr

08078594 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8078594:	b480      	push	{r7}
 8078596:	b085      	sub	sp, #20
 8078598:	af00      	add	r7, sp, #0
 807859a:	4603      	mov	r3, r0
 807859c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 807859e:	2300      	movs	r3, #0
 80785a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80785a2:	79fb      	ldrb	r3, [r7, #7]
 80785a4:	2b03      	cmp	r3, #3
 80785a6:	d817      	bhi.n	80785d8 <USBD_Get_USB_Status+0x44>
 80785a8:	a201      	add	r2, pc, #4	; (adr r2, 80785b0 <USBD_Get_USB_Status+0x1c>)
 80785aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80785ae:	bf00      	nop
 80785b0:	080785c1 	.word	0x080785c1
 80785b4:	080785c7 	.word	0x080785c7
 80785b8:	080785cd 	.word	0x080785cd
 80785bc:	080785d3 	.word	0x080785d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80785c0:	2300      	movs	r3, #0
 80785c2:	73fb      	strb	r3, [r7, #15]
    break;
 80785c4:	e00b      	b.n	80785de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80785c6:	2303      	movs	r3, #3
 80785c8:	73fb      	strb	r3, [r7, #15]
    break;
 80785ca:	e008      	b.n	80785de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80785cc:	2301      	movs	r3, #1
 80785ce:	73fb      	strb	r3, [r7, #15]
    break;
 80785d0:	e005      	b.n	80785de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80785d2:	2303      	movs	r3, #3
 80785d4:	73fb      	strb	r3, [r7, #15]
    break;
 80785d6:	e002      	b.n	80785de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80785d8:	2303      	movs	r3, #3
 80785da:	73fb      	strb	r3, [r7, #15]
    break;
 80785dc:	bf00      	nop
  }
  return usb_status;
 80785de:	7bfb      	ldrb	r3, [r7, #15]
}
 80785e0:	4618      	mov	r0, r3
 80785e2:	3714      	adds	r7, #20
 80785e4:	46bd      	mov	sp, r7
 80785e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80785ea:	4770      	bx	lr

080785ec <__libc_init_array>:
 80785ec:	b570      	push	{r4, r5, r6, lr}
 80785ee:	4d0d      	ldr	r5, [pc, #52]	; (8078624 <__libc_init_array+0x38>)
 80785f0:	4c0d      	ldr	r4, [pc, #52]	; (8078628 <__libc_init_array+0x3c>)
 80785f2:	1b64      	subs	r4, r4, r5
 80785f4:	10a4      	asrs	r4, r4, #2
 80785f6:	2600      	movs	r6, #0
 80785f8:	42a6      	cmp	r6, r4
 80785fa:	d109      	bne.n	8078610 <__libc_init_array+0x24>
 80785fc:	4d0b      	ldr	r5, [pc, #44]	; (807862c <__libc_init_array+0x40>)
 80785fe:	4c0c      	ldr	r4, [pc, #48]	; (8078630 <__libc_init_array+0x44>)
 8078600:	f000 f820 	bl	8078644 <_init>
 8078604:	1b64      	subs	r4, r4, r5
 8078606:	10a4      	asrs	r4, r4, #2
 8078608:	2600      	movs	r6, #0
 807860a:	42a6      	cmp	r6, r4
 807860c:	d105      	bne.n	807861a <__libc_init_array+0x2e>
 807860e:	bd70      	pop	{r4, r5, r6, pc}
 8078610:	f855 3b04 	ldr.w	r3, [r5], #4
 8078614:	4798      	blx	r3
 8078616:	3601      	adds	r6, #1
 8078618:	e7ee      	b.n	80785f8 <__libc_init_array+0xc>
 807861a:	f855 3b04 	ldr.w	r3, [r5], #4
 807861e:	4798      	blx	r3
 8078620:	3601      	adds	r6, #1
 8078622:	e7f2      	b.n	807860a <__libc_init_array+0x1e>
 8078624:	0807871c 	.word	0x0807871c
 8078628:	0807871c 	.word	0x0807871c
 807862c:	0807871c 	.word	0x0807871c
 8078630:	08078720 	.word	0x08078720

08078634 <memset>:
 8078634:	4402      	add	r2, r0
 8078636:	4603      	mov	r3, r0
 8078638:	4293      	cmp	r3, r2
 807863a:	d100      	bne.n	807863e <memset+0xa>
 807863c:	4770      	bx	lr
 807863e:	f803 1b01 	strb.w	r1, [r3], #1
 8078642:	e7f9      	b.n	8078638 <memset+0x4>

08078644 <_init>:
 8078644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8078646:	bf00      	nop
 8078648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 807864a:	bc08      	pop	{r3}
 807864c:	469e      	mov	lr, r3
 807864e:	4770      	bx	lr

08078650 <_fini>:
 8078650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8078652:	bf00      	nop
 8078654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8078656:	bc08      	pop	{r3}
 8078658:	469e      	mov	lr, r3
 807865a:	4770      	bx	lr
